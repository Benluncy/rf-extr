
 Components, Frameworks, Patterns (extended abstract) Ralph E. Johnson Department of Computer Science 
University of lllinois 1304 West Springfield Ave. Urbana IL 61801 e-mail: johnson@cs. uiuc.edu February 
25, 1997 1 Introduction Frameworks are an object-oriented reuse technique. They share a lot of character­istics 
with reuse techniques in general, and object-oriented reuse techniques in partic­ular. Although they 
have been used suc­cessfully for some time, and are an im­portant part of the culture of long-time object-oriented 
developers, most framework development projects are failures, and most object-oriented met homologies 
do not de­scribe how to use frameworks. Moreover, there is a lot of confusion about whether frameworks 
are just large+ scale patterns, or whether they are just another kind of com­ ponent. Even the definitions 
of frameworks vary. One common definition is a framework is a reusable design of all or part of a system 
that is represented by a set of abstract classes and the way their instances interact . Another common 
definition is a framework is the skeleton of an application that can Permission to make digital/hard 
copy of part or all this work for personal or classroom use is granted without fee provided that copies 
ere not made or distributed for profit or commercial advan­tage, the copyright notice, the title of the 
publication and ita dete ePPear, and notice ia given that cowing k Iv permission of ACM, Inc. To copy 
otherwise, to republish, to post on servers, or to redistribute to Iista, requires prior specific permission 
and/or a fee, SSR 97 MA, USA @ 1997 ACM 0-89791 -945 -9/97 /0005 ... $3.50 be customized by an application 
developer . These are not conflicting definitions; the first describes the structure of a framework while 
the second describes its purpose. Neverthe­ less, they point out the difficulty of defining frameworks 
clearly. Frameworks are important, and becoming more important. Systems like OLE, Open-Doc, and DSOM 
are frameworks. The rise of Java is spreading new frameworks like AWT and Beans. Most commercially available 
frameworks seem to be for technical domains such as user interfaces or distribution, and most application 
specific frameworks are pro prietary. But the steady rise of frameworks means that every software developer 
should know what they are and how to deal with them. 2 Components vs. De­signs Frameworks are just one 
of many reuse tech­niques[kreuger92]. The ideal reuse technol­ogy provides components that can be easily 
connected to make a new system. The software developer does not have to know how the component is implemented, 
and the specification of the component is easy to understand. The resulting system will be efficient, 
easy to maintain, and reliable. The electric power system is like that; you can buy a toaster from one 
store and a television from another, and they will both work at either your home or office. Most people 
do not know Ohm s Law, yet they have no trouble connecting a new toaster to the power system. Unfortunately, 
software is not nearly as composable as the electric power system. When we design a software component, 
we always have to trade simplicity for power. A component that does one thing well is easy to use, but 
can be used in fewer cases. A com­ponent with many parameters and options can be used more often, but 
will be harder to learn to use. Reuse techniques range from the simple and inflexible to the complex 
and powerful. Those that let the developer make choices are usually more complicated and require more 
training on the part of the developer. For example, the easiest way to get a compiler is to buy one. 
Most compilers only compile one language. On the other hand, you could build a compiler for your own 
language by reusing parts of gcc[Sta95], wh~ch has a parser generator and a reusable backend for code 
generation. It takes more work and expertise to build a compiler with gcc than it does just to use a 
compiler, but this approach lets you compile your own language. Finally, you might decide that gcc is 
not flexible enough, since your language might be concurrent or depend on garbage collection, so you 
write your compiler from scratch. Even though you don t reuse any code, you will probably still use many 
of the same design ideas as gee, such as having a separate parser. You can learn these ideas from any 
good text book on compilers. A component represents code reuse. A textbook represents design reuse. The 
source for gcc lies somewhere in between. Reuse experts often claim that design reuse is more important 
than code reuse, mostly because it can be applied in more contexts and so is more common. Also, it is 
applied earlier in the development process, and so can have a larger impact on a project. A developer 
s expertise is partly due to knowing designs that can be customized to fit a new problem. But most design 
reuse is informal. One of the main problems with reusing design infor­mation is capturing and expressing 
it [BR87]. There is no standard design notation and there are no standard catalogs of designs to reuse. 
A single company can standardise, and some do. But this will not lead to industry-wide reuse. The original 
vision of software reuse was based on components[Mc168]. In the begin­ning, commercial interest in object-oriented 
technology also focused on code reuse, as in­dicated by Brad Cox s Software ICS[COX86]. More recently, 
pure design reuse has become popular, as seen in the form of patterns [GHJV95, BMR+96, CS95, VCK96]. 
But frameworks are an intermediate form, part code reuse and part design reuse. Frame­works eliminate 
the need of a new design notation by using an object-oriented pro­gramming language as the design notation. 
Although programming languages suffer sev­eral defects aa design notations, it is not necessary (though 
it might be desirable) to make specialized tools to use frameworks. Most programmers using a framework 
have no tools other than their compilers. 3 What is a Framework? One of the key ideas that underlies 
frame­works is that of the abstract C1OSS. An abstract class is a class with no instances, so it is used 
only as a superclass [GR83, WBJ90]. An abstract class usually has at least one unimplemented operation 
deferred to its subclasses. Since an abstract class has no instances, it is used as a template for creating 
subclasses rather than a template for creating objects. Frameworks use them as designs of their components. 
One way that an abstract class acts as a design is that it specifies the interface of its subclasses. 
When a client indicates that it wants to use an instance of an abstract class, it always means an instance 
of a class that meets the interface of the abstract class. An abstract class usually provides part of 
the implementation of its subclasses, too. For example, a template method defines the skeleton of an 
algorithm in an abstract class, deferring some of the steps to subclasses [GHJV95]. Each step is defined 
as a separate method that can be redefined by a subclass, so a subclass can redefine individual steps 
of the algorithm without changing its struc­ture. The abstract class can either leave the individual 
steps unimplemented (i.e. they are abstract met hods ) or can provide a de­fault implementation (i.e. 
they are hook methods) [Pre95]. A concrete class must implement all the abstract methods of its abstract 
superclass and may implement any of the hook methods. It will then be able to use all the methods it 
inherits from its abstract superclass. A framework is a larger-scale design that describes how a program 
is decomposed into a set of interacting objects. It is usually represented as a set of abstract classes 
and the way their instances interact [JF88]. Since it includes the way that instances of those classes 
interact, it is the collaborative model or pattern of object interaction as much as it is the kinds of 
classes in the design. The most important part of a framework is the way that a system is divided into 
its components [Deu87, Deu89]. Frameworks also reuse implementation, but that is less important than 
reuse of the internal inter­faces of a system and the way that its functions are divided among its components. 
This high-level design is the main intellectual content of software, and frameworks are a way to reuse 
it. Frameworks take advantage of all three of the distinguishing characteristics of object­oriented programming 
languages; data ab­straction, polymorphism, and inheritance. Like an abstract data type, an abstract 
class represents an interface behind which implementations can change. Polymorphism is the ability for 
a single variable or proce dure parameter to take on values of several types. Object-oriented polymorphism 
lets a developer mix and match components, lets an object change its collaborators at run-time, and makes 
it possible to build generic objects that can work with a wide range of comp­nents. Inheritance makes 
it easy to make a new component. A framework describes the architecture of an object-oriented system; 
the kinds of ob­jects in it and how they interact. It describes how a particular kind of program, such 
as a user interface or network communication software, is decomposed into objects. It is represented 
by a set of classes (usually abstract ), one for each kind of object, but the interaction pat terns between 
objects are just as much a part of the framework as the classes. One of the characteristics of frameworks 
is inversion of control. Traditionally, a de­veloper reused components from a library by writing a main 
program that calls the components whenever necessary. The devel­oper decides when to call the components, 
and is responsible for the overall structure and flow of control of the program. In a framework, the 
main program is reused, and the developer decides what is plugged into it and makes new components that 
are plugged in. The developer s code gets called by the framework code. The framework determines the 
overall structure and flow of control of the program. The first widely used framework, 3developed in 
the late 70 s, was the Smalltalk-80 user interface frame­ work called Model/View/Controller (MVC) [KP88]. 
MVC showed that object-oriented programming was well-suited for implement­ing graphical user interfaces. 
It divides a user interface into three kinds of components; models, views and controllers. These objects 
work in trios consisting of a view and con­troller interacting with a model. A model is an application 
object, and is supposed to be independent of the user interface. A view manages a region of the display 
and keeps it consistent with the state of the model. A controller converts user events (mouse move­ments 
and key presses) into operations on its model and view. For example, controllers implement scrolling 
and menus. Views can be nested to form complex user interfaces. Nested views are called subviews. Successful 
frameworks evolve and spawn other frameworks. One of the first user interface frameworks influenced by 
Model/View/Controller was MacApp, which was designed specifically for implementing Macintosh applications 
[Sch86]. It merged the View and Controller, but added new kinds of objects such as Commands (for im­plementing 
undo) and Frames (for providing better controller over window features like scrolling). It was followed 
by user interface frameworks from universities, such as the Andrew Toolkit from Carnegie Mellon Uni­versity 
[PHK+ 88], Inter Views from Stanford [LVC89], and ET++ from the University of Zurich [WGM88]. There are 
now a large number of commercial user interface frame­works, such as OWL, zAPP, OpenStep, and MFC. Some, 
like OpenStep s, are a small part of a much more comprehensive system. Some, like zAPP, are designed 
for developing portable software, and shield the developer from the peculiarities of an operating system. 
Each of these frameworks borrows ideas from earlier systems. Although the differences between the frameworks 
are due partly to different requirements, sometimes newer sys­tems incorporate better design techniques, 
and so the state of the art gradually improves. Frameworks are not limited to user inter­faces, but can 
be applied to any area of soft­ware design. They have been applied to VLSI routing algorithms [Gos90], 
to hypermedia systems [Mey86], to structured drawing edi­tors [VL89, BJ94], operating systems [RC89], 
network protocol software [HJE95], and man­ ufacturing control [Sch95], to mention a few. The important 
classes in a framework, such as Model, View, and Controller of Model/View/Controller, are usually ab­stract. 
A framework usually comes with a component libmry that contains concrete subclasses of the classes in 
the framework. Although a good component library is a cru­cial companion to a framework, the essence 
of a framework is not the component library, but the model of interaction and control flow among its 
objects. A framework reuses code because it makes it easy to build an application from a library of existing 
components. These components can be easily used with each other because they all use the interfaces of 
the framework. A framework also reuses code because a new component can inherit most of its implemen­ 
tation from an abstract superclass. But reuse is best when you don t have to understand the component 
you are reusing, and inher­ itance requires a deeper understanding of a class that using it as a component, 
so it is better to reuse existing components than to make a new one. Of course, the main reason that 
a frame­work enables code reuse is because it is a reusable design. It provides reusable ab­stract algorithms 
and a high-level design that decomposes a large system into smaller components and describes the internal 
inter­faces between components. These standard interfaces make it possible to mix and match components, 
and to build a wide variety of systems from a a small number of existing components. New components that 
meet these interfaces will fit into the framework, so component designers also reuse the design of a 
framework. Finally, a framework reuses analysis. It describes the kinds of objects that are im­portant 
and provides a vocabulary for talking about a problem. An expert in a particular framework sees the world 
in terms of the framework, and will naturally divide it into the same components. Two expert users of 
the same framework will find it easier to understand each other s designs, since they will come up with 
similar components and will describe the systems they want to build in similar ways. Analysis, design, 
and code reuse are all important, though in the long run it is probably the analysis and design reuse 
that provide the biggest payoff [BR87]. 4 Frameworks as a Reuse Techniques The ideal reuse technique 
is a component that exactly fits your needs and can be used without being customized or forcing you to 
learn how to use it. However, a component that fits today s needs perfectly might not fit tomorrows. 
The more customizable a component is, the more likely it is to work in a particular situation, but the 
more work it takes to use it and to learn to use it. Frameworks are a component in the sense that venders 
sell them as products, and an application might use several frameworks bought from various venders. But 
frame­ works are much more customizable than most components. As a consequence, using a framework takes 
work even when you know it, and learning a new framework is hard. In return, frameworks are powerful; 
they can be used for just about any kind of application and some frameworks can reduce the amount of 
effort to develop customized applications by an order of magnitude. It is probably better to think of 
frame­works and components as different, but co­operating, ideas. First, frameworks provide a reusable 
context for components. Each component makes assumptions about its en­vironment. If components make different 
assumptions then it is hard to use them together[Ber90]. A framework will provide a standard way for 
components to handle errors, to exchange data, and to invoke operations on each other. The so called 
component systems such as OLE, Open-Doc, and Beans, are really frameworks that solve standard problems 
that arise in building compound documents and other composite objects. But any kind of framework provides 
the standards that enable existing compe nents to be reused. A second way in which frameworks and components 
work together is that frame­works make it easier to develop new compo­nents. Applications seem infinitely 
variable, and no matter how good a component library is, it will eventually need new components. Frameworks 
let us make a new component (i.e. a user interface) out of smaller com­ponents (i.e. a widget). They 
also provide the specifications for new components and a template for their implementation. Frameworks 
are similar to other techniques for reusing high-level design, such as tem­plates [Spe88, VK89] or schemas 
[KRT89, LH87]. The main difference is that frame works are expressed in a programming lan­guage, but 
these other ways of reusing high­level design usually depend on a special purpose design notation and 
require special software tools. The fact that frameworks are programs makes them easier for programmers 
to learn and to apply, but it also causes some problems that we will discuss later. Frameworks are similar 
to application gen­erators [Cle88]. Application generators are based on a high-level, domain specific 
lan­guage that is compiled to a standard archi­tecture. Designing a reusable class library is a lot like 
designing a programming language, except that the only concrete syntax is that of the language it is 
implemented in. A framework is already a standard architecture. Thus, except for syntax and the fact 
that the translator of an application generator can perform optimization, the two techniques are similar. 
Although problem domain ex­ perts usually prefer their own syntax, expert programmers usually prefer 
frameworks be cause they are easier to extend and com­ bine than application generators. In fact, it 
is common to combine frameworks and a domain-specific language. Programs in the language are translated 
into a set of ob jects in the framework. (See the Interpreter pattern[GHJV95]). Frameworks are a kind 
of domain-specific architecture [Tra94]. The main difference is that a framework is ultimately an object­oriented 
design, while a domain-specific ar­chitecture might not be. Patterns have recently become a popular way 
to reuse design information in the object­oriented community [GHJV95, Cop96, CS95, VCK96]. A pattern 
is an essay that describes a problem to be solved, a solution, and the context in which that solution 
works. It names a technique and describes its costs and benefits. Developers who share a set of patterns 
have a common vocabulary for describing their designs, and also a way of making design tradeoffs explicit. 
Patterns are supposed to describe recurring solutions that have stood the test of time. Since some frameworks 
have been imple­mented several times, they represent a kind of pattern, too. See, forexample, the definition 
of Model/View/Controller in Bushmann et. al. [BMR+96]. However, frameworks are more than just ideas, 
they are also code. This code provides a way of testing whether a developer understands the framework, 
ex­ amples for learning it, and an oracle for an­swering questions about it. In addition, code reuse 
often makes it possible to build a simple application quickly, and that application can then grow into 
the final application as the developer learns the framework. The patterns in the book Design Patterns 
[GHJV95] are closely related to frameworks in another way. These patterns were dkcov­ered by examining 
a number of frameworks, and were chosen as being representative of reusable, object-oriented software. 
In gen­eral, a single framework will contain many of the pat terns, so these patterns are smaller than 
frameworks. Moreover, the design patterns cannot be expressed as C++ or Smalltalk classes and then just 
reused by in­heritance or composition. So, those patterns are more abstract than frameworks. Frame­works 
are at a different level of abstraction than the patterns in Design Patterns. Design patterns are the 
architectural elements of frameworks. For example, Model/View/Controller can be decomposed into three 
major design patterns, and several less important ones [GHJV95]. It uses the Observer pattern to ensure 
that the view s picture of the model is up to date. It uses the Composite pattern to nest views. it uses 
the Strategy pattern to have views delegate responsibility for han­dling user events to their controller. 
Frameworks are firmly in the middle of reuse techniques. They are more abstract and flexible (and harder 
to learn) than com­ponents, but more concrete and easier to reuse than a raw design (but less flexible 
and less likely to be applicable). They are most comparable to reuse techniques that reuse both design 
and code, such as application generators and templates. Their major ad­vantage is also their major liability; 
they can be implemented using any object-oriented programming environment, since they are represented 
by a programming language. 5 Conclusion Frameworks are a practical way to express reusable designs. 
They deserve the atten­tion of both the software engineering re­search community and practicing software 
engineers. There are open research problems associated with better ways to express and develop frameworks, 
but they have already shown themselves to be valuable. References [Ber90] Lucy Berlin. When objects 
col­lide: Experiences with using mul­tiple class hierarchies. In Pro­ceedings of 00PSLA 90, pages 18 
1 193, October 1990. printed as SIGPLAN Notices, 25( 10). [BJ94] Kent Beck and Ralph John­son. Patterns 
generate architec­tures. In European Conference on Object-Oriented Programming, pages 139 149, Bologna, 
Italy, July 1994. Springer-Verlag. [BMR+96] Frank Bushmann, Regine Meu­nier, Hans Rohnert, Peter Sommerlad, 
and Michael Stal. Patiern-Oriented software Architecture: A System of Patterns. John Wiley and Sons, 
Chichester, West Sussex, England, 1996. [BR87] Ted J. Biggerstaff and Charles Richter. Reusability fram­work, 
assessment, and direc­tions. IEEE Software, 4(2):41-49, March 1987. [Cle88] J. C. Cleveland. Building 
ap plication generators. IEEE Soft­ware, 4(5):25 33, July 1988. [COp96] [COX86] [CS95] [Deu87] [Deu89] 
[GHJV95] [Gos90] [GR83] [HJE95] James O. Coplien. Patterns. SIGS, New York, NY, 1996. Brad J. Cox. Object 
Oriented Programming. Addison-Wesley, Reading, Massachusetts, 1986. James o. Coplien and Doug Schmidt, 
editors. Pat­tern Languages of Program De­sign. Addison-Wesley, Reading, Massachusetts, 1995. L. Peter 
Deutsch. Levels of reuse in the Smalltalk-80 programming system. In Peter Freemanl editor, 7Woriai: Software 
Reusability. IEEE Computer Society Press, 1987. L. Peter Deutsch. Design reuse and frameworks in the 
Smalltalk­80 programming system. In Ted J. Biggerstaff and Alan J. Perlis, editors, SoftwaTe Reusabil­ity, 
Vol IZ, pages 55 71. ACM Press, 1989. Erich Gamma, Richard Helm, Ralph Johnson, and John Vlis­sides. 
Design Patterns: 131ements of Reusable Object-Oriented Soft­ware. Addison-Wesley, Reading, Massachusettsl 
1995. Sanjiv Gossain. Objec&#38; Oriented Development and Reuse. PhD thesis, University of Essex, UK, 
June 1990.  Adele Goldberg and David Rob­son. SmaUtalk-80: The Lan­guage and its Implementation. Addison-Wesley, 
Reading, Mas­sachusetts, 1983. Hermann Huni, Ralph Johnsonl and Robert Engel. A frame­work for network 
protocol soft­ware. In Proceedings of OOP-SLA 95, pages 358 369, Austin, Texas, July 1995. ACM. [JF88] 
[KP88] [KRT89] [LH87] [LVC89] [Mc168] [Mey86] Ralph E. Johnson and Brian Foote. Designing reusable classes. 
 Journal of Object-Oriented Pro­gramming, 1(2):22-35, 1988. Glenn E. Krasner and Stephen T. Pope. A 
cookbook for using the model-view-controller user interface paradigm in Smalltalk­ 80. Jourmd of Object-Oriented 
Programming, 1(3):26-49, Au­gust/Spetember 1988. Shmuel Katz, Charles A. Richter, and KheSing The. Paris: 
A system for reusing partially inter­preted schemas. In Ted J. Bigger­staff and Alan J. Perlis, editors, 
Software Reusability, Voi I, pages 257-273. ACM Press, 1989. Mitchell D. Lubars and Mehdi T. Harandi. 
Knowledge-based software design using design schemas. In Proc. 9th IntL Conf. on Software En­gineering, 
pages 253 262, March 1987. Mark A. Linton, John M. Vlis­sidesl and Paul R. Calder. Com­posing user interfaces 
with In­terviews. C omputer, 22(2):8-22, February 1989. M. D. McIlroy. Mass produced software components. 
In P. Naur and B. Randall, editors, Software Engineering: Report on a confer­ence by the NATO Science 
Com­ mittee, pages 138-150. NATO Scientific Affairs Division, 1968. Norman Meyrowitz. Interme­dia: The 
architecture and con­struction of an object-oriented hypermedia system and applica­tion framework. In 
proceedings of O OPSLA 86, Object-Oriented Programming Systems, Lan­guages and Applications, pages 186 
201, November 1986. printed as SIGPLAN Notices, 21(11). [PHK+88] [Pre95] [RC89] [Sch86] [Sch95] [Spe88] 
[Sta95] [Tra94] [W.7K96] A. J. Palay, W. J. Hansen, M.L. Kazar, M. Sherman, M.G. Wad­10W, T.P. Neuendorffer, 
Z. Stern, M. Bader, and T. Petre. The Andrew Toolkit an overview. In USENIX Association Winter Conference, 
Dallas, 1988. Wolfgang Pree. Design Pat­terns for Objec&#38; Oriented So@ ware Development. Addison-Wesley, 
Reading, Massachusetts, 1995. Vincent Russo and Roy H. Camp bell. Virtual memory and backing storage 
management in multiprocessor operating systems using class hierarchical design. In Proceedings of OOPSLA 
89, pages 267 278, New Orleans, Louisiana, September 1989. Kurt J. Schmucker. Object-Oriented Programming 
for the Macintosh. Hayden Book Com­pany, 1986. Hans Albrecht Schmidt. Creat­ ing the architecture of 
a man­ ufacturing framework by design patterns. In Proceedings of OOP- SLA 95, pages 370 384, Austin, 
Texas, July 1995. ACM. Henry Spencer. How to steal code. In Proceedings of the Win­ter 1988 Usenix Technical 
con­ference, 1988. Richard Stallman. Using and Porting GNU CC. Free Software Foundation, Boston, MA, 
1995. Will Tracz. Dssa frequently asked questions. ACM Software Engi­neering Notesl 19(2):52 56, April 
1994. John M. Vlissides, James O. Coplien, and Norman L. Kerth, editors. Pattern Languages of [VK89] 
[VL89] [WBJ90] [WGM88] Program Design 2. Addison- Wesley, Reading, Massachusetts, 1996. Dennis M. Volpano 
and Klchard B. Kieburtz. The templates approach to software reuse. In Ted J. Biggerstti and Alan J. Perlis, 
editors, Software Reusability, Vol I, pages 247-255. ACM Press, 1989. John M. Vlissides and Mark A. Linton. 
Unidraw: A frame work for building domain-specific graphical editors. In Proceedings of the ACM User 
Interface Sofi­ware and Technologies 89 Con­ference, pages 81-94, November 1989. Rebecca J. Wirfs-Brock 
and Ralph E. Johnson. Surveying cur­rent research in object-oriented design. Communications of the ACM, 
33(9): 104-124, 1990. A. Weinand, E. Gammal and R. Marty. ET++: An object­oriented application framework 
in C++. In Proceedings of OOP-SLA 88, pages 46-57, November 1988. printed as SIGPLAN No­tices, 23(11). 
 Software Architecture, Systemic Reuse &#38; Component-based Systems  
			