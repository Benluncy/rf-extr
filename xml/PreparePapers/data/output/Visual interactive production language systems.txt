
 56 VISUAL INTERACTIVE PRODUCTION LANGUAGE SYSTEMS Patrick W. Ireland, Herbert V. Savage and Earl J. 
Schweppe Department of Computer Science The University of Kansas Lawrence, Kansas 66045 Abstract In 
earlier work on anticipation and prompting systems for programming languages it was recog- nized that 
a more formal approach to development of such interactions with programmers at display terminals was 
needed. It was observed that the bulk of the data involved in these interactions was in the displays 
themselves and that certain display drivers operated on action strings similar to those in production 
language systems. The development of special Floyd-Evans production languages oriented toward a visual 
interactive en- vironment was therefore undertaken. Based on two experimental interpreters which have 
been im- plemented, the language itself has now been sub- stantially refined and compilers for a common 
language have been designed with one being im- plemented. In the first implementation which was accomplished 
on a Datapoint 2200, a substantial portion of the effort was devoted to a pedagogic display of the parsing 
process. In the second im- plementation on an Interdata 85, all of the programming was made reentrant 
so that multiple users can be served using the same or different target languages. Furthermore, some 
of the basic functions were reduced to microcode, although it was not possible to carry this as far as 
had been hoped. It was also learned during development of the second system that left-part matching and 
right-part replacement could be treated as generalized actions--thus simplifying the internal structure 
of the interpreter. Development of these systems is part of ongoing research with programming languages 
and automated programmer as- sistance. Programming Languages, Syntactic Analysis, Production Languages, 
Floyd- Evans, Microprogramming, Interactive Systems, Prompting Systems, Programming Machines, Computer-Based 
Education~ Computer Science Education, Programmer Training KEYWORDS: CR Categories: 1.59, 2.42, 4.20 
 Mr. Ireland is now continuing his graduate studies at Kansas State University in Man- hattan, Kansas. 
 Note: Introduction With the growth of software costs [0] it is now more important than ever to explore 
additional means of increasing programmer productivity and speeding program development. The computer 
is al- ready used extensively in on-line editing of program text, immediate compiling of higher level 
languages, and various other interactive aids. This paper is part of an effort to develop com- puter 
assistance for the programmer which is even more highly interactive and which utilizes more fully our 
visual capabilities. In earlier work, Schweppe [S] explores various methods of using the computer to 
teach computer organizations and programming languages. The development of a dynamic visual model by 
Huebner, Skelton and Schweppe [Hu] allows the or- ganization of a computing machine to be displayed and 
simulated execution to be graphically shown. In an experimental system involving Fortran developed by 
Pinc and Schweppe [P] syntactic structures are anticipated or completed on the basis of initial characters. 
Where variable com- ponents are involved they are shown in a Backus- Naur form for subsequent entry. 
Input is also checked on a character-by-character basis and structured menus are used for prompting. 
A linguistic analysis by Horn [Ho] of the structure of such interactions provides insight into their 
nature and the languages to which they are ap- plicable. A system for such interactions developed by 
Cheng [C] is based on transition matrices and involves a very simple interpretive driver. This driver 
was generalized from the Datapoint 2200 [Dr] display driver which inter- prets a list of actions to control 
the screen along with the characters to be displayed. The basic notion of production language~ in- troduced 
by Floyd [F] involves the coupling of a list of actions to be performed with the actual syntactic reductions 
of the language as it is being parsed. This technique was generalized and applied by Evans [E] in the 
implementation of an Algol 60 compiler. This paper is based on Floyd- Evans Production Language as presented 
in Gries [G]. A stack is used to retain the unreduced por- tion of the statement being processed with 
a simple scanner adding the next atomic input unit to its top. Each production or statement in this language 
consists of four possible parts: I) an optional label, 2) a left-part, 3) a right-part, 4) a list of 
actions or subroutine calls. The ex- ecution of a statement involves matching the left- part with the 
top of the stack. A successful match results in the matched part of the stack being replaced by the right-part 
on the stack and the actions being executed. A failure in matching causes the next production to be executed. 
 In order to support the visual interactive nature of this work, a number of enhancements to the usual 
Floyd-Evans production language are necessary. The dominance of displayed material in the language dictates 
a compact representation for text and convenient display control features. The need for a simple audio 
response to warn of errors is also satisfied. These are provided in a similar manner to that used by 
Cheng as discussed previously. The ability to syntactically backspace, to save complete inputs, and to 
rescan previous inputs is included. Basic arithmetic and relational operations as well as control of 
se- quencing are provided. All of these are im- plemented as actions so that the overall structure remains 
rather elegant. Source Language The extended PL source language is designed for ease of use and consistency. 
The source statements are free format with column one reserved for form control. Statements may consist 
of only a few characters or may continue over several lines with the end of a PL statement being denoted 
by a ";". Comments may begin anywhere on the card except within text data. They are en- closed in back 
slashes, "\comment\", and may con- tinue over several lines. A comment is treated syntactically as a 
single blank. A PL program consists of declarations of classes of input characters followed by the actual 
productions. The declarations define classes of terminal characters in the following form: <class name> 
: <class description>; The class descriptions are of three types: im- mediate, range, or indirect. The 
immediate class specifies a list of characters which are in the class. For example, a class named PM 
consisting of the character '+' and the character '-' may be declared as follows: PM = '+','-'; The 
range class specifies a class consisting of a list of ranges of values. For example, in ASCII the classes 
of small letters, capital letters and all letters may be declared as follows: SLET : ('a','z'); CLET 
= ('A','Z'); ALET = ('a','z'),('A','Z'); The indirect class specifies a class consisting of a list of 
previously specified classes. For ex- ample, the class of all letters from the previous example may alternately 
be specified as ALET : CLET,SLET; 57 The indirect class allows arbitrary mixing of ranges and immediates, 
but not of other indirects. Individual terminals may be named by specifying immediate classes which 
consist of only one character. This is especially useful for non- printing characters. For example, the 
statement CR = X'OD' specifies a convenient mnemonic for a carriage return in hexadecimal ASCII. The 
productions themselves have the following form: [<label>:]{<symbol>}[>{<symbol>}][/{<action>,}]; I÷ 
label ÷I÷ left ÷I÷ right ÷I÷ action ÷I The optional label must be terminated with a colon. The left-part 
and the right-part each con- sists of a possibly null list of terminal symbols, class symbols, and/or 
nonterminal symbols. The left-part is used to match against the current contents of the syntax stack. 
If the matching fails, then execution proceeds to the next left- part. If the match succeeds, then processing 
con- tinues to the right-part and on to the actions. A null left-part causes an automatic match to occur. 
Upon successful match of the left-part, the right- part replaces the matched portion of the syntax stack. 
The following six combinations of left- parts and right-parts are allowed: LP > RP LP match with RP 
replacement LP > LP match with LP deletion LP LP match with stack unchanged Auto-match with stack unchanged 
> Auto-match with stack unchanged > RP Auto-match with RP stacking  All undeclared names appearing in 
a left-part or a right-part of a production are considered to be nonterminal symbols. The actions provide 
for execution control, input/output, and simple arithmetic. They execute only if a left-part match occurs 
for the state- ment. Actions for execution control and in- put/output are: I. 'text' Display the text 
on the user terminal. 2. NOISE Activate noise device at user terminal.  3. HOME Home cursor on the 
user terminal.  4. CLEAR Clear display on the user terminal.  5. HALT Halt execution of the PL program. 
 6. SCAN Accept next character from user terminal, adding to top of stack, and place it in text buffer. 
  7. RESCAN Empty stack and restart process at the restart address. Sub- sequent SCAN actions will access 
progres- sive characters from the text buffer. It is used to re- establish the stack to the appropriate 
con- tents following the use of DELETE.  8. RESTART xxx Set address xxx as the restart address for RESCAN. 
This is used to avoid execution of beginning of programs upon RESCAN.  9. DELETE Delete top stack entry 
and last character in output buffer and back up the cursor one oosition.  10. BCKSP Backspace cursor 
on the user terminal.  11. GO xxx Transfer to production labeled xxx.  12. CALL xxx Call production 
sub- program at xxx.  13. RETURN Return from production subprogram.  14. WRITE Write text buffer to 
auxiliary device.  15. EMPTY Empty stack and text buffer.   The r~gister actions perform operations 
on one or more of 256 (0-255) arithmetic registers. The contents of a register is designated by placing 
"R" before the register number with i__~n- direct reference indicated by parentheses. All indirect 
references are checked for legal limits. In the following description, "RRR" refers to register or 
indirect, and "ZZZ" refers to a literal, register or indirect. I. LOAD (RRR,ZZZ) C(RRR) <-- ZZZ 2. 
ADD (RRR,ZZZ) C(RRR) <-- C(RRR) + ZZZ  3. SUB (RRR,ZZZ) C(RRR) <-- C(RRR) -ZZZ  4. WW (ZZI,ZZ2,xxx) 
WW may be EQ, NE, LT, LE, GT, or GE. If ZZI WW ZZ2 is true, go to xxx, otherwise, go to next action. 
 5. (ZZI,ZZ2) Position terminal cur- sor to (ZZI,ZZ2).   58 Datapoint Implementation The interpreter 
implemented for the Datapoint 2200 [Dr] consists of a preprocessor and a main processor which is in two 
sections. The preprocessor initializes various tables, computes an overall length of each statement, 
and reverses the symbols of the left-part. The first section of the main processor does the left-part 
matching and makes the right-part replacement. The second section manages the interpretation of the action 
strings. The left-part matching directly compares ter- minals and non-terminals with the stack[ Class 
symbols are used as an index into a transfer vec- tor to execute a subroutine corresponding to the class. 
If the symbol on the stack is in the given class then the subroutine returns with the zero condition 
flag set. Class subroutines of two general forms are used. The first form is used to test for an arbitrary 
length llst of characters (in the following example '+' and '-'). PM CP '+' Comoare A-register with 
'+' RTZ Return if True Zero CP '-' Compare A-register with '-' RET Return The second form is used to 
match for a range of characters (in the following example 0 through 9). DIGIT CP '0' Compare A-register 
with '0' RTC Return if True Carry CP '9' Compare A-register with '9' RFC Return if False Carry CPA Compare 
A-reg. with itself RET Return (with zero flag set) If a match occurs on a class, the character itself 
is saved with that class for later pushing on the stack during the right-part replacement. Each action 
consists of one or more con- tiguous bytes, the first of which specifies the operation to be performed. 
They are divided func- tionally into three groups. The first group is the character set of the application 
program (e.g., ASCII or APL) with the action being simply to display that character. In the second and 
third groups the first byte of the action is used as an index into a transfer vector to execute a subroutine 
corresponding to that action. These subroutines may use any number of the immediately following bytes 
as parameters. After executing the subroutine of an action in the second group, the system continues 
processing actions in the ac- tion string. The third group of actions are similar to the second, except 
the system returns to the matching part of the main process after completion of that action. Initially 
the PL programs written for this interpreter were expressed directly with DC (Define Constant) statements 
in Datapoint Assembly Language [Da]. This alleviated the initial need for writing a PL compiler while 
still resulting in a fairly readable PL program due to the flex- ibility of this assembler to define 
mnemonics and to generate either 8 or 16 bit data fields. For example, consider the following PL program 
segment  taken from Gries [G], page 165: 59 The above screen display was generated by  the following 
program segment. This segment in- EXPR: ANY CALL TERM cludes a menu for language selection and the code 
<term> + -> SCAN GO EXPR for a simplified FORTRAN assignment statement. <term> ANY -> <expr> ANY RETURN 
 The FORTRAN example allows six character iden- ANY HALT 2 tifiers and eleven digit integer constants 
with the operators +,-,*,/ and unary minus in the This segment would be expressed simply as follows: 
 usual precedence relation. Each character is  checked as it is entered and backspacing through EXPR 
DC O,CALL,*TERM,EOA syntactic units is permitted. DC O,TERM,'+',EOS,EOS,SCAN,GO,*EXPR DC O,TERM,ANY,EOS,EXPR,ANY,EOS,RETURN 
 LETTER : ('A','Z'); DC O,DELETE,BEEP,RESCAN DIGIT = ('0','9'); BC = 030,01~; In the first line a null 
left-part and right- ALPNUM = LETTER,DIGIT; part implies a match, the * before TERM tells the PM = '+','-'; 
assembler to generate a two byte address for the TD = '*','/'; call, and the EOA tells the interpreter 
that this PLPRGM: /(O,0),CLEAR  is the last action. In the second line EOS in- (4,2),'Visual Interactive' 
dicates end of the left or right-part so that TERM (2,4),'PRODUCTION LANGUAGE' and '+' will be deleted 
from the stack. In the (14,6),'for the' fourth line, null left-right parts again force a (7,8),'DATAPOINT 
2200' match, DELETE takes one character off the input (0,10),'Top-down,Bottom-up,Fortran,Apl?'  buffer, 
RESCAN restores the stack to what it was SCAN; before the illegal character was entered. ANSWER: 'T' 
/RESTART TST (0,10),'Top-down',GO TST; The zero at the beginning of each statement  'B' /RESTART BST 
is filled in by the preprocessor with a count of (0,10),'Bottom-up',GO BST;  the number of bytes in 
that statement, so that if 'F' /RESTART AST a left-part match fails the processor will not (0,10),'FORTRAN',GO 
AST; have to scan through the rest of the string to 'A' /RESTART APL,(0,10),'APL',GO APL; find the next 
left-part. The preprocessor also /DELETE,NOISE,SCAN,GO ANSWER;  reverses the order of the symbols in 
the left-part AST: /SCAN;  to increase the efficiency of the matching. A AESC: '@' /RESTART PLPRGM,GO 
PLPRGM;  compiler on the Datapoint for the common source LETTER>I /SCAN,CALL IDENT,GO AEQ;  language 
obviates the need for both these steps. /DELETE,NOISE,SCAN,GO AESC; AEQ: '=' /SCAN,GO ANEG; For pedagogical 
and debugging purposes one BC /DELETE,DELETE,RESCAN;  version of this implementaton includes a dynamic 
 0177 /EMPTY,GO AST;  display of the syntax and program counter stacks. /DELETE,NOISE,RESCAN;  Thus 
after every successful left-part match the ANEG: '-'> /SCAN;  top ten entries of each stack are displayed. 
The AF: LETTER>I /SCAN,CALL IDENT,GO AT;  program counter stack is displayed in octal while DIGIT>N/ 
SCAN,CALL CONS,GO AT;  the syntax stack is displayed with six character '(' /SCAN,GO ANEG;  mnemonics 
substituted for the nonterminals and the BC /DELETE,DELETE,RESCAN;  actual characters displayed for 
terminals. 0177 /EMPTY,GO AST;  /DELETE,BEEP,RESCAN; The following example shows the screen AT : I 
ANY > F ANY /; display during the input of a FORTRAN assignment N ANY > F ANY /; statement. T TD F 
ANY > T ANY /GO ATI; F ANY > T ANY /; ATI: T TD / SCAN,GO AF; AE: E PM T ANY > E ANY /GO AEI;  T ANY 
> E ANY /; PRODUCTION LANGUAGE 1 5II _663414 i i= i AEI: E PM /SCAN,GO AF; ( for the }TERM t '(' E 
')' > F /SCAN,GO AT; I* I  I DATAPOINT 2200 '=' E 015 / WRITE,EMPTY,GO AST;   !( M BC / DELETE,DELETE,RESCAN; 
 IgXp I I 0177 / EMPTY,GO AST; FORTRAN 4 I + i /DELETE,NOISE,RESCAN; IDENTI=IDENTI*(IDENT2+IO~ 5 
 INDENT: /LOAD(RI,I); IDLP: I ALPNUM > I / SCAN,ADD(RI,I) NE(RI,6,IDLP); 030 / ADD(RI,I),BSP(RI),RESCAN; 
 Netes: I. Introductory Message /RETURN; 2. Program Counter and Subroutine Stack  CONS: / LOAD(RI,I); 
 3. Syntax Recognition Stack  CONSLP: N DIGIT > N / SCAN,ADD(RI,I) 4. Language being processed  NE(R1,11,CONSLP); 
 5. Current Input Line  030 / ADD(RI,I),BSP(RI,),RESCAN; /RETURN; Interdata Implementation 60 In addition 
to the class membership test, the stacking of data and addresses occurs in The interpreter for the Interdata 
85 com-microcode Jim]. Although it is possible to puter [Iu] includes several enhancements made implement 
other sections of the interpreter--or possible by the greater power of this equipment perhaps the entirety--in 
microcode, this has not and the better understanding of the processes in- been accomplished because of 
the difficulty of volved. These provide more extensive class using microcode, both at loading and execution, 
declarations and involve reentrant coding of the on the Interdata 85. interpreter. This allows the system 
to drive a number of terminals from one or more sets of syn- Using the eight bit orientation of the 
tactic and semantic tables. The simplicity of Datapoint machine and assembler, that implementa- the interpreter 
allows some of the basic func- tion expresses statements almost directly in as- tions to be implemented 
using the writeable sembly language. However, the sixteen bit nature microprogram capabilities of the 
machine. The of the Interdata machine makes the interpretation process is further simplified by treating 
the of compact PL coding inefficient and the In- left-part matching and the right-part replacement terdata 
assembly language makes such repersenta- of the rules as "actions" in the same format as tions practically 
impossible. These problems re- any others. quired the definition of a higher level language to express 
the interactive production language As in the earlier implementation, the inter- programs and the design 
of a compiler which nal design of the interpreter is based on vec- translates these statements into the 
internal toring to various subprograms determined by the tables needed by the interpreter. current action 
being executed. This method al- lows easy expansion in the future with simul-The compiled program is 
not executed taneous simplicity of programming. directly, i.e., it contains no instructions other than 
those to perform the initial link. The The class tables and vector are used by program contains: (I) 
the class vector and class microcode to determine a character's membership tables used in examining of 
characters for class in a particular class or group of classes. The membership, (2) the buffers and 
I/O parameter following declarations blocks needed by the interpreter, (3) the left- part-save-area 
used to temporarily save OPERS = '+','-','/','*'; characters represented by nonterminal symbols LETTER 
: ('A','Z'); during the right-part replacement, and (4) the DU~IY : LETTER,0PERS; compiled statements 
of the user's source. would produce the following class vector and An example of the compilation of 
a PL state- table structure: ment follows: Source Statement: Entry Vectol Tables BN: LETTER > I 
/ SCAN, GO BF; OPERS ~-0 ,8, Immediate Compiled Object: I + Class BN EQU * DB 2,$LP Begin left-part 
action ! , of four DC $E007 Address of next statement DC LETTER Class of LETTER ,/, members DB 2,$RP 
Begin right-part action DB 2,I Non-terminal symbol I DC $SCAN Begin SCAN action DC SGO,BF Begin GO action 
 $E007 EQU * End of statement w LETTER Class  iiI41Rane Conclusions i 'A' of one range It appears 
that visual interactive tech- I 'Z' pair niques of working with the syntax and semantics of programming 
languages are helpful in teaching these concepts and in developing computer ap- plications. The use of 
pedagogic displays of DUMMY Indirect 214 parsing processes can also be most helpful in Class teaching 
these ideas. Not only can these tech- LETTER of two niques reduce the amount of work involved in the 
 class programming of applications, but it decreases the OPERS members volume of program data which 
must be stored as well. The development and utilization of more formal techniques of preparing such visual 
in- teractions is quite feasible and productive.  These pe4agogie displays of syntax and semantics require 
high performance devices. In fact, the need for highly responsive directly coupled displays was especially 
apparent while working on a Hazeltine 2000 terminal with the In- terdata computer through an operating 
system. Conventional CRT timesharing terminals coupled in the usual manner with minicomputers are com- 
pletely inadequate for this highly interactive environment. The Datapoint 2200 display provides excellent 
responsiveness, and with the RAM ver- sion also allows a dynamically defined character set. The small 
size of this display (12x80); however, represents a serious limitation for such work. We are now studying 
the optimal perfor- mance needed for textual displays in this type of application. Although the production 
language inter- preters are now logically quite simple, it is still difficult to express these totally 
in microcode --at least for the Interdata computer and some others. We are currently attempting to identify 
more precisely the microprogramming characteristics which would be needed to support such applications 
and to review other machines for such characteristics. We are especially studying the microprogrammable 
microprocessors for this purpose, since they are inexpensive enough to be dedicated to a single user. 
 The actions available in these systems must be expanded to handle variable data which is needed in semantic 
displays and the symbol tables which are needed for full program checking and compiling. The control 
structures of these systems need to be improved to provide struc- turing facilities and efficient case 
decisions. An expansion of the techniques needs to provide for the editing of existing files with complete 
syntactic checking. Finally, the technique needs to be applied recursively to the production language 
itself to provide for the on-line development and modification of production based materials. Finally, 
this work represents another step in our efforts to develop a viable programming machine. Such machines 
would allow program generation and verification for a variety of com- puters and languages. But more 
importantly, they would do this in a common environment oriented to the needs of programmers . Acknowledgement~ 
 A compiler for the Datapoint implementation written by William H. Moody is available. Limited support 
in the form of equipment was provided by the Datapoint 3orporation. References [c] Cheng, Mary Owens. 
"A Visual Interactive Transition Pair Processor," unpublished Masters Research Work, Computer Science 
Department, University of Kansas, 1976.  6] [De] Datapoint. Program User___~sGuide for b_~ ~, Datapoint 
Corporation, Datapoint Drive, San Antonio, Texas 1973. Assem-9725 78284, [Dr] Datapoint. Reference Manual 
for Datapoi~t 2200, Version I ~nd II, Datapoint Corpora- tion, 9725 Datapoint Drive, San Antonio, Texas 
78284, 1973. [~] Evans, Arthur, Jr. "An Algol 60 Compiler," in Goodman, Richard (ed.), Annual Review 
i__n_n Automatic Programming, Vo__!. ~, Pergammon Press, New York, 1964, pp. 87-124. [F] Floyd, R.W. 
"A description language for symbol manipulation," Journal of th_~eACM, V_9_~. ~, No. 4 (October 1961), 
pp. 579-584. [G] Gries, David. Compiler Digital Computers, John 1971, 493 pp. Construction for Wiley, 
New York, [Ho] Horn, Ronald L. "Languages, Interaction, and Parsing for an Anticipation and Prompting 
Technique," unpublished Masters Research Paper, Computer Science Department, Univer-sity of Kansas, 1974. 
[Hu] Huebner, Paul F., Skelton, Daniel T., and Schweppe, Earl J. "Interactive Instruction Simulation 
on and of the Datapoint 2200 Com- puter", ProceedingS ACM Annual Conference, Atlanta, Georgia, 1973 August 
27-29, pp. 304-308. [Im] Interdata. Model 8~ Micro-Instruction Reference Manual, Fublication Number 29-282, 
Interdata, Inc., 2 Cresent Place, Oceanport, New Jersey 07757, 1973. [lu] Interdata. User's Manual, Publication 
Number 29-261R01, Interdata, Inc., 2 Cresent Place, Oceanport, New Jersey 07757, 1971. [0] Oliver, Paul. 
"A Program for Software Quality Control," AFIPS ~onference Proceedings, Vol. 4__I: 1974 NCC, Chicago, 
Illinois, May 6-10, 1974, pp. 411-416. [P] Pinc, John H. and Schweppe, Earl J. "A For-tran Language Anticipation 
and Prompting System," Proceedings ACM 1973 Annual Con-ference, Atlanta, Georgia, 1973 August 27-29, 
pp. 183-187. [s] SchwepDe, Earl J. "Dynamic Instructional Models of Computer Organizations and Programming 
Languages," ACM SIGCSE Bulletin, ~oi. ~, No. I (February 1973), pp. 26-31. 
			