
 A SYSTEMS PROGRAMMING COURSE USING THE mS 5050, A COUNTERFEIT, HANDS-ON, LARGE-SCALE COMPUTER SYSTEM 
 Bernhard Weinberg and Leonard H. Weiner Computer Science Department Michigan State University East 
Lansing, Michigan 48824 Abstract Computer Science students at MSU design and implement multiprogrammlng 
monitors for a simu- lated computer system which is an amalgamation of Control Data 3000- and 6000-series 
machines. In this paper we describe this computer, the systems programming course in which it is used, 
and the students' project. We also report briefly on student performance. Introduction Computer Science 
students at Michigan State University rake a Junior level course in systems programming~ in which they 
write, individually, simple but realistic monitors for a multipro- grar~ning system. Because the academic 
computers at MSU 2 are operated on a closed shop basis, it is necessary to provide a simulated computer 
on which the students can run their monitors. The first attempt to provide this type of computer access 
led to the design of the MSU 6507 [4]. This machine was, essentially, a CDC 6400 computer system, modified 
to allow for inter- rupts, time slicing, movement of block storage, and the handling of SCOPE input/output 
commands. Although the MSU 6507 was limited by not having programmable data channels, it did simulate 
the fundamental characteristics of an interrupt system and its use demonstrated that Computer Science 
 Juniors could write simple multlprogramming monitors. The shortcoming s of the MSU 6507 led to the 
design of a new, more complete computer system, the }~4S 5050, which was simulate~ and first put into 
use during Fall term, 1972. MS 5050 System Design The main objectives in the design of the }~4S 5050 
and its simulator were to give the students as realistic a system as possible and to make the host computer 
(the MSU CDC 6500) completely transparent. Because MSU Computer Science students are reasonably familiar 
with the CDC 6000 series and its assembly language, COMPASS [i], the basic architecture and instruction 
set of the HMS 5050 mainframe are modeled on a CDC 6400. However, because the CDC 6000 series does not 
have pro- grammable data channels nor a user accessable interrupt system, the HMS 5050 I/0 and interrupt 
 systems are modeled on those of the CDC 3600. Thus the ~4S 5050 (Huyser-Moluf Simulator 5050) represents 
a machine midway between the 3600 and the 6500. In order to process interrupt conditions and interface 
with the data channels, twenty-five new instructions have been added to the CDC 6000 series instruction 
set. In addition, a data channel instruction set of nine channel control words has been defined. The 
programmable data channels have direct and unrestricted access to central memory, where both their instructions 
and data buffers are located. Once channel activity is initiated by the CPU, each channel operates asynchronously 
and independently. Thus, the HMS 5050 is a more powerful machine than its prototype. Most of the }~4S 
5050 peripheral devices are modeled on CDC 3000 series devices. At present, the system has three card 
readers, four llne printers, two disk storage units, and one magnetic tape drive. Currently, six channels 
are imple- mented. The MS 5050 hardware configuration is shown in Appendix 2. The }~IS 5050 simulator 
is a modular, table- driven processor, which is written in COMPASS and executes on MSU's CDC 6500 in 
15900 locations (this includes 8192 words of HMS 5050 simulated memory). The three main modules are: 
the initialization or deadstart procedure, the central processor simulator, and the input/output section 
which includes simulators for each type of I/0 equipment. A more complete description of the }~IS 5050 
hardware and simulator is available else- where [7]. MS 5050 Pro~rammin~ and Utility Systems In order 
to aid the systems programmers (the students), several software support systems have been developed for 
the HMS 5050. And wherever reasonable, these systems have been adapted directly from those of the host 
computer. The major support packages are: i. The HMS 5050 Assembler. This is a simple extension of the 
CDC 6000 COMPASS assem- bler with a special system text, }RdSTEXT, in place of the regular COMPASS SYSTEXT. 
 ~4STEXT contains macros which implement the twenty-flve new CPU instructions and the nine channel 
control words. It also has macros which allow the progran~ner to select either absolute or relocatable 
 assembly and perform I/O easily. User convenience macros defined in ~STEXT enable user Jobs to establish 
files and make file action or system action requests of the monitor. The COMPASS assembler with IR4STEXT 
is, in principle, a CDC 6500 cross-assembler for the l~S 5050. This is especially convenient because 
the students are already familiar with the idlosyncracies of the COMPASS assembler. 2. Standard CDC 
6500 permanent file and library maintenance utilities. The HMS 5050 programmer has access to these by 
using SCOPE control cards. The program decks for the students' monitors average about I000 punch cards. 
Use of these utilities reduces card handling consid- erably.  3. HMS 5050 debugging aids. By using appro- 
priate HMS control card parameters, the programmer can:  (a) Set the }RMS 5050 execution time limit. 
 (b) Set internal sense switches and sense lights.  (c) Select step-mode traces.  (d) Select execution 
time dumps.  (e) Select termination dumps of }~4S 5050 memory.   Every }R~S 5050 termination causes 
a com- plete register and channel dump. 4. }~4SLOADER. This utility program links relocatable subprograms 
and preassembled system routines, building them into an absolute deadstart tape. Thus, the stu- dents 
can subroutinize their monitors and take advantage of all the benefits that that implies.  5. }~SPATCHER. 
This is an octal correction utility which enables the system program- mer to make small patches directly 
onto his absolute deadstart tape without reassembling his monitor.  6. I~SINPUTTER. This utility is 
a prepro- cessor for all user Jobs and data decks. The students' monitors load user Jobs, which are assembled 
into absolute binary format, into HMS 5050 memory and execute them. However, a user job may request a 
monitor to read data cards, which may be in either binary or Hollerith format, from the input queue into 
the user's buffer for processing. Therefore, every card read by a monitor must be prepro- c essed so 
that the HMS 5050 can tell  whether it is a binary, Hollerith or ~S file card. While HMSINPUTTER is 
nor- mally used by the instructor, the students may use it to prepare test programs and data for their 
monitors. The instructor also may use this utility to generate simulated random card reader malfunctions 
 (e.g., feed fail, compare error or card Jam) which the students' monitors must process. Classroom Use 
of the EMS 5050 As MSU is on the quarter system, and writing even a simple monitor is s time consuming 
task, it is imperative that CPS 313 students learn to use the }R4S 5050 as early in the term as possible. 
Therefore, on the first day of class, they each receive a copy of the HMS 5050 Computer System Reference 
Manual (20 pages) and the HMS 5050 User's Manual (8 pages). The Reference Manual provides an overview 
of the system and a brief description of its simulator. It also describes the interrupt system, CPU registers, 
register protection scheme, all of the }RMS 5050 CPU instructions that are not included in the CDC 6000 
instruction set, and the channel control word instruction set. Its appendices include channel status 
and function codes, the full CPU instruction set, and mainframe and channel con- figurations. The User's 
Manual describes the HMS 5050 job deck structure, system macros, interrupt processing, and various utility 
programs. The students are expected to study and digest as much of this information as possible during 
the first week of the term. The first two class lectures and textbook [3] assignments cover general 
concepts of operating systems, monitors, interrupts and data channels. At the third class meeting, the 
instructor describes the }~4S 5050 mainframe architecture and its I/O system in detail, and the students 
get their first }~dS 5050 prograrmulng assignment. This assignment instructs them to read a small deck 
of cards from one of the HMS 5050's card readers and to echo-prlnt each card image on all four l~IS 5050 
llne printers, simultaneously. They also must read a deck of cards from another card reader and produce 
line printer output spaced according to data read from each card. 4 After a few lectures on HMS 5050 
interrupt processing, the second programmingasslgnment is distributed. This instructs the students to 
write an interrupt processor. The instructor prepares a user Job, using the XTEXT feature of COMPASS, 
for the students to assemble with their processors. This pseudo-user Job generates many different inter- 
rupt conditions which their programs must recognize. 5 As was stated earlier, each student in CPS 313 
is expected to write a simple but realistic monitor for a multlprogran~ing system. This assignment is 
given to them in two parts called, Monitor 1.0 and Monitor 2.0. By the end of the third week of the term, 
the class receives the specifications for Monitor 1.0. This is a batch monitor which can load absolute 
binary user jobs (from a permanent file set up by the instructor) and handle user job input/output. It 
must load the user jobs, one at a time, from an input queue, crack the user job cards, execute the user 
programs, and process any I/0 requests. Monitor 1.0 should terminate the user Jobs appropriately in 
response to either a fatal interrupt or a normal exit request. The students incorporate their enhanced 
interrupt pro- cessors from Assignment 2 into Monitor 1.0. During the next two weeks, the instructor 
lectures on multiprogrammlng, tlme-sharlng, priority interrupts and process state transitions within 
a multlprograrmning environment. And some- time within that period, the Monitor 2.0 assign- ment is distributed. 
Since most of the students are still working on Monitor 1.0, this overlapping of assignments gives them 
an opportunity to plan ahead. The specifications for Monitor 2.0 call upon the students to design and 
implement an executive program for a multlprogramming system wlth three input queues. Monitor 2.0 must 
be able to manage three user jobs in memory, simultaneously, and it must provide a priority scheme for 
CPU assignment. Other requirements include handling of memory com-paction and I/0 to and from the users' 
circular buffers. Once again, the user Jobs are provided by the instructor and designed to make vigorous 
use of the interrupt systems and data channels. Monitor 1.0 should be completed by the sixth week of 
the quarter; this leaves four weeks for the students to work on Monitor 2.0. However, those students 
who complete Monitor 2.0 early may earn extra credit and gain some valuable experience by implementing 
some orall of the following optional features. I. Time slicing. 2. Execution time memory request. 
 3. User Job roll out to disk.  4. A variable number of Jobs in memory at one time.  5. Individual, 
appended Job logs (dayfiles) for output from user Jobs.  6. User job swapping to disk.  Other CPS 
313 Topics While the students' monitors are of primary importance in this course, a number of other 
topics are covered during the second half of the term. These include loaders in general and the CDC 6000 
relocatable loader in detail, an overall view of computer architecture, an introduction to micro- programming, 
and the zero address stack machine, a la Gear [5]. Assigumemts related to these topics require the students 
to write a CDC 6500 FORTRAN program that reads and analyzes a relocatable binary load file, a program 
which introduces them to reloca- table binary card decks, and a stack machine simulator to load and execute 
a relocatable binary stack machine program. When time permits and resources are available, they finish 
the term by writing a simple interactive game-playing program (such as Blackjack or Battle- ship) using 
the MSU MISTIC2 time sharing system [6]. Because of the extraordinary amount of program- ming the students 
must do, CPS 313 is a four credit course with three lecture hours a week. Exams are held in the evenings 
and, occasionally, student attendance is required at relevant seminars. The first two courses in this 
one-year sequence, CPS 311, Assembly Language and Machine Organization, and CPS 312, Generative Coding 
and Information Structures, are structured very much llke CPS 313. And llke CPS 313 they demand a great 
deal of effort from the students. Up to one third of the students who start the sequence do not make 
it to CPS 313. Therefore, those who do take this course are generally competent enough to do the required 
work. Student Performance Most CPS 313 students leave their first class meeting in a state of shock; 
they have been given the course outline and the two I~4S 5050 manuals with a terse admonition to "learn 
them". The shock does wear off, however, and in a surprisingly short time they manage to learn a great 
deal about a realistic, large scale, bare computer (one which does not come with an operating system). 
With the experience they gain from the progran~ning assignments, they are able to tie together HMS 5050 
nomenclature, textbook theory and the operation of interrupt systems and data channels. The HMS 5050 
has now been used at MSU for four full terms. During this time, approximately 90% of the students have 
been able to implement Monitor 1.0 in its entirety. About 75% of the students have completed Monitor 
2.0. Of these, perhaps one third have attempted at least one of the extra credit embellishments, and 
in each lecture section (about thlrty-five students) there have been one or two who have successfully 
implemented most of the optional features. Some have even added features of their own. A comparison 
with pre-~S 5050 student perfor- mance shows that, while approximately the same per- centage of students 
completed the same number of assignments in the same length of time, the assign- ments currently being 
given have enabled the students to learn far more about interrupt systems and input/ output processing. 
 HMS 5050 Cost The description of any educational tool must include some discussion about its cost. 
Because of variations in accounting systems from one com- puting center to the next, a dollar value figure 
is meaningless. The following points should provide a more meaningful basis for evaluating the actual 
cost. I. Students' programs for Monitor 2.0 contain up to 1500 assembly language instructions. 2. The 
cost of assembling and executing these programs under the HMS 5050 simulator is less than double the 
cost of running similar sized COMPASS programs directly on the CDC 6500. 3. Computer charges for CPS 
313 have always been approximately twice those of other Junior level programming courses at MSU. That 
ratio has not changed. It is evident that the HMS 5050 simulator gives the students '%ands-on" experience 
with a highly realistic, large-scale machine at reasonable COSt. References i. Control Data 6000/7000 
Series Computer Systems COMPASS Reference Manual, Control Data Corpor- ation Publ. No. 60279900, Rev. 
D, 1973. 2. Control Data 6400/6500/6600 Computer Systems SCOPE Reference Manual, Control Data Corpor- 
ation Publ. No. 60189400, Rev. L, 1971.  3. Donovan, John J., Systems Programming, McGraw- Hill, New 
York, 1972.  4. Forsyth, John, "The MSU 6507 Interpreter for the CDC 6500", Abstracts of the Computer 
Science Conference, Columbus, Ohio, 1973, p. 80.  5. Gear, C. William, Computer Or~anizatlon and Programming, 
McGraw-Hill, New York, 1969.  6. Welner, Leonard H., MISTIC2-The MSU Interactive Computin~ Facility, 
Computer Laboratory User's Guide, Vol. IV, (Editor), East Lansing, Michigan State University, 1972. 
 7. Weiner, L. H., S. L. Huyser, and B. Welnberg, "Simulation of the HMS 5050 Computer System", Proceedings 
of the 1974 Winter Simulation Con- ference, Washington, DC, 1974.  Notes i. CPS 313, Introduction 
to Systems Programming. 2. MSU operates a CDC 3600 (soon to be phased out) and a CDC 6500, which is 
identical to a CDC 6400 except that it has two CPUs. The MSU 6500 runs under a modification of the standard 
CDC 6000 operating system, SCOPE [2].  3. Steven L. Huyser did the original design of the ~S 5050 and 
progran~ned its simulator. Allan Moluf, with the aid of Thomas P. Carr, later modified the simulator 
and implemented the I/0 drivers.  4. Appendix I contains samples of CPS 313 assignments.  5. A student's 
program for Assignment 2 is shown in Appendix 3.  APPENDIX I. Four Sample I~4S 5050 Progra~uning Assignments 
 CPS 313 HMS 5050 Assignment #I Credit: 25 points Machine Due Date: Oct. 8, 1973 6:00 A.M. Write an 
HMS 5050 program which will accomplish the following. I. Read cards from Card Reader 5630 until end-of-file; 
do the following for each card: Echo-prlnt each card on all four llne printers (3420, 3440, 5620 and 
5640) in such a manner that all printing is done concurrently. When yon recognize EOF on CRF 5630, print 
the message EOF ENCOUNTERED ON CARD READER 5630 on all four printers concurrently. II. Issue a page 
eject on Line Printer 3420; then read cards from CRF 3430 and do the following for each: a) Echo-print 
each card on Line Printer 3420 (double spaced) b) Skip the number of lines (indicated in column i of 
each card) on Line Printer 5640 and echo-print columns 2-80 on the next llne. When you recognize EOF 
on CRF 3430, print the message EOF ENCOUNTERED ON CARD READER 3430 on both printers. Then stop your 
program. Additional Instructions i. You are to build your own data file (between 3 and 5 cards) for 
Card Reader 5630. Include your name, student number, course number and current date. Use the utility 
HMSlNPUTTER to prepare CRF 5630. 2. Read CRF 3430 from the permanent file CPS 313}~4S 5050PROB IFORCARDREADER3420 
 A suggested Job deck structure is: Job card ... PW= n~PX (OFF) ATTACH (}R~S INP, }~4S INPUTTER ) HMS 
INP (CRF5630) ATTACH (TEXT, HMSTEXT) COMPASS (G--TEXT, A, B =MTF3400 ) RETURN (HMS INP, TEXT) ATTACH 
(}~4S, }~S5050) ATTACH ( CRF3430, CPS 313HMS 5050PROB IFORCARDREADER3430) }~4S.  [data for CRF 5630 
goes here 789 [~S source deck here 6789 CPS 313 HMS 5050 Assignment #2 Credit: 25 points Machine Due 
Date: Oct. 15, 1973 6:00 A.M. For this assignment you will write an interrupt processor, some portions 
of which, if you plan properly, will become an integral part of your forthcoming Monitors. Your program 
will process internal interrupts only; the interruptable conditions will be provided by XTEXT code (a 
pseudo user Job) which will be assembled at the very end of your processor Code. Your program must also 
include a deadstart routine. See the HMS 5050 User's Manual for necessary details. Instructions The 
interrupt processor is to start in word 000001. Initially, word 000000 should contain a Jump to the deadstart 
routine which should initialize channels and registers, and begin execution of the pseudo user job. 
The interrupt conditions that will occur, will fall into three categories: Warning, Fatal and Special. 
For this exercise, however, your processor is to print an appropriate message on the system dayfile (Line 
Printer 3420) and continue execution for each Warning or Fatal interrupt condition. The Special interrupts 
are those which normally may be fatal or not, but for this exercise will be treated so as to terminate 
execution of the pseudo user code after dayfillng a message. The HMS 5050 dayfile messages should contain 
the octal clock time, the word FATAL, WARNING or SPECIAL, and the number of the interrupt (as a decimal 
integer). Interrupts 0,1,4,5, and 12 should be treated as type Warning. Interrupts 2,3,7,8,9,10 and 
13 should be treated as type Fatal. Interrupts 6,11 and 14 should be treated as type Special. Job Deck 
Structure XTEXT for the pseudo user Job will be found on CPS313HMSb050PROB2XTEXTPSEUDOUSERJOB Use the 
following control cards and deck structure. ATTACH ( TEXT, HMS TEXT) ATTACH (PROG, CPS 313}~4S 5050PROB2... 
) COMPASS (G=TEXT, A, B=MTF3400) RETURN (TEXT, PROG) ATTACH (I~4S, }~4S5050) HMS. 789 IDENT HMSABS 
 Interrupt Processor USER BSS 0 PROG XTEXT END  CPS 313 ~S 5050 Assignment #3 Credit: 60 points Machine 
Due Date: Oct. 29, 1973 6:00 A.M. MONITOR 1.0 Simple Batch Monitor with I/0  This monitor should load 
user jobs found on the input queue (Card Reader 3430), execute them one at a time in simple batch mode, 
process user interrupts, and process monitor requests. User job output is to be printed on Line Printer 
3440 while System Dayfile messages go on Line Printer 3420. Specifications:  Each user Job consists 
of a Job Card, a deck of binary cards and possibly a file card followed by a data deck.  i) The Job 
Card format is: [JOB, <Job name>,<tlme limit>,<memory limit>. where <Job name> is i to i0 alphanumeric 
characters, <time limit> is an octal number of clock cycles (~400000B), and <memory limit> is an octal 
number of words (~I4000B). 2) Each binary card has a 7-9 punch in column I and 15 words of binary code 
in columns 6-80, 5 columns per word in a simple column binary format. The 15 words of code found on each 
binary card should be read into the user's memory partition in contiguous 15 word blocks starting at 
RA. 3) The last binary card is followed either by a file card ([JOB or [END) or by the tray empty--end-of- 
file condition on the card reader. Cards following a [END are data for the preceding job. The next [JOB 
(or end-of-file condition) terminates the data record. There are two classes of monitor requests from 
user Jobs that must be processed (Refer to the revised page 2 of the }~S 5050 User's Manual). i. File 
Action requests: ~PR,~PW,I~R and I~W 2. System Action requests: END and ABT Instructions  Your monitor 
should read and crack the Job card (saving the job name, time limit and memory limit), load the user 
job, initialize the user's registers (including TL and UB with the job card values), and execute the 
user Job beginning at location RA + O. When the user Job terminates, repeat this process for the next 
 job; continue until the input queue is empty. User Jobs are to be terminated whenever they cause a 
fatal interrupt: 2,3,7,8,9,10,11,13 and 14 (whenever the K-fleld is not a legal File Action or System 
Action request function code). Print a message, giving the cause of Job termination, on the user's output 
and on the system dayfile. When a user job causes interrupts 0,1,4,5,6,12 or 14 (with a legal K-field 
function code), print an appro- priate message on the user's output and continue processing his Job. 
 In addition to the above messages, print messages on the user output and on the system dayfile when 
user Job loading begins and when execution begins. All messages are to include the current value of 
CK, the number of CP cycles the user's Job has executed (both values in octal), and the user's job name, 
his P-reglster and the instruction word that caused the interrupt. Dayfile an appropriate message when 
the last user has been processed. CPS 313 }R~S 5050 Assignment #4 Credit: I00 points Machine Due Date: 
Nov. 26, 1973 6:00 A.M. MONITOR 2.0  Multlprogramming Monitor with Variable Length, User Job, Memory 
Partitions Monitor 2.0 should load and execute user jobs from three input queues, assign the CPU to 
users on a priority basis, and process all user file action and system action requests. This assignment 
is a continuation of Monitor 1.0. Specifications  1. The new file action requests are CBR, CBW, and 
CBF. Monitor 2.0 should use the user's circular buffer pointers, FIRST, IN, OUT, and LIMIT, when honoring 
these requests.  2. Two new system action requests are MEM and RCL.  a) For the M~M request, 51ts 
0 -17 of the 004 instruction that caused the interrupt represent the new memory partition size requested 
by the user job. Your monitor is to print a message on the user's output which gives the current memory 
partition size and the requested size. Do not do any other processing of the MR request. b) For the 
RCL request, Monitor 2.0 should put the user job on the ready llst until its turn comes up again. Print 
an appropriate message on the user's output. 3. A new priority parameter ( 0 ~ p ~ 7 ) will be found 
on the Job card. The format is [JOB,<jobname>, <timelimit>,<memorylimit>,<priority>. The first three 
parameters are as defined in Assignment #3.  4. Assume all user file action and system action requests 
are made with recall.  5. The three input queues are found on  CPS313MONITOR2USERJOBONCARDREADER3430, 
CPS313MONITOR2USERJOBONCARDREADER5610, and CPS313MONITOR2USERJOBONCARDREADER5630.  6. All specifications 
for Monitor 1.0 still hold. Instructions  i. Read and crack the Job card of the first Job on each input 
queue. 2. Assign to each Job the amount of memory requested and load all three Jobs concurrently. (There 
will be some unused memory after the last Job.)  3. Give the CPU to the first Job to finish loading. 
 4. Whenever an executing user job incurs an interrupt, assign the CPU to the Job on the ready list 
with the highest priority. Resolve ties by giving the CPU to the Job which has been waiting the longest. 
 5. Whenever loading of a job has been completed, print (on the System Dayfile) a memory map consisting 
of the Job name, RA, and RA+UB of all Jobs currently in core.  6. All output for user Jobs from Card 
Reader ijk0 is to be printed on Line Printer iJK0, where K = k + i.  7. Whenever a user Job terminates 
for any reason, print a full, labeled register dump on the user's output along with his termination message. 
 8. Whenever a job terminates, zero out its area of core and bring in the pext job from the same input 
queue. (You may have to move one or both of the jobs already in memory in order to load the new Job.) 
After the new Job is in, memory should be compacted so that there is no more than 100B unused words between 
user Jobs. All other unused memory should be between the last Job and 17777B.  9. Whenever EOF - Tray 
~npty is reached on an input queue, compact memory and continue operating with the remaining queues. 
  APPENDIX 2. ~S 5050 Configuration CENTRAL PROCESSOR  38 Operating Registers i CENTRAL M~ORY  
8192 60-bit Words /Disk Spindle Device Numb e r ~ DATA CHANNELS Channel Numb er ] Disk I I L  I I 2 
U Tape Printer 3 I i 3420 [ 3430 I tf----Card Reader 5610 5630115640  I 'i i 5olo 6,,, I APPENDIX 
3. Student's Program for Assignment #2 H Z Q mZ Z~ O~ ~HO WHO~WO0 Z ~H~NOOZ ~OZ HH N ~ x~ ~ ~) ~4 OZ 
~ Z Z ~ j ~ O ~ Z :D I~ 0 I/) Z 0 ~ Z ~ ~ ~ ZO ~ ~0 0 O0 O ~4 n., -~ ~ 0 ~ ~ ~ I-- 0 X .J W ¢n g g ~ 
= ~X 0 ~ x ~ Off ~ ~ o~ WMMNNX ~OJ H @O@NXI~IMXIJ~ 0 0 0 0 N ~ N ~ ~ X X ~ M X X X ~ X LLI Z HZ ~ L~ 
-r I-- 0 (/I D. , 1@ If N ~ Z~ Z~ Z~ (/) I~I O O J N/ h. ~lr h- ~d f~) uO (M h- ~D ~D (:) c~ c~ ~ ¢:~ 
¢--j i~. r~ ~D 3 o~ U0 1.4 ~ q-~ N i-4 ~D ~0 1:3 rm --t" ~-4 141~ N.~l" ~N i-4 .,4 ¢::1 ~-I ¢~ N (:~ 
I ~) ¢:~ (M ~-I (M u0 N P) 3~ c:) ¢:) ~.~ ¢:) 14 I~ !-I c:)L~ c:~ ~4 N ~ .lr N 71 ,= v Z 0 7 ~ .J 
W H v O p Z~ 0 H OH ~ .J m o Q~E O N W o ~Z~O0~ ~ ~Z ~H~Z~H~ mw Z~ OOH Hm~ 1:1. ~ H ~ OZ~ ~W (,'1 I~ 
~ ~~Z~O ..1-o ~~~Z~ ~~Z~ Z~Z W ~Z~ ~0~ O~ ~H~ ~ ~Z~ ¢,=oW u1 ~Z~Z~ ~Z~ td~~ l.-~~H ~~0 W {~ UJ ..1 Z 
~0~0~ ~W~ I~JWO 0 UJO ::::) 0 0 .J -; :::) laJ 0"1" "~ :~ i~J(n ~" (/) J .J (/10 (n .J .J O O ") (n f3 
f.~ O t~ TO E ~JZ -r hi (n 0~ X I,-O '{E ~J 0( o N I-- LI.I X (n(/1 ~ ~ UJ v ~ ~r'l eD 41" ,r~ 0 ¢.)W 
g 0-~ I~l I.LI o v m rn 0 ~'-J W ..t" ~{ ¢..~ ~l..J o f~ I~, I--I I~ I~ ,, H O I.- n~ O r~ HH O ,.I I~-~1~1 
e. Nl--o ,,~ ¢E 4-" "1"1.-, 3:: f..) ~X~llX~X O~x~ X I 0 Z x~ 0~ ~ $-.m x ¢:~ x x ~ $-. 0,~ i-.. -'e 
i.. i-- n i.= $-- (~gm HO~ ~0 O.J m, (;X~~ T. ~ #=. == n,, -at mm, ~ -) b. ~ 0.. u.lm tU W ~" UJ IN" 
ILl ~4(MJ (~ tl.I 0 "r f..).~) H{:3 0~ J ...I H 0 f.~ ~ ~ 1.4 0,~ ~ P-l--l-I~00. T .I U.I LIJ Oo (/1in 
(,~ I ~C) (/) I--l--f) N f-) I.-. Z f~ :3:3 = O ~OO IH Ooo oo ~ooo~ooo O ~o~ NN NN -.1" ',It ~NN~NN N 
~°o NNo N N o ooo ooo oo ,,4,,-I q-4 72 Octal Dump of All Registers and Channel Status Produced by the 
HMS 5050 at Program Termination. ~ HMS 5050 TERMINATION DUMP ~ P 000046 IP 000055 AO 000000 XO 00000000000000077777 
IM 77777777777777700000 RA 000144 BZ 000016 ~1 000000 XZ 00000000000000000000 IR O00000000000tO000000 
LB 000000 B2 777776 A2 000142 X2 00000023200503110114 MP 00000000000010000000 UB 020000 B3 000000 A3 
000123 X3 00000000000000000000 CK 00000000000002004351 MS 400000 B~ 000000 A4 000000 X4 60000000000000000000 
WZ 02400000070000000000 TL 000000 B5 000000 A5 000000 X5 5777777777777777777~ Cl 00700000000000046000 
LR 000000 B6 000000 A6 000125 X6 00000023200503110114 LJ 000032 UR 000000 B7 000000 A7 020001 X7 00000000000000077777 
-CH- CCWAOR STATUS OP PR-CNT PR-AOR 01 00000000000000130000 00003000000000000000 02 00000000000000100000 
00000000000000000000 03 00000001400000000001 20000000000000000140 04 0000000000G000100000 00000000000000000000 
05 00000000000000100000 00000000000000000000 06 000000000000001]0000 00000000000000000000 Output Produced 
by Program Shown on Previous Pages. '~'**" LINE PRINTER 3420 CLOCK 0000000450 000035E001 0000474220 
00O0613454 0000732322 OOO1O51712 0001171146 0001310014 0001427366 0001546546 INTERRUPT TYPE WARNING FATAL 
FATAL FATAL WARNING FATAL FATAL WARNING FATAL SPECIAL 73 NUMBER 4 7 8 2 0 7 3 I 9 14 
			