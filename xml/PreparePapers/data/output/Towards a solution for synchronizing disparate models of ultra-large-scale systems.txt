
 James H. Hill, Jules White, Sean Eade, Douglas C. Schmidt Vanderbilt University Nashville, TN, USA {j.hill, 
jules.white, sean.eade, d.schmidt}@vanderbilt.edu ABSTRACT Traditional model-driven engineering (MDE) 
techniques rely on a paradigm where systems are developed using tightly coupled, monolithic modeling 
tools. Such monolithic modeling tools ad­dress many concerns, but operate largely in isolation of one 
an­other. As system size and complexity grow to become ultra-large­scale (ULS) systems, it is becoming 
clear that no single monolithic modeling tool can capture all the concerns of an ULS system. It is therefore 
essential that isolated modeling tools collaborate with each other when realizing ULS systems. This position 
paper presents our approach to facilitate collabora­tion between disparate MDE tools and their models. 
Our approach is based on model attributes, which are key/shared assumptions/­concerns about an ULS system, 
extracted from a source model and used to synchronize disparate models. Our approach is suitable for 
ULS systems because the independent relation created between the isolated models and the model attributes 
enables independent trade­off analysis between models, decentralized development of models, and integration 
with inconsistent and rapidly changing models that are ideal for a particular domain or feature of a 
ULS system. Categories and Subject Descriptors: D.2.12 [Software Engineer­ing]: Interpretability Data 
Mapping General Terms: Design, Documentation, Management Keywords: continuous model integration, model-driven 
engineer­ing, model synchronization, ULS systems 1. INTRODUCTION Key challenges of model-driven ULS system 
development. Traditional model-driven engineering (MDE) [14] has shown great promise when building medium-to 
large-scale systems [1,11]. MDE helps raise the level of abstraction of system design and allows developers 
to express their intent and work with artifacts that are more closely related to domain constructs than 
third-generation programming languages. MDE also alleviates many of the inherit complexities associated 
with building large-scale systems, such as documenting design speci.cations [12], verifying functional 
prop­erties [2], validating non-functional properties [6], or solving de­ployment &#38; con.guration 
(D&#38;C) problems [15]. Permission to make digital or hard copies of all or part of this work for personal 
or classroom use is granted without fee provided that copies are not made or distributed for pro.t or 
commercial advantage and that copies bear this notice and the full citation on the .rst page. To copy 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior speci.c permission 
and/or a fee. ULSSIS 08, May 10 11, 2008, Leipzig, Germany. Copyright 2008 ACM 978-1-60558-026-5/08/05 
...$5.00. Figure 1: Intelligent Transportation System For example, an intelligent transportation system 
[4], as shown in Figure 1, that coordinates its operations with many intersections in a city may have 
a UML model of the system s conceptual im­plementation (e.g., classes, sequence, and use-case diagrams), 
a formal model to verify functional properties (e.g., deadlock and state reachability), and a system 
execution model to validate non­functional properties (e.g., worst-case system execution time). More­over, 
different portions of the system may be developed by different groups dispersed throughout a region, 
which implies different possibly con.icting underlying concerns and assumptions of the system under development. 
If system developers want to leverage a new model (such as a D&#38;C modeling language) or implement 
new functionality (such as evaluating the effect of checkpointing the system s state), it is imperative 
that the ULS system s models collaborate to ensure each addresses their speci.c problem with the same 
underlying system assumptions and remain appropriately consistent with one another. Maintaining consistency 
between models is necessary even for small-scale systems because a single model of a system is rarely 
suf.cient to model all relevant aspects of a system. For small­scale systems it is feasible to maintain 
this consistency manually. Such an approach is problematic for ULS systems, however, since they are created 
by many developers, working in different organiza­tions, distributed across many regions and domains, 
using multiple disparate MDE techniques and tools. When developers maintain consistency between these 
different modeling boundaries manually they often make assumptions about the ULS system to map the conceptual 
model to a concrete model that .ts within their span of interest/responsibility. For instance, in our 
intelligent transportation system example the UML model and the system execution model may have different 
as­sumptions about how checkpointing is implemented, or the formal model and system execution model may 
differ in their checkpoint­ing frequency assumptions. These different assumptions also will affect how 
the D&#38;C model deploys the realized ULS system. In particular, these assumptions create diverging 
and inconsistent so­lutions between models that need to collaborate to realize a work­ing ULS system, 
such as the intelligent transportation system illus­trated in Figure 1. Solution approach . Model synchronization 
via model in­terfaces and attributes. To address the problem of collaboration and synchronization between 
models of ULS systems, develop­ers need new techniques that will allow disparate MDE techniques and tools 
to communicate seamlessly when creating and deploying ULS systems. This paper describes our approach 
enabling synchro­nization between disparate models of ULS systems. Our approach uses model attributes, 
which are key/shared ass­umptions/concerns about an ULS system, model interfaces and con­nectors, which 
are used to described and insert/extract the model attributes into/from their target/source model, respectively. 
Our ap­proach also allows the seamless integration of new models (i.e., model plug-and-play) so they 
can collaborate with existing dis­parate models of the ULS system. Our initial observations show that 
this approach enables independent trade-off analysis between models, decentralized development of models, 
and integration with inconsistent and rapidly changing that are ideal for a particular do­main, or feature, 
of a ULS system. Paper organization. The remainder of this paper is organized as follows: Section 2 elaborates 
our approach to model synchroniza­tion for ULS systems; Section 3 describes initial results realized 
by our approach; Section 4 compares our approach with related work; and Section 5 presents concluding 
remarks and future research di­rections. 2. SYNCHRONIZING DISPARATE MODELS OF ULS SYSTEMS In Section 
1, we discussed the challenges of synchronizing dis­parate models of ULS systems. To address these challenges, 
a methodology is needed that allows disparate models which can be dispersed widely throughout regions 
to exchange common knowl­edge, such as functional (e.g., checkpointing frequency), imple­mentation (e.g., 
portions of the systems affected by checkpointing implementation) and deployment (e.g., target hardware/software) 
requirements. Such a methodology should provide the following features: A database that contains a disjoint 
subset of model attri­  Figure 2: Conceptual Overview of ULS System Model Synchro­nization (1) are stored 
in well-de.ned location(s), such as a database or repository. Due the scale of the system, it is possible 
to replicate attribute database(s) as shown in Figure 2 so models use an appro­priate database, e.g., 
one closest to their location. Each attribute database contains a disjoint subset of properties, such 
as properties 3. Figure 3: Model Synchronization for Intelligent Transporta­tion System Trade-off analysis 
of ULS system properties. Model attributes are assumptions about the ULS system s properties between 
mul­tiple disparate models. Before system developers use one or more models, they must be updated with 
the latest properties from the model attribute database (e.g, the attribute repository in Figure 3). 
Once the models are updated, they can be evaluated to understand how the updated assumptions affect the 
current model, thereby en­abling system developers to conduct trade-off analysis on key ULS system properties, 
such as understanding how different checkpoint­ing frequencies affect end-to-end worst case execution 
time. Such trade-off analysis properties can be written to the model attribute database via the model 
connectors to preserve the learned facts about the ULS system, e.g., the intelligent transportation system 
in Figure 3, and used by other disparate models. Partial knowledge of model (and system) to achieve synchro­nization. 
A challenge of using disparate models is maintaining consistent information between them. In many cases, 
one model may only need a fraction of the information in another model, i.e., a partial view of the system, 
to maintain a consistent view of the entire system. By using model attributes we alleviate the complex­ity 
of needing complete knowledge of a model (or the system) to synchronize disparate models. Since each 
model synchronizes it­self based on its desired model attributes, which are speci.ed via model connectors, 
it only reads a subset of the model attributes stored across all attribute databases to maintain a consistent 
view of the system. Automation of the model synchronization process. Each model interface determines 
what model attributes to read/written to/from the attribute repository. When the model interfaces and 
connectors and the actual models are stored in a well-known location for inte­gration, such as a repository 
and we assume that no two mod­els can write the same model attribute we can use topological sort [13] 
to build a dependency graph between each model based on their model attributes. This graph determines 
the required or­der that we must evaluate each disparate model to produce output model attributes needed 
as input model attributes for other models. By leveraging this capability, it should be possible to automatically 
synchronize disparate models, ensure they maintain a consistent view, and validate them based on the 
common assumptions speci­.ed by model attributes. Support for decentralized MDE. As discussed in Section 
2, model attributes are stored in a database, which could be repli­cated. These attributes can be spread 
across multiple locations, where each location stores a disjoint subset of the ULS system s model attributes. 
The model connectors, however, are responsible for resolving the actual location of a model attribute. 
Based on our model attributes and model connectors, we provide a decentralized MDE-based approach to 
synchronizing disparate models. 4. RELATED WORK This section compares our work on synchronizing the 
assump­tions between different models of a ULS system with related work on model synchronization. Prior 
work on modeling has largely fo­cused on small-scale systems where a single model or tool is suf­.cient. 
Since ULS systems do not .t this single model/tool mold, we do not compare with these existing monolithic 
modeling tech­niques. Zave et. al [16] describe techniques for collaborating between disparate models 
in the domain of formal speci.cation and veri.­cation of programs. Their solution mapped all models to 
a com­mon simpli.ed predicate logic similar to the MetaObject Facility for domain-speci.c modeling languages. 
Although this approach is valid, it means all disparate models have complete knowledge of the entire 
program, which is not feasible for ULS system models because they span many domains. Our approach differs 
from Zave et. al because we do not map the model attributes to a common rep­resentation. Mapping model 
attributes to a common representation is particularly hard when disparate models of ULS systems have 
overlapping concerns, but disjoint semantics, purposes, and under­lying formalisms. Moreover, our approach 
alleviates the need for disparate models to have complete knowledge of the system and focuses on attributes 
(or assumptions) that are necessary for it to solve its problem. The (Web-based) Open Tool Integration 
Framework (OTIF) [8] is a tool that provides collaboration between disparate models. OTIF s uses graph 
transformations and rewriting techniques to transform models between isolated tools, which is more of 
a point-to-point solution. Our solution approach is different in that we do not per­form model transformations 
and rewriting techniques to achieve model synchronization. Instead, we make model attributes, which are 
common assumptions about the system, the primary artifacts for synchronizing disparate models. Moreover, 
OTIF s solution im­plies that models have a complete view of the system and are tightly coupled; whereas, 
our solution approach implies that models have a partial view of the system, i.e., the minimal knowledge 
necessary to synchronize disparate models, and are loosely coupled. 5. CONCLUDING REMARKS As ULS systems 
become more prevalent, multiple models will be needed to express different system design concerns. To 
ensure that each model has a consistent view of the system s assumptions, disparate models will need 
to exchange information. This paper described our solution approach to enable disparate models to col­laborate, 
which is based on storing common assumptions about the system in model attributes and using model interfaces 
and connec­tors to manage model attributes for individual models. Our initial results indicate that this 
approach enables disparate models to col­laborate without needing complete knowledge of the entire system. 
The following list summarizes our future research directions for enabling model synchronization between 
disparate models in ULS systems: Automatically maintaining consistency between models sh­ould ideally 
occur continuously throughout the development lifecycle of the system. Our future work therefore involves 
understanding the bene.ts of using continuous integration environments to enable the continuous model 
integration.  When synchronizing many disparate models there will be times when different models will 
have con.icting results or assumptions based on the evaluation of their subset of model attributes. Our 
future work therefore involves understanding how to locate such problems and how to resolve them both 
autonomously and manually.  There can be use cases where the dependencies between model attributes form 
a cyclic graph, such as a feedback loop be­tween two models. Our future work therefore includes un­derstanding 
how to handle such use cases to prevent the syn­chronization process from entering in.nite loops.  Acknowledgements 
This work was funded in part by Lockheed Martin Advanced Tech­nology Labs in Cherry Hill, NJ. We would 
particularly like to thank Rick Buskens, Edward Jones, and Srini Srinivasan for their help on this project. 
 6. REFERENCES [1] K. Balasubramanian, A. Gokhale, J. Sztipanovits, G. Karsai, and S. Neema. Developing 
Applications Using Model-Driven Design Environments. IEEE Computer, 39(2):33 40, Feb. 2006. [2] G. Behrmann, 
A. David, and K. G. Larsen. A tutorial on uppaal. In SFM, pages 200 236, 2004. [3] M. Chechik and A. 
Wong. Formal Modeling in a Commercial Setting: A Case Study. Journal of Systems and Software, 60(1):59 
82, 2002. [4] S. Fritsch, A. Senart, D. C. Schmidt, and S. Clarke. Time-bounded Adaptation for Automotive 
System Software. In Proceedings of the Experience Track on Automotive Systems at the 30th International 
Conference on Software Engineering, Leipzig, Germany, May 2008. [5] E. Gamma, R. Helm, R. Johnson, and 
J. Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, 
MA, 1995. [6] J. H. Hill, J. Slaby, S. Baker, and D. C. Schmidt. Applying System Execution Modeling 
Tools to Evaluate Enterprise Distributed Real-time and Embedded System QoS. In Proceedings of the 12th 
International Conference on Embedded and Real-Time Computing Systems and Applications, Sydney, Australia, 
August 2006. [7] S. E. Institute. Ultra-Large-Scale Systems: Software Challenge of the Future. Technical 
report, Carnegie Mellon University, Pittsburgh, PA, USA, Jun 2006. [8] G. Karsai, A. Lang, and S. Neema. 
Design Patterns for Open Tool Integration. Software and Systems Modeling (SoSym), 4(2):157 170, 2005. 
[9] G. Kiczales, J. Lamping, A. Mendhekar, C. Maeda, C. V. Lopes, J.-M. Loingtier, and J. Irwin. Aspect-Oriented 
Programming. In Proceedings of the 11th European Conference on Object-Oriented Programming, pages 220 
242, June 1997. [10] A. Ledeczi, A. Bakay, M. Maroti, P. Volgysei, G. Nordstrom, J. Sprinkle, and G. 
Karsai. Composing Domain-Speci.c Design Environments. IEEE Computer, pages 44 51, November 2001. [11] 
G. Madl and S. Abdelwahed. Model-based analysis of distributed real-time embedded system composition. 
In EMSOFT 05: Proceedings of the 5th ACM international conference on Embedded software, pages 371 374, 
New York, NY, USA, 2005. ACM Press. [12] Object Management Group. Uni.ed Modeling Language (UML) v1.4, 
OMG Document formal/2001-09-67 edition, Sept. 2001. [13] D. J. Pearce and P. H. J. Kelly. A Dynamic Topological 
Sort Algorithm for Directed Acyclic Graphs. Journal of Experimental Algorithmics (JEA), 11:1.7, 2006. 
[14] D. C. Schmidt. Model-Driven Engineering. IEEE Computer, 39(2):25 31, 2006. [15] J. White, D. C. 
Schmidt, and A. Gokhale. Simplifying autonomic enterprise java bean applications via model-driven development: 
a case study. Journal of Software and System Modeling, 2007. [16] P. Zave and M. Jackson. Where Do Operations 
Come From?: A Multiparadigm Speci.cation Technique. IEEE Transactions on Software Engineering, 22(7):508 
528, July 1996. 
			