
 MVS in the Classroom Edith A. McCharen Northern Illinois University DeKalb, Illinois 60115 ~ntroduction. 
 The design principles of operating systems have been isolated and comprehensively expounded in texts 
that have appeared in the last decade which are suitable for either an advanced undergraduate or low-level 
graduate course. The topics covered are those listed in the course outline for CSI0, Operating Systems 
and Computer Architecture II in Curriculum '78 (I). Generally one of two approaches is taken. The 
first is that the computer architecture already decides many of the fundamental policies of the operating 
system which it is to support. The second is that an operating system must solve certain allocation 
and scheduling problems in order to provide a user with a variety of services and to manage its own 
resources efficiently, and that once identified, solutions to the problems must be implemented on some 
 computer architecture. In either case the text usually culminates with a limited project in which 
students design and implement some type of multiprogramming operating system. Sketchy case studies 
of modern large-scale commercial operating systems are possibly included in these texts. The value 
of a compre- hensive case study being the source material for a course on operating system principles 
should be reevaluated. The student can be exposed to a wider variety of allocation issues and feasible 
 solutions than would normally be encountered in a typical class project. Moreover, current commercial 
operating systems are conforming to methodological principles of integrity and of coherency of design. 
They exhibit structure lacking im operating systems developed in the past. Just such a graduate-level 
course, MSCS 567, has been taught at Northern Illinois University, DeKalb, Illinois, for the last two 
 years. This report outlines the approach taken to present IBM's Multiple Virtual Storage Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. "~- 1980 ACM 
0-89791-013-3jS0j0200/0081 $00.75 Operating System (MVS) in this setting. Course Objectives. The focus 
of the course is on the design philosophy and operating system principles that are illustrated in the 
MVS software architecture. The course should fulfill the promise of its title, Applied Systems Programming, 
and at the same time serve as a suitable alternative to the more theoretical graduate-level course, MSCS 
568, Advanced Systems Programming, for which (2) has been the standard text for several semesters. The 
choice of MVS is in part motivated by the educational goals of the curriculum (3): that we essentially 
prepare our students for an industrial data processing environment where IBM software is very prominent. 
Continuing dialogue with industrial representatives also indicated this direction was a worthwhile one. 
In addition, MVS exhibits good localization of function in its concept of managers and global and local 
resources so that implementation details and exigencies of performance do not overshadow its basic design 
objectives. (4) Reeuired Background. In a prerequisite course, MSCS 468, the students have written 
a uni-programming operating system providing minimal I/O services as well as a multiprogramming assignment 
in which processes synchronize and communicate with SEND and RECEIVE primitives resembling those of 
P. B. Hansen. These projects are written in BAL and execute under OS/MVT. The lecture material presents 
OS/MVT architecture as seen by the applications programmer. Therefore, the student has already been exposed 
to the concept of an operating system as a manager, a scheduler and a supporter of services. The management 
strategies for resources local to a job in OS/MVT and user services carry over to MVS with little change. 
 Course Content and Organization. Required source material consists of the manual OS/VS2 ~ Overview 
to provide a framework for the course and to introduce terminology and the fundamentals of a multiple 
 virtual storage environment, and the application programmer's version of the manual OS/VS2 System 81 
 Programmin~ Library: Debu~in~ ~andbook to supply functional descriptions of the control blocks by which 
IIVS manages its resources. The inadequacy of text materials has lead to the in- house development of 
course notes based on the OS/VS2 System Logic Library manuals. The chapter titles indicate the scope 
of these notes: I. Introduction and Review. II. MVS Concepts. IIl. Address Space Management. IV. Task 
Management and Program Hanagement.  V. Virtual Storage Management.  VI. System Resources Manager and 
Swapping Decisions. VII. SRII's Workload Manager and the IPS. VIII. Paging and Swapping. IX. Input-Output 
Supervision.  X. Miscellaneous Topics: Recovery and and Termination Management, Multipro- cessing, Subsystems, 
Systems Genera- tion and Initialization.  The course is primarily concerned with global resource management 
in view of its prerequisite, and MVS is an especially rich source of scheduling and allocation algorithms 
in this area. For example, there is much diversity in its memory management policies. One global virtual 
memory partition is handled statically and another dynamically. Real storage is managed with both paging 
and segmenting techniques. The working set concept and memory hierarchy management strategies are given 
practical interpretations. Auxiliary memory management illustrates the trade-offs between performance 
and economy of mechanism. As another example dispatching in MVS under the influence of the System Resources 
Manager combines most of the standard work-scheduling disciplines. Since MVS is designed to execute in 
a multiprocessing environment, coficurrent programming problems at both the software and hardware level 
are naturally embedded in the framework of the system. Recovery and input- output supervision, important 
practical considerations usually given rather cursory treatment in most theoretical texts, can be covered 
more thoroughly. Approximately 30 hours of lectures based on the course notes are presented. The class 
hours remaining in the semester are used for tests and discussions of homework assignments. The latter 
consist primarily of the 10 to 20 exercises at the conclusion of each chapter of the notes. Half of these 
questions are intended to isolate design issues in resource allocation, protection, synchronization and 
communication. The other half involve tracing and interpreting control block structures in a stand-alone 
dump of an actual MVS system. These exercises are carefully tailored to the dump so as not to be a tedious 
chasing of hexadecimal-valued pointers, but a tool to reinforce a student's comprehension of the mechanisms 
implemented by the operating system. Optionally a five to ten page paper is assigned to compare design 
alternatives in a particular area or summarize research results that foreshadowed in specific policies 
being adopted in MVS. Summary. In summary a course which teaches operating system principles starting 
from their implementation in a modern large-scale operating system can have as much educational value 
as a more traditional, theoretically oriented approach. Moreover, such a course is especially well suited 
to a computer science curriculum that is sensitive to the needs of industry. References. I. Richard 
H. Austing et al., "Curriculum '78: Recommendations for the Undergraduate Pro- Undergraduate Program 
in Computer Science," CACM, Vol. 22, No. 3, Mar., 1979. 2. Alan C. Shaw, The Logical Design of Oper- 
 atin~ Systems, New Jersey: Prentice-Hall, Inc., 1974.  3. Carol Chrisman, "A Pragmatic Undergraduate 
 Curriculum: Description and Rationale," to appear.  4. Jeffrey P. Buzen, "A Queueing Network Model 
for MVS," ACM ComDutin~ Surveys, Vol. 10, No. 3, Sept., 1978.  82 
			