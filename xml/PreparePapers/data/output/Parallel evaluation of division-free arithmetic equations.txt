
 ¢ PARALLEL EVALUATION OF DIVISION-FREE ARITHMETIC EXPRESSIONS S. Rao Kosaraju Dept. of Electrical 
Engineering and Computer Science The Johns Hopkins University Baltimore, Maryland 21218 Abstract Restructuring 
of arithmetic expressions in which the allowable opera- tions are addition and multiplication is considered. 
It is shown that any such expression of size n can be restructured into an equivalent expression of depth 
2 log n. For expressions with the addi- tional constraint that at least one oper- and of every multiplication 
is a constant, the corresponding depth bound is log n + 2/log n + 0(i) . For the class of poly- nomials 
a lower bound of log n+/2 log n - o(/~-g n),which essentially matches the known upper bound, is established. 
 I. Introduction The problem of converting arithmetic expressions (a.e.'s) into equivalent ones of 
reduced depth is of considerable impor- tance to parallel processing [2,3,5-10]. Here we consider a.e.'s 
in which the allowable operators are '+' and '*' We assume that each operator is associative and commutative 
and also that '*' distri- butes over '+' Additive identity '0' and multiplicative identity 'l' are allowed. 
We show that any such a.e. of a. 'Supported by NSF Grant #DCR-8506361 Permission to copy without fee 
all or part of this material is granted provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1986 ACM 0-89791-193-8/86/0500/0231 
$00.75 size n can be restructured into an equivalent a.e. of depth 2 log n , improv- ing the previously 
realized and conjec- tured best bound of 2.08 log n [7]. We also show that any a.e. with the addi- tional 
constraint that at least one oper- and of every '*' is a constant, can be restructured into an equivalent 
a.e. of depth log n + 2 i~ n + 0(i) This im- proves on a conjecture of [9]. A special case of the above 
constrained a.e.'s is the class of polynomials over one variable. For this class the best known upper 
bound for the depth is log n+/2 log n [3,6,8]. For this problem we establish a lower bound of log n +/21og 
n -o(/~-g n settling an open problem of [3]. Throughout, all the log's are to the base 2 . We don't 
make a distinction between an a.e. and its tree representa- tion. The size of a tree T , denoted ITI 
, is the number of its leaves. In a tree for any node X , we denote the sub- tree with root X by T X 
and the left and the right subtrees of X by TXZ and TXr , respy. 231 The following 2 well-known lemmas 
 E 1 play a critical role in the restructuring Ss S" procedures.  %: \ Lemma i: In any binary tree 
of size n , for any m < n , there exists a node X Q s.t. ]TxI ~m , ITxz I < m , and rTxr [ < m :/.5,<: 
In addition ITxI < 2m 9 ! Xl ~" + \ f (Here we say that X is chosen with ilk :¢ / N "" ~4 f ./ ~ , 
. + ~ Ikx2 x3.dsSx/ ~ x9 '~. cutoff = m) "----" L ....... "* E 3 -\ Lemma 2: If E 1 is any subtree 
of E ix/ \~ x then E =A*Ei+B , where A is the product 6 ~ , %~ 8 ,~ of the subtrees attached to the 
'*' nodes --E 5 on the path from the root of E 1 to the Figure 1 root of E and B = E[Ei÷0] is E with 
 ! ! ! ! v E 1 replaced by 0 E = El+II2*E2+~3*E3+~4*E4+~5*E l= (Here we say that E is expanded w.r.t. 
= Xl0*(Xl*X4)+Xl0*X4*(x2+x3)+Xl0(X5*X9)+ E 1 ) Xl0*X9*Xs*(X6+X 7) II. Simple Arithmetic Expressions 
 ! Let us denote any a.e. in which for (Note that El=0) every '*' node one of the operands is a We 
generalize lemma 1 to the following leaf as a simple a.e. We show below that form. any simple a.e. can 
be restructured to an Lemma 4: For any tree E of size n , a.e. of depth log n+2 i~ n + 0(i) As and 
for any 2<c<n , a set of edges can a consequence of lemma 2 we can easily be selected s.t. their removal 
from E prove the following lemma. results in a forest of at most: c trees Lemma 3: For any tree E , 
if the nodes 2n in which each tree is of size < --c-i " of E are partitioned into trees (In the size, 
only the leaves of E are m ! Ei,...,E m , then E = [ ~.*E. in counted.) i=l l 1 ' which 7. is the 
product of the '*' sub- 1 n Proof: Apply lemma i for m -" c-i and trees on the path from the root of 
E i to find a node X s.t. 2m > IT}i] _> m . the root of E , and E .I is E with all 1 1 Select the 
edge between X and its its subtrees replaced by 0 . father, and include T x in the forest. For example 
for the partitioning The remaining tree is connected. Repeat shown in Figure i, 2n the process on 
it if it is of size > c----~ i (a slightly modified form of lemma 1 is Remarks 1 and 2 each E is a 
simple a.e. i needed) . On termination, every tree in Now restructure E as shown in Figure 2. the 
forest is of size in between n c-i 2n and Since the total number of c-i " leaves of E is n , there 
are at most c-i such trees. These trees and the left-over tree make at most c trees. The above lemma 
is a strengthened form of a similar result in [4] (which has a bound of 3n instead of 2n T c~Z ) The 
following observations hold for simple a.e.'s. Remark i: In every simple a.e., every subtree is a simple 
a.e. Remark 2: In every simple a.e., replacing any subtree by 0 results in a simple a.e. Theorem i: 
Every simple a.e. of size n can be restructured into an a.e. of depth < log n+ 2 l~g n+ d , for some 
constant d . Proof: We prove this by induction on n . For small values of n , a suitably large d satisfies 
the basis. Assume that the claim holds for 1,2 ..... n-i . Let D(n) be the worst case depth needed for 
simple a.e.'s of size n . Let E be any simple a.e. of size n . Select c = 22 l~n (more precisely 2~2 
lo~g nl) and apply lemma 4. Let the resulting forest of simple a.e.'s be Ei,...,E m , where m!22/log 
n . For this partitioning of E , apply lemma 3. Note that for each E. , iE'il <- 2n l 22/log n -1 and 
~i is a product of variables. By 233  +/+\  /\ /+\ D / \ . \ -v-+X--i-\ ..... *\/*\ ! . /*\ D ! 
~l E1 ~2 E2 ~m E m depth d = log 22 l~n=2vlogn Figure 2 Realize each ~i by a binary tree of !  depth 
~ log n , and realize each E i by 2n recursion. Hence D(n) < max{D( __ ) , --22/iog n-i log n } + 1 
+ 2/io-g n . Now substituting 2n the claimed inequality for D( ), 22/l~n -i we can prove that D(n) ~log 
n+2/~-g n+d . In [9, p.549] if we replace 'v' and '. ' by '*' and '+' , respy., each E. 1  becomes 
a simple a.e., and for such an E i the conjectured lower bound was 1.81 Io~ n -o (I) III. Lower Bound 
for Polynomials  In this section we establish that any n-I i restructuring of the polynomial ~ aix 
i=0 will result in a depth of at least log n+ /2log n -o(Vlog n) Since the known upper bound for this 
polynomial is log n+/2!ogn , our lower bound is essen- tially optimal. Note that this polynomial can 
be represented, by Horner's rule, as a simpl~ a.e. of size 2n-i . Hence our lower bound also holds for 
simple a.e.'s. Consider any polynomial n-i i p(x) = ~ b. x 3 s.t. all the i's are j=0 J ] distinct nonnegative 
integers. Let n denote thm size of the polynomial. (Recall that degree of p(x) is the maximum i.) 3 Let 
the minimum depth needed to realize p(x) be D(p) Let D(n) = min D(p). p of size n Theorem 2: For any 
n , D(n) > log n + /21ogn -(logn)%-6 for some constant 6. Before we prove this theorem, we observe a 
few properties. Remark 2.1: If the degree of p(x) is m , then D(p) > logm . That is, any tree that computes 
p(x) must have height > log m . Remark 2.2: For any i , if x i term does not exist in q(x) and in r(x) 
, i then x term cannot exist in q(x)+r(x) . Remark 2. 3: In any restructuring of p(x) , if (q (x) *r 
(x) ) is a subtree, then at least one of q(x) and r(x) must be a monomial, and one of q(x) and r(x) has 
the same size as the polynomial q (x) *r (x) (Recall that minus is not defined. If r(x) is a monomial, 
then size of q(x) = size of q(x)*r(x)) Proof of Theorem 2: The proof is by induction on n . For small 
values of n , the basis holds if 6 is sufficiently large.  Assume that the theorem holds for any n-i 
i. size < n . Consider any p(x) = X b.x 3 j=0 3 of size n . Note that there are at least 234 n distinct 
j's s.t. each n log n i > n ] -- log n Consider any restructured tree, T , of p(x) which is of minimum 
depth. In T , mark all '*' nodes each of which has no ancestor '*' node. Let these nodes be Pi,P2,...,P 
s , and let each Pi be at a depth d i , (depth counts the number of ancestor nodes). Since no P. is an 
 l ancestor of another P , by K:caft's 3 inequality [i], we have S [ ! <i [I] i=l 2di- If some d I 
 > _ /2 log n and Tp. i (subtree with root P ) computes a poly- i nomial of degree n ' then by Remark 
 _> log n 2.1, the height of Tp is ~ log(~--~)= 1 log n- log log n . Hence height of T is /2log n 
+ log n- log log n > log n+/2 log n (log n )% - 6 Otherwise, if any d. > /]~ log n then i -- Tp. must 
compute a polynomial of degree i n < logn In addition, by Reraark 2.2, no i '+' can realize an x term 
that is mis- sing in both of its subtrees. Hence each of the n -n terms of the form i. log n b 3 x 
3 i > n must be realized ' j --log n ' by a Tp with d 1 < /2 log n . If the 1 n number of terms 
each of degree > --log n n n---- realized by each Tp. is < log n , 1 2di then the total number of 
terms, each of n realized by T is degree >- log n ' n S n- < ~ ( log n) < n-n (by I) i=l 2di --log 
n  Hence there exists a P s.t. l Theorem 3: Any a.e. of size n can be n n--- di < /2 10g n and Tp. 
realizes _> lOgd. n z 2 1 terms (even if we neglect the terms each of degree < --~)n In addition, by 
log Remark 2.3, one of the two subtrees of n n--- log n Tp. realizes ~ d. terms. Thus 1 2 1 n n- 
 log n  D (n) >_dI + 1 + D( d ) for some 2 1 < /2 log n  di n n--- log n Now assuming inductively 
that D( d. ) 2 1 satisfies the claimed inequality, we can prove that D(n) > log n+ /2 log n - (log n) 
%-6 holds for any n >_ no , where no is some constant. Hence 6 can be chosen so that D(n) > log n +/2 
log n - (log n) %-6 holds for any l_<n<n0 . IV. Restructuring Arithmetic Expressions In this section 
we consider the restructuring of any a.e. The previous best upper bound [7] for the restructured n where 
B is the posi- depth is log B ' tive real root of the equation z4=2z+l . This bound is approximately 
2.08 log n , which was conjectured to be optimal [7]. We establish here that the bound can be reduced 
to 2 log n . Throughout this section, in any tree, the operator of node X is denoted by eX Since each 
of '+' and '*' is commutative, wlg, we assume that for every X , ITxzI ~ ITxr I restructured to an expression 
of depth 2 log n + d , for some constant d . Proof: The proof is by induction on n . The result holds 
for small values of n if d is chosen suitably large. Assume that the theorem holds for sizes < n and 
let E by any a.e. of size n . Define any expression E1 to be of effective size m if E1 can be restructured 
into an expression of depth< 2 logm + d . Note that, by inductive hypothesis, any a.e. of size an, ~ 
< 1 , is of effective size an . Note also that we need to prove that E is of effective size n . We can 
easily observe that if E1 and E2 are each of effective size an , ~ < 1, then ElSE 2 , e £ {+,*} , is 
of effective size /2~n , since 2 log an + d + 1 < 2 log(~2~n) + d . In fact we can generalize it to: 
 Lemma 3.1: If a tree T can be restruc- tured into a tree T "composed" of some number of subtrees, say 
T1,...,T m , s.t. if T. is at depth d. (from the root of 1 1 T) and is of effective size sin ' ~i < 
i, for i=l,...,m , then T is of effective m d. size max(/2) 1~.n . (Here "composed" i=l i means that 
every leaf of T is a leaf of some T.) i Now we resume the proof that E is of effective size n . In 
E choose node P , by applying lenuna i, with cutoff = n/2 .  cute  E = n[nl- 1 °~)~Q @Q Figure 3 
n  Case i: ITpiI ~ 2/2 Applying lemma 2, expand E w.r.t. Tp resulting in  E = A* (Tpz 8p Tpr) + B 
, n in which I AI ! n/2 ' IBI ! n/2 , ITp£1 ! 2/[ n  and ITprl ! 2/7 " Hence, by lemma 3.1, E is of 
effective size n (e.g. TpZ is n at depth 3 and is of size < (/~)3 Case 2: iTp~ I > n and @p='+' 2~ 
Expand E w.r.t. Tp£ resulting in E = A*Tpz+B , n in which IAI < ~ (since A excludes Tp~ , n n < n 
 ITpz I <_ ~ , and IBI < n- 2/2 ~. Hence, by lemma 3.1, E is of effective size n . Case 3: iTpz [ > 
n and 8 = '*' 2~ P  By applying lemma l, choose in Tp£ node Q with cutoff = n(l - i--) ~2 Case 3.1: 
@Q = '*' Then expanding E w.r.t. TQi , we have E = A*TQz+B , in which IBI < n-n(l- 1 )= n --/2 ~2 
A*TQ£ is a product of terms in which every term n is of size ~ ~ and at most one term is of size > 
n_ . Hence, by lemma 3.2 2/2 (proved later on), A*TQ£ is of effective size n_ . IIence, by lemma 3.], 
E is of /2 effective size n . n Case 3.2: OQ: '+' and ITQi I <_ ~ . Expand E w.r.t. TQ , resulting 
in E = A*(TQz 8Q TQr) + B . Note that IBI ~ n-n(l-) = -~ /~ . Since each of TQi and TQr is of effective 
size n , by lemma 3.1, TQ% @Q TQr is of n n effective size ~ /2 = Note that A 2/~ is a product of 
terms in which every term n is of size ! ~ and at most one term is of size > n . In addition, 2/2 
~ n IAI £ n-n(l- )- /~ . Hence, by lemma 3.3 (proved later on), A*(TQ% @Q TQr) is n of effective size 
< --= . Hence, by lemma  --/2 3.1, E is of effective size n . n 9 Case 3.3: @Q = '+' and ITQz I > 
 By lemma 3.4 (proved later on), (TQ£ + TQr) can be restructured into (T +T') in which T is of effective 
size n and I T' I < ITQI - n(l-/i ) After 2/2 I making this restructuring, expand the resulting E 
w.r.t. T : E=A*T +B . Note that IBI < rl-n(l-~)-~ . As in case 3.2, A*T can be shown to be of  effective 
size ~n . Hence, by lemma 3.1, E is of effective size n . Now we state and establish lemmas 3.2, 3.3, 
 3.4.  Lemma 3.2: Let E = El*E2*''" *Em in n which [El ~ n, JEll ~ ~ and each IEil ^ n  2~2 ' i_> 
2 Then E is of effective size -q- /g Proof: Repeatedly "combine" any 2 product terms into one if the 
combined size is n < ---: (By "combine" we mean that the pro- -2/2 duct of those 2 terms is considered 
as a single term). Repeatedly combine any term with E 1 if the new E 1 is of size < n/2 . Wlg, let the 
resulting form be E = Ei*E2*...*E m , with IEll ~ IE21 ... _> IEml Note that lEm-l] > 4/3n ; n otherwise 
IEml ! ~ and Em_ 1 and E m can be combined into one term. If m > 5 , n then since IEiI + IEml > ~ , 
IE21 + iE31 > n and IEm_iI > n 2~ 4/2 we have i~ n n n I > ~ + + -- > n , a contradiction. --2/2 4/2 
n Hence, m~4 . Since [Eli ~ ~ and IE21 n _ , m must be > 3 . Now restructure 2/2 as follows: = Ei*(E2*E 
3) if m= 3 , and : Ei*(E2*(E3*E4)) if m= 4 If m= 3 , then IEiI < n/2 , ]~21 < n 2/3 ^ and iE31 < 
n Hence, by lemma 3.1, E --2/2 " n  is of effective size /-~ . If m= 4 , n then since IEi] + IE41 
> ~ , we have IE31< - ]E21 + ]E31 n-n/2 n < -n addition 2 --2 4 n n IE41 < [E31 <_ ~ . Also IEiI 
<_ ~ and ^ n Hence, by Lemma 3.1, E is  IE21 ~ 2~ n of effective size --~ .  /2 [] ^ Lemma 3.3: 
Let E = T*El*E 2 * ... *Em in which T is of effective size n 2/2 ' n n i > 2 and IEiI _< ~ , each IEil 
--< 2/2 ' --' n E is of IEi*E2*...*Eml ~ /--~ . Then n effective size -- Proof: Repeatedly combine 
any 2 E I .V s into one if the combined size is < n -2/2" Repeatedly combine any E i with E 1 n if 
the new E 1 is of size j ~ . Wlg, A let the resulting form be E=T*Ei*E 2 ... *E m , where IEi[ ~ IE21 
~...~ IEmI If m~ 4 , then since IEiI + IEml > n n and IE2[ + E31 > = , we have 2/2 n n n IEi*E2*...*Eml 
> ~ + ~ > ~ , a con- tradiction . Now restructure E as follows : A E = 2).. if m= 2 , and Ei*(T*E 
 = El* (T* (E2*E 3)) if m= 3 . If m= 2 , then [Eli < n t I E2[ < n and effective size of --2/2 ^ 
n Hence, by lemma 3.1 E is of T -2/2 " effective size If m = 3 , then since IEiI + IE31 > n n n n 
 , we have IE21 < ~ 2 < 4 " Also n I E31 ~ I E21 ~ ~ . Hence, by lamina 3.1, is of effective size --~ 
  /3 " [] Lamina'3.4: Let TQ =TQi + TQr in which ITQI > n(l-~) and ITol I < n(l-)  Then TQ can be 
restructured to (T + T') , where T is of effective size n and IT'I < ITQ]-n(1-~) (If T'=0 , then the 
new expression is simply T ). Proof: In TQ~ find R with cutoff= n 4~ Case i: [TRzl ! n/8 . Then expand 
TQ£ w.r.t. T R to TQZ = A*(TRz @R TRr) + B . n  Case i.i: ITQr] ! 4/2 Then let = (A*(TRz 8 R TRr) 
+ (B +TQr)) , and T' = 0 Since each of 1 n < n IAI and IBI is <_ n(l- ~)-4/2 8 ' n and each of I TRzI 
, [TRrl < ~ and ITQr I < n , by lemma 3.1, T is of -46  effective size n 2~" Case 1.2: ITQrl > n 
 46  Then let = (A*(TRz 0 R TRr) + TQr) and T' = B . Again we can show that T is of effective size 
n 2/3 " Note that I T' : IBI ! ITQml -ITRm O R TRrl ! n < I n n I TQ ITQrl 4/2 ITQ 4/~ 4V~ I TQ -n(1-~). 
 n Case 2: ITRi I > Then expand TQZ w.r.t. TRZ : TQZ = A*TRi + B . Case 2.1: ~,ITQr I < n --46 Then 
let T = (A*TRz + (B+TQr)) , and T ' = 0 . We can again prove that T n is of effective size  2~ " 
Case 2.2: ITQrl > n 46  Then let T = (A*TRz + TQr) and T' = B . T can be shown to be of effec- tive 
size n , and IT'I = IBI < ITQ£I- 2v~  ITRml < ITQI ITQrl-n < ITQI n n < 1TQI-n(l--~ ) Im Hence the 
inductive step of theorem 3 is established. Conclusions We have improved the known upper bound results 
for the restructuring depth of arithmetic expressions. For the special class of polynomials a lower bound 
essen- tially matching the known upper bound is also presented. We have defined an inter- esting subclass 
of arithmetic expressions, which includes the class of polynomials, for which we have established an 
upper bound of log n+ 2 l~g n + 0(i) Analo- gous to this class we can define another class in which at 
least one operand of every '+' is a constant. For this new class we conjecture a restructuring depth 
lower bound of (l+s) log n , for some ~ > 0. References i. N. Abramson: Information Theory and Coding, 
McGraw Hill Book Co., New York, 1963.  2. R. Brent, D. Kuck and K. Maruyama: The Parallel Evaluation 
of Arithmetic Expressions without Division, IEEE Trans. Computers, 1973, 532-534.  3. A. Borodin and 
I. Munro: The Compu- tational Complexity of Algebraic and Numeric Problems, American Elsevier Publishing 
Co., New York, 1975.  4. G. Frederickson: Data Structures for On-Line Updating of Minimum Spanning Trees, 
with Applications, SIAM J. Computing, 1985, 781-798.  5. D. J. Kuck and K. Maruyama: Time Bounds on 
the Parallel Evaluation of Arithmetic Expressions, SIAM J. Computing, 1975, 147-162.  6. K. Maruyama: 
On the Parallel Evalua- tion of Polynomials, IEEE Trans. Computers, 1973, 2-5.  7. D. E. Muller and 
E. P. Preparata: Restructuring of Arithmetic Expres- sions for Parallel Evaluation, JACM, 1976, 534-543. 
 8. I. Munro and M. Paterson: Optimal Algorithms for Parallel Polynomial Evaluation, JCSS, 1973, 189-198. 
 9. F. P. Preparata and D. E. Muller: Efficient Parallel Evaluation of Boolean Expressions, IEEE Trans. 
Computers, 1976, 548-549.  i0. F. P. Preparata, D. E. Muller and A. Barak: Reduction of Depth of Boolean 
Networks with a Fan-in Constraint, IEEE Trans. Computers, 1977, 474-479.   
			