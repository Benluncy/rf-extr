
 The Rotation Diagram and Optimal Containing Placements of a Convex Polygon Matthew Dickerson* Daniel 
Scharstein~ 1 Introduction In this video we demonstrate a new geometric construct called the rotation 
diagmm: a compact representation of the configuration space of all placements of a convex polygon P in 
which its boundary remains in contact with a fixed point x. We show the use of the rotation diagram in 
solving the polygon placement problem: Problem 1 Given a convex polygon P with m vertices and a set S 
of n points in the plane, find a placement of P that contains the mam mum number of points in S. We allow 
both tmnslation and rotation. We begin with a brief description of the rotation diw gram and the algorithm 
to compute it. We then de­scribe the animation of the rotation diagram as shown in the accompanying video. 
 2 The rotation diagram Consider placing a convex polygon P in contact with a point z in the plane. 
We can rotate P around point z; we can translate P around 2 keeping the boundary of the polygon in contact 
with the point; or we can do a combination of both. The rotation diagmm Rp,= is a rectangular diagram 
representing the configuration space of these possible translations and rotations. The configuration 
space is given as follows: 1. The horizontal axis of the diagram parameterizea all rotations of the polygon 
from O to 27r. Mlddlebury College, Mlddlebury, VT 05753, USA. Email: dickerso-iddlebury. edu. Supported 
by NSF grant CCR. 9301714. t Cornell University, Ithaca, NY 14s53, USA. Email: schar~cs. cornell. edu. 
Supported by NSF grant IRI-S057928. Permission to make digital/hard copies of all or part of this material 
for persomi or classroom use is granted without fee provided that the copies are not made or dlatributed 
for profit or commercial advantage, the copy­right notice, the title of the publication and its date 
appear, and notice is given that copyright ia by permiaaion of the ACM, Inc. To copy otherwise, to republish, 
to post on savers or to redistribute to lists, requires specific permission andlor fee. Computational 
Geometry 96, Philadelphia PA, USA ~ 1996 ACM 0-89791-804-5/96/05. .$3.50 Figure 1: The running Java application, 
showing the containing regions for a triangle and a single addi­ tional point. A non-cont aining configuration 
corre spending to the origin of the rotation diagram is shown in gray. A containing configuration corresportd­ing 
to the position of the marker in the diagram is shown in black. The program is accessible on-line at 
http: //uvv. nticldlebury. edu/-scharste/rotat e/. 2. The vertical axis of the rotation diagram parame­terizea 
the translations of P around point z from O to CP, the circumference of P. That is, the loca­tion along 
the vertical axis determines which point on the boundary of P is in contact with x. The goal of the diagram, 
however, is not only to show all possible rigid motions of P in contact with z, but also to represent 
which of these rigid motions contain certain other points from a given set S of points in the plane. 
For each point q E S, there is a set of regions called the containing regions for q in the rotation diagram 
Rp,z. These containing regions represent those rigid motions of P in contact with z and containing q. 
Eke Figure 1 for an example of the containing regions for a single point. V-9 If we add multiple points, 
we get an arrangement of multiple regions in the rotation diagram. Overlapping regions correspond to 
rigid motions containing multiple points. 3 Polygon placement We can see now how the rotation diagram 
can help us to solve Problem 1. Our algorithm for this problem, dis­ cussed in more detail in [1], is 
self-contained and utilizes the geometric properties of the containing regions in the rotation diagram. 
The optimal placement of the poly­ gon (the rigid motion containing the maximum number of points) corresponds 
to the point of greatest depth in the arrangement of all regions in the rotation diagram. A few questions 
arise concerning the diagram and how it is computed. Why does the rotation diagram require P to stay 
in contact with a point x? The idea is sim­ ple: Any placement of P containing a maximum number of points 
can be disturbed slightly so that P touches a point. Thus, we only have to search for such placements. 
In fact, we can restrict our search even further, by only looking at the so-called stable placements. 
These place­ ments correspond to critical angles in the rotation dia­ gram, which can be computed efficiently 
by considering two copies of P rotating in tandem. Thus, our final algorithm for Problem 1 is the fol­ 
 lowing: For each point, we let this point be the fixed point 2 and compute the rotation diagram with 
respect to all other points. We then find the point of maximum overlap of all containing regions. Among 
all rotation di­ agrams, we pick the one with the deepest overlap, corre­ sponding to a placement in 
which the polygon touches a point and covers the higheat number of all other points. It turns out that 
the rotation diagrams can be com­puted efficiently, and that the overall best placement can be found 
in 0(nk2m2Zog(mk)) time, where n is the number of points, m is the number of vertices, and k is the depth 
of the overlap, i.e., one less than the max­~mum number of points cent ained (since z is also con­tained). 
This provides a linear improvement over the best previously known algorithm when k is large and a cubic 
improvement when k is small. The algorithm can be extended to solve dichromatic and general weighted 
variants of the problem. For more details, please refer to [1]. 4 Description of the video The video 
shows an interactive Java program demon­strating the rotation diagram described in the previous section. 
The purpose of the program and video is to give a deeper understanding of (and intuition behind) the 
configuration space represented by the rotation dia­ gram. The program can be downloaded and run on any 
web browser supporting Java. Figure 1 shows a screen dump of the running appli­ cation, as seen in the 
video. The application is divided into three areas: the configuration window (at the top right), the 
rotation diagram itself (at the bottom right), and a button area (at the left). The configuration window 
shows in gray the point z and the polygon P at the placement corresponding to the origin of the rotation 
diagram. A different place­ ment of the polygon, corresponding to the position of a marker in the rotation 
diagram, is shown in black. The configuration window also shows other points in various colors. The containing 
regions corresponding to these points are displayed in the same colors in the rotation diagram below. 
The program allows the user to change the configura­tion of the polygon by clicking in the rotation diagram, 
and also to change the regions in the diagram by moving the points in the configuration window. The number 
of points and the number of vertices of the polygon can be changed via the buttons. Turning on the circles 
but­ton restricts the points to be moved on a circle around the reference point. Moving the colored points 
while the circles are turned on illustrates that the shape of the regions in the rotation diagram is 
independent of the angle. Turning on the polys button places copies of the polygon on each point. Changing 
the rotation of the polygon while the polys are turned on illustrates that the critical events in the 
diagram correspond to the intersections of edges with vertices when two copies of the polygon rotate 
in tandem. For reasons of efficiency and simplicity, the program displays the regions in the rotation 
diagram by drawing vertical lines at discrete angles, rather than computing the shape of each region 
explicitly. Credits and acknowledgements The narration was done by Matthew Dickerson and Amy Briggs. 
Daniel Scharstein implemented the Java animation and provided the music. Thanks to Middle­bury College 
media services for technical support. The interactive rotation diagram animation can be accessed at http: 
//www. middlebury. edu/-scharste/rotat e/. References [1] M. Dickermn and D. Scharstein. Optimal place­ment 
of convex polygons to maximize point con­tainment. In 7th Annual ACM-SIAM Symposium on Discrete Algorithms 
(SODA 96), pages 114 121, Atlanta, GA, February 1996. v-lo  
			