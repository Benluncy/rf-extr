
 A Software Tool for Teaching Data Structures John Beidler John Meinke Dept. of Math./Comp.Sci. University 
of Scranton Scranton, Pa. 18510 Introduction In the art of programming, programmers manipulate two resources, 
program structures and the structure of their data, to solve problems using various hardware configurations. 
The trade- offs between program structures and data structures affect the time and memory requirements 
of programs and can dramatically affect the resources that are required to solve problems. Because of 
its impor-tance, just where does Data Structures belong in an undergraduate curriculum? Does it require 
Discrete Structures as a prerequisite? Curriculum '68 places Data Structures as an upper division course 
or possibly even a combined upper division/ graduate course, which has Discrete Structures as a prerequisite. 
This suggests a more theoretic and less pragmatic approach. We disagree. Our Data Structures Course, 
first taught in 1973, was originally conceived as the keystone course of our computer science curriculum. 
Our curriculum's original design was influenced by Curriculum '68 and the undergraduate computer science 
program at Penn State University. However, we had to adapt our program to our small college environment 
and include a curriculum track with a business emphasis. We felt that regardless of which track in our 
program a student might follow, theory/systems or business/DP, there must be a strong nucleus common 
to both tracks. For this reason we concentrated on developing four strong courses that would be given 
as the freshman and sophomore year component of our curriculum. As part of this, we also saw the need 
for software tools to support these courses. From this, a structured programming preprocessor evolved. 
However, as part of this preprocessor we included timing and dynamic storage allocation features. Through 
a strong emphasis on structured programming that begins with our first computer science course, our second 
course introduces many discrete structure concepts-queues, stacks, trees, graphs, etc... Qur third course 
is a course in assembler level programming and computer organization. These courses provide a strong 
foundation for our Data Structures course. Since the basic structures are introduced in the second course, 
we feel that our Data Structures course has two principal goals. The first is to present a great variety 
of techniques for represen- ting the various structures. This included dynamic storage allocation and 
management techniques. The second goal is measurement. The students learn to measure the time and space 
costs of their solutions to problems, including the time and space costs of their data structure techniques. 
We believe the measurement aspect of the course is extremely vital in that we do not just use sophisticated 
data structure techniques for their own sake. During the past two years,this course has been greatly 
improved by the use of our preprocessor, PLUS, and its data structure capabilities. The data structures 
in PLUS fall between the sophisti- cated abilities of PASCAL and the GETMAIN/PUTMAIN of PL/I. The RECORD 
statement in PLUS establishes a template for the records that will be dynamically allocated. GETRECs 
establish pointers to records which are "created" as they are needed and PUTRECs return records to the 
available space. RECORDs can be allocated and linked as desired. Information in dynamic records is accessed 
through a pointer/ displacement method where the pointer indicates the record that is accessed and the 
displacement indi- cates the position where the information is located in the record. Our success with 
this course can be measured in two ways. First, our original intention was "With this course in their 
background our students could be required to do more sophisticated assign- ments in upper level courses 
and hence, in turn, our upper division courses would be improved. This has been the case and we have 
been pleased with this result. Our second measure of success has been the number of our graduates who 
have told us of their successes and expressed the feeling that a key element in their background which 
helps them succeed is the Data Structure Course. A Software Tool for Data Structures A key element in 
the development of our Data Structures course has been the structured program- ming preprocessor, PLUS, 
and its software tools. Among these tools is a capability which supports dynamic storage allocation. 
This feature allows the user to concentrate on the creation and linkage of his structures while the preprocessor 
takes care of the implementational details. Obviously, there are more sophisticated data structure capabilities. 
However, this capability fits within a FORTRAN framework which gives very immediate and general 120 
portability. General details on the preprocessor time the PRTWRD routine is referenced, it can use appear 
in a previous paper. the PARENT pointer to form and print a word. The Appendix I contains the syntax 
of the RECORD statement. The RECORD statement describes the layout of dynamic records and the names of 
pointers that can access the various types of records. Records are created by the GETREC function and 
erased by the PUTREC subprogram as in point=GETREC(name) and CALL PUTREC(point,name) where "point" is 
a pointer and "name" is the type of record being created and erased. Positions within records are accessed 
by a pointer-displace- ment access method. For example, if a list of records were created where the records 
are defined by the statement RECORD POLY(LINK/P,COEF/R,EXPON/I)-NEW-POINT then each GETREC(LIST) would 
create a record con- sisting of three positions. The first position in the record is used as a pointer 
(to other records of this type or null), the second position can contain a real value, and the third 
is a integer value. If a pointer to a record is established, NEW=GETREC(POLY), then any position within 
the record can be accessed and used through a point @ displacement format. This is illustrated in example 
1 with a sub- routine which adds polynomials kept as ground linked lists in descending order of exponents. 
Each record in each of the lists pointed to by A, B, and SUM is a three position record and the appropriate 
positions in each record are accessed through a combination of a pointer to a record along with a displacement 
into the record. The @ operation has the highest precedence and if beside each other they are decoded 
from left to right. Also, parentheses cannot be used to alter this. For example, X=POINT@LINK@COEF would 
obtain the COEF item from the record pointed to by the LINK of the record the POINT indicates. If that 
sounds confusing, simply stated, if POINT has pointed to the front of the list, then the COEF from the 
second record in the list would be copied into X. There are no limitations on the number of displacements 
in records that can contain pointers. For this reason, other more complex structures can be created and 
manipulated using this approach. Example 2 illustrates a routine which performs a natural order tree 
search and calls another routine each time it finds a "marked" record. This routine is actually part 
of the PLUS code which produces a cross reference listing. Each "marked" displacement is actually a pointer 
to a list which contains the line numbers of the lines where the word is referenced. Displacements within 
records can contain logical, integer, real, or pointer values,depending upon the code following the slash 
after the dis-placement name. If there is no qualification after the displacement name,then the contents 
are assumed to be integer. If the contents of a displacement is a pointer,then this pointer can be used 
to access records. In order to make the data structure capabilities as reliable as possible, the prepro- 
cessor checks for the validity of pointer/displace-ment relationships. That is, both the pointer and 
the displacement must correspond to the same type of record otherwise the preprocessor generates a compile 
time warning. To support the pointer/displacement checking performed by the preprocessor, when displacements 
within a record contain pointers, the type of record that the pointer accesses must be indicated. This 
is indicated by stating the record type after the displacement is declared as a pointer. If no record 
type is stated, then the displacement is assumed to contain a pointer to its own type of record. For 
example, the record statement in example 3 describes two types of dynamically allo- cated records, TREERD 
and LISTRD. Each TREERD record contains four pointers. Three of these reference TREERD records while 
REFLST references LISTRDs. Other Features To enhance the data structure capabilities, several additional 
features have been included. One feature is a variable displacement capability. This was found useful 
in describing several tree manipulation algorithms, including the algorithm which builds the dictionary 
tree used to form the PLUS cross reference listings. Example 4 is the code for a procedure that builds 
a dictionary tree structure. As nodes are linked into the tree, either the CHILD or SIBLING displacement 
of the previous node must be reset to point to the new node. This is accomplished by using a variable 
displacement, PDISP, which is set to the appro- priate placement indication. To clarify example 4, two 
observations should be made. This procedure builds the tree in a way that the natural order tree search 
procedure in example 2 produces an alphabetical listing of the contents of the tree. Second, part of 
the simpli-city of the BLDTRE procedure is due to another routine, STRTRE, which initializes the tree 
in a way that guarantees that the tree pointer never changes. Record access supports one, two, and three 
dimensional arrays as pointers. For example, the records created through reference to RECORD TREE(CHILD/P,SIB/P,BOARD(3,3,3))-POINT(3) 
could be accessed by POINT(1)@BOARD(J,K,L). 121 Arrays of pointers are used in the Data Structures course 
in several programming assignments, such as creating an efficient algorithm to perform a column wise 
printing of a sorted linked list to numbers. Without an array of pointers, or the equivalent, the best 
known algorithm for columnwise printing functions is time order n 2. With an array of pointers, the routine 
executes in time order n. Displacements within records also can be one, two, or three dimensional arrays. 
These array displacements can be located at any position within records. This capability has proven quite 
useful in describing a variety of problems. In particulaG it has been used extensively in our Heuristic 
Programming course when performing exhaustive tree searches to investigate simple games. One final capability 
is variable sized records. This is achieved by having the last displacement in the record description 
be an array designation but without a size indication. For example, RECORD XAMPLE (A ..... X( ))-... 
would indicate a variable size record. To allocate a variable size record, one must first know the desired 
size of the array within the record. Then pointer=GETREC(XAMPL+size) would allocate the record and CALL 
PUTREC(pointer,XAMPL+size) erases the record. Summary Our experiences of the past two years have been 
most encouraging. This data structure capa- bility has been used by students in at least five other courses. 
These uses were the student's choices-the students were not forced to take this approach. The preprocessor 
was also used by GTE Laboratories to create a pseudocode processor which is being used to control, design, 
and document large programming projects. Our experience with this data structures tool in the research 
and develop- ment environment of GTE Laboratories has rein- forced our opinion of the value of this software 
tool, not just as a teaching aid but as a valid approach to practical data structure development. 1(1) 
.... FIGURE 1 2(i) SUBROUTINE POLYAD(SUM,A,B) 3(2) INTEGER GETREC 4(3) RECORD POLY(LINK/P,COEF/R,EXPON/I)-SUM-A-B-APNT-BPNT-NEW 
5(9) APNT=A 6(lO) BPNT=B 7(11) SUM=O 8(12) DO UNTIL(APNT.EQ.O.AND.BPNT.EQ.O) 9(13) : IF(APNT.EQ.O.OR.(BPNT.NE.O.AND.BPNT@EXPON.GT.APNT@EXPON))THEN 
 1o(15) : NEW=GETREC(POLY) ii(16) : NEW@EXPON=BPNT@EXPON 12(17) : NEW@COEF=BPNT@COEF 13(18) : NEW@LINK=SUM 
14(19) : SUM=NEW 15(20) : BPNT=BPNT@LINK 16(21) : ELSEIF(BPNT.EQ.O.OR.APNT@EXPON.GT.BPNT@EXPON)THEN 17(25) 
: NEW=GETREC(POLY) 18(26) : NEW@EXPON=APNT@EXPON 19(27) : NEW@COEF=APNT@COEF 20(28) : NEW@LINK=SUM 21(29) 
: SUM=NEW 22(30) : APNT=APNT@LINK 23(31) : ELSEIF(APNT@COEF+BPNT@COEF.NE.O.O)THEN 24(34) : NEW=GETREC(POLY) 
25(35) : NEW@EXPON=APNT@EXPON 26(36) : NEW@COEF=APNT@COEF+BPNT@COEF 27(37) : NEW@LINK=SUM 28(38) : SUM=NEW 
29(39) : APNT=APNT@LINK 3o(4o) : BPNT=BPNT@LINK 31(41) : EESE 32(43) : APNT=APNT@LINK 33(44) : BPNT=BPNT@LINK 
34(45) : ENDIF 35(46) ENDDO 36 CALL TSIL(SUM) ,,.. 38(49) .... TSIL IS A PROCEDURE THAT REVERSES THE 
LINKS 39(49) 40(49) RETURN 41(50) END 1(1) C. .... FIGURE 2 2(1) SUBROUTINE NOTS(TREE) 3(2) RECORD TREERD(PARENT/P,CHILD/P,SIBLING/P,CHAR/I,MARK/I)-TREE-POINT 
4(8) POINT=TREE 5(9) DO UNTIL (POINT.EQ.O) 6(10) : IF(POINT@MARK.NE.O)THEN 7(11) 8(11) : .... INSERT 
CODE HERE TO MANIPULATE NODE 9(11) 10(11) : ENDIF ii(12) : IF(POINT@CHILD.NE.O)THEN 12(13) : POINT=POINT@CHILD 
13(14) : ELSE 14(16) : DO UNTIL(POINT@SIBLING.NE.O) 15(17) : : POINT=POINT@PARENT 16(18) : ENDDO 17(20) 
: POINT=POINT@SIBLING 18(21) : ENDIF 19(22) ENDDO 20(24) RETURN 21(25) END 123  I( 1) C ... FIGURE 3 
-POINTERS IN ONE RECORD ACCESSING ANOTHER RECORD TYPE 2( 1) RECORD TREERD(PARENT/P,CHILD/P,SlBLING/P,CHAR,REFLST/P 
LSTRD)-TREE-POINT, LSTRD(LINK/P,LINENO)-CURENT 3( 8) c 4( 8) c 5( 8) 1(1) .... FIGURE 4 2(i) INTEGER 
FUNCTION BLDTRE (TREE,WORD,SIZE) 3(2) INTEGER GETREC, SIZE, WORD (SIZE) 4(3) RECORD TREERD(PARENT/P,CHILD/P,SlBLING/P,CHAR,MARK)-TREE-LSTPAR-PREV-NEW-THIS- 
(PDISP) 5(9) THIS=TREE 6(I0) I=I 7(11) DO UNTIL(I.GT.SIZE) 8(12) : ~IF(THIS. EQ.O.OR.WORD(1). LT.THIS@CHAR)THEN 
9(13) : NEW=GETREC(TREERD) 10(14) : (I) NEW@CHAR=WORD 11(15) : I=I+I 12(16) : NEW@PARENT=LSTPAR 13(17) 
: NEW@SIBL I NG=PREV@PDISP 14(18) : PREV@PDISP=NEW 15(19) : LSTPAR=THIS 16(20) : PREV=THIS 17(21) : PDISP=CHILD 
18(22) : THIS=THIS@CHILD 19(23) : ELSE IF(WORD(1). EQ.TH IS@CHAR)THEN 20, 26) : I=I+I 211 27) : PREV=THIS 
221 28) : PDISP=CHILD 23 29) : LSTPAR=THIS 24 30) : THIS=THIS@CHILD 25 31) : ELSE 26 33) : PDISP=SIBLING 
27 34) : PREV=THIS 28 35) : THIS=THIS@SIBLING 29 36) : ENDIF 30(37) ENDDO 31(39) BLDTRE=PREV 32(40) RETURN 
33(41) END APPENDIX 1 SYNTAX OF RECORD STATEMENTS <REC STMT>:::RECORD <REC LIST> <REC LIST>::=<REC DESC> 
<REC DESC><REC LIST> <REC DESC>::=<TITLE>( <DISP LIST>)-<POINT LIST> <TITLE>::=<VFI> <DISP LIST>:::<LAST 
DISP><DISP NAME>,<DISP LIST> <POINT LIST>::=<VFI>(<VAR DISP LIST>) <VFI>,<POINT LIST> <LAST DISP>::=<DISP 
NAME><VARIABLE NAME>() <DISP NAME>::=<VFI> <VFI>/<TYPE> <VAR DISP LIST>::=<NON-INDEX VARIABLE> <TYPE>::=I 
P R L P <TITLE REF> <TITLE REF>:: = <TITLE> OF A RECORD <VFI>:: = VALID FORTRAN INDENTIFIER(I,2,0R 3 
DIM.) SYNTAX OF RECORD REFERENCES <REC REF>::=<POINT>@<DISP> <DISP>::=<VFI> VFI@<DISP> <POINT>::=<VFI> 
SEMANTIC INTERPRETATION FOR EACH @, THE <VFI> PRECEDING IT MUST BE A POINTER TO A RECORD AND THE <DISP> 
MUST BE A DISPLACEMENT IN THAT RECORD. 124 Bibliography I. Beidler, John and John Meinke, "PLUS-An 
Approach to Programming Emphasizing Analysis and Documentation", IEEE Workshop, Williamsburg, VA, July 
1977. 2. Beidler, John and John Meinke, "Data Structures for Sophomores", AEDS Conference, Atlanta, GA, 
May 1978. 3. C3S, "Curriculum Recommendations", SIGCSE Bulletin, August 1977. 4. Meinke, John and John 
Beidler, "Experience with a Computer Science Curriculum in a Small College:, IEEE Curriculum Workshop, 
Orlando, FLA, February 1978. 5. Pfaltz, John, Computer Data Structures, McGraw Hill, 1977. 6. Tremblay, 
Jean Paul, and Paul Sorenson, Introduction to Data Structures with Applications, McGraw Hill, 1976. 
 
			