
 SUIT: The Pascal of User Interface Toolkits Randy Pausch, Nathaniel R. Young II, and Robert DeLine 
Computer Science Department, Thornton Hall University of Virginia Charlottesville, VA, 22903 (804) 982-2211 
contact: suit@ Virginia.Edu Keywords Interface Builder, UI Toolkit, UIMS, Pedagogy, Portability, Software 
Engineering. Abstract User interface support software, such as UI toolkits, UIMSS, and interface builders, 
are currently too complex for undergraduates. Tools typically require a learning period of several weeks, 
which is impractical in a semester course. Most tools are also limited to a specific platform, usually 
either Macintosh, DOS, or UNIX/X. This is problematic for students who switch from DOS or Macintosh machines 
to UNIX machines as they move through the curriculum. The situation is similar to programming languages 
before the introduction of Pascal, which provided an easily poned, easily learned language for undergraduate 
instruction. SUIT (the ~lmple ~ser ~rtterface ~oolkit), is a C subroutine library which provides an external 
control UIMS, an interactive layout editor, and a set of standard screen objects. SUIT applications run 
transparently across Macintosh, DOS, UNIX/X, and Silicon Graphics platfomts. Through careful design and 
extensive user testing of the system and its documentation, we have been able to reduce learning time. 
We have formally measured that new users are productive with SUIT in less than three hours. SUIT currently 
has over one hundred students using it for Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires 
a fee and/or spacific permission. 01991 ACM 0-89791 -451 -1/91 /0010 /0117 . ..$l .50 undergraduate and 
graduate course work and for research projects. Introduction In the 1960s and 1970s, many computer science 
researchers developed new programming languages, Most of the advances were incremental, and eventually, 
with the advent of languages like PL/1, even advanced programmers could not master all the capabilities 
presented to them. For novice programmers, the situation was dire: language designers had been rapidly 
developing new paradigms and semantic advances, but as the languages grew, they became harder to learn. 
In 1971, Niklaus Whlh presented Pascal[Whth], a language whose primary contribution to the field was 
that it had been designed to be easy to learn. Despite its many drawbacks, Pascal succeeded for two basic 
reasons. First, it presented a small, consistent language with simple semantics. Second, the language 
was designed so that compilers could easily be implemented for a variety of hardware platforms. User 
interface toolkits and UIMSS are now in a state analogous to programming languages in 1970. Students 
still write Ph.D. dissertations on new UIMS models, but practical experience indicates that the existing 
tools are much too difficult for new users. In the same spirit as Pascal, we have developed SUIT, the 
Simple User Interface Toolkit, which offers the same two advantages as Pascal; it is easy to learn, and 
it can be easily ported to different platforms. SUIT already runs on the DOS, Macintosh, UNIXIX, and 
Silicon Graphics platforms. Over one hundred students currently use SUIT for both course work and research 
projects at the University of Virginia. We have formally measured that students require an average of 
two and a half hours to become productive with SUIT. This is a vast improvement over the four to six 
week learning curve we observed for our students with systems like Xtk [McCorrnack], the Andrew Tool 
Kit [Palay], Interviews [Calder], and the Motif Widget Set. The description of the system itself is a 
secondary goal of this pape~ the main goal is to stress the design methodology which drove us throughout 
the project. Design Goals Software used to support education must meet stringent criteria. At many universities, 
undergraduates begin their programming experience on Macintosh or DOS machines, and then move up to UNIX 
workstations in their junior or senior year. This requires learning a new file system, a new operating 
system, a new text editor, a new set of utilities, and often a new programming language. Given this, 
most educators are not willing to invest large amounts of time exposing their students to interface development 
tools. This is especially problematic with current tools, which are designed more for expert users than 
for novices. A six week learning curve during a fourteen week course is intolerable. Given these constraints, 
we established the following design goals for SUIT portability: SUIT must mn transparently across UNIX, 
Macintosh, and DOS  simplicity: SUIT must be usable by undergraduÂ­ates in under three hours  Portability 
A user interface toolkh requires three basic forms of support: an implementation language, operating 
system support, and a graphics package. Our implementation language had to be either C or Pascal, since 
they are the only languages most widely known by undergraduates. Although Pascal is more widely used 
and is simpler than C, implementing SUIT in Pascal was not technologically feasible. Pascal exists on 
all three platforms, but it varies widcl y [Welsh]. Also, standard Pascal is not powerful enough to support 
the external control model: it lacks the ability to store function addresses as variables. Therefore, 
we chose ANSI-C. Our operating system dependency was very small: we only needed to be able to read and 
write an ASCII text file, and the standard C 1/0 libraries always suppmt this. For graphics, we needed 
a common, low-level graphics package which supported operations such as DrawLine and DrawFilledCircle 
on each of the platforms. We were surprised to find few graphics packages implemented for all three platforms. 
Most researchers we contacted said that they had always ported between platforms by implementing small 
compatibility libraries for the specific graphics commands they used in their applications. This made 
porting their systems unnecessarily time-consuming, so we determined that we would use a well-defined 
common graphics layer from the beginning of the project. We chose to use SRGP, the Simple Raster Graphics 
Package, which was being distributed by the Addison-Wesley publishing company with the second edition 
of Fundamentals of Interactive Computer Graphics, by Foley, van Dam, Feiner, and Hughes [Foley90]. SRGP 
was already implemented for the Macintosh and X windows; we ported it to Turbo C on DOS, on top of Borland 
s BGI graphics driver. Our DOS version of SRGP is now distributed with the textbook. Figure 1 shows the 
software layering which makes SUIT portable. SUIT (Simple User Interface Toolkit) SRGP (Simple Raster 
Graphics Package) I I Mac Toolbox I I BGI driver I lx  AaEE-_lHk Figure 1: Layered Software for Portability 
A different approach to portability is taken by XVT [Valdes, Rochkind], which provides a virtual toolkit 
on top of the native toolkit layer on each platform. The advantage of the XVT approach is that on each 
platform the application has the same look and feel as other applications built locally on that platform. 
There are two major drawbacks to this approach. First, XVT is forced to provide only those functions 
common to all platforms -the lowest common denominator solution. Second, the user must use different 
support tools (e.g. layout editors) on each platform. Simplicity Throughout SUIT s development, we applied 
the following principles:  minimize the user s need to learn new things  make the simple things easy 
and the hard things possible  perform end-user testing early and often Current UI toolkits and UIMSS 
tend to violate the first point by forcing their users to learn a new programming language. For example, 
Motif-oriented tools require learning UIL, the Next Interface Builder [Mahoney] requires learning objective-C, 
and Interviews requires learning C++. While these languages are required to support the model each system 
provides, users who are focused on their task at hand often fail to use advanced tools because the learning 
threshold of these languages is too high. The importance of end-user testing cannot be overstated. We 
routinely forced SUIT s developers to sit silently in the back of a room where new users were learning 
to use SUIT from a printed tutorial. By constantly observing new users, we were able to maintain perspective 
on the difficulties new users face when trying to understand the SUIT model. This sort of user testing 
is well understood in some corporate cultures, most notably at Apple Computer. This technique was also 
used with great success in the development of Trillium [Blomberg]. It can be hard to know what is going 
through a single user s mind when he or she becomes confused. While one way to address this is to ask 
the user to think out loud, a more natural solution is to have two or more students work together. The 
students learn the system together, and as they talk to each other, eavesdropping provides valuable feedback. 
It is important not only to observe when the system s response confirses the users, but also to note 
what the users had expected the system to do at that time. In a similar vein, when students use SUIT, 
we suggest they work in groups, since interactive software is more easily learned as a collaborative 
effort. Our original desire was merely to produce a tool which would introduce students to relatively 
difficult concepts, specifically external control and inheritance. We had presumed that after spending 
a few weeks with SUIT they would outgrow it and move on to other more mature and complex systems such 
as UIMX [Visual, Lee], based on Motif Widget set, or Interviews. Instead, we have observed the phenomenon 
that also occurred with Pascal: Unless students discovered a specific need to move to a more advanced 
platform, they continued to use SUIT for their own research projects. The Basic SUIT Model The remainder 
of this paper describes SUIT in detail. Again, we wish to stress that SUIT s contribution is its portability 
and ease of learning, not its functionality. Many other toolkits provide more functionality. SUIT provides 
a collection of screen objects, where each object is described by: its state, contained in a property 
list  a C procedure which examines the object s state and displays it on the screen  a C procedure 
which handles user input to the object and updates the object s state The property list containing an 
object s state is a set of [name, type, value] triples, as in: ~ label , text , pizza ] ~ diameter , 
floating point , 10.5 ] ~ number of slices , integer , 6 1 [ has anchovies , boolean , FALSE] Once students 
understand that a SUIT-based application is a collection of objects, we introduce external control by 
explaining that SUIT maintains a table of all on-screen objects, and that SUIT multiplexes keyboard and 
mouse input based on the location of the cursor. Students quickly understand that three different slider 
objects share code for their input handling and display procedures, but have a distinct property lists 
in the state table. The contents of this table are written to a human-readable ASCII text file between 
executions of the program. After students understand that SUIT maintains a table of objects, we explain 
that SUIT s interactive tools are provided by accepting some of the user s input as commands to SUIT, 
rather than to a particular screen object. When user input occurs, SUIT queries the state of the CONTROL 
and SHIFT keys: if they are both down when mouse buttons are pressed, SUIT interprets the input as a 
command to move or resize a screen object, and updates the object table accordingly. This use of keyboard 
modifiers allows us to avoid the run vs. build mode used by other interface builders, such as the Next 
Interface Builder. Avoiding this mode switch is important for new users, and we have experienced almost 
no cases of users being confused about when they are giving input to SUIT and when they are giving input 
to the application. External Control and Attaching User CallÂ­backs Students have difficulty adjusting 
to the idea that a painting procedure may examine an object s state, but that only that object s input 
handler may alter the object s state. Most students, when implementing their own objects, place graphics 
library calls in their input handlers, The more advanced students alter the object s state and then call 
the object s painting procedure from within the input handler. Because SUIT traps all state changes and 
triggers calls to the appropriate paint routines, the input handler only needs to update the object s 
state. This separation of painting reads the state and input handling sets the state is often a difficult 
concept for students. We have experimented with producing run time errors if programs paint while inside 
input handlers and/or set properties while inside painting routines, but this tends to confuse students 
even more. Having grasped how external control works, many students find it mildly unsettling, because 
they have become accustomed to using the flow of control in programs to sequence actions. Students do 
not, however, find external control to be nearly as difficult as their first introduction to either pointer 
variables or recursion. Once students understand the basic mechanism which drives SUIT, we explain that 
a standard set of screen objects have already been implemented and stored in a library. This motivates 
the question of how screen objects can be made to invoke application procedures, or callbacks. In the 
example of a slider, students understand how the input handler and painting procedure will cause the 
slider to behave properly, but are not sure how an application routine can be informed that a value contained 
in that slider has changed. We then explain that a callback property of type function pointer can be 
added to the slider object s property list. If such a property exists, the input handler calls the function 
after changing the state of the slider object. This attachment of user-level callbacks is the most difficult 
intellectual leap for most students. Objects as Abstract Data Types Many students tend to confuse the 
notion of an object s state and the mechanisms which affect that state. We have had good success combating 
this by treating objects as abstract data types which have multiple mechanisms for displaying state. 
For example, SUIT supports a bounded value object with properties: ~ minimum value , floating point , 
0.0] ~ current value , floating point , 0.7] ~ maximum value , floating point , 1.0] which can appear 
as any of the following display styles [Sibert, Foley 86] shown in Figure 2. A keystroke Figure 2: Bounded 
Value Display Styles command (again, with keyboard modifiers down) cycles between the various display 
styles, and this has been very effective in establishing the difference between an object s state and 
the mechanism for displaying and altering that state. For many students, it is the most visceral experience 
they have had in understanding general concept of an abstract data Zjpe. User Defined Property Types 
Users may define their own types for use in property lists by registering subroutines with SUIT that 
initialize, copy, destroy, convert the type to ASCII, and convert from ASCII to the type. The ASCII conversion 
allows SUIT to write the interface file that is saved between executions, and to convert one arbitrary 
type to another by going through an ASCII representation. The Class Mechanism Subclassing and inheritance 
are complex ideas. When we first show students SUIT, we explain that SUIT provides a non-hierarchical 
collection of screen objects, each of which belongs to one class, and can inherent some portion of their 
state from that class. When explaining the class and inheritance mechanisms, we find it necessary to 
briefly lie to our students. l%e~ is a strong analogy here to programming languages: introductory students 
are not typically receptive to explanations that subroutines are an abstraction mechanism. They do, however, 
understand that subroutines are a great way to save on code space in a compiled program. Students understand 
concrete explanations much better than abstract ones, and once they understand the concept, one can revisit 
the motivation for it. Therefore, we explain that having each object describe things like its foreground 
and background color is wasteful, especially since all buttons will probably be the same color. When 
a program requests the value of a property, SUIT looks first in the property list containing that object 
s state. If SUIT does not find the requested property, it then looks in a property list stored with the 
object s class. If the property is not found at that level, SUIT looks in a global property list. If 
the property is not found in the global property list, SUIT creates it using the type s initialization 
routine to establish a default value. The Property Editor Students do best with concrete, visible items. 
Screen objects are good for explaining object-oriented programming, as shown by the early success in 
Smalltalk [Goldberg]. The problem with class and global property lists is that they are no longer implicitly 
visible. The prototype-instance architecture [Myers90] does not really solve this problem, because Figure 
3: The SUIT Property Editor Figure 4: The Font Dialog Box prototype objects are typically not visible 
on-screen. We provide a direct manipulation [Schneiderman] property editor that allows users to interactively 
examine and alter the state of objects. The SUIT property editor, always displays the object, class, 
and global property lists when allowing the user to edit the state of an object. The SUIT property editor 
is shown in Figure 3. Users alter a property s value by clicking on that property with the mouse; boolean 
properties toggle when clicked, and other properties either bring up a type-in box, or a type-specific 
dialog box, such as the dialog box for type~ont shown in Figure 4. If an object is currently inheriting 
a value from its class, the user can take that property value and drag it from the class level to the 
object level, thereby copying it. If a property is currently specified at the object level and the user 
wishes to have that property default to the class specification, the user drags the property from the 
object level to the trash can, deleting the object level property. In the same way, properties can be 
manipulated at the global level. An exercise in the SUIT tutorial asks students to make all labels in 
an application blue, and then have one particular label override that default and be red. Property sheets 
date back to (at least) the Xerox Star [Bewley]. Other systems use a spreadsheet model for accessing 
attributes of objects [Myers91, Wilde]. Our contribution is to always expose the fixed three levels on 
every invocation. This produces some screen clutter, but atso avoids having the student learn the mechanisms 
for accessing inherited state. The property editor has been tremendous y successful; it allows our students 
to understand and use state inheritance in less than five minutes. We believe this is due to the combination 
of limiting the class hierarchy to a single level, exposing information at all three levels, and using 
direct manipulation. Linking Objects to Other Objects By default, SUIT provides a very simple linkage 
mechanism. Application-level callbacks can be registered with objects, and those callbacks are invoked 
by the input handlers for the screen objects. A more complicated problem is how to provide general linkage 
between screen components and arbitrary user routines. The Next Interface Builder, for example, allows 
the user to draw a connection between two screen objects, then prompts the user to specify details about 
the linkage via a sequence of dialog boxes. SUIT provides a simpler but more limited form of linkage 
that handles a large number of common cases and avoids the novice s usual confi.wion about whether the 
first object is linked to the second, or the second is linked to the first. Many linkages between on-screen 
objects merely allow one object to control a particular aspect, or property, of another. For example, 
in the polygon drawing program in Figure 5, the slider controls the number of sides in the polygon.. 
Rather than attempting to link two existing objects, a SUIT user would start with only the polygon object 
and then invoke the property editor. The user would then drag the number of sides property to the expose 
icon, which causes SUIT to create a new object that controls that property. This also has the side effect 
of locking the property, which is shown with a small lock icon in the property editor. This avoids the 
ambiguous situation of the user modifying the pol ygon s number of sides in the property editor after 
exposing it. SUIT knows what kind of object to use to expose all w  L-1 Figure 5: The Polygon Program 
common property types, and users can define dialog boxes for modifying user-defined types. In fact, the 
program shown in Figure 5 can be created with no programming, starting with a blank screen. The user 
creates a polygon object via the menus of standard objects, and then exposes that polygon object s number 
of sides and filled properties. Hierarchy Whh most interface builders, novices confuse the logical tree 
of subclasses with the geometric tree that visually nests objects. We avoid this problem in SUIT by limiting 
classes to one level, and by hiding the geometric hierarchy from novice users. Although some basic SUIT 
objects, such as a radio button, are actually hierarchal collections of other objects, we provide procedural 
and interactive operations that treat these objects atomically. By providing interactive operations that 
allow users to move and resize multiple objects at one time, we sidestep the only motivation most novices 
have for wanting to compose basic objects into a hierarchy. Once users are comfortable with the basic 
system, we introduce them to interactive manipulation of hierarchy. SUIT allows users to create a composite, 
or tuppenvare object. There is only one type of composite object because multiple display styles are 
used to implement vertical tiling (vboxes in InterviewsneX terminology), horizontal tiling (hboxes), 
bulletin boards, pull down menus, etc. Screen objects can be nested within a Tupperware object by dragging 
them inside it. Any object can be nested into any of the Tupperware styles. When objects are inside a 
Tupperware object, there is ambiguity as to which object should receive input. For regular input, this 
is simple: the input handler for the Tupperware object merely passes the input down to the appropriate 
child. SUIT input, such as an attempt to move an object, is more problematic. This is resolved by allowing 
the user to open a Tupperware object. When a Tupperware object is open, SUIT draws a special border around 
it to indicate that its children, and not the Tupperware object, will receive SUIT commands. If a child 
is moved outside the boundaries of its geometric parent, it becomes autonomous, moving up to be a sibling 
a sibling of its parent in the geometry tree, SUIT s Current Status SUIT has been created over the last 
eighteen months. Applications built with SUIT appear identical across all platforms, within limitations 
imposed by font availability, color palettes, and physical screen size, SUIT is implemented in 9,000 
lines of ANSI-C code, and provides a library of standard objects implemented by another 6,000 lines. 
Figure 6 shows the more popular objects, all cycled to the Motif-like display style. SUIT currently has 
over one hundred users at the University of Virginia and is used routinely in the undergraduate software 
engineering course and the graduate graphics course. Students from ten different departments have used 
it on all platforms to create interfaces in support of their ongoing research. SUIT is currently complete, 
although we are still developing new classes of objects and continuing to optimize both speed and size. 
By UNIX/X standards, we are a flyweight system, but under DOS and the Macintosh our 300k executable images 
are relatively large. We are currently beginning distribution via anonymous FTP. In the spirit of SUIT, 
we are investing a large effort in making SUIT easy to obtain and install. Our current goal is to allow 
a remote user who has no previous experience with FTP to be able to read a network news post and be running 
a SUIT demo on their workstation in under ten minutes. Conclusions Students who are not familiar with 
external control and have never seen another UI toolkit are able to use SUIT productively after only 
two and a half hours. Our undergraduate software engineering class projects have been able to expand 
their scope significantly by using SUIT, and students are highly motivated by being able to easily produce 
professional looking interfaces for their projects. By using a reduced model for subclassing, hiding 
geometric hierarchy, and providing direct manipulation tools for property setting and linkage, we have 
been able to radically reduce the learning time and complexity for a user interface toolkit. By keeping 
the toolkit s implementation lightweight and building it on top of an easily ported graphics package, 
we have been able to implement SUIT on a wide variety of platforms. SUIT is a success, and we hope that 
it will be accepted as a standard teaching vehicle for user interface software as we begin to distribute 
it widely, Acknowledgments We would like to thank Rodetic Collins, Matt Conway, Jim Defay, Pramod Dwivedi, 
Brandon Furlich, Rich Gossweiler, Drew Kessler, James Leatherby, Chris Long, William McClennan, Anne 
 Shackelford, and Hans-Martin Werner, all of whom have contributed to SUIT s development. SUIT should 
not be confused with SUITE [Dewan], a project at Purdue with a similar name. Figure 6: Popular SUIT 
Object Classes, In Motif Look and Feel References: [Bewley] [Blomberg] [Calder] [Dewan] [Foley 86] [Foley90] 
[Goldberg89] [McCormack] [Myers90] Bewley, William, Roberts, Teresa, Schroit, David, and Verplank, Williams, 
Human Factors Testing in the Design of Xerox s 8010 Star Of/ice Workstation, 1983, Proceedings of ACM 
CHI 83 Conference on Human Factors in Computing Systems Blomberg, Jeanctte, and Henderson, Austin, 
Re~ections on Participatory Design: Lessons from the Trillium Experience, Proceedings of ACM CHI 90 
Conference on Human ~~~3;Jn Computing Systems, pp. Calder, Paul, Linton, Mark, and Vlissides, John, 
Composing User lnte~aces wi~h interviews, IEEE Computer, 1989. Dewan, Prasun, A Guide to Suite, Software 
Engineering Research Center, Purdue University, SERCÂ­TR-60-P, February 1990 Foley, James D. and McMath, 
C.F. Dynamic Process Visualization, Computer Graphics and Applications 6:3, March, 1986. Foley, James, 
van Dam, Andries, Feiner, Steven, and Hughes, John Computer Graphics: Principles and Practice (2nd Edition), 
1990, Addison-Wesley Publishing Co, Reading, MA, ISBN 0-201-12110-7; T385.C587. Goldberg, Adele, and 
Robson, David, Smalltalk--8O: The Lunguage, Addison-Wesley, Reading, MA, 1989. McCormack, Joel, and 
Asente, Paul, An Overview of the X Toolkit. In Proceedings of the ACM SIGGRAPH Symposium on [Jser Interface 
Software, pp 46-55. Banff, Alberta, Canada, October, 1988. Myers, Brad, et al, Garnet: Comprehensive 
Support for Graphical, Highly Interactive User Znte&#38;aces IEEE Computer, 23:11, November, 1990. 
[Mycrs91] [Palay] [Rochkind] [Schneiderman] [Sibert] [UIMX] [Valdes] [Welsh] [Wilde] [Whth] Myers, Brad, 
Graphical Techniques in a Spreadsheet for Specifying User lnterjiaces. Proceedings of ACM CHI 91 Conference 
on Human Factors in Computing Systems. Palay, Andrew, eta al. The Andrew Toolkit---An Overview, USENIX 
Technical Conference Proceedings, Dallas, TX, Feb, 1988. Rochkind, Marc J, Technical Overview of the 
Extensible Virtual Toolkit, Advanced Programming Institute, Ltd., January 16,1989, API Ltd., Box 17665, 
Boulder, CO 80308 (303) 443-4223 Shneiderman, Ben Direct Manipulation: A Step Beyond Programming Languages, 
IEEE Computer 16:8, Aug, 1983, pp. 57Â­ 69. Sibert, John, Hurley, William, and Bleser, Teresa, An Object-Oriented 
User lnte~ace Management System, Computer Graphics, 20:4 August 1986 (Proceedings of SIGGRAPH 86). Visual 
Edge Software Ltd, 101 First St., Suite 443, Los Altos, CA 94022 (41 5) 948-0753 Valdes, Ray, A Virtual 
Toolkit for Windows and the Mac, BYTE, March, 1989. Welsh, J., Ambiguities and Insecurities in Pascal, 
Software -Practice and Experience 7, 1977, pp. 685-696. Wilde, Nicholas, and Lewis, Clayton, Spreadheet-based 
Interactive Graphics: from Proto@pe to Tool, Proceedings of ACM CHI 90 Conference on Human Factors in 
Computing Systems, pp. 153-159. Wirth, Niklaus, The programming language Pascal, acta informatica 1:1 
(1971) pp. 35-63. 
			