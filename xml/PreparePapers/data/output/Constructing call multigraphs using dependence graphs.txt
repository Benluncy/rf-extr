
 Constructing call multigraphs using dependence graphs Arun Lakhotia The Center for Advanced Computer 
Studies University of Southwestern Louisiana Lafayette, LA 70504 (318)231-6766, -5791 (Fax) ~a.mn@cacs.usl.edu 
 1 Introduction A call m.ultigraph of a program is a directed Multigraph encoding the possible calling 
relations between procedures. These graphs are used in in­terprocedurd program optimization [2, 3, 9, 
15] and for reverse engineering of softw~are systems [7, 8]. For programs that do not contain pro­Cedul 
e valued variables (referred to hencefollh as procedure variables) this graph can be constructed by a 
single pass over the program collecting the procedures called at each call site. When pro­cedure v,ari.ables 
and indirect calls using values of such variables are allowed constructing such a graph is not so simple. 
In the worst case, the value of a procedure v,ariable at a call site may be a reference to any procedure 
in the program. For interprocedural optimizations and for under­standing programs one would like to have 
more precise solutions. The importance of precisely constructing an analogue of call graph (referred 
to as the Ot}l order control flow analysis or OCFA) in the context of higher order languages such as 
Scheme and ML has been eloquently elaborated by Shivers [18]. A precise call graph enables data flow 
optimizations * In ths paper call multigmph is also refereed to as the call graph. Ths work was supported 
by the grant LEQSF (1991-92) ENH-98 from the Louisiana Bowl of Regents. Permission to copy without fee 
all or part of this material is granted provided that the copies are not made or distributed for direct 
commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. ACM-20th PoPL-1 /93-S. C., USA 
@ 1993 ACM 0-89791 -561 -5/93 /0001 /0273 . ..$1 .50 that in tum enables efficient implementations of 
programs in these languages. The precision of a program s call graph affects the precision of interprocedural 
analysis in Foman compilers as well [5]. This paper describes a new polynomial time algolithm for constmcting 
such a call graph that is precise within the limitations ofj?ow insensitive interjxocedural analysis. 
The key aspect of our solution is our model of the problem as a constant propagation problem over the 
domain -powerset of all procedure constants with set union as the meet operator. We call this the problem 
of prop­agating sets of procedure-values and show that this problem, unlike constant propagation prob­lem, 
belongs to the class of distributive flow anal­ysis problems [12]; it is therefore decidable. Our algolithm 
performs interprocedural flow analysis [10] to constmct the graph. We de­velop an interprocedurd procedure 
vahles prop­agation algolithm by amfilgamating Wegman and Zadeck s constant propa@ion algorithm [20] 
and Horwitz, Reps, and Binkley s interprocedural for­ward slicing algolithm [11]. Interprocedural analyses 
themselves depend on call muhigraph. Our algolithm resolves the conflict by iteratively propagating procedure-values 
over a system de­pendence graph representation of a program [11] and constmcting the call graph, till 
a fixed point is reached. We give a formal definition of the term precise call graph and prove that the 
call graph constructed by our al.golithm is precise. Our al­golithm computes precise call graphs for 
a larger procedure P(X, Y); procedure maino; proc var X, Y; proc var A, B; x := Y; proc ref P, Q, R, 
S; end; (-~. P(A, Q); *1: *A(); procedure Q(), C2 : P(B, R); procedure R(); . C3: S(B); procedure S(Z); 
C4 : P(A, P); proc var Z; 12: *A(A, S); 14: *20; 13: *A(Q); end; end; Figure 1 A program with procedure 
wriables and indirect calls. class of programs than the works in[4,5, 17, 18, 19, 21]. The rest of the 
paper is organized as follows. Section 2 establishes the terminology and formu-Iates the problem. Section3 
discusses theprevi­ous works on this problem and elaborates upon oLlr Contribution. Section 4 Sumrn,wizes 
Horwitz et. al. s system dependence graph (SDG) and ou rextensions. For more details about SDGs the reacleris 
referred to [11]. Section 5 gives our in­terprocedural procedure-values propagation algo­rithm. Section 
6 gives the algolithmto construct the call graph. Section 7 proves that our algo­rithm computes precise 
call graph and analyzes its complexity. It is followed by our conclusions and the list of references. 
2 Problem formulation We consider programs written in a procedural language that permits indirect calls 
through pro­cedure valued variables. parameters across a pro­cedure call are assumed to be passed by 
call by value-result. Global variables are not permitted. Only variables are allowed in the actual parameter 
list of procedure calls and repetition of variables in this list is not allowed. These restrictions pro­hibit 
aliasing in programs. The language, parame­ter transfer mechanism, and these restrictions are all inhelited 
from Horwitz et. al. [11] since we use their system dependence graph for represent­ing programs. These 
restrictions can be removed using the methods suggested by them. if A in {p] ,pz} then { if A == pl then 
pl(zl,12, ...). else if .4 == pz then p2(zl, z2, ...); } else { if A == p3 then p3(zl, z2, ...); else 
if A == p4 then p4(zl, z2, ...). else if A == p5 then p5(zl, z2, ... ); else terminate ubnormolly. ) 
 Figure 2 Code segment used to reify an indirect call *A(z1, x2, ...) at site c, where fkf(ct) = {Pi, 
P2} The prog~am in Figure 1 will be used as a running example. , The statements starting with an * are 
indirect call statements. Further, it is assumed that a special procedure main exists that initiates 
the execution. Definition: (Domain constraint). A procedure variable in a program can only be defined 
us­ing assignment statements that either have a pro­cedure reference or a procedure variable on the right 
hand side. V This constraint prohibits one to assign nu­meric expressions that evaluate to the physical 
memory address of a function as one may do in programming languages such as C. Definition: (Completeness 
constraint). Only pro­cedures contained in a program may be called from a call site inside the program. 
V In the absence of this constraint a procedure may call another procedure external to the pro­gram which 
may then call some procedure within the program. Such a call will go undetected. Definition: Let P = 
{pl, pj, .... pn}, 72>0 be the set of procedures in a program (including main). We associate a unique 
identifier to all statements of a program. Let C = {cl, c2, ....c~}. n2 > 0, be the set of (identifiers 
of the) indirect call vertices in the program. Let P be the power set of P. V Definition: The problem 
of constructing a call graph is essentially the same as creating a map­ping Lf : C + P, that maps each 
indirect call site to a set of procedure references constituting the procedures that may be called from 
that site. For c, this set is denoted by lkf(cz). V Definition: A call graph is dynamically precise if 
 for every call site Ci, AI(cZ ) contains only those procedures that can be called from Cz for some initial 
state a. V This definition is not useful since it relies on dynamic characteristics of the program. 
We would like a definition that depe~ds on a pro­gram s static characteristics. The obvious defini­tion 
based on paths in the flowgraph also does not suffice since due to presence of indirect calls the paths 
are not known statically. We solve the problem by transforming the program P to PM to P~ such that PM 
is free of indirect procedure calls and Pfi has no procedure calls at all. The three programs are equivalent 
under declarative semantics. Note that Pfi is introduced only to define the notion of statically precise 
call graph. It is only manipulated mathematically to establish properties of our algolithm. Definition: 
Let PM denote the program due to expanding indirect call statements in program P with respect to a mapping 
fll as follows. If Cz contains *A(z1, x2, ...) and IVf(cz) = {pi, pz} then the call in c~ is replaced 
by the code segment in Figure 2. All other statements of P are copied asistoPM. V Definition: P~ is the 
potentially infinite single procedure due to exhaustive inlining of procedure calls inside procedure 
main of program PJf. V The outer if introduced by expanding a c1 in PM does not contribute to its meaning 
but serves to create different paths for procedures contained in kf(ci ) and those not contained in it. 
The statements in the then side of an outer i~statement in PM (not P~ ) are said to lie on the true branch 
and those on the else side in the false branch. Definition: An ill-path in the flowgraph of PJ~ is a 
path in it that does not contain any statement that is an instance of some statement in the false branch 
of PM. (Refer to [1] for definitions of flowgraph and path). V Definition: A mapping J14 is conservative 
iff it has the property: if 3 a statement s 1 in P~ such that &#38; S1 contains VI := pj, b. in the flow 
graph of PJf there is an M­path from .sl to C: (an instance in P~ of the outer ij statement in PM that 
corre­sponds to cZ), c. a sequence of identity assignments copy  the value ofs 1 into the variable 
used in d. then c:, and there is an Jkf-path the flowgraph to S1 I]i E lf(cz). from start vertex of Q 
The condition says that if the program exe­ cution takes a path such that some statement SI propagates 
procedure reference pj to C: then the call graph should state that j)j may be called from c~. But reification 
of indirect call sites may intro­duce paths in the program that may not really happen. The condition 
there is an M-path from the start vertex to s 1 removes such paths from consideration. When the definition 
is applied from procedure main onwards, we claim that it will require all procedures that are called 
from a call site to be included in the call graph. The mapping is conservative since Jf(cj ) may contain 
procedures whose values can not be propagated to C3 through any path starting from main. Definition: 
A mapping Ad is optimistic iff it satisfies the property resulting from swapping the antecedent and the 
consequent of the definition of conservative. V This is the inverse of the definition for con­servative. 
It says that 114(c~) should not contain a procedure reference if there is no path through which its value 
can be propagated to CZ. Definition: A mapping is stdcally precise if it is both conservative and optimistic. 
We show that the call graph computed by our algolithm is precise in the above sense. 3 Comparison with 
previous works 4 System dependence graph The call multi.graph constmction problem has previously been 
studied by Ryder [17], Burke [4]+, and Callahan et. al. [5], Spillman [19] and Weihl [21]. Our work may 
be compared with these on a) constraints imposed on the usage of procedure variables and b) the precision 
of the resulting call Multigraph. The work of Burke, Ryder, and Callahan are specific to Fo~lran in which 
a) procedure valued variables are only allowed as procedure parame­ters and b) assignments to formal 
procedure pa­rameters is not allowed, they can only receive pro­cedure values from actual parameters. 
Amongst them, Burke s and Callahan et. al. s algorithms work for recursive Fortran programs where as 
Ry­der s algolithm does not. Further, Callahan et. al. s and Ryder s algorithms return more precise call 
graphs than Burke s. The program in Figure 1 uses procedure vari­ables in a way not permissible in Fortran, 
hence Burke, Callahan et. al., and Ryder s [4, 5, 17] algorithms can not constmct its call graph. Our 
algolithm is therefore applicable for a larger class of languages than these works. If, however, our 
algolithm is applied to the same class of language as Callahan et. al. s and Ryder s work, respec­tively, 
it is our con:jectuve that results returned will identical. Spillman [19] and Weihl [21] work with a 
procedural language that permits label valued variables and aliasing. Due to the presence of label variables 
they do not even have the flow graph of a program. As a result they can not as­sume any ordering in a 
program s statements. The results of the analysis are vely imprecise. The call graph constmcted by our 
algolithm and that due to Weihl s are given in Table 1 (towards the end of the paper). The reader may 
notice the differ­ence in the results. * The chapter concerning constmchon of call Multigraph in [4] 
lms been omitted from its jounxd version published in ACM TOPLAS (July, 1990). Horwitz et. al. s SDG 
encodes the data, con­trol, and call dependence relations between state­ments~ of a program in a simple 
procedural lan­guage stated in Section 2 [11]. The next para­graph outlines the wuious types of vertices 
and edges in an SDG as defined by Horwitz et. al. For a more detailed description the reader is re­fereed 
to [11]. The SDG consists of a collection of procedure dependence graph (PDG) (a variation of program 
dependence graph [14, 16]). There is one PDG per procedure in the program encoding the control and data 
dependence relations within the proce­dure. The various types of vertices in a PDG are: for statements 
 assignment, ifi while, jinaluse, for procedure call call site, actual-in, actual­out, and for procedure 
ently -entry, .fo~mal-in, formal-out. The edges connecting vertices within a PDG are control and jlow 
edges. The edges be­ tween vertices of different PDGs are: call edge from a call-site to an entry vertex; 
parameter­in edge from an actual-in to an <formal-in ver­tex; parameter-out edge from formal-out vertex 
to actual-out vertex; and summary edge from an actual-in to an actual-out vertex. Our extension.. We 
extend Horwitz et. al. s def­ inition of SDG to contain indirect call vertices to represent an indirect 
call. Each indirect call vertex has its pairs of actual-in and actual-out vertices that have flow edges 
connecting them to the vertices within the PDG. Since the pro­ cedures called from an indirect call statement 
are not known its vertices ,are not connected to ver­ tices of any procedure ently and there are no sum­ 
m,my edges between the actual-in and actual-out vertices. Our algolithm to construct call graph is iter­ative. 
As procedures that may be called from an indirect call site ,are detected the SDG is modi­fied to represent 
this knowledge. For each pro­ s It also has another dependence called the clef-order dependence which 
is not relevant for our work. This dependence is thel-efore ignol-ed in this paper. ,j&#38;. .. .~&#38;[ 
 ,~.1-.o A-I _o A_i A_o P_o ,W :P-._:. ,B- :.~ ~ -------. ;? :, ,, , --4 / ~~ =----= .1 . ... // ~ , 
,, , H~,, , .,; ~ , ,, , ) [d)&#38; :, , Z_i Z:o j ,. {4*Z ; L / i...,. -----.... ,, ... Figure 3 
SDG of program in Figure 1. Legend for vertices: rectangular boxes -entry ovals -direct and indirect 
calls; dotted oval -other statements; @X -not a true vertex, shows usage of reference to procedure X; 
A_i or A_o -parameter vertex (actual or formal depending on geometric proximity with entry or call vertex), 
_i denotes _in and _o denotes _ouL dotted polygon -PDG of each procedure. Legend for edges: shaded arrows 
-parameter-in and parameter-out edges; solid arrows ­data dependence edges. To avoid clutter the control, 
indirect-control, and call edges are not shown. cedure that may be called from an indirect call to the 
entry vertices of the corresponding proce­ site we introduce a virtual call-site and connect dures. This 
SDG can be created using Horwitz et. it by an indirect control edge emanating from the al. s algolithm. 
Figure 3 gives the initial SDG of comesponding indirect call site. The virtual call­ the program in Figure 
1. sites too have actual-in and actual-out vellices and they may be connected by summ,wy edges. Flow 
dependence edges entering or exiting the 5 Propagating procedure actual parameter vertices of a virtual 
call site ~a.re values using SDG copied from those of the indirect call site. These vertices are also 
connected by parameter-in and The goal of constant propagation is to dis­ parameter-out edges to the 
formal vertices of the cover values that are constant on all possible exe­ comesponding procedure. cutions 
of a program and to propagate these con­ stants as far as through the program as possible It may be reemphasized 
that the virtual call [6]. The constant propagation algorithms of [6, site vertices ,are created by our 
algolithm. In the 13, 20] use a jlat lattice and the following meet initial SDG only (direct) call sites 
,are connected sules: global G /* an SDG */; procedure PropagateProceciureValues; { I* Put root nodes 
in Worklist *I Wolkltst := d put nodes in G containing p:=c into WoTkltst, where p is a procedure variable 
and CE P; unmark all nodes I* Propugate constants to calling procedures *I propagateUsingSelectiveEdges(Worklist, 
[flow, summary, parameter-in)); let Worklist be the set of all nmrkeci nodes; I* Propagate constants 
to called procedures *I propagateUsingSelectiveEciges(IT orkl~ d, [flow, summary, parameter-out]); } 
procedure propagateUsingSelectiveEdges(Worklist, EdgeTypes); { P p~opagate constants ji-otn vertices 
in Worklist by traversing only edges of type in Edge Types *I while WoTkl%st # d do { select and remove 
an element v from W or lclzst for every vertex Ml such that v -w is an edge whose type is one of EdgeType 
Y do { if w. Value # w. Va17Le U u. VcJue w. Value := w. Value U v. Value; put w in Wo~klZst; } } 
} I* Initializations to be done before Pt-opugateProcedureValues is called *I procedure Initialize { 
for every node sin G do { if s is an indirect call site: s. Value .= ~; if s assigns a procedure variable 
to a procedure variable: s. Value := @; if s assigns a procedure reference c to a procedure variable: 
s. Va/ue := c } } Figure 4 Algorithm for propagating procedure values using SDG. aAb=Tifa#b site in 
the program may take. To differentiate with uAa=a the constant propagation problem we call this the problem 
of propagating procedure values. aAT=T The domain constraint of Section 2 stated in aAl=a Kam and Unman 
s [12] terminology implies that If the j?at lattice is replaced by the po]ver the function space for 
this problem consists of set of all values in a given domain and the meet only the identity function. 
It is therefore a dis­operator by set union these algorithms may not tributive flow ,analysis problem 
and, unlike tra­terminate for infinite domains such as integers ditional constant propagation, can be 
computed or real numbers. However, if the domain is precisely. The reader may note that since the call 
finite (as is the set of all procedures in a given Multigraph problem is formulated in terms of the program) 
the algorithms will terminate [12] and flow graph of I$j its computability may be anal­return the set 
of all values a variable at a given ysed using Kam and Unman s framework. Our procedure ConstructCrdlGraph; 
{ construct PDGs for all procedures Initialize; (See Figure 4) repeat Construct the SDG using Value 
of procedure variables at indirect call-sites PropagateProcedureConstants (see Figure 4) until Value 
of no indirect call-site changes I* create call graph M) is given *I VC, ~ C : A4(ct) = ct. Va/ue. 1} 
Figure 5 Algorithm for constructing call graph algolithm however does not use flow graph. cessed and 
the condition when vertices may be added to it is retztined from Wegman and Zadeck s Figure 4 gives an 
algolithm to propagate [20] algorithm. Due to the domain constraint, an sets of values of domain 7 for 
our extension assignment statement (of interest to us) can only of Horwitz et. al. s system dependence 
graph have one vatiable on the right hand side. This re­ [1 1]. The procedure Initialize should be called 
moves the need to introduce join nodes, as done before PropagateProcedureValues is called. It has been 
kept outside because in the next sec­by Wegman and Zadeck. tion PropagateProcedureValues is called in 
a loop We have not used Callah,an et. al. s inter­where the initializations need only be performed procedural 
constant propagation algolithm [6] for once. Examples enumerating the working of the our problem because 
it gives results less precise algorithm are also presented in the next section. than our algorithm. This 
is because Callahan et. Horwitz et. al. have noted that indiscriminate al. s summaty information is computed 
by ignor­traversal of an SDG S edges can create a depen-ing the existence of other call sites. Our algo­dence 
path between vertices of two procedures lithm has access to the PDG of the procedure and even when none 
exists. This happens because a hence there is no approximation. Our algorithm procedure entry vellex 
may be connected to mul-can however not be used to propagate constants tiple call sites. A traversal 
may use pammeter-in when the domain constraint is removed. edge coming out of one call site and p,arameter­out 
vertex returning to another call site to create the incomect linkage. Horwitz et. al. termed this 6 Constructing 
call graph the calling context problem and developed a two pass traversal to solve it for their interprocedu- 
The algorithm for finding the set of proce­ral forward slicing algolithm [11]. The first pass dures called 
from (an indirect call-site is given in of their algolithm uses only control, flow, sum- Figure 5. The 
algorithm is iterative. The Value maty, and parameter-out edges for traversing the of an indirect call-site 
the set of field gives pro­graph. Similarly, the second pass uses only con­ cedures known to be called 
from that site. Before trol, flow, summiuy, call, and parameter-in edges. the first iteration this is 
initialized to the empty Since we need only data dependence we drop the set. The SDG is updated at each 
iteration to add control and call edges from the two passes; which virtual call sites con-esponding to 
the Value of explains the choice of p~ammeters to propagate­ the indirect call sites. The procedure values 
are UsingSelectiveEdges in Figure 4. then propagated over the SDG potentially chang-The Worklist to maintain 
vexlices to be pro-ing the Value of some indirect call site. The SDG ..... @R !.,, m / L--=-=+. J ./ 
J.. \,,,, ~~ \, k Y_o  ;... ; ,,  ., 13 (J%_) < Q_i x:= Y,,; / / ~ . Figure 6 Parfial SIX after 
first iteration. Legend: shaded ovals -indirect call-sites; thicker solid at-rows this iteration. shaded 
arrows -new parameter in/out edges; Not call-site. Adding nodes ancl edges from previous iteration will 
is updated a,gain and the process iterated until the Value of all the indirect call-sites stabilize. 
We now apply the algorithm to the program in Figure 1 whose initial SDG is given in Figure 3. In this 
SDG the PDGs for procedures Q and R and all the control and clef-order edges have been ignored. The nodes 
of the indirect call sites have been labelled 11, 12, 13, and 14. The program requies four iterations 
of the repeat loop to propagate all the procedure constants. Figures 6 to 8 give the new SDG due to Value 
after the end of each iteration. The virtual call-sites created as more Value of indirect call-sites 
get known care shown in shaded ovals. They are labelled Vl, V2, V3, V4, and V5. Table 1 gives the Value 
for these nodes initially and after each iteration. For the sake of comparison, it also contains the 
-new flow edges added after shown: edge from indirect call-site to virtual make this SDG complete. values 
generated using Weihl s algolithm [21]. The other call graph construction algorithms do not process programs 
in our language and hence their results for this program can not be compared against ours. At the end 
of the first iteration, the proce­dure references Q, R, and P from call statements Cl, C2, and C4 are 
propagated to the indirect call-sites 11, 14, and 12, respectively (see Figure 6). Notice that 14 an 
indirect site in procedure S is connected to call site C2 of Main through an­other call site C3 (also 
in Main.). Similar propa­gation of constants across procedures through call sites in the same procedure 
is not permissible by Callahan et. al. s interpocedural constant prop­agation algorithm [6]. Virtual 
call sites VI, V2, and V3 are introduced in the SDG to reflect the ~g...  ;:EIl:~ , i-i Q-,~_. Bi ,.:xp:. 
~~~g~~ 1 0 o VI .7;;*..:J C!!!3 B_] -B.o A_i S_l A_o s ~ ....... . ..,,,. .,,,w-~-o -;Q .,,,/ -~ ....,,, 
., ~4 ~,~$> ! X_i ,~ i Y_o , .. . . //,-----­:%x:= Y ... ----­. . . . . ., . . . ~ ,-..., ,m, s ,; 
~ ~ ,i) ,,.,,... ;~s . , Q_i %0 ,,..... ...  -..,.,.::.,,.............. . ........ . .... .  ( ...... 
... .,, ,. .  ,,::.,,. ;.....: ..... ,, ..... ._ z_o  ; \ .L : .. ! Figure 7 Partial SDG after second 
iteration new knowledge. the value of a vellex can change is / P / (the maximum length in the lattice 
( P, ~)). The second iteration (see Figure 7) propagates procedure reference S from the virtual call-site 
V2 We now prove that the call graph created by (related to 12) to another indirect call-site 13. A our 
algorithm is statically precise. The proof is new vil~ual call-site V4 is introduced. based on two conjectures 
a) the SDG adequately The third iteration propagates a procedure represents a program s dependencies 
and b) the reference Q from the virtual call-site V4 (related SDG traversal algorithm only traverses 
data de­to 13) to indirect call-site 14. A new virtual call pendence paths. The interprocedm-al slicing 
algo­site V5 is introduced. In the fourth iteration no rithm of Horwitz et. al. [11] is based on these 
more values ,are propagated. Hence there is no conjectures. change in the SDG and the algolithm terminates. 
Our algorithm may be viewed as creating a sequence of call graphs A&#38;., Ml,. ... Mr where ~Ji(cj) 
= Cj. V (71U~, VC1 C ~ 7 Correctness and complexity before the ithiteration. analysis The gist of the 
proof is as follows. J40 is The algorithm of Figure 5 is guaranteed to optimistic because ~cj, &#38;f. 
(cj ) = ~. We prove terminate because a) the program is assumed to that if ikfi is optimistic then so 
is Ali+l. Finally, be complete, b) there are finite number of pl-o-M., the call graph on termination 
of the algolithm cedw-es, and c) the maximum number of times is conservative because there ,are no procedure 
@R @Q -.. / -. \   ,,,  53=i7: hti ~~ ,, ,...i,g,!:,, ; v 1 ;;:*(N :.5y:~&#38;$ B_l +B_o ... 
,. .,. . .. ....... ... + ­ / .................  / \/: / :, i , fi \Yo. 1 &#38; :,,x:=y : ., . .. 
.......... . .. --- , .. .. ,/ . ..... ..{ Figure 8 Partial SDG after third iteration values that 
may reach an indirect call site Cj and are not already in Jf(cj). Hence ~ is Precise. Since the precise 
call graph is defined in terms of P&#38; and Al-paths, while our algolithm uses system dependence graph, 
we first draw a relation between the two. This requires introducing some more notations. Definitiorx 
T (PM) removing from PM statements introduced call sites. Notice the relation is the program the else 
part after replacing between l fi created by of all the if the indirect and ~(~~)m. All the paths in 
T(PM )@ are A/f-paths and all the M-paths of Pfi are also contained in T(piw)m. Definition: Let GM denote 
the SDG for P with virtual call sites for the call Multigraph defined by Jf. Definition: Lett G&#38; 
be the potentially infinite graph created by replacing a call-site and the actual parameter vertices 
by the corresponding entry and formal-parameter vertices. Conjecture 1: Gfi is kornowhic to the PDG 
Of T(PJf)m. From this conjecture one may say that if in P~ the value of a variable defined at a statement 
z reaches a statement y then there will be a data dependence edge ing to ~ to that Conjecture 2: Horwitz 
et. al. s in Gfi from vertex correspond­corresponding to y. When traversing an SDG using interprocedural 
forward slicing algolithm, if a vertex of a vertex w then in and w , instances of tively, such that 
there v is found to be in the slice Gfi there exist Vertices V vertices v and w, respec­is a path from 
v to w . Since we only use a subset of the type of edges used in each pass of Horwitz et. a .$s forward 
slicing algolithm it can be infemed that if there is a path in our system dependence graph Table 1 Values 
of indirect-call sites initiatly and at the that path is also traversed by Horwitz et. al. s end of each 
iteration. The last column shows ~algorithm (with appropriate slicing criterion). the mapping due to 
Weihl s method. From the above conjectures we can infer the following. Every path (sequence of edges) 
of GJI traversed by our algolithrn comesponds to a set of paths in G~ which only represent flow of data 
along some paths in r ( PfiI ) m and therefore along M-paths of Pflf. By definition, in the flow graph 
comesponding to ~ (PJI )m there is a path from the start vertex to all the vel~ices. Hence, evely vertex 
of G~l used in our algorithm to create the initial ll~ork~ist is reachable from the start vertex over 
an M-path in the corresponding flowgraph. Lemma: If Mi is optimistic then M,,+ I is opti­ mistic. Proofi 
For all c~ ~ C if there exists a procedural value pj in &#38;li (c~) then it also exists in M,+l (c~ 
). If the four conditions for the optimality of M are tme in P8, then they <are also tme in Pti, +,. 
 We therefore only need to concern about the condition when there exists pj in Jl~+l (c~ ) and not in 
lk~~(cJ. For a procedure value to be added to the Value field of any ve~lex in the i + lt~ iteration 
there must exist an assignment statement that assigns the value to a variable and there must exist a 
path in CJflt along which the value reaches that vertex. These paths also exist in Gfit+l. Since all 
paths in a G~I are M-paths and since the domain con­straint allows only identity assignments to proce­dure 
variables the four conditions in the definition of optimistic constraint are satisfied. Hence, if Jll 
is optimistic then so is Illt+l. V Theorem: The call graph M = M. created by algorithm of Figure 5 is 
statically precise. Proofi Follow from above Lemma and that ter­mination implies Illm is conservative. 
V Complexity analysis. Let there be N vertices (including parameter vertices) that define proce­dure 
variables. Since maximum times the value of a vertex can be changed is I P 1, the SDG may at worst be 
created N. I P / times. The computa­tion of SDG can be done in polynomial time [11] Call-[teration Iteration 
Iteration Weihl s site 1 2 3&#38;4 method 11 Q Q Q P,Q,R,S I 12 P P P P,Q,R,S I 13 s s P,Q,R,S 4 14 
R R R,QR,Q 1h hence the construction of a call graph may also be done in polynomial time. Notice, that 
in each iteration new vertices and edges are added to the SDG, they are never re­moved. Intermediate 
information extracted by the SDG construction algolithm can be saved so that successive iterations may 
only perform incremen­tal work to update the SDG. The complexity of the resulting algorithm then adds 
(not multiplies) a polynomial to the worst case complexity of Hor­witz et. al. s algolithm. More details 
are beyond the scope of this paper. 8 Conclusions We revisit the problem of constructing call Multigraph 
of a program that contains indirect calls to procedures using procedure variables. The problem has previously 
been looked at by Spillman [19], Ryder [17], Weihl [21], Burke [4], and Cidlahan et. al. [5]. Shivers 
[18] solves an equivalent problem in the domain of functional languages and terms it zeroth order control 
flow analysis (OCFA). We present a polynomial time algolithm that gives statically precise call rnuhigraph 
for a larger class of procedural language than those dealt by Ryder, Burke, Callahan et. al., Spillman, 
and Weihl s. Our algolithm is significant because the precision of interprocedural data flow analyses 
pelformed by optimizing compilers depend on the precision of the call graphs they compute. Call graphs 
are also used for reverse engineering of software systems and provide cross reference for program understanding. 
The precision in comput­ ing such a graph can also significantly help these activities. Acknowledgments: 
We thak Rajiv Bagai ancl William Lancli, on their comments on an earlier version of this paper. The referees 
comments were helpful in improving the presentation of this paper.  References [1] Aho, A. V., Sethi, 
R., and Unman, J. D. Compilers: Principles, Techniques, and Tools. Addison-Wesley, 1986. [2] Allen, F. 
E. Interprocedural data flow analysis. In Proceedings IFIP Congress, 1974 (1974), North-Holland, pp. 
398-402. [3] Banning, J. P. An efficient way to find the side effects of procedure calls and the aliases 
of vari­ables. In Proceedings of 6th Annual Symposium on Principles of Programming Languages (1979), 
ACM, Pp. 29-41. [4] Burke, M. An interval-based approach to ex­haustive and incremental interprocedural 
analy­sis. Tech. Rep. RC 12702, IBM Research Center, Yorktown Heights, NY, Sept. 1987. [5] Callahan, 
D., Carle, A., Hall, M. W., and Kennedy, K. Constructing the procedure call Multigraph. IEEE ITans. Softw. 
Eng. 16, 4 (Apr. 1990), 483487. [6] Callahan, D., Cooper, K. D., Kennedy, K., and Torczon, L. Interprocedural 
constant propagation. In Proceedings of the SIGPLAN 86 Symposium on Compiler Construction (June 1986), 
pp. 152-161. [7] Chikofsky, E. J., and Cross II, J. H. Reverse engineering and design recovery: A taxonomy. 
IEEE Soflware (Jan. 1990), 13 17. [8] Choi, S. C., and Scacchi, W. Extracting ancl restructuring the 
design of large systems. IEEE Soflware (Jan. 1990), 66-71. [9] Cooper, K. D., and Kennedy, K. Efficient 
com­putation of flow insensitive interproceclural sum­mary information. In Proceedings of the ACM SIGPLAN 
84 Symposium on Compiler Construc­tion (.kne 1984), pp. 247 258. [10] Hecht, M. S. Flow Analysis of Computer 
Pro­grams. North-Holland, New York, 1977. 11] Horwitz, S., Reps, T., and Binlcley, D. Interpro­cedural 
slicing using dependence graphs. ACM Vans. Program. Lang. Sy.st. 12, 1 (1990), 26-60. 12] Karn, J. B., 
and Unman, J. D. Monotone data flow analysis frameworks. Acts Informatica 7 (1977), 305-317. r [13] Kildall, 
G. A unified approach to global program optimization. In Proceedings of the first ACM Symposium on Principle 
of Programming Lan­guages (Oct. 1973), pp. 194-206. [14] Kuck, D. J., Muraoka, Y., and Chen, S. On the 
number of operations simultaneously executable in FORTRAN-like programs and their resulting speed-up. 
IEEE >ansactions on Computers C­12, 12 (Dec. 1972). [15] Myers, E. A precise interprocedural data flow 
algorithm. In Proceedings of the 8th Annual Symposium on Principles of Programming Lan­guages (Jan. 1981), 
pp. 219-230. [16] Ottenstein, K. J., and Ottenstein, L. M. The pro­gram dependence graph in a software 
develop­ment environment. ACM SIGPLAN Notices 19, 5 (May 1984). [17] Ryder, B. G. Constructing the call 
graph of a program. IEEE Bans. Soflw. Eng. SE-5, 3 (May 1979), 216-226. [18] Shivers, O. Control-$ow 
Analysis of Higher-Order Languuges. PhD thesis, School of Com­puter Science, Carnegie Mellon University, 
1991. [19] Spillman, T. C. Exposing side-effets in a PL/I op­timizing compiler. In Proceedings IFIPS 
(Com­puter Soflware) Conference (1971), pp. 5&#38;60. [20] Wegman, M., and Zadeck, F. Constant propaga­tion 
with conditional branches. ACM 2&#38;ans. Pro­gram. Lang. Syst. 13, 2 (Apr. 1990), 181-210. [21] Weihl, 
W. E. InterProcedural data flow analysis in the presence of pointers, procedure variables, and label 
variables. In Conference Record of the Seventh Annual ACM Symposium on Principles of Programming Languages 
(Jan. 1980), pp. 8? 94.  
			