
 THE AGENCY PERSONAL INFORMATION SYSTEM Steve Kaisler Data Processing Research Office of Research and 
Development Central Intelligence Agency The Agency has developed a personal information system which 
offers simple data management, computational and document preparation services. These services are integrated 
into a framework patterned after the APL workspace concept. Key features of this system are direct access 
to the data base from either the user language or the document processor. Key words: personal computing, 
PDP-II, UNIX The Agency is providing a personal computing environment which has several dimensions. 
The most prominent of these is supported by IBM's VM/370. Individual users have access to their own virtual 
machines which they may independently tailor to meet their unique requirements. The second dimension 
depends on a stand-alone version of the Agency standard terminal. This system, equip- ped with floppy 
diskettes, supports the unsophisticated user with a simplistic BASIC language programming capability, 
a simple function key oriented data manage- ment system, and firmware text editing functions. These 
two approaches represent the extremes of the personal computing environ- ment: The sophisticated vs the 
naive user. The Office of Research and Development is exploring an approach which occupies a median position 
between these two extremes. The Agency Personal Information System (APIS) provides sophisticated services 
which have been adapted to the unsophisticated user. This paper describes the structure and features 
of APIS. The Personal Computing Environment APIS Configuration The Agency Personal Information System 
(APIS) is oriented towards the integra- tion of several information processing capabilities. It attempts 
to meet the needs of nonprogrammers who we expect, eventually, will learn to do simple interactive programming. 
Wherever possible, the system has been constructed using readily available tools or commercial components. 
 APIS seeks to provide, at a minimum, an environment containing the following capabilities: a relational 
data base management system (RDBMS) with an English-like, problem oriented query language. Permission 
to copy without fee all or part of this material is granted provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. i~ 1980 ACM 
0-89791-024-9/80/0900-0114 $00.75 ]]4 o a whole text processing capability  a document generation capability 
supporting both fast draft copy as well as quality hard copy  o a graphics generation capability  
a simple, user-oriented interpretive language providing interactive function definition and execution. 
 To support these capabilities, the Agency chose the UNIX operating system (Version 6) which is licensed 
by Western Electric. UNIX provided a proper set of tools for development of software as well as supporting 
a friendly user interface. The choice of UNIX and the RDBMS necessarily constrained the system hardware 
to a PDP-i1 computer. After some analysis and design, the following configuration was selected: a PDP-ii/34 
processor with 256K bytes memory a CRT terminal, either VTi00 or Delta Data 7260 (without diskettes) 
 a Sanders Technology Matrix Printer two RL-01 disc drives providing 10M bytes storage a TS-03 magnetic 
tape drive a graphics terminal (only on a few systems) An Overview of the APIS APIS is oriented towards 
the concept of a workspace--a logical entity containing all the information a user needs to work a problem 
set. In a workspace a user will be able to define four types of objects: textual data files which are 
typically documents such as letters, memoranda, manuals, or technical reports. o categorized discrete 
data stored in a data base  function definitions which may be invoked to perform specified operations 
for the user.  o graphics data which will be stored in frames  Analysis of the user environment led 
us to the development of the "mode" concept. A mode is an environment in which the user is constrained 
to a particular set of capabilities. The modes to be supported by APIS are: indirect and direct text 
editing modes, document preparation mode, computational mode, data base mode, and a graphics mode (not 
yet implemented). When a user "logs on" to the system (in the UNIX sense), he comes under the aegis 
of a monitor process which presents him with a list of functions he may perform. The log in activity 
also places the user in a default workspace asso- ciated with his user identifier. Typical of the things 
which a user might do are: enter any one of the six modes list all functions in the workspace list 
all global variables in the workspace change to another workspace enter the UNIX shell environment 
 create and initialize a new workspace Individual processors for handling each of the modes are "forked" 
as UNIX subprocesses under control of the monitor. A UNIX shell will also be forked as a subprocess so 
that any exit from 'UNIX' mode automatically returns the user to the monitor. Any mode can be applied 
to any workspace. In developing APIS, we utilized the notion that the user environment is data directed; 
that is, the data available to the user will undergo a series of opera- tions during problem solution. 
Usually, such operations are performed in a sequen- tial rather than parallel manner. Thus, the user 
stores and retrieves data in the data base, manipulates it to derive new information and then prepares 
a report or graphically displays the results. Clearly, the process is an iterative one. These operations 
correspond directly to the modes provided to the user. In the following sections, we present a short 
description of each mode's features. Indirect/Direct Editing Mode Two types of editing functions are 
provided to the user. Indirect editing utilizes the standard string-oriented approach common to most 
text editors. All data is treated as a set of text strings separated by end-of-line indicators. Commands 
in the text editor treat a specific line of text; e.g., one may insert, delete, substitute new characters 
or display a line of text. Other commands operate in a more global fashion such as those to search a 
text file for an in- stance of a given substring. This mode is implemented by invoking the standard UNIX 
editor. Direct editing mode utilizes the screen-oriented approach. It is, by its nature, more immediate, 
more particular and less systematic than indirect editing. The editor fills the screen with as much text 
as it can accommodate from the text file. Editing the text generally necessitates an immediate update 
of the text on the disc system. The philosophy here is that what you see is what you get. For example, 
to replace an errant phrase in a paragraph, you move the cursor to the beginning of the phrase and begin 
typing the new characters. Substitution takes place on a character-by-character basis until the replacement 
process is termi- nated. This approach provides the kind of "immediate" freedom appreciated by many unsophisticated 
user. The direct editing mode can be implemented in two ways. With a VTI00 terminal, APIS will invoke 
the Rand editor to provide the necessary functionality. Using the Delta Data 7260, the direct editing 
features are built into the terminal's control program. Thus, only a simple UNIX filter is required to 
expand the text when control characters are encountered during document preparation. Document Preparation 
Mode An essential element of the analyst's environment is the preparation of numerous reports, memoranda 
and forms. Document preparation is the process of executing a program to read a text file. The document 
preparation mode is implemented as a set of macro instructions which expand the text into a readable, 
structured format according to control information supplied by the user. For example, the user can specify 
the beginning of a new chapter or section, provide for a suitable indexing scheme, and request that a 
table of contents be collected. There is no point in belaboring the docu- ment preparation commands as 
they are the ones commonly found in most systems. A synopsis of the commands is found in Appendix A. 
 A unique characteristic of document preparation is that the user may specify data base retrieval statements 
within the text. Whenever SEQUEL statements (see below) are encountered, calls are made to the data 
base management system to retrieve the data and insert it into the text. This is accomplished by a special 
 set of directives. These are .SSEQUEL and .ESEQUEL commands. An example is most instructive: and here 
is a list of the pitchers who won 20 games in 1978 and had an earned-run-average of less than 2.20: 
.SSEQUEL SELECT LASTNAME, FIRSTNAME FROM PITCHERS WHERE GAMES-WON > 20 AND YEAR = 1978 AND ERA < 
2.20; .ESEQUEL This SEQUEL statement selects the appropriate pitchers from the set of pitchers according 
to the specified criteria. Computational Mode The computational mode gives the user the convenience 
of a desk calculator with the option of writing and saving regularly used programs ("functions"). The 
computational mode supports both numeric and string value assignments to variables where the last assignment 
determines the type of the variable. To display the value of a variable, the user simply types its name. 
 For example (where system output is underscored): *x = 12 ~X T2= "poor richard" ~Y poor richard 
The standard arithmetic operators apply to numeric variables. In addition, several string operators such 
as CONCAT, INDEX, LENGTH and SUBSTR are also provided. For example: *x = 12 ~y = 31 Wx*y Y72 ~+y) 4* 
(y/x) 52.68 and ea = "poor richard" Wb = length (a) Wb T2 ~c = substr (a,3,7) ~C or rich *concat ("po", 
concat ("or rich", "ard")) poor richard In addition, the interpreter which implements computational 
mode also supports multidimensional arrays. The type of an array element is determined by the last assignment 
to it. Thus, we might have: *array 2[3,3] 211,1] = 3.14156923 2[3,2] "colonel jones" which produces 
a mixed mode array. Removing typing considerations from the computational language removes a significant 
burden from the user. The computational language provides the ability to define and save functions. 
Once a function has been defined, it may be invoked by giving its name and the requisite number of arguments. 
The interpreter checks both the number and type of arguments before executing the function. In case of 
errors, the user is prompted with friendly messages keyed to the specific problem. Function defi- nition, 
of course, involves structure and control. Simple control statements have been included to allow the 
user to express both conditional and iterative structures (see appendix). Our studies have indicated 
that analysts feel comfort- able with simple syntactic mechanisms which impose a minimum of constraint 
on their execution. Thus, a user may include, for example, a conditional statement in a function or enter 
it for immediate execution. The result is the same. As an example, the user might say: ~x = "or" ~r 
if concat ("po", x) = "poor" then print "yes" else print "no" endif yes When a function is defined, 
it is stored in the workspace. A user may list all functions in the workspace by issuing the flist command 
to the interpreter. Functions may be called from within other functions and the results of a function 
may be the argument to another function as in h : g(f(x)) where g and f are single-valued functions. 
The only restriction placed on the user is the declaration of whether a function returns a numeric or 
string value. Together with typeless variables, we believe this approach offers a more friendly environment 
than BASIC with considerably more power of expression although this is concealed in the simple syntax. 
 An essential feature of computational mode is the provision for direct accessibility to the data base 
contained in the workspace. When the user invokes computational mode, the interpreter automatically "opens" 
the data base. There- after, a user may directly reference information in the data base through a simple 
syntax. The structure of a relational data base consists of tables having rows which contain a varying 
number of fields. Fields may have numeric or string values. To reference information in the data base, 
the user must know the table name, the field name and the value of the key field identifying a specific 
row. He may retrieve data using the following construct:  <variable/array>=<table>.<field>(<key field 
value>) and may insert data by executing <table>.<field>(<key field value>)=<variable/array/ function/expression> 
 For example: mx = missile.length("SS-20") ~x 7100 (centimeters) To our knowledge, a facility possessing 
this simple an interface is not available on any other system. The interpreter determines the type of 
the data base field and sets the type of the variable or array element automatically. This generality 
of expression is not bought without a restriction, however. In relational systems, the first field in 
a row is implicitly thought of as the "key" for purposes of inserting that row into the table. We restrict 
the value of the data base index to a value of the key field. This restriction is enforced because, alone 
of all other fields in a row, the key field may not have a null value. Moreover, if duplicates of a key 
field value occur in a--~ble, we guaran- tee that only the first such row will be accessed. Data Base 
Mode APIS implements a full-fledged relational data base management system known as ORACLE. ORACLE, 
developed by Relational Software, Inc., supports a full SEQUEL interface as defined in the IBM Journal 
of Research and Development. SEQUEL is intended to provide a powerful yet flexible tool for the casual, 
nonprofessional computer user. It provides substantial potential for the user to follow an evolutionary 
path in learning its features. The naive user can begin by learning and utilizing only the simplest query 
features while the more experienced user can make use of its inherent power to pose complex queries. 
In any event, whether naive or experienced, all users learn and use just one language: SEQUEL. ORACLE 
will provide an integrated set of features encompassing retrieval, control, manipulation and definition 
of relational data structures. SQL pro- vides a unified language approach to interacting with the data 
base management system, and an excellent vehicle for executing the other operations. ORACLE includes 
an integrated data dictionary which is accessible through the SQL interface. The data dictionary provides 
user with a means to find out what data is available to them. The ORACLE data dictionary defines all 
data items and tables in the data base in a centrally located table. Moreover, the complexity of the 
data organization and the data structure is hidden from the user but yet is available to the system for 
resolution of queries. ORACLE supports the concept of dynamic data independence wherein the data base 
is allowed to grow and change without interfering with existing data structures and access methods. ORACLE 
allows physical storage devices of varying types to be interspersed in the system without altering the 
ways in which a user accesses his data. ORACLE allows the user to dynamically add new data items or tables 
without the necessity of reorganizing or recreating the data base. Moreover, with dynamic data structure 
and index manipulation, the user is allowed to "cut and paste" portions of tables to create new logical 
organi zatio ns of data. ORACLE is oriented towards high performance and efficiency in retrieval and 
manipulation of data. One aspect of performance is achieved through the com- pression of data so that 
raw storage requirements for the data base represent only the data that is actually present. ORACLE minimizes 
access to data items by allowing any data item to have an index associated with it. The keys within the 
inverted list indexes are compressed in order to reduce the overhead associ- ated with their maintenance. 
 ORACLE will implement a complete array of protection features which are guaranteed to preserve the data 
from hardware failures, and accidental or malicious modifications by other users. ORACLE automatically 
checks the values of data items as they are entered into the data base in order to prevent inac- curacies. 
ORACLE provides security in the data base by controlling user access to those tables which they are authorized 
to access. Moreover, ORACLE will support a restart and recovery operations to prevent the loss of data. 
 Perhaps the best way to become acquainted with the capabilities of the ORACLE system is through a brief 
survey of the functions it provides the user. Let us assume that the user created an empty data base 
via a utility program supplied with the ORACLE system. The first step in building a data base is to define 
the tables which will contain data. The user can dynamically create a table by defining the physical 
attributes of the items to be stored in the table. Among the things which the user can specify are the 
item name, item type, its length, whether or not it must have a unique value, whether or not it must 
have a value at all, and if it is indexed within the data base. A cor- relative function allows the user 
to drop (or delete) a table as easily as it was defined. Although a user may specify an indexed item 
when a table is created, indexes can also be created and dropped dynamically. One aspect of creating 
indexes is the abiiity to cluster data items physically so as to optimize performance during retrieval. 
However, only one item in a table may have the clustering attribute associated with its index since this 
attribute affects the way in which the data is physically stored in the data base. Once a data base 
is defined, its structure remains flexible. The user is given great latitude in modifying table definitions 
by adding or deleting columns to a table, dynamically. Existing programs or queries written to operate 
with the old table definition will continue to operate correctly without change so long as the appropriate 
data are present. Moreover, as long as the new column entries have null values, no physical storage space 
is required to represent them. The capability to modify the table definition extends even to the ability 
to change the nature of the attributes of the items previously defined within a given table. However, 
this modification is allowed only so long as it does not conflict with existing data contained in the 
table. Retrieval from the data base is accomplished through a simple SELECT state- ment which allows 
the user to select the desired item values--or arithmetic expressions and built-in "aggregate" functions 
of these values when they are numeric values--and must specify in a FROM clause the list of tables containing 
the refered items. All rows of tables where referred items have values satisfying some criteria (specified 
in an optional WHERE clause) are returned to the user although he may specify that duplicate values 
are to be eliminated. This latter feature must be explicitly requested as it is an expensive operation 
which should not be invoked by default. The result of a selection is returned in a system-defined order 
(for more than one set of data values). The user may explicitly request an ordering of the data based 
on one particular sequence of column names to be the sort fields. The ordering may be in either ascending 
or descending order. The user may wish to partition the resulting data into groups based on the values 
of one or more data items. Simultaneously, the partitioning may be restricted to only certain groups 
of data which verify certain Boolean expression of predicates specified in a "HAVING" clause. The user 
may also select data based on the application of predicates function of built in functions like average, 
maximum/minimum, count, sum or containment within another set of values. In effect, this implements the 
set-theoretic operations of intersection, union, and disjunction. A key feature of the SQL interface 
is the ability to 'join' selected data values from more than one table. The join of two tables, named 
T1 and T2 is a new table T3 where a row is the concatenation of a row of T1 and a row of T2 which verify 
the join condition and possibly some other conditions. A typical join condition is an equijoin condition 
such as C1 = C2 specifying that the column C1 of T1 must have a value equal to the column C2 of T2 for 
the correspond- ing rows of T1 and T2 to qualify and form a row of T3. Before a user can retrieve data 
from the data base, he must have some method of getting data into it. The insertion operation allows 
a user to place new data item values within the data base. An insertion operation may specify all or 
only a portion of the da~a items in a table. Those data items for which no value is specified are initialized 
with a null value and, consequently, occupy no physical storage space. The creation of duplicate physical 
records is not explicitly prohibited unless a data item which is indexed within a table has the associated 
uniqueness attribute. An insertion operation may rely on the evaluation of another SQL query to select 
those items which are to be inserted into a table. Deletion is accomplished by specifying selection 
criteria which identify the records to be removed from the data base. Unlike the insertion operation, 
the deletion operation can deal with sets of logical records as well as indi- vidual records. The user 
is also allowed to modify the values of items of (sets of) existing records within the data base. An 
update operation is functionally equivalent to first deleting the values of the specified data items 
and then inserting new values in their place. Different users often perceive different relationships 
within the same set of data. ORACLE allows a user to define explicitly his own alternative view of the 
data stored in the data base. A 'view' is like a window through which a user sees only those portions 
of the data base which are of interest to him. In effect, the process of defining a view is equivalent 
to that of creating a virtual table; e.g., one which is constructed from the contents of existing tables 
on demand. Thus, as the contents of underlying tables change, so also will the contents of the view change. 
 Views may be defined from more than one table by specifying a 'join' operation on the appropriate tables. 
The data which comprises any specific view may be specified using selection criteria just as though one 
were retrieving from the actual tables. The essence of a view is that, as a virtual table, it is subject 
to all the table operations which were previously discussed. Finally, ORACLE supports a comprehensive 
set of data control facilities. One aspect of data control is the ability to determine who has access 
to the data contained within a table. Nominally, the individual who defines a table 'owns' that table. 
However, the owner may extend to other users the privilege of accessing his table. Access may be restricted 
by the type of operation to be performed such as read, insert or update. In much the same way, an individual 
who defines a view becomes its owner also and thus can specify the same types of authorizations. Access 
privileges are assigned by specific user identification-- a feature of the ORACLE multi-user environment 
management routines. 120 What the owner granted, he may also revoke. Access privileges can be granted 
or revoked individually or "en masse". Uniquely, a user may grant to other users the privilege to grant--relative 
to some granted privileges--but the ability extends only to the privileges which the user is authorized 
to exercise on his own behalf. Conclusion APIS is a system implementation which has emphasized an integration 
of different software tools in support of one aim which is of utmost importance: Service for the user. 
Satisfying this goal requires low cost, ease of use and flexibility rather than optimal performance since 
the system is geared to one user at a time. In developing APIS, we have constructed a prototype system 
which meets all these goals but one--cost. Initial hardware and software (UNIX, ORACLE) cost was about 
$45,000. Today, this can be reduced to about $23,000--a decrease of 50 percent. APPENDIX A Document 
Preparation Commands The documentation mode commands are typically written in a textural file while in 
one of the two editing modes (ed or se). These commands are intermixed in the text. There is no more 
than one documentation processing command per line. It is always left justified. It always starts with 
a period character. A list of the commands with a brief description follows: .CENTER centers the next 
line &#38; skip to next line (nofill) .CHAPTER "heading" start a new chapter with specified heading 
.CONTENTS specifies a table of contents must be output .DOUBLE double space from now on .DRAFT fast 
draft print rather than slow letter quality .SFOOT start a footnote .EFOOT eud footnote .SINDENT n start 
indentation of n characters .EINDENT end indentation .INPUT "prompt" allows the user to input data from 
the terminal .LINE skips one line .SLIST start a new list .LIST an element in the list .ELIST end the 
list .ONBHALF tell printer to go one and a half space between lines .PAGE start a new page .PARAGRAPH 
start a new paragraph: new line and 5 char indent .READ "filename" inserts at his point the text contained 
in that file .SECTION "heading" a new section starts (chapter subdivi- sion) .SECURITY sets the classification 
on page header &#38; footer .SINGLE single space between lines from now on .SSEQUEL indicates beginning 
of SEQUEL retrieval statement for data base .ESEQUEL indicates end of SEQUEL statement .SKIP n skips 
n lines .TITLE the next line is the title of the document .UNDERLINE underline the next line APPENDIX 
B Syntax of User Language The syntax of the language was designed to be as simple as possible. A brief 
overview follows in which E designates an expression and S designates a statement: o Comments: are enclosed 
in/* and */ o Names: a. identifier: alphanumeric string which must start with a letter of the roman 
alphabet  b. ID array element [subscript] in which the first identifier characterizes the array, and 
the subscript is either an identifier or a numeric constant.  2D array element: identifier I [subscriptl 
, subscript2] similarly C. Operators : ° + -*1% apply only to numeric expressions o = < = > = ~ = 
< > relational operators apply to numeric variables. "compare" strl, str2) is the equivalent of these 
relational operators, when the expressions involved are string types. "compare" is either streq (to test 
equality), strne (inequality), strgt (greater than), strge (greater or equal), strlt (less than), strle 
 (less or equal). or and not: Boolean operators, apply to relations or Boolean expression of these. 
 (assignment operator) = in the typical form: <variable> = E; applies to assignment for a left hand numeric 
or string variable, but the right hand expression gives a new type to the left hand variable. Expression 
E: it is either a name or E operator E, or (E) or a constant such as a number with optional sign and 
decimal point (numeric constant) or a character string between quote (string constant) or sqrt (E) if 
E is a numeric expression or <identifier> (E,..,E) if the identifier refers to a function --either built 
in such as sqrt, or a library function, or a user-defined function -- Statements: o E <name> <assignment 
operator> E S where S stands for a statement 123 ° S IS S] if relational expression then S [S endif 
 while relationalexpression S [S endwhi!e for ,'index variable> from E to E [by ~] do B [S endfor 
 null statement o break o function definition statement  o quit  The function definition statement 
is typified as follows: define /sdefine <identifier> ([<identifier>, ..., <identifer>]) [auto <identifer>[,..., 
<identifier>]] S ...S return E endfn Built in functions: I. sqrt (E) applies to numeric expressions. 
Note: there exists also a number of numeric functions in the library which are therefore read in every 
time the interpreter is called in (and the library is specified) and which are re-executed from the internal 
form in core every time they are "called". These functions are not really "built-in functions". They 
are library functions, and are not nearly as efficient, but are easily modifiable and new functions are 
easily added to this library named /usr/lib/lib.interpr 2. concat (stringl, string2) is a function whose 
two arguments are expressions which must evaluate tn strings --hence called string type expressions. 
The function returns a string which is the concatenation of the two argument strings.  3. length (string) 
returns the length of the string. Note here that the argument is a string type expression while the function 
returns a numeric value.  4. substr (string, start, length) returns the substring of "string", starting 
at character number "start" and of length "length".  124 5. index (string, pattern string) returns 
a number equal-~o the character number where the pattern string may be found to be an embedded substring 
w~hin "string". Only the first occurrence is found. Index returns 0 (zero) if the search is unsuccessful. 
 All function arguments are passed by value except for arrays which are passed by reference. This means 
that the argement variables which are designated in the function call cannot be modified by the function. 
 125 
			