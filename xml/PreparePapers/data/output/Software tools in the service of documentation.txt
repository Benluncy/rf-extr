
 $OFTWAKE TOOLS IN THE SERVICE OF DOCUMENTATION Daniel Brantley, Manager, Technical Writing David Dillard, 
Senior Specialist, Utilities Development NETWORK Consultants, Inc., Chicago, Illinois, an affiliate 
of General Electric Information Systems Company (GEISCO)  INTRODUCTION This paper is about applying 
automated tools to address two frequent (and too frequent) problem areas in documenting computer systems--the 
problem of providing easy and timely access to information about a system for those who need to have 
it; and the problem of maintain{ng the ac- curacy of that information during a sys- tem's life. The 
scope of the paper is limited to de- sign documentation--generally including the prose generated to describe 
programs after the functional specifications are complete, and excluding operations guides, acceptance 
test plans, and so on. The focus is on convenience. Can we make it more convenient to produce and use 
this information, and can we conveniently keep it accurate? In a system' s development phase, informa- 
tion on design strategy must be communi- cated to the programmer. As the coding and testing progresses, 
some design ad- justments may be made, and this new in- formation must be communicatedup and down the 
line. Finally, when the system is in production, the design documents and code are all made to agree, 
and we can quit worrying about documentation, right? Not jusv yet. As long as a system is being used, 
the development phase may never be entirely over. There are fixes to be made, and of-ten somebody invents 
a better mousetrap while making a fix. Also, there may be changes to the functional requirements anytime 
during the cycle, from field size changes to whole new functions. Permission to copy without fee all 
or part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. &#38;#169; 1985 ACM 0-89791-148-2/85/0500/0060, 
$00.75 Any of these events may create a need to update the design documentation, but whether this is 
ever actually done or not often depends on the amount of effort in- volved, so it is useful to try to 
make up- dating easy. ADVANTAGES OF DOCUMENTATION IN CODE One way to increase communication among designers, 
programmers, and documentors-- before the code is begun, while it is be- ing written, and when it is 
revisited for maintenance--is to put the program design text in as blocks of comments in the source code, 
and use compiler toggles or editing tools to extract it as needed for a formal document. Use any methodology 
of organization or format that you like--just so the text is machine-readable. If you use an automated 
 text formatter to print your document, you can even include the formatting commands. Put the text that 
describes the program in general at the head of the file, and put the descriptions of each individual 
module (paragraph, procedure, routine) in the file wherever the code for that module is located. In 
the early stages, the module code may be simply a stub. Documentation in code is of course not a new 
idea, but, having tried it, we have found it advantageous in several ways: * First, the design is always 
con- veniently available for reference. There is only one version of the information, so no matter 
how of- ten it is changed, there is only one place to do it, and everyone who reads it can be confident 
that they are looking at the latest re- vision. When someone later visits the pro-gram to find out how 
it works in order to decide how to change it, the information is handy. 60 * The people who make code 
changes are much more likely to update the documentation if they can d0it immediately, without going 
tO an- other file or editing a hardcop~ document.  * If you need to produce a hardcopy document, you 
can extract and copy  just what you want, and leave the rest. If you have even moderately powerful 
editing software, this can be a fairly simple exercise. If you do not trust the wordsmith- ing skills 
of your maintenance programmers, review the text in the source code file and adjust it before you move 
it to the formal document . Granted, just putting text in a handy place where it is easy to find is 
not the same thing as making it truly easy to cre-ate and update. It makes the documenta-tion a little 
harder to ignore, but will not guarantee that it will actually be up-dated. We must also remember those 
who may have attitudes ~different from ours on the need for documentation. Some feel that, once the code 
is written, that is all the program documentation any-one would ever need, except maybe for a few comments 
to accompany the more arcane code statements. Others believe that doc-umenting a program thoroughly is 
a good idea in principle, but takes too much time. ~ Somebody is going to come along and change the code 
anyway, without tracking down the documentation and updating it, so why bother? Still, Someone has estimated 
that, in the life of an average system, two-thirds of the effort is in maintenance. Probably a significant 
part of this effort happens when someone wants to fix or enhance pro-grams written by someone else, who 
is long go~e. So it seems logical that taking the time to mark the trail as we go along is a worthwhile 
effort. The fact that creating and maintaining documentation is a lot of trouble is not a sufficient 
reason to throw up our hands and abandon the effort. What we can do is try to make the text easier to 
write and maintain, as well as easier to find. The utility program GETREF i's intended to do both. GETREF: 
A TOOL FOR DOCUMENTATION GETREF operates on a ~ource code file to do several documentation tasks. The 
first is to locate and extract the block's of descriptive text associated with ~each module in a program 
(a module being a named, callable section of code: routine, subroutine, function, paragraph, proce- dure, 
subprocedure, etc.). These blocks are entered in a standard format as com- ment lines at the beginning 
of a module. This does not include incidental comment lines ;imbedded within the body of the module 
code. GETREF leaves those alone. The format and content of the description is whatever you want it to 
be--presumably some brief and general statements about the function of the module and its inter- face 
to the outside world. Fig. 1 is a sample template, used to enter these kinds of information about a module: 
 * Module name  * Module function  * Input (natural language descrip- tive names or actual file names) 
 * Output (again, may be descriptive names, not necessarily code names)  * General processing algorithm 
(in a terse style, perhaps pseudocode or structured English)  * Optional design notes (e.g., to explain 
unusual procedures)  Format for Simplicity The purposes of the template are to make things easier 
for designers and program- mers and at the same time minimize differ- ences in writing styles. The template 
streamlines the writing process by: Identifying what kinds of infor- mation the documentor needs to 
provide, and, by implication, what may be left out.  * Minimizing the amount of prose that needs to 
be composed.  * Enhancing readability via a stan- dard format.  To avoid lengthy and convoluted prose 
des- scriptions in the general processing algo- rithm, you might use a decision table in combination 
with or instead of pseudocode or structured English (see Fig. 2). The main idea is to keep the information 
requirements simple and still give perti- nent information about what this module does--or, in the design 
stage, what it should do. The amount of detail may vary, depending on how much of the algorithm the designer 
cares to dictate to the program- mer. Although the data used in the module is identified, actual variable 
names and file names are not necessary, especially in the early design stages. 61  Automated Analysis 
b~. Module The second task of the program is actually to create documentation for the levels of detail 
that are tedious to provide manual-ly. GETREF analyzes the code for each module, to extract information 
on vari- ables and to identify calls to and from other modules, including modules called from other programs. 
The output of this part of the program is the reference list for the module. Fig. 3 shows a sample reference 
list and, below the list, a legend explaining the codes for each list- ed item. (The legend actually 
appears on- ly once~ as the first page of the GETREF output.) For each symbolic name in a module, The 
reference list contains: Definition code: Tells whether a variable is an argument, global variable, 
local variable, etc. Use code: Tells whether used as a called procedure~ an argument to a called procedure, 
input only, out- put only 9 or both input and out- put. Type code: Data type, e.g., in- teger~ literal, 
string, procedure, etc. Variable or procedure name, fol- lowed by any descriptive comment that accompanies 
the variable's declaration statement.  What do we have at this point? For each module of the source 
file, GETREF has pro- duced a module description that includes a manually created general description 
fol- lowed by the automatically produced refer- ence list. Fig. 4 is an example of what s module description 
looks like in the GETREF output. This minidocument brings together--in one place--a lot of what you want 
to know about each module, without your having to do a lot of code-grubbing to find it. If you are a 
maintenance programmer, you have a reference document that will help you find which modules need to be 
changed in the program, and help you analyze the ripple effects of the changes. Of course, if you do 
make a change, while you are visiting the code is the time to dheck the module description narrative 
and make the update~ if it needs it. That should be easy~ since the text is in the same file, adjacent 
to the code statements you just changed. Then, run GETREF again to pro- duce the updated reference document 
re- flecting your changes. The update, of course~ also includes corrected reference lists for each module. 
 Automated Analysis of the Whole File So far, the focus of information has been on the individual module. 
There are three more aspects of GETREF output besides the module descriptions. These three tables analyze 
the program as a whole~ rather than just one module at a time: GETREF remembers the global vari- ables 
referenced in each module and produces a Global Reference Table sorted alphabetically (see sample, Fig. 
5). The Module Hierarchy Table (see sample, Fig. 6) uses indentation to show called and calling rela- 
tionships. Recursive calls are noted but not repeated in the table. In the Cross-Reference of Calling 
Modules by Called Modules (see sample, Fig. 7), the left-hand column shows the nam~ of each called module. 
The mJdules that call it are named in the right- hand column.  O~put File The output of a GETREF run 
is an edit file with text formatter commands. The legend explaining the reference list codes is the first 
page; the module descriptions 9 each with a reference list, come next; and the program-wide reference 
tables are last. The edit file can be printed as-is or ed- ited for a formal design document. For instance, 
if all you want is general in- formation, you can edit out the detailed reference lists for the modules 
and leave the narratives. GETREF and the programs it analyzes are written in Tandem's Transaction Applica- 
tion Language (TAL, aka T/TAL), tLe prim- ary application language for Tandem Com- puters Incorporated 
machines. The high- level design of GETREF was conceived by David Dillard and Daniel Brantley to ad- 
dress documentation needs of the Technical Writing Group at NETWORK. David Dillard developed the detailed 
design and comp- leted the implementation. WIDER APPLICATIONS The tasks for implementing a similar tool 
for other machines and other languages would not be very different than for GETREF. We estimate that 
program develop- ment could take a few days or a month, de- pending on the number and power of soft- 
ware tools already available. The two main tasks of such a program are finding 62  and copying the 
module descriptions, and parsing the code within a module. Findln~ the Module Descri£tion In setting 
up a template for module de L scriptions, these conventions make the task of extraction easier: A module 
description is a block of comment lines contiguous with the code it describes. Just before the procedure 
code is probably advantageous. The first line in the block begins with a character or string easily 
recognizable by the analysis program as the beginning of a module description (e.g., "! ..... "). The 
block continues until the next llne of code occurs. Any comment that does not conform to the rules above 
is not eligible to be a module description template and is ignored.  In this way you can pick up the 
module description without needing to know the associated module name yet; the module name is simply 
the one in the next module declaration statement. The main point is that the signals should be simple 
and un-controversial. Beyond that, the template can be whatever you like, from highly structured to free-form. 
We chose the form in Figure 1 to try to minimize the amount of writing involved and standard-ize the 
kinds of information needed. What if you are analyzing an old program that does not conform to your conventions? 
It might be worthwhile to edit the file first, and insert the signals when you find appropriate comment 
blocks. In any case, the reference list that is created automatically is valuable, and should be done 
for every module, whether or not it has an associated description. The Parser The parser is the part 
of the program that analyzes the code statements to identify variable names and how they are used. The 
parser basically identifies a token--that is, a character string surrounded by delimiters, for instance, 
a blank--and decides what to do with it before reading the next token. There are essentially two kinds 
of tokens, variable names and key words (such as "READ" or "ffi"). If the current token is not in the 
key word table and it fits the language's naming conventions, it is a  variable name. If it is a key 
word, it shows how the previous or next variable in the statement is used. For instance, in an assignment 
statement, if a variable is on the right of the equal sign, it is used as input to the current module. 
If it is ~on the left side its value is poten-tially changed, and it is considered out-put. Further, 
if the variable is part of a function call or a call to another mod-ule, it is an argument. To associate 
to-kens with individual modules, the parser also needs to be able to recognize the beginning and end 
of a module. Most com-pilers have the ability to call in code from another file at compile time, so the 
parser also needs to recognize these com- mands, branch to that file, read andparse it, and return to 
the original file. ~!_~ eeds In planning a similar tool for analyzing other languages, there are some 
consider- ations that will affect the program design and the effort required to implement it. P~o~amm~n~ 
Standards. The way your pro- grams are written affect the complexity of the work the tool has to do. 
I~ you have rather rigid standards about structuring the code and documentation, and the standards are 
actually followed, the job of extracting the narratives is easy. If not, you may be forced to take the 
pro- grams as they are and look for free-form module description narratives everywhere it is possible 
for them to be. In any case. the text extraction is basically an editing task. GETREF reads the source 
file and builds the documentation file gradually, but you could also start by writing a compiled listing 
into an edit file and deleting the text you do not want.  Information Re~!~d. You may not want all the 
information that GETREF provides, or you may want even more. For instance, GETREF deals with every line 
of code in a module, not just to identify the variable names, hut also to see if their values are changed 
in the local situation, and how. It also recognizes calls to other modules. But if you do not care to 
know more than the names, you might want to make things simpler by massaging the output of your compiler 
or the output of some other ex-isting cross-reference tool to associate variables with module names. 
 In summary, we think GETREF is a useful tool for designing, coding, maintenance, and documentation. 
It was born out of sympathy for both programmers and docu-mentors, in the hope that it will help make 
documentation on time, on target, and below budget. 63 F_~ure 1 Module DescriEtion TemE~ ~ PROCEDURE 
^ NAME Function: <one-phrase or one-sentence description> Input: <logical file or data names> [<open/close 
action>] Output: <logical file or data names> Processing: <narrative of general algorithm> Notes: <design 
notes, special error handling~ etc.> 64 Figure 2 Decision !able As Processinf~_Al~orithm ~rocessing: 
Call READ^TOKEN to read token and set CLASS. If CLASS is: COMPILER VAR COMMENT EOF ASSMT LTPAREN RTPARFN 
EOS Other Then-  Call COMPILER^COMMAND to read line and process sourced-in files or sections, Call 
DO^KW'VAR to process keywords and variables --set needed conditio, flags, add new variables to the dictionary 
of declarations 9 and complete reference table information when appropriate. Call DO^COMMENT to determine 
comment type and process accordingly. Decrement EOF^LEVEL by I. Set ASSMT^FLAG on- Increment PARENAFLAG 
by I. Decrement PAREN'FLAG by I. Set ASSMT^FLAG off. Set CALLED^FLAG off. 65 Sample Reference List 
 Main Procedure GET'REF*MAIN References: G * PROC COMPLETION'CONTROL - G * PROC ERROR'MSG G * PROC INIT^CONTROL 
- G A LIT LEAVE^ERR -error severity code G * PROC PROCESS^FILE - L A STRNG PROC'NAME -name of current 
procedure/subprocedure E * PROC STOP G A INT TERM*FNUM home terminal fnum G I PROC TRACE G A LIT TRACE^MSG 
-trace message number Explanation of Reference List: The reference list hasthe general form: d u tttt 
<variable/procedure name> -<descriptlon/comment> where d is the definition code with one of the following 
values: A Argument to this procedure or subprocedure E Externally defined in a sourced-in file G Globally 
defined L Local to this procedure only S Sublocal to this subprocedure only and u is the use code with 
one of the following values: A Used as an argument to a called procedure I Input only (value not changed) 
I/O Used for both input and output O Output only (initial value not used) * Does not apply (called procedure) 
and tttt is the type code ~with one of the following values: DEFN Definition FIXED Fixed INT Integer(16) 
INT32 Integer(32) LIT Literal PROC Procedure STRNG String STRCT Structure SUBPR Subproce~ure UNKN Unknown 
(externally defined) 66  Figure 4 Sample Module Description GET ^ CHAR Function: Get and return a 
character from the input stream. Input: Current source file Output: CHAR Next character from input 
stream Processing: If the last character in the line has been read: Read the next line. If end of file: 
 Set character to EOF. If error: Call ERROR'MSG to print message and exit program. Else: Increment 
column number by I. Reed the next character in the current line. Procedure GET*CHAR References: A A 
STRNG CHAR -current character G A INT CUR'COL -current column of input G A LIT ENTER'ERR -error severity 
code G I STRNG EOF -end-of-file code G I STRNG EOL -end-of-line code G * PROC ERROR'MSG G A LIT LEAVE'ERR 
-error severity code G A STRNG LINE -input line buffer G A LIT LINE'MAX input line maximum length L A 
STRNG PROC~NAME -name of current procedure/subprocedure G I PROC READ'EDIT G A INT REC^LNG -length in 
bytes of current record G A INT TERM^FNUM -home terminal fnum G I PROC TRACE G A LIT TRACE^ERR -error 
severity code G A LIT TRACEAMSG -trace message number 67 F!~ure 5 Sample Global Reference List Global 
References: E I PROC SABS E * PROC $ALPH~ E I PROC $CARRY E I PROC SLEN E I PROC SMAX E I PROC $MIN 
E * PROC SNUMERIC E I PROC $OFFSET E I PROC $PARAM E * PROC ABEND G A LIT ASSIGN G I LIT ASSMT^ARG -used 
as argument to called proc G I/O INT ASSMT~FLAG -shows I, O, I/0 or argument G I LIT ASSMT~IN -right 
side of assignment statement G I LIT ASSMT^NULL -not an assignment statement G I LIT ASSMT~OUT -left 
side of assignment statement G A INT BEGIN^CNT -begln/end nest level counter G I/0 INT BRACK~CNT -nesting 
level of "[", "]" brackets G * INT BUFF G * PROC BUILD^XREF G I/0 INT CALLED'FLAG -=true during call 
G A STRNG CHAR -current character of token -token classification G A INT CLASS E * PROC CLOSE E I 
PROC COMINT~STARTOP - G * PROC COMMENT^COL'I - G * PROC COMPILER^COMMAND - G * PROC COMPLETION'CONTROL 
- G I LIT COMPRESS -cvtss parameter -control blocks for editread G A STRCT CTLABLK -edit control block 
length G A INT CUR^COL -current column of input G I/O INT CUR'PROC~NR G A LIT CTL~LNG -current proc, 
subproc ref'nr E * PROC CVTSS G * PROC DECLARE G I STRNG DECLS -declaration type by level G I LIT DEFN^KW 
-define G * PROC DELIM^LEN^2 G I INT DESCRIPTION -comment may be module description -module description 
template text G I INT DESC'PTR -used for reset back to end of text G A INT DFLT~SUBVOL -default subvol 
from comlnt~startup G A INT DFLT^VOLUME -default volume from comint'startup G I LIT DOC'MAX -size of 
doc'text table (bytes) G I INT DESC^SAVE 68 F~ure 6 s a~le Module Hierarch Z HIERARCHY OF PROCEDURES 
AND SUBPROCEDURES GET^REF'MAIN COMPLETIONACONTROL ERROR^MSG $ABS $CARRY SFARAM FUTI SABS $CARRY SMIN 
NUMOUT WRITE TRACE ERROR^MSG }ABS SCARRY $PARAM PUTI SABS $CARRY SMIN NUMOUT WRITE INITACONTROL SABS 
ABEND CLOSE COMINT'STARTUP ERROR'MSG SABS $CARRY SFARAM FUTI $ABS $CARRY SHIN NUMOUT WRITE FIRST'PAGE 
ERROR^MSG SA~S $CARRY SPARAM PUTI SABS $CARRY 69 f!s~ye 7 Samgle Called-Calling Cross-Reference CROSS-REFERENCE 
OF CALLING MODULES BY CALLE MODULES CALLED ..................... CALLING ..................... $ABS ERROR^MSG 
INIT'CONTROL PUTI $ALPHA $CARRY READ'TOKEN ERROR^MSG FORMAT'OUTPUT PUTI 5 SLEN BUILDAXREF DUMPAXREF $MAX 
DO^KW^VAR FORMAT'OUTPUT PROCESS^FILE SMIN BUILD^XREF DECLARE DUMP~XREF FORMAT^OUTPUT PUT1 VAR^LOOKUP 
$NUMERIC READ'TOKEN $OFFSET NEAP~NAME $PARAM ERROR~MSG 70 
			