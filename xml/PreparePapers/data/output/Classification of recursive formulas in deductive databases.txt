
 CLASSIFICATION OF IN DEDUCTIVE Cheong Youn, Lawrence J Henschen Department of EE/CS Northwestern Umverslty, 
Evanston Ilhnols 60201 USA ABSTRACT In this paper, we present results on the classlficatlon of linear 
recursive formulas m deductive databases and apply those results to the compllatlon and optlmlzatlon 
of re-cursive queries We also introduce compiled formulas and query evaluation plans for a representative 
query for each of these classes To explam general recursive formulas, we use a graph model that shows 
the connectlvlty between variables The connectlvlty between variables 1s the most crltlcal part m processmg 
recursive formulas We demonstrate that based on such a graph model all the linear recursive formulas 
can be classified mto several classes and each class shares some common characterlstlcs m compllatlon 
and query process-mg The complled formulas and the correspondmg query evaluation plans can be derived 
based on the study of the compllatlon of each class 1 INTRODUCTION Recursion IS one of the most discussed 
techmques m de-ductive database systems Classlfymg recl?Islve formulas 1s hnown to be a hard problem 
Therefore rrsearchel< ha! e considered certain specific patterns of reel r31~e formulas that are easily 
recognizable and compllable [Han S5<iti[Ioan 851 In this paper, we will use a graph model a-a tool to 
represent recursive formulas Our goal IS to qhow a general and uniform planning mechanism for e< ch 
Fe\ era1 lmpoi -tant classes of lmear recursive formulas \>ChlLh can map an arbitrary query of that class 
to a compiled formula Th-s will illustrate the power and utlht4 of the graph approach Pernnss~on to copy 
wlthout fee all or part of this materlal 1s granted pronded that the copies are not made or dlstrrbuted 
for direct commercml z.d>artage,the ACM copyright nottce and the title of the pubhcatlon and Its date 
appear, and notlce IS given that copymg 1s by permIssIon of l he Assocmtlon for Computmg Machmerv To 
copy otherwne, or to repubhsh reqmres a fee and/or sp.~fic permlsslon D 1988 ACM 0-89791-268-3/88/ONl6/0320 
$1 50 RECURSIVE FORMULAS DATABASES Jlawel Han School of Computmg Science Simon Fraser University Burnaby, 
British Columbia V5A lS6 CANADA At query evaluation, we will conslstcntly use the evalu- ation prmclple 
that Jam operations will be performed only after selection operations to optlmlze data retrievals If 
we can t apply selection or Jam operations any further, we will retrieve the exit relation first If the 
exit relation IS not eval- uated Generally, m Ohls sltuatlon, answers can be derived by a CartesIan product 
operation or exlstance checking In section 3, we introduce a graph model that can be used to explain 
recursive formulas The I-graph will be used to expand the reLurslve predicate on successive it-erations 
In section 4, we will define the terms used m this paper We also overview the classlficatlon of recur-sive 
formulas In se&#38;on 5, formulas with one-dlrectlonal cycles will be discussed Formulas with bounded 
cycles will be considered m sectlon 6 Formulas with unbounded cycles (independent cycles with non-zero 
weight) will be discussed m section 7 Components with no non-tnvlal cycle are mentioned m section 8 Dependent 
cycles are discussed m section 9 Mlxed formulas are dlscussed m section 10 Further studies and conclusions 
are m section 11  2 THE GRAPH MODEL We consider function-free Horn clauses with only one oc- currence 
of the recursive predicate m the antecedent and with no occurrence of equality We also do not allolt 
con-stants m the statement and do not allow a variable to appear more than once under the recursive predicate 
We also assume that there 1s only one recursive lule (single recursion) which has one or more non-recltrslve 
rules (( xlt rules) The exit rule has the form P -E Since these rules play a role m thl pomplled form 
and not m the graph analysis, we will use E as a generic exit expres-slon and not bother to wl1t.e tLe 
exit lule m the examples Sup ose we are given a recursive statement F of the form P 85, ) -A(u, w) A 
P(y, ) We will associate a labeled, weighted, hybrid graph G = (I , E,, Ed IIT, Lc) to F The raph constructlon 
was orlgmally introduced by Ioanmdls Ioan 851, and from now we wtll call thts graph B an I-graph Each 
variable (V) IS a vertex Variables lihe 11,~) oc- curing m a non-recursive predtcate A(u, V) are connected 
by an undirected edge (E,,) For each pair of variables m correspondmg posltlons of the recursive predicate 
P m the consequent and the antecedent (e g x and y), there 1s a directed edge (Ed) from I to y There 
1s a weight (W) for each edge The directed edge (x + y) has weight 1 We assume that there 1s an lmphclt 
reverse directed ed e (y -+ z), and it has weight -1 Each undirected edge f u - v) has weight 0 There 
1s a label (,C) attached to each edge An undirected edge has a label &#38; If two nodes of the undirected 
edge are m the non-recursive predicate Q Each directed edge 1s labeled with the recursive predicate Definition 
: The weight of a path (cycle) m the graph IS defined as the sum of the weights of the edges along the 
path (cycle) Regarding undirected edges, they can be traversed m both dlrectlons naversmg a directed 
edge m the opposite dlrectlon of the arrow IS the same as traversing the lmphclt reverse directed edge 
and contributes -1 to the weight Example 1 The correspondmg I-graphs are m Figure l(a) and l(b) respectively 
We do not write down the label P for directed edges because there 1s only one recursive predicate for 
each formula and all directed edges have the same label P AY .% A b 0 Y Q % V  (a) U4 Ftgure 1 Definition 
: Let s consider a raph for the k-th expansion of aformulaF The k-th reso Putlon graph, Gk = (V, E,, 
Ed, W, C) of F 1s defined recursively m the followmg i-namer l The I-graph of F IS the first resolution 
graph l The k-th resolution graph, Gk (k 2 2) of F IS obtamed from the (k-l)st resolution graph, Gk-1, 
by the followmg process 1 Form a k-th I-graph by renumbering variables m the ongmal formula and then 
unifying with the (k-1)st expansion of F 2 Append the k-th I-graph to the (k-1)st resolu-tion graph usmg 
common mables The k-th resolution graph retams all the arrows from the (k-l st I-graph Further, the 
k-th resolution graph IS forme d directly from the (k-1)st resolution graph wlth-out the need to actually 
form a resolvent These retamed directed edges give a better picture of the derlvatlon Example 2 (s2a) 
P(,,Y> -A(s, 2) A Pk, u> A B(u,Y) The I-graph 1s shown m Figure 2(a) If we renumber the vanables, we 
have (s2b) P(z~,y,) -A(zl,a) A P(a,w) A B(w,Yd By umficatlon of P(rl, yl) m (s2b) with P(z,u) m (s2a), 
we obtam (s2b ) P(z, u) -A(%, a) A P(a,w) A B(wru) The 2nd expansion of (s2a) 1s (shown in Figure 2(c)) 
(s2c) P(z,y) -A(z, z) A A(z,zl A P(ZI,UI) A B(w,u) A B(%Y The second I-graph for (s2b ) 1s m Figure 
2(b) The second resolution graph Gz m Figure 2(c) can be drawn by appendmg Figure 2(b) to 2(a) In Figure 
2(c), the weight from z to z1 1s two That means, m the second expansion of (s2a), I appears under the 
recursive predicate P m the consequent and z1 appears m the correspondmg posltlon of the recursive predicate 
m the antecedent We have Figure 2(d) by consldermg (s2c) as a formula by itself as opposed to a second 
resolution graph (b) (4 This graph model 1s a powerful tool for explammg and formahzmg recursive formulas 
In the next section, we will mtroduce classes of recursive formulas based on this graph model, and will 
show complied formulas and query evaluation plans for a representative query for each of these classes 
  3 CLASSIFICATION OF RECUR- SIVE FORMULAS Definition : The dimension D) of a recursive formula IS the 
number of variables m tI, e recursive predicate If there are n variables m the recursive predicate, we 
call the formula an n-D recursive statement Deflnition : A variable m the recursive formula F (after 
I.-th expansion) IS a determined lrarlable for a given query if the value of the variable 1s given m 
the query 321 or denvable from a query constant by selectlon and Join operations over only the non-recurslte 
predicates m the h-th resolution) graph If z 1s a determined variable and k ( z y ) 1s a non-recursive 
predicate, then y 1s also a determined variable [Hens 841 Definition : Two variables o1 and ~2 are connected 
If there IS a path conslstmg of all undirected edges Definition : A non-triwlal component (cycle) IS 
a component (cycle) with at least one directed edge Other-wise, the component (cycle) IS trivial Definition 
: A non-trivial cycle IS independent if It 1s not connected to any other non-tnvlal cycles nor to any 
other dlrected edges Otherwlse, the cycle IS dependent Remark We can compress several undirected edges 
mto one edge m many cases For example, P(Xl Y> -A(z, u) A B(x, z) A C(Z,U) A P(u, y) can be slmphfied 
to P(x, Y) -ABC(z,u) A P(u,y) and the formula has two mdependent cycles For more details and examples, 
see [Youn 881 Defhtion : An independent cycle IS one-directional If all the directed edges along the 
cycle have the same dlrec- tlon Otherwise, the cycle IS multi-directlonal Definition A one-dlrectlonal 
cycle IS rotational If there l 1s at least one undirected edge as a part of the non-trlvlal cycle Otherwlse, 
the cycle IS permutational Definition : A one-dlrectlonal cyq,le 1s a umt cycle If the weight of the 
cycle 1s 1 A formula 1s a umt-cycle formula If there are only disJomt unit cycles m the correspondmg 
I-graph We will restrict the formulas so that any variable ap-pearing m the consequent also appears 
m the antecedent Such formulas are called range restrlcted [Gall 841 In the I-graph, If a variable used 
as a tall of a directed edge 1s not used as a head of any other dlrectrd edge nor 1s connected to undirected 
edges, the formula 1s not a range restricted formula We can classify recursive formulas a7 follows (A) 
One-dlrectlonal cycles Unit, rotational cycles Unit, permutatlonal cycles Non-unit, rotational cycles 
Non-unit, permutational cycles Disjoint combmatlon of different Al s (B) Bounded cycles (C) Unbounded 
cycles (D) No non-tnvlal cycles  (E) Dependent cycles  (F) Mixed cycles DlsJomt combmatlon of different 
classes  Each class will be discussed m the followmg sectlons 4 ONE-DIRECTIONAL CYCLES In this section 
we view recursive formulas from two dlffernt approaches One 1s from the graph model we described be-fore 
(syntactic view) and the other one 1s from the mforma- tlon assmg and query evaluation point of view 
(semantic view P 4.1 UNIT CYCLES There are two dlffernt hmds of unit cycles, one IS the class of unit, 
rotational cycles (class Al) and the other one 1s the class of unit, permutational cycles (class A2) 
A umt, rotational cycle IS a unit cycle urlth at least one undirected edge and by recursive cxpanslons, 
new variables will be generated for the recursive predicate A umt, permuta-tional cycle 1s a self directed 
loop and by recursive eupan-slons, no new vanables will be generated for the recursive predicate Definition 
: A recursive formula IS strongly stable If the determined variables of the recursive predicate m the 
con-sequent and m the antecedent occur m the same posltlons for any query Theorem 1. A recursive formula 
1s strongly stable if and only if there are only dlqomt unit cycles m the correspond- mg I-graph pf (c) 
A unit cycle can be a self directed loop (per- mutational) or a cycle mth undirected edges (rotational) 
Recall, such a cycle has only one directed edge, and, since it 1s a cycle, must therefore have at least 
one undirected edge or be a self loop In both cases, If a variable m the consequent 1s determmed, then 
the variable m the same posltlon m the antecedent ~111 be determined, and no van- ables m other posltlons 
m the antecedent will be deter-mined because all cycles are disjoint By mductlon on the number of e\rpanwons, 
we can easily see that stablht! will be preserved for arbitrary numbers of expansions (-) Suppose the 
graph 1s not stable because of a ux11- form cycle of length two say P(x, y) -.4(x. z) A P(y, z) A query 
m which only x 1s determined gives a determined Larlable z m a different posltlon m the antecedent .4 
snn- liar non-satisfactory query form can be found If the cycle IS not one-dlrectlonal or falls the stability 
condltlon m any other way Thus, if the determined variables of the re-cursive predicate m the consequent 
and m the antecedent occur m the same posltlon on arbitrary queries, then there are n dlsJomt connections 
and each connection IS made be-tneen variables m the same posltlon of the recursive pred-icate m the 
consequent and m the antecedent Therefore, there are n disjoint unit cycles 0 Thus ae have eqmvalent 
SJ ntactlc and semantic char-acterlzatlons for strongly stable formulas Remark -Note that this defimtlon 
of strong11 stable 1s stronger than that given m [Hens S4 Here the condltlon on determined variables 
holds for a11 query forms From now on. lte call a strongly stable formula slmplq a stable formula Example 
3 (93) J (x, Y, %> -A(x, u) A B(Y, ~1 A PC,, v, w) A C(w, 2) The correspondmg I-graph shows that there 
are three disJomt umt cycles Therefore, (~3) IS a stable formula The complied formula and the evaluation 
plan for the query P(a,b,Z) are the followmg respectively Bk UAk I \ U&#38; Ak-E , ULl E-Ck \ / Ck UBk 
 UAk A branch such as > means that Ak and Bk are evalu- UB ated independently (we use - for the Jam operation 
be-cause of the difficulty to use the symbol W ), and the re-sults are combined with E We can find evaluation 
plans for other possible queries, e g P(X,b,c) and P(X,a,Z) m a symmetric way Query evaluation can be 
done m many different ways, but we are dealing on the higher level logical form so that the global query 
plan can be optmnzed For formulas of this class, the compiled formulas are easily obtamed and query evaluation 
plans for all possible queries are also easily found For more detmls and exam-ples, see [Youn 881 4.2 
TRANSFORMATIONS OF NONUNIT CYCLES INTO UNIT CYCLES Theorem 2. If thele 1s an independent, one-dlrectlonal 
cycle of weight n m the I-graph for an n-D recursive for-mula, F, then 1 The formula becomes stable after 
each n expansions 2 The formula can be transformed mto an equivalent stable formula with multiple exits 
by unfolding ex-actly n times Pf (1) If two directed edges share a variable, we can assume there 1s a 
non-recursive nredicate EQUAL be-tween the shared variable (thlc 1s only for the -theoretical development 
If there 1s a trivial cycle or if there IS more than one un derected edge shared by the same variables, 
we can collapse them mto a single undirected edge There-fore, without loss of generality, we can assume 
that there 1s exactly one undirected edge (non-recursive predicate) between directed edges m the cycle 
of weight n Let s call the variables m the consequent $1, ~2, I, (by the traver-sal order of the cycle) 
and the correspondmg variables m the antecedent yl, ~2, y,, In the first expansion, z, IS con- nected 
to y1 and no other y For the followmg expansion, new variables 21, 22, z, will be produced and I,, IS 
con- nected with z2 and no other I By mductlon on the number of expansions, we can easily find that after 
n expansions, 2, will be connected to the variable m same posltlon and will not be connected to the variables 
m any other posl-tions pf (2) From property (l), we find the cychc behavtour of the formula Generate 
the first (n-1 expansions of F and replace the recursive predlcabe m t he antecedents by the exit relation 
and leave the n-th expansion of F as a new recursive formula The new recursive formula with n exit relations 
IS stable and produces the same answers as the original formulas I+ IS, m fact, logically equivalent 
to the orlgmal set 0 We now know that a formula, F, with an independent cycle of weight n become a stable 
formula after n expan- sions, and we can consider that the n-th resolution graph of F has n disJoini 
unit cycles Sample rules are mentioned m the followmg sections 4.3 NON-UNIT, ROTATIONAL CYCLES Classes 
A3 and A4 consist of formulas with non-unit, one-dlrectlonal cycles, either rotational or permutatlonal 
We call these cycles transformable to stable cycles If a formula 1s not stable itself, but can be transformed 
to an eqmvalent set of form&#38;s which does represent stable recursion, the techmques of sectlon 5 1 
can still be ap hed To that end, we show general methods by which (A3 P and (A4) formulas can be so transformed 
For the moment, we assume that there IS only one com- ponent m the correspondmg I-graph for a given formula 
Formulas with 2 or more components m the I-graph ~111 be discussed later From the theorem 2, we know 
that a formula with a non- unit, rotational cycle can be transformed to an equivalent unit-cycle formula 
Example 4 (s4a) P(a, x2, x3) -4x19~3) A B(XZ,YI) A c(yS,s3) A p(y1, ~2, ~3) (s4b) P(Xl, x2, x3) -E(Xl, 
R?, x3) There IS an mdependent, one-dlrectlonal cycle of we&#38; 3 m the I-graph The 2nd and 3rd expanded 
formulas are the followmg (s4d) P(r1,12, x3) -4x1, ~3) A C(z2, ~3) A B(z2, VI) A B(12ry1) A A(y1,33) 
A c(u2,23) A c(y2, x3) A B(yz,z1) A .4(~1,~3) A p(ul,uZ,u3) For the transformation to the eqmvalent stable 
for-mula, we need two more exit relations (s4a ) and (s4c ) These ae found by replacmg the recursive 
predicates m the antecedent of (s4a) and (s4c) with the exit relation E With (s4d) as a new recursive 
formula and (s4b), (s4a ) and (s4c ) as exit relations, we have an eqmvalent stable formula that produces 
the same results as (s4a) and (s4b) The complied formula 1s ( 4B) (C 4B)k / I I L &#38; (4CB)*-(E U A-E 
U (AC)-E ] \ \ C (BC) (ABC) and the evaluation plan for the query P(a,b,Z) 1s the fol- lowing o(ACB) 
; A ( 4C) \ \ UL [E U E-C u E -BC ] -(ABC) I I o(BAC)I B @A: In the complied formula, the notation AB 
indicates the connectlvlty of two relations and doesn t mdlcate any particular order In a query evaluation 
plan, however, or-der of the predicates 1s the actual order to be used m the evaluation process 4 4 
NON-UNIT, PERMUTATIONAL CY-CLES From the theorem 2, we can easily see that a formula with a non-u&#38;, 
permutational cycle can be transformed to an equivalent umt-cycle formula Example 5 (s5) P(x, Y, 3) -P(?l, 
z, T) The correpondmg I-graph shows that there IS a cycle of weight three The formula can be transformed 
mto a stable formula But there IS no non-recursive relation m-solved m the espanslons, and after three 
elpanslons, the formula can not produce any new values (0: tuples) We call such formulas bounded [Ioan 
851 Bounded formulas ml11 not produce anv new tuples (values) after certam ex-panslons regardless of 
the contents of the database The above formula has no new variables m the antecedent, all the variables 
are from the consequent This 1s called a permutational pattern to dlstmgmsh It from rotatlonal formulas 
Theorem 3. A formula with a permutational cycle or disjoint combmatlons of such cycles 1s also permutatlond 
 pf A disJoint combmatlon of permutational cycles 1s also permutational because there are no new variables 
m the recursive predicates As soon as the formula becomes stable, it 1s m fact m its original form 0 
Example 6 (~6) p(x, Y, z, 21, ~1 w) -P(Z,Y,%X,W,~) Statement (~6) 1s a permutational formula. and there 
are three perm&#38;ailonal-cycles m the I-graph with weights 3. 1. and 2 resoectlvelv We can easllv see 
that the formula b&#38;Ames stabl&#38; (come s back to the drlgmal formula) after 6 expansions and ~11 
not produce new tuples by further expansions, therefore further expansions are meamngless 4.5 GENERAL 
PROPERTIES  Theorem 4: A formula constructed by a disJomt combl-nation of one or more one-&#38;rectlonal 
cycles can be trans- formed to an equivalent unit-cycle formula pf If there are k disJomt mdependent, 
one-directional cycles G1, G2, Gk from a recursive formula, and the weight of the cycle for each G, IS 
c,, the formula can be trans-formed to an equivalent stable formula by unfolding ex- actly L times, where 
L 1s the least common multiple of Cl, c2, ck 0 Example 7 The correspondmg I-graph has 4 one-directional 
dls-Joint cycles of weights 1, 2, 3, and 1 respectively We can easily see that the formula becomes stable 
after 6 eupan- sions We should pomt out that there are other recursive for- mulas which may stabilize 
for partzcular quenes but are not strongly stable and are not equivalent to a strongly stable formula 
5 BOUNDED CYCLES In this section and the followmg section, we will discuss formulas that have multi-dlrectlonal 
cycles As we drs-cussed above, to be transformed mto a stable one, a for- mula should have disJomt unit 
cycles after some eupan-slons As we can see by the followmg theorem, multl-dlrectlonal cycles can t Ge 
transformed mto umi cycles Therefore. formulas with multi-dlrectlonal cvcles can t be transformed mto 
stable formulas Theorem 5. An independent, multi-dlrectlonal cycle CM not be transformed to an equivalent 
unit-cycle formula pf .4n independent, multi-dlrectlonal cycle has at !e&#38; one (possibly compressed) 
undirected edge whose two nodes each are used as the tal of directed edges By the elpan- slon of the 
resolution graph, the two nodes can neter be split, and the resolution graph can t be expressed as dls- 
Jomt unit cycles (refer to the first theorem of section 5) Therefore the formula can t be transformed 
to a stable for-mula 0 Corollary 1: An independent cycle can be transformed to an equivalent umt-cycle 
formula (or is unit-cycle formula) if and only if it 1s one-directional pf From the theorem 5 0 Definition 
: An independent cycle 1scalled a bounded cycle If the weight of the cycle 1s 0 Definition : The rank 
of a recurslIe formula IS defined to be the smallest 1 such that the (l+l)st expansion and all succeeding 
expansions do not produce any tuple not found m the first 1 expansions Deflmtlon : A recursive formula 
1s called bounded if and only if there exits a finite upper bound on Its rank independent of the contents 
of the relations involved m the formula [Ioan 851 Ioanmdis s Theorem : Let F be a recursive formula with 
no permutational patterns Then F 1s bounded if and only if the correspondmg I-graph contams no cycle 
of non-zero weight In that case a tight upper bound on the rank of the recursive formula IS lven by the 
maximum weight of any path m the I-graph Ioan 851 f Example 8 (4 P(=, Y, *, u> -A(=, Y> A B(YI,u) A C(ZI,UI) 
A ~(~,Yl,~l,%) We call bounded formulas, pseudo recursion If a recursive formula IS bounded, there 1s 
an equivalent finite set of nonrecurslve formulas, e g (~8) has the upper bound 2 (from F1 ure 3 and 
will be expressed as nonrecurslve formula(s) %y rep acmg relation I7 P m the antecedent by the exit relation 
E Therfore, the formula (~8) can be expressed by equivalent nonrecurslve formulas (s8b ) PC=, Y, z, u) 
-A(=, Y) A B(YI,~) A C(ZI, ~1) A A(z, YI) A B(yzrul) A C(zz,w) A E(zI, YZ, zz,uz) =A Y Z Yl B U Zl a 
Ul Fagure 3 Theorem 6: A formula constructed by a disJoint combl-nation of bounded cycles 1s bounded 
 pf All the disJomt components will be expanded m-dependently, and all the components are bounded There-fore, 
the formula IS bounded 0 Bounded formulas have been considered by many re-searchers for optlmlzatlon 
[Naug 86][Ioan 851 because af-ter certain expansions we do not need to generate further expanszons of-the 
formula nor do further query processmg General solutrons provldmg the upper bound can be found m [Ioan 
85][Naug 861 6 UNBOUNDED CYCLES Deflmtion : An independent, multi-d1rectlona.l cycle of non-zero weight 
IS called au unbounded cycle. Query evaluation plans for unbounded cycles are more complicated than the 
previous cases Example 9 (s9) P(x, y,z) -A(z, y) A B(u,v) A P(u,z ty) The 1st and 2nd resolution graphs 
axe m Figure 4 Let s consider a query of the form P(d,v,v), where v stands for non-determmed posltlon 
(mables) and d for a determmed posltlon (constant), either from the query or from recursive predicates 
after some expansions The evaluation process will be the followmg The first expansion (Figure 4(a)) The 
value of x IS g\en and we can apply the selectlon operation to the re-latlon A and derive values of y 
There IS no more selectlon or Jam operation possible If there 1s no mformatlon alal-able, we will select 
the exit relation, E, (tha strategy 1s the conventional techmque) and derive all the tuples of E Then 
we can apply the Jam operation with the relation B to tind values of z The answer wJl be the Carteslan 
prod-uct (symbol X will be used) of values of y and z This evaluation step can be expressed as (a.-l) 
X (E M B) The second expansion (Figure 4(b)) The value of I 1s given and we can derive values of y as 
m the first expansion There IS no more selectlon and Join operation possible We ~111 denve all the tuples 
of exit relation E Then we can apply the Jam operation with B to find common tuples (for variables u1 
and VI), and apply the Jam with B and A successively to find values of z Evaluation steps will be ( aA) 
X [ (E w B)BA] =A Y Fzgure 4 Therefore, the query evaluation plan for P(d,v,v) can 8 DEPENDENT CYCLES 
be expressed as uE, (04 X KG, 1 (E W B>PWk I> For a query of the form P(v,v,d), we have the followmg 
evaluation plan from the resolution graphs U-E, (3 U&#38;, 1 (4 (E W B) I> A The symbol 7 1s used for 
the exlstance checking for the immediately followmg expression This means d there 1s any tuple (not empty) 
that satisfies the expression m the (3 ), then all the tuples m the relation A will be answers A general 
method for the unbounded formulas 1s not known at this time But if we use the resolution graph, we can 
easily derive complied formulas (or query evaluation plans) for mdlvldual cases 7 NO NON-TRIVIAL CYCLES 
In this section, we will consider components with no non- trivial cycles Theorem 7: A non-trivial component 
with no non-trivial cq cle can t be transformed to a strongly stable formula pf (1) Suppose that there 
1s only one dlrected edge The head and tml of the directed ed e are not connected to each other by any 
undirected edge9s) By mductlon on the number of expansions, the head and tml will never be connected 
(2) If there 1s more than one directed edge, there are two posslblhtles, (a) directed edges are one dlrectlonal, 
(b) dzected ed es are multi-&#38;rectlonal In case (a), there IS a leftmost or nghtmost) node used as 
a tall of a directed t: edge By mductlon on the number of expansions, the node will never be connected 
to any other nodes, and the for-mula can t be transformed to a stable one In case (b), we can prove as 
m the previous theorem 0 Corollary 2: A component with no nontrlklal cycle IS bounded pf There IS no 
cycle of non-zero weight m this compo-nent From Ioanmdls s theorem, the component 1s bounded 0 Example 
10 (~10) P(=,Y) -B(Y) A C(=,YI) A P(v,YI) There are no nontllvlal cycles m the I-graph for the formula 
(910) If a query P X,Y) IS given, we can derive all the tuples from E(z,y), B f y)AC(z, yl)AE(q, yl by 
first expansion, and finally B(y) A C(z) ~1) A B(yl) A C 121, ye) A E(rz,yz) Further expansions will 
not produce any new tuples and the upper bound IS 2 [Ioan 851 Although there are no complete general 
techniques devel-oped so far for this class. we will show bv examnles that the I-graph and the resol&#38;on 
graph can 6e very*useful m planning query processmg for thrs l\md of formula Theorem 8: A formula with 
a dependent cycle can t be transformed to a unit-cycle formula pf (CASE 1) We already proved that an 
independent, multi-dlrectlonal cycle can t be transformed to a stable formula Furthermore, any multi-dlrectlonal 
cycle can t be transfomed to a stable one Indeed, any multi-dlrectlonal cycle has at least one undirected 
edge (with two nodes, e g xl and x2), and z1 and 52 are used as the truls of directed edges To be stable, 
the nodes xl and x2 should be disconnected, but will never be lsconnected because later resolution graphs 
are obtamed by appendmg the I-graph to the head of directed edges, and nodes xl and x2 will never be 
split Therefore a dependent cycle with a multi-dlrectlonal cycle as a subcycle or a dependent cycle with 
an un&#38;rected ed e, whose two nodes are used as the tml of the directed elf ges IS not transformed 
to a stable one (CASE 2) The same clasm can be applied to a compo- nent with one undirected edge whose 
two nodes are used as the heads of the directed edges On the next expansion. the two nodes of the undlrect;d 
edge become the tals of the two dlrected edges. and from fCASE 11 we can easllv find that the comp&#38;e&#38; 
can t be &#38;nsfor&#38;ed to stable * (CASE 3) Let s consider the dependent, one-dlrectlonal cycle Assume 
that there IS an extra undirected edge that makes the cycle dependent We can assume that the node (call 
the nohe x) of the extra undirected edge 1s used as a tml of one directed c&#38;e. and the other node 
(called 111 1s used as a head of one vdiected edge because wk already mentioned the other possible cases 
If the value of z 15 given on a query (only the value of one variable 1s known), then two variables are 
determined m the next expansion On further expansions, there 1s no posslblllty that only one variable 
1s determmed So the formula can not be transformed to stable q Corollary 3: A formula can be transformed 
to an equl%- alent unit-cycle formula if and only If It has only one dlrectlonal cycles pf From the previous 
theorems I Remarh We have shown that the semantic and the syntactic defimtlons of strongly stable and 
transformal~lt to strongly stable formulas are equivalent Therefore, only one-directional cycles can 
be t> ansformed to stable formu-las Example 11 (~11) P(=,Y> -A(=,=I) AB(Y,YI)A C(=I,YI) AP(rl,y,) The 
correspondmg 1st and 2nd resolution graphs for sll) are m Figure 5 If a query form P(d,v) 1s given, Irom 
the second expansion, all the variables m the recursive predicate are determined, and there IS no non-determined 
part The query evaluation plan for P(d,v) 1s the followmg The symbol { } 1s used to express the parallel 
evaluation of relations A aE, uA-C-B-E, aA-C-B-{ }-C-E, B The slmphfied formula 1s = E, oA-C-B-E, Upzl 
aA-C-B-[ X Y A {}-Clk-C-E B X Y A Xl Yl Fzgure 5 MIXED CYCLES In this class, we will consider dlsJomt 
combmatlons of dlf- ferent classes Theorem 9: A formula constructed by &#38;sJomt combl-nation of one-dlrectlonal 
cycles (class A) and components from other classes can not be transformed to a unit-cycle formula pf 
All the dlsJomt components will be expanded mde-pendently (not connected),therefore we can see the prop-erty 
easily 0 The general method for this class 1s not known at this time Further studies should be done on 
the formulas m tlus class Usmg the resolution graph, we can derive compiled formulas or query evaluation 
plan for mdlvldual cases From the classlficatlon, we can find the followmg prop-erties of recursive formulas 
Recall the various cases Theorem 10: If a formula P IS constructed by a disJomt combmatlon of { A2, A4}, 
then the tight upper bound of P 1s the least common multiple (L) -1 of the weight of all the cycles pf 
After L expansions, the formula comes back to the orlgmal form Therefore, the formula 1s bounded and 
the upper bound 1s L-l 0 Theorem 11. A formula constructed by a disJomt com-bination of (A2, A4, B, D} 
1s bounded pf Each component will be expanded mdependently, and all the components are bounded, therefore 
the formula 1s bounded d Remark A formula constructed by a disJomt combmatlon of bounded components 
will be bounded Theorem 12: The above classlficatlon IS complete pf Our analysis 1s done on each component 
There are four osslblhtles on each component, (1) no non-trivial cy- cle, 2) one-dlrectlonal cycles, 
(3) multldlrectlonal cycles, (4) 1ependent cycles There 1s no overlap between these classes A DisJomt 
combination of cycles m the same class will be m the same class A disJomt combmatlon of the different 
classes will be m the mixed type class Therefore the classlficatlon IS complete with no overlap 0 Example 
14 (~12) PC,, Y, 2) -A(x, u> A NY, v> A C(u, v) A D(w, ~1 The correspondmg resolution graphs for the 
1st and 2nd expsnslons are m Fl re 6 The formula 1s a disJomt combmatlon of cIasses (D f and (Al) For 
a query P(d,v,v), we have the followmg mcommg query P d,v,v) first expansion P( 6 ,d,v) second expansion 
P(d,d,v) For the remammg expansions, we have P(d,d,v) We can easily predict that pattern from the graph 
If L 1s known, on the next expansion, u, v ~111 be determmed be-cause there 1s a connection between x 
and U,V Followmg the first expansion, we have the same pattern (the length of the cycle erlod 1s 1) For 
all other possible queries for the formula sl2), we can easily plan the query processmg P The evaluation 
plan for the query P(d,v,v) will be the following A Q E, Ur&#38; aA-C-B-[ { }-C]k-E-DDk+l B At the 
first expansion, the evaluation IS performed d. -C -B to derive y and then, E -D to derive z From the 
second expansion, variables m the first and second posl-tlon are determined and the query evaluation 
plan 1s slm- liar to that of a two dlmenslonal stable formula Formula (~12) becomes stable after certam 
expansions dependmg on the query forms For a query form P(d,v,v), the formula becomes stable from second 
expansion, and for a query P(v,v,d), the formula 1s stable from the begmmng In general, the formula becomes 
stable after some exoanslon. gut d&#38;erent from one query form to another query form Formula (~12) 
can not be transformed to a strongly stable formula Our debtion of strongly stable emphasized the query 
independent property But after certam expansions, the query evaluation of (912) can be considered slmllar 
to that of stable formulas [Bane 861 F Bancllhon, D Maler, Y Saglv and J Ullman, Magic Sets and Other 
Strange Ways to Imple- Y 2 ment Logic Programs , Proceedrngs of the 5th ACM SIGMOD-SIGART Symposaum on 
Prm- B D caples of Database Systems, 1986 w,r [Gall 841 H Gallmre, J Mmher and J Nlcolas, Logic and 
B D Databases A Deductive Approach , Computrng I .3 Vl Wl (a) @I F&#38;gure 6 Dlscovermg a general 
compllatlon method for non-tran- sformable recursive formulas will be a d&#38;cult task But we can apply 
the graph model and easily do planning based on the connectlvlty of relations 10 FURTHER STUDIES We presented 
a classlficatlon of linear recursive formulas based on a graph model Our analysis of the compllatlon 
and query processmg of some mterestmg classes discloses that the formulas m each class share common charactens-tics 
m then complled formulas and query processmg plans Therefore, It shows that the I-graph model 1s a valuable 
tool m the clssslficatlon of recursive formulas and derlvmg plannmg mechanisms for recursive queries 
Our study 1s confined to recursions conslstmg of single linear recursive formula There are many other 
interesting studies on the processmg of more general recursions, such as magic set method, the Alexander 
method, and Query-Sub-Query approach However, \Qe believe that the graph method provides a powerful tool 
m the study of behavlour of linear recursions m complex variable patterns Once such behavlour 1s we11 
understood, the compllatlon and further optlmlzatlon can be explored m depth, which m turn will have 
strong impact on-the further development of efficient recursive query processmg methods Althou h the 
scope of this paper IS limited to some classes of P mear recursive rules, we believe that fGrther exploration 
on unbounded cycles, dependent cycles, and mixed cycles will produce interesting results Moreover, the 
exploration of the apphcatlon of the I-graph model to the compllatlon of the multiple linear recursive 
rules, non-linear resurslve rules and other knds of recursion 1s another future research topic References 
[Bane 861 F Bancllhon and P Ramahnshnan, An Amateure s Introduction to Recursive Query Processing Strategies 
, Proceedcngs of ACM- SIGMOD Conference on Management of Data, 1986 Surveys, Vol 1 16, IVo 2, June 1984 
 [Han 85a] J Han and H Lu, Some Performance Results on Recursive Query Processmg m Relational Database 
Systems , Proceedmgs of the 2nd an-ternatronal Conference on Data Enganeerrng , IEEE Computer Society, 
1985 Han, Pattern-Based1 fHan . 85bl J and Knowledge-Directed Query Comprlatron for Recursrue Databases 
, Ph D Dlssertatlon, Um-verslty of Wlsconsm, Madison, 1985 [Han 871 J Han and L Hens&#38;en, Handhn 
Redundency m Recursive Query Processmg , 8 TOCcedtngY of the ACM SIGMOD Conference on Management of Data, 
1987 [Hens 841 L J Henschen and S Naqvl, On Complhng Queries m Recursive First-Order Databases , JACM 
31(l), 1984, pages 47-85 [Ioan 851 Y Ioannldls, A Time Bound on the Materl-ahzatlon of Some Recursively 
Defined Views , PTOCeedzngY of the 11th Internatronal Conference on Very Large Databases, Stockholm, 
Sweden, Aug 1985 [Naug 861 J Naughton, Data Independent Recursion m Deductive Databases , Proceedrngs 
of the ACM SIGA CT-SIGMOD Symposzum on Prancrple of Database Systems, 1986 Deductive Question-Answering 
on [Relt 781 &#38;lft;.$ Databases a m Logrc and Databases, edited by H Galan-e and J Mmlrer, Plenum 
Press, New York, N Y , 1978, pages 147-177 [Relt 841 R Relter, Toward a Logical Reconstruction of Relational 
Database Theory , In On Concep-tual Modellmg, edited by M L Brondle, J My-lopoulos and J W Schmlt, Springer-Verlag, 
New York, 1984, pages 163-189 [Shap SO] S Shapiro and D Mckay, cursive rules , PTOCeehgY 151-153 [Ullm 
851 J Ullman, Implementation Languages for Databases , Inference with Re-of AAAI, 1980, pages of Logical 
Query ACM Transactrons on Database Systems 10(J), 1985 [Youn 871 C Youn, A New Graph Model on Recursive 
Formula-s m Deductive Databases , Proceedrngs of Fzrst Annual Meetrng of the Madwest Art+ cral Intellrgence 
and Cognrtrve Scrence Socrety, Chicago, IL, April 1987 [Youn 881 C Youn A Classaficatron of Recursrue 
FOT-mulas an Deductwe Databases , m prepaxatlon for Ph D dlssertatlon, Department of EE/CS, Northwestern 
Umverslty, May, 1988 
			