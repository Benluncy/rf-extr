
 MICROCOMPUTERS AND MAINFRAMES: A MARRIAGE OF EFFECTIVENESS Michael J. D'Amore Daniel J. Oberst EDUCOM/EDUNET 
P.O. Box 364 Princeton, NJ 08540 (609) 734-1878 I ntrod uction Section 1 touches on the notion of distributed 
processing in order to gain a perspective on the roles of mainframe computers, microcomput-ers and their 
"marriage" in the general computing environment. It then examines how the marriage is possible and looks 
at two appropri-ate uses of the micro/mainframe interface. Section 2 deals with some of the specifics: 
EDUNET'S involvement with microcomputer as intelligent terminal; some details on file transfer protocols; 
the efforts of several institutions of higher education to develop intelligent ter- minal emulation software 
for micros; and two commercial terminal emula- tion packages. Section 1 Perspective: the redistribution 
of computing power and control; how micros have influenced the notion of distributed processing. Regardless 
of when you entered the computing field, it is likely that you have some awareness of the who-does-what 
conflict that arises when microcomputers enter a tradi-tionally main f rame/mi n icomp ute r environment. 
Looking briefly at the issues that got us here will help us to better appreciate the role of the micro/mainframe 
inter-face in the ongoing evolution of computing environments. The notions of interconnecting com-puters 
and distributing computing resources have been around ever since the second computer. One leading idea 
was (and is) that the interconnections be between central-ized and local computers --main-frames and 
minicomputers of various capacities. "Local" meant regional offices or the like. User access was via 
"dumb" terminals. The advantages of such configura-tions included increasing the integ-rity and the accessibility 
of data; regaining and controlling mainframe resources by offloading certain tasks; and increasing efficiency 
and decreasing duplication via Permission to copy without fee all or part of this material is granted 
provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright 
notice and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. &#38;#169; 1983 ACM 0-89791-116-4/83/010/0007 $00.75 7 specialization of function 
by com-puter. The user would gain con-siderable computing power via such a network and distribution of 
resources. But the primary notion of control engendered by this structure extends to the local/re-gional 
organization level, not to the user. Networking and distributed process-ing have been implemented in 
a considerable way and work toward increases in sophistication of inter-connections continues. But the 
advent of microcomputers has fos-tered new issues and directions in what it means to distribute comput-ing 
as well as how to implement that distribution. The impact of microcomputers in this context has been 
on computing power and control, with a further complication of who-does-what. Computing power has been 
redistri-buted in a manner in some ways consistent and other ways inconsis-tent with previous notions 
of dis-tributed processing. Computing control has been extended to the user to a degree and in a way 
not anticipated in the earlier configura-tions of mainframes and minis. In this shift of computing power/ 
control, the microcomputer appro-priately displaced some functions of larger machines. (This is not to 
say micros are always used appro-priately.) Data entry, preprocess-ing, word processing, etc., done locally 
are often more cost effec-tive, timely and reliable than if done on a large central comp:uter. (Local 
processing also gives the user more control and more respon-sibility.) Also, certain kinds of programs 
run "better" on micros than on mainframes or minis. For example, one diminished use of the mainframe 
is to deliver computer-as-sisted instruction. Microcomputers have inexpensive color graphics and sound 
and are easy to use. Even some "processing" tasks too cum-bersome to do by hand, e.g., grad-ing, have 
nothing less done to them by a microcomputer than by a main-frame --sums, means, scaling and standard 
deviation do not require SAS or SPSS. Will the microcomputer continue to displace mainframe functions? 
Yes. Will the microcomputer turn the mainframe into a dinosaur? No. These responses are compatible because 
the redistribution of power/ control corresponds to a redistribu-tion of functions. What has appro-priately 
been assigned to the microcomputer resulted in offloading the mainframe, thus regaining a valuable resource. 
What is being appropriately done with mainframes is evolving. The nature of comput-ing continues to change. 
And most importantly, the new computing environment is a synthesis of erst-while contenders. The Changing 
Nature of Computing: what the nature of mainframe offer- ings has evolved to in response to user requests; 
the new notion of interconnectedness . Two things should be noted. One is that the nature of computing 
con-tinues to change, with a current mode being the reapportionment of the overall computing function. 
The other is that much of the change stems both from the advent of microcomputers and from the increased 
interconnectedness of computers. In the face of the proliferation of micros and minicomputers, main-frame 
tasks have changed. Main-frames are being used in a more appropriate way now that certain functions have 
been delegated to other computers. Our EDUNET experience indicates a decrease in the delivery of comput-er-assisted 
instruction by main-frames to remote users as well as a related reluctance by university user services 
groups to support CAl. Electronic mail has increased considerably in use, with mainframe resources being 
allocated to both on-campus and inter-campus mail systems as well as to EDUNET's mail-system-to-mail-system 
service called MAILNET. Requests for powerful simulation and modeling systems and decision support sys-tems, 
running on mainframes or large minis, has increased as has the development and support of such systems 
by vendors. The increased linkage of computers and coordination of functions extends to micros, minis 
and main-frames. Microcomputers are used as "dumb" terminals and intelligent workstations into minis 
and main-frames; minicomputers are used to front-end supercomputers (CYBER 730 into CRAY-1 at the University 
of Minnesota); our VAX-11/750 has a program called CALOUT which enables us to dial out into Telenet and 
do remote computing from the very same terminal we were using locally on the VAX just seconds before. 
The micro/mainframe interface is a part of the increased interconnect-edness underlying the redistribution 
of computing power and reassign-ment of computing tasks and func-tions. How is this interface accom-plished 
and how might we use the resources available to best advan-tage? The Micro~Mainframe Interface: a functional 
description of how the marriage is possible and how to effectively use it. We have looked at the "what" 
of changes in computing environments and a trend toward cooperative computing. We know that the micro 
is being used in a variety of ways in both a stand-alone mode and to interconnect with other computers. 
The modes of interconnection com-prise micro as "dumb" terminal and micro as intelligent workstation. 
In the intelligent mode the micro's stand-alone capabilities complement its remote access capabilities 
in order to accomplish such things as file transfer to and from the remote computer to which it is connected. 
Let's now look a bit at how this micro/mainframe interface is accom-plished, then go on to see what, 
in our opinions, ought to be the terms of the "marriage." A microcomputer is a computer that can function 
as various kinds of dedicated computers, (until recently with the Lisa and others) each kind at a distinctly 
different time. When a micro acts as a stand-alone com-puter, typed characters are sent to the screen 
and pressing the return key initiates processes internal to the computer system. These activi-ties may 
be controlled by system software, e.g., listing the contents of memory on a display or saving a program 
from the memory of the computer onto a diskette; or by an applications program, e.g., regis-tering conference 
attendees using a data base management system or entering student grades into a home-brewed grading program. 
 When saving a program onto a disk-ette, we stay inside the system but go outside the microcomputer itself 
through some hardware and soft-ware interface to the diskette drive. Data is directed, through a port 
(interface with the "outside" world), to and from devices outside the micro. The intelligence of the 
micro enables it (and us) to control the format and flow of that data. When a computer is equipped with 
certain hardware and software, it can use its intelligence to go out-side the computer system to commu-nicate 
with some other system, i.e., it can emulate a terminal. More specifically, telecommunications hardware/software 
enable the char-acters typed on the micro's key-board not only to be displayed on the screen but also 
to be directed through a port in a fashion compat-ible with transmission through a modem and phone lines 
(or hard- wired) to whatever happens to be at the other end (hopefully a com- puter). Conversely, it 
enables transmissions that come down the phone lines (or "hardwires") to be displayed on the screen. 
With a "dumb" terminal, the commu-nications that take place are limited at the microcomputer end. The 
transmissions can originate only from the keyboard so transmitting existing files is precluded. What 
is received goes only to the display so no permanent (machine-readable) copy of the data transmitted 
by the other computer can be created. The advantage of a micro as a "dumb" terminal is that the same 
system that meets some of your processing needs stand-alone can also be used to access a computer that 
can meet the rest of your pro-cessing needs. And the cost of adding the hardware and software to a micro 
so it can be used as a terminal is usually marginal. This is a marriage of convenience but it fails to 
tap those features of the micro and mainframe which would make their union greater than the "sum of their 
parts." Keyboard to screen, use local mem-ory, do local processing. Keyboard to screen and to mainframe, 
bypass local processing, do remote process-ing. What's the next step? Key-board to screen and to mainframe, 
use local memory, do local/remote processing. File transfer capabilities result from complementing a 
micro's "dumb" terminal function with its stand-a-lone capabilities. The micro's intel-ligence gives 
it the ability to con-trol file transfer between itself and a host computer. When a micro is used as 
a "dumb" terminal, the keyboard is its input device and the screen its ouput device. Sig- nals go from 
keyboard to screen, out the port and up the line, or clown the line, through the port and to the screen. 
Memory is essentially bypassed. The sent information originates from the key- board and the received 
information ends at the screen. Enabling a micro to control file transfer involves directing the flow 
of data so that the micro's memory can be used as an input and output device. File transfer enables you 
to decrease mainframe connect time and resource consumption spent in data entry, editing, etc. and to 
decrease on-line storage. Files created locally (in/by the micro) can be transmitted to a host com-puter 
(uploaded). This avoids cre-ating the file on-line to the host or re-entering it into the mainframe after 
having entered it into the micro. Further, a file residing on the mainframe can be copied to the micro 
(downloaded) to be operated on locally, i.e., without connection to the mainframe. Uploading exist-ing 
files reduces connect time, mainframe resource consumption, etc. ; downloading reduces main-frame disk 
storage. (An additional consequence of this is to free resources on the mainframe for uses inappropriate 
for micros.) To upload a file (micro to main-frame), the file must at some point be in the micro's memory. 
Provisions for getting the file into memory, most typically from a disk-ette, are straightforward. Creating 
the file and saving it onto the disk-ette in the first place are what were accomplished via the micro's 
stand-alone capabilities, e.g., using a word processor and the micro's disk operating system. After the 
file is in memory, the telecommunications software enables you to specify that a file in memory is to 
be uploaded. This is accom-plished internally by changing the input device for telecommunications from 
the keyboard to the memory. (With many such programs, the keyboard is actually still active to enable 
monitoring and controlling the upload.) When the upload begins, the file is transmitted to the mainframe 
in accordance with some predesignated communications protocol until the end of the file is reached. At 
that point, you can again use the micro as a terminal and operate on the just uploaded file. If you want 
to take a file that resides on the mainframe and down-load it, the telecommunications soft-ware enables 
you to specify that when the file is transmitted from the host it be output to the micro's memory as 
well as to the screen. (Not all telecommunications software provides for the observation of the download.) 
Once the download is completed, you can disconnect from the mainframe and operate on (edit, save to diskette, 
etc.) the down-loaded file. Two Applications : off- line data entry device, message~document editor for 
electronic mail. Typically when data is to be ana-lyzed by mainframe-based software, e. g., a sophisticated 
statistical package, it is entered either under the control of the applications soft-ware or into the 
operating system's editor. In both cases significant expenses are incurred in virtue of being on-line. 
For one, there may be telephone expenses (unless the terminal is hardwired or there is some flat fee 
arrangement). In addition there are clock-hour con-nect time charges as well as com-puter resource consumption 
charges. Using a micro to create your data off-line then uploading it can reduce all these charges. Data 
appropriately formatted for use by your mainframe application can be generated either by a micro-based 
applications program or word processor. This data can be cre-ated and verified with no on-line related 
expenses. Though large amounts of data will result in lengthy uploads (especially at 300 baud), this 
time and expense will be far less than if the data were created and verified on-line. (Care must be taken 
in choosing compati-ble disk operating systems, tele-communications software and word processors for 
the micro so that the files created can indeed be easily transmitted. ) Preparing messages off-line has 
the same rationale as off-line data entry but with a more specific focus. In this case a word processor 
would be used for message creation (with the same caution as above in choosing compatible software). 
However, the fee structure for electronic mail systems is a bit different than for other computing. A 
typical set of chargeables is clock-hour connect time, character transmission charges (e.g., $.05 for 
every 1000 charac-ters sent), message copy charges (e.g., $.05 for every person copied on a message), 
and storage charges. Off-line creation and upload reduce connect charges but do not affect the others. 
However, there are issues other than dollars. Often, the editors on electronic mail sys- tems are far 
less powerful than micro-based word processors. So, ease of message creation can be greater off-line. 
This is especially important if the "message" is actu-ally a document being sent to sev-eral people for 
comments or posted to a "bulletin board" for general feedback. The editing capabilities available then 
become central and the mail system becomes a highly effective means of soliciting editorial assistance. 
Section 2 EDUNET, EASy and Specifics : EDUNET's involvement with the Apple as an intelligent terminal 
using EASy software; details on file transfer protocols. EDUNET's involvement with the use of microcomputers 
as intelligent terminals grew out of a joint project with the North Carolina Educational Computing Service 
(NCECS) to gen-eralize a terminal emulation and file transfer program it had developed for the Apple 
II. The Apple had 48K of memory, a Language Card and a Communications Card and ran under the UCSD Pascal 
operating system. The NCECS program pro-vided for error-free transfer of data sets (files) between Apple 
diskette-based files and a TSO sys-tem on a mainframe. EASy, the EDUNET Access System, was a gen-eralization 
of this program. EASy included a menu of EDUNET supplier institution computers that the user could choose 
from, with the ability to store Iogin identifiers and passwords for any of these. An automatic Iogin 
procedure was developed for five of the host machines. A single keystroke initi-ated a dialogue with 
these machines and passed the stored identifier and password to let the user Iogin automatically. Error-free 
file trans-fer (uploading and downloading) was included for the NCECS machine, and a facility for upload-ing 
messages to the University of Wisconsin's EDUMAIL mail system was available. Planned further developments 
in EASy were not implemented due to personnel changes at NCECS (the developer left), and the appearance 
of several commercial packages with a number of additional features. EASy did, however, serve a need 
until the commercial sector devel-oped the now overwhelming number of terminal programs in the inter- 
vening several years. Also, the EASy code served as a model and basis for file transfer utilities developed 
by several other institu-tions for their own systems, some of which will be noted later. In retrospect, 
EASy had several design shortcomings. Looking at these shortcomings provides some insight as to what 
features should be required in current microcom-puter telecommunications software. EASy's design wed 
it to several hardware devices --an 80-column card, a communications card and a certain type of modem 
--that were replaced by faster, simpler and less expensive devices. Software com-patible with a range 
of telecommuni-cations hardware is desirable from a user's as well as a vendor's per-spective. The development 
software for EASy was the first release of UCSD Pascal so lowercase letters were not supported. Such 
a limita-tion eliminated EASy from being used to, for example, transfer doc-uments. (A shortcoming of 
a more specialized nature was that the Iogin sequences used to connect to hosts were "hard-coded" into 
the EASy software instead of being put 12 in tables. Therefore changes to a host's Iogin required significant 
recoding rather than minor fixes.) Another of EASy's limitations was its use of a single protocol -- 
 "line-at-a-time" (End-Of-Block/ Acknowledge or EOB/ACK) --to control uploading and downloading. Though 
file transfer capabilities were provided for one host at an EDUNET supplier institution, this protocol 
made EASy difficult to use in a more general sense. To upload a file required that the host send a prompt 
character to have EASy send each line/block of the file, one at a time. Likewise, downloading required 
that the host wait until it received a prompt (acknowledge) character from EASy to send each line/block 
of the file. The EOB/ACK strategy is to make the blocks manageable enough for the other computer to receive 
in a "chunk" but not so small as to cause excessive waiting for acknowledgements. When uploading (micro 
to main-frame), the EOB/ACK protocol can prove to be effective if the host uses a line-oriented editor. 
The communications then resembles key-board entry in its flow --the 'new-line' prompt of the editor (in 
input mode) ACKnowledges its readiness to receive data; the line/block of data is entered; the End Of 
that Block of data is signaled with a RETURN; the cycle is repeated. The EOB/ACK approach to down-loading 
was not as simple to imple-ment if the host did not already provide a command to list the next line/block 
of a file in response to a simple prompt. Attempts to write user-level programs at the host to control 
its part of the communica-tions often failed (due to timing and line problems). In the case of one computer 
system EASy's inability to send an ESCAPE character (the ESC key was used by EASy to send a BREAK signal) 
was fatal because ESCAPE was used by the host to end input mode and also to bracket strings for substitution 
or replace-ment. An alternate communications strat-egy is called "flow control" or "stop-start" or "XON/XOFF." 
Flow control refers to the ability of two communicating machines to request that data be momentarily 
halted and then resumed. Special characters are used to stop and start data transmission. The ASCII 
character controI-S (XOFF) is often used as a "halt transmission" character. ASCII controI-Q (XON) is 
the cor-responding "resume transmission" character. To support flow control, a host computer must be 
capable of "listen-ing" for XOFF while it is sending and must be using the same XON-XOFF characters as 
its remote intelligent communications partner. The host must be able to halt transmission upon receipt 
of an XOFF, then resume without loss of data. It shoud be noted that not all mainframes support flow 
control nor do all communications packages for micros. In addition, communica-tion through networks like 
Telenet or TYMNET can affect the ability to use this protocol. Activity at Supplier Institutions : developments 
at Stanford, NCECS , Notre Dame, NJ Institute of Tech-nology, Dartmouth, MIT, University of Minnesota, 
University of Michi-gan, Wayne State University and Yale. EDUNET, though unable to support and continue 
development of EASy, made the source code available to other developers to modify or extract certain 
modules of the code for use in their own custom commu-nications utilities. One such development was the 
Stanford File Transfer Program. Both a Pascal and a BASIC version were written for the Apple, and provision 
was made for use with a wider range of both 80-column cards and communi-cations cards. The Stanford pro-gram 
communicated with an ORVYL file utility written in Pascal running on their IBM 3081. It provided for 
error-free file transfer to and from the Apple using an extension of the protocol developed at NCECS, 
including some sophisticated ways of checking and verifying the trans-mitted data (a 16-bit checksum, 
positive and negative acknowledge-ment, and retransmission of bad packets). NCECS in the mean time has 
contin- ued distribution of both MIT (Microcomputer Interactive Termi-nal), from which EASy developed, 
and MBT (Microcomputer Batch Terminal), a Remote Job Entry emu-lation package for the Apple. Sup-port 
for the DC Hayes Micromodem, CCS Communications Card (with 1200-baud capability), and several 80-column 
boards have been added to the latest version of MIT. NCECS is also actively evaluating several commercial 
packages and packages available from other insti-tutions for recommendation and/or redistribution throughout 
the com- munity it serves. Many other institutions that EDUNET deals with have developed or promoted 
various terminal pack-ages. The University of Notre Dame has developed a Pascal-based program for the 
Apple that uploads and downloads to its IBM 370 sys-tem under TSO. They have also prepared several short 
papers describing procedures for uploading and downloading to their system. New Jersey Institute of Technolo-gy's 
conferencing system, EIES, has spawned a number of rather intelligent software/hardware con-figurations 
geared to sending mes-sages and entering long conference entries onto their system. Since many of their 
users are remote and pay for telecommunications charges that are time dependent, features like automatic 
Iogon and file trans-fer at designated times are incorpo-rated into several of these systems. One system 
presents an emulation of a terminal session that allows the user commands to be stored, and verified 
in emulation mode, and then be sent from the terminal like a batch session. Dartmouth College is committed 
to developing an error-free file trans-fer capability for the IBM PC which will include terminal emulation 
and the ability to store and recall 10 screenfuls of a terminal session. Massachusetts Institute of Technolo-gy's 
IBM 370 system under CMS has in its user-contributed library pro-gram listings for the IBM PC that users 
can download to their PC's. (How to do this before you get the PC code to do the downloading is somewhat 
of a chicken and egg con-undrum.) Institutions that have developed error-free file transfer facilities 
include the University of Minnesota, the MERIT computer network includ-ing the University of Michigan 
and Wayne State University, and Yale University. Minnesota's program, COM, has been written for the Apple 
II (Pascal), Terak 8510 (Min-nesota Micro Operating system), Xerox 820 (CP/M), and Zenith Z-89 (CP/M). 
File transfer between their CYBER's (NOS) and VAX's (UNIX and VMS) and the micros is accomplished using 
a XFER utility written in Pascal for these machines. Error-checking and retransmission is currently imple- 
 mented only for files downloaded to the micros. COM parameters for interacting with the CYBER's and 
VAX's are located in a separate file. Documentation includes sug-gestions for modifications for trans-fers 
with other machines and oper-ating systems. The University of Michigan has generalized a file transfer 
protocol, Michigan Communications Program (MCP), originally developed for work with a number of minicomput-ers 
and has versions now available for a wide range of microcomputers including the Apple II (and other 6502 
machines), the IBM PC, and micros running under CP/M. MCP provides full-duplex communication with error-free 
file transfer on records of maximum length 252 bytes. It will transfer ASCII, EBCDIC, and binary files, 
and in several implementations includes emulation of either Ontel or 3270-type terminals, including a 
terminal session buffer that can be used to edit and then repeat previ-ously entered command sequences. 
The protocol does not however sup-port flow control. This makes the protocol not work through packet 
networks such as Telenet. Yale University has developed a special package for the IBM PC called YTERM 
that allows the PC to emulate either a Digital Equipment VT100-type or Data Media 1520-type terminal. 
Tables can be built to allow emulation of other terminal types or a custom-designed key-board. YTERM 
provides support for the Series/1 Yale ASCII Termi-nal Communication System which allows the IBM PC to 
function as a 3270-type terminal. In addition, a PCTRANS utility running under VM/CMS on the mainframe 
allows both error-free file transfer between the PC and the host and a number of other utilities, such 
as transfer of diskette directory infor-mation to the host. PCTRANS is under development for use with 
the TSO operating system and also with VAX/VMS. Features of YTERM include the abil-ity to exit terminal 
emulation mode and work in the PC DOS environ-ment without interrupting the ter-minal session. In fact, 
up to 1200 bytes of screen information are buffered before an XOFF (control-S) is sent to the mainframe, 
while you are in this mode. You can 'soft' enter back into terminal mode, then resume the terminal session. 
Two Commercial Packages : Visi-Corp's TTY emulator VisiTerm and Saturn Consulting Group's VT52 and VTIO0 
emulator VTERM. Two commercial packages will be reported on: VisiTerm, a TTY emu-lator for the Apple 
II and II + (VisiCorp); and VTERM, a VT52 and VT100 emulator for the IBM PC (Saturn Consulting Group). 
Though there are many other such commercial packages available, we have had considerable experience with 
VisiTerm and moderate experi-ence with VTERM and have found both to work quite well. VisiTerm embodies 
much of the well-produced documentation, well-designed user interface and high functionality that made 
its older brother, VisiCalc, such a success. By using the Apple's high resolu-tion graphics, it produces 
lowercase letters without the need for a spe-cial card or chip. This does not, in general, provide an 
80-column display; but one can get a reason-ably legible 68 (monospace) charac-ters per line. This graphics 
approach to the character set used allows for special character sets such as one for APL or for any character 
the user wishes to create. VisiTerm keeps the user informed on the display's bottom line of cur-sor location 
by column, of duplex setting, and of the escape/shift status. It also provides a variety of screen display 
options (switching character sets, altering the scroll), communications options (speed, duplex, parity, 
stop bits) and file transfer parameters (block size, transfer protocol, EOB/ACK charac- ters). All parameters 
are set in a full-screen mode with the options and settings indicated right on the screen. The VisiTerm 
default parameters work most of the time so the user need not often be con-cerned with the variety of 
options available. If some special communi-cations configuration is frequently used, the settings can 
be easily stored for future use and recalled with just a few keystrokes. The file transfer provisions 
in Visi-Term are comprehensive. File transfer parameters are set with ease and the identification of 
the file to be sent or received is straightforward. Transfers are commenced with a single keystroke. 
In addition, one of VisiTerm's char-acter sets makes visible all control characters. This enables you 
to analyze the host's character trans-mission sequence in order to deter-mine the proper ACK setting. 
(This setting is frequently not what it appears to be on the screen with a "regular" character set because 
of the presence of non-displayed con-trol characters.) Seeing VisiTerm transfer files for the first time 
is impressive. After changing from the normal terminal display to file transfer mode, you are presented 
with a six-line win-dow through which the transfer takes place. Above on the screen are the parameters 
in effect for the transfer and counters to track the number of characters and blocks transmitted and 
the number of STOPs encountered. Once the command to upload or download a file is given, the characters 
scroll through the window with the counters "clicking" away in real time as the transfer proceeds. Sta-tus 
events like STOP or EOB are indicated on a flashing line below the window. Available commands for controlling 
the transfer are also displayed and are each a single keystroke. VisiTerm is, however, limited to use 
with the Apple, and only with rela-tively few communications peripher-als. Newer releases will be compat-ible 
with more peripherals; but because of its reliance on Apple graphics, VisiTerm as currently implemented 
will remain wedded to the Apple. Another limitation has been Visi-Term's use of Apple DOS text files 
for file transfer. (Utilities are provided for converting Applesoft and Integer BASIC files as well as 
binary files to DOS text files. Going from DOS text files to BASIC files is documented in Apple's DOS 
manual.) VisiTerm does not have its own editor and finding a suita-ble editor for the creation of com-pletely 
DOS-compatible text files has been problematic. However, the latest version of VisiTerm has an interface 
to UCSD Pascal files. This means that files can be created using the rather powerful and widely available 
UCSD Pascal editor and then be available for use with VisiTerm. Our experience with VisiTerm at EDUNET 
has been that it is very versatile and extremely useful for transferring data between widely disparate 
computers. It was used, for example, to facilitate the prepa-ration of a monograph done by many authors. 
Chapters were pulled together (downloaded) from over half a dozen different campus computers, transferred 
to our local minicomputer and merged, then sent off to the publisher. VTERM gives VT52 and VT100 functionality 
on the IBM PC. This lets the PC operate as a "smart" terminal with computers and applica-tions that utilize 
or require cursor addressing, underlining, high intensity, reverse video and extended character sets. 
Such fea- tures are often used in full-screen word processing and are also now used in a variety of data 
base applications and on-line tutorials (CAI). As with VisiTerm, terminal parame-ters are easy to choose 
on a full-screen menu using cursor position-ing and a key which toggles the settings. These settings 
may also be stored on a diskette and recalled for later use. VTERM has facilities to upload ("auto type") 
and download ("disk log") files to and from the PC. VTERM uses XON/XOFF flow control to keep its 128-character 
download buffer from overflowing; and the speed of the upload can be set lower than the nominal baud 
rate to minimize load on the host system. However, there is no error check-ing in these routines. File 
uploading and downloading are a bit clumsy. For example, each time you want to transfer a file, you must 
go to the settings menu to initiate the transfer. Also, there is no convenient way to get a direc-tory 
of diskette files for file name references, etc. VTERM does, however, allow you to send screen transactions 
or complete copies of the screen directly to the PC printer whenever hardcopy of a session is needed. 
An experience that illustrates the power of VTERM (and of telecommu-nications links and emulations in 
general) came in using the IBM PC as a VT100 to go through Yale's ASCII Series 1 front end to look like 
a 3270-type display terminal. In all, VTERM effectively emulates VT52 and VT100 terminals. You are generally 
unencumbered by the limitations so often associated with emulation modes, especially when you are using 
all the VT100 fea-tu res.
			