
 An Integrated FORTH System Kam-Wing Ng and Wai-Yan Ma Department of Computer Science The Chinese University 
of Hong Kong Hong Kong Abstract An Integrated FORTH Development System is described, which differs 
from the usual FORTH implementation in that certain of its facilities such as the editor and the file 
system are integrated with the host environment. This integrated approach simplifies the implementation 
effort by reducing redundancies but still provides a powerful development system which is espe- cially 
suitable for creating stand-alone FORTH programs. I. Introduction FORTH is a threaded interpretive 
language [i] invented by Charles Moore in 1969. It was developed for real-time control appli- cations, 
data bases, and general business. FORTH is ideally suited for microcomput- ers. FORTH is very different 
from any other language in common use in that it is both extensible and interactive. The advantages of 
FORTH when compared with other languages include: Program testing in FORTH is extremely easy. Memory 
requirements are greatly reduced. Highly transportable. Fast. Furthermore, FORTH is not just a language, 
it is also an interactive environment. Typically, a FORTH system includes the capabilities of an operating 
system, a text editor, an assembler, and a monitor. FORTH does have its problems [2]. Permission to 
copy without fee all or part of this material is granted provided that the copies are not made or distributed 
for di~ct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. &#38;#169; 1983 ACM 0-89791-123-7/83/012/0076 
$00.75 Chief among these are in readability and ease of documentation. Another major problem is that 
FORTH's virtual-memory system as defined is incompatible with an operating system. The basic method of 
accessing mass storage data in FORTH is in IK units known as blocks. A block or a screen are equivalent 
in storage capacity. The screen is a IK block of mass storage which is mapped to a 64-character by 16- 
line monitor display. When FORTH is used under an operating system environment, there is a required translation 
from a block number to a file structure refer- ence. In FORTH there is no direct multi- block file structure. 
This forces all block references to the file structure to be handled at the IK unit level regardless 
of the operating system capability. As a stand-alone operating system FORTH has the disadvantage of having 
no directory struc- ture. As a result, a lot of file scanning must be done before the correct screen 
is located. Comments are usually placed on the first screen line to identify the screen contents, this 
further limits the amount of data that can be placed on a screen. FORTH's problems can be solved quite 
easily on to-day's 16/32 bit microprocessor-based systems using an integrated approach. These systems 
usu- ally come with quite sophisticated software such as Unix* [3] or Unix look- alike operating systems. 
An implementa- tion of FORTH which includes the editor and the operating system on these powerful systems 
would not be taking advantage of the excellent software environment offered. Why waste effort to implement 
or be limited by primitive text editor or file system when more powerful facilities are available? This 
is the premise under which an Integrated FORTH Development Sys- tem is implemented on a Z8001 based system 
running under an enhanced version of Unix [4]. * Unix iS trademark of Bell Labora- tories. 76 5. 
Integrated FORT~H System An overview of the Integrated FORTH System(IFS) will be described in the fol 
~ lowing sections. 2.1 The Editor Unix provides a very powerful and flexible screen-oriented editor 
called Vi [5] which uses a database of terminal characteris L tics, users wishing to create/test pro~ 
grams written in FORTH or any other language will use Vi to do so. This pro a vides a uniform interface 
to the user and no duplicate effort is spent on writing an editor inside the FORTH system. The pro ~ 
vision of a powerful screen editor together with the removal of the limita- tion imposed by IK screens 
allow a user to perform better documentation.  2.2 Files File is a primitive data structure in addition 
to the variable, constant, array and string provided by IFS. Files in IFS can be classified as source 
file and object file. This classification does not differ in concept with the classification in the conventional 
programming languages. A source file is a sequence of characters created using the visual editor or created 
inside IFS. However, an object file is not a sequence of numbers that represent the machine instructions. 
An object file in IFS is a sequence of numbers that represent the address of the definiton of the other 
words in the dictionary, i.e. the threaded code. The machine code is fed directly into the machine for 
execu-tion, whereas the threaded code in the object file of IFS is copied into the dic- tionary of the 
interpreter for later reference or execution. Besides the threaded code, the object file also stores 
information about the address of the starting location of the file in the die ~ tionary, and about the 
heads of the lists of the definition in the object file. In order to reference or create a source file, 
the user can use the word 'FILE', followed by the source file name. If the file cannot be found in the 
file directory of the user, a new file will be created. Afterwards, whenever the inter- preter meets 
the file name, the file descriptor will be pushed onto the parame- ter stack. Otherwise it will simply 
open the source file and get the file descrip- tor. There is no need to specify whether the source file 
is open for input or out- put. The user can do both input and out- put. It is IFS's philosophy to give 
the greatest amount of freedom to the user. For an object file, there is no spe- cial word to open or 
close it. However, the file manipulation words that operate on an object file will automatically open 
or close it as needed.  2.3 File Manipulation Words The source file and the object file are managed 
through the use of file manipula- tion words in IFS. A rough idea of the relationship between the file 
manipulation words is shown in the following diagram:  Dictionary k BATCH Pad Terminal INCLUDE E LOAD 
V^ FETFILE I~fUTFILE Object File ~ Source File 77 The meaning of the words are: (1) LOAD. This word 
will load a source file into the dictionary. The file descriptor should be pushed onto the parameter 
stack before the word 'LOAD' is executed. Nested loading is allowed up to 8 levels. When nested loading 
occurs, the file descriptor and the window of the next read character in the current file will be saved 
into the "BATCH STACK'. Then the newly named file will be loaded. After the new file is com- pletely 
loaded, the previous file descriptor and window will be popped from the "BATCH STACK" to continue the 
process. The loading process will be the same as if the source were being typed into the system through 
the terminal, so the user will see the response of the inter- preter in interpreting each line of the 
file.  (2) BATCH. This word is exactly the same as the word 'LOAD', the only exception is that this 
word does not read from a file but from the content in the pad instead.  (3) PUTFILE. This word will 
write the content of the pad( the range is specified by the system variable %f ) onto the file whose 
file descriptor is on the parameter stack.  (4) GETFILE. This word will read the file whose file descriptor 
is on the stack to the pad. Since the word 'LOAD' is a secondary word that con- sists of the word 'GETFILE' 
and 'BATCH' in its definition, in order to prevent the lost of the file descriptor of the old file in 
the pad when the programmer wants to 'LOAD' a new file, the word 'GETFILE' will store the current file 
descriptor and the window on a temporary place. Later, when the word 'BATCH' is exe- cuted, it will restore 
the old file descriptor and the window from the temporary place to the "BATCH STACK". However, if it 
is simply a 'GETFILE', but not followed by 'BATCH', then that old file descriptor and window  will 
not be saved. (5) SAVE. This word is used for saving the definitions within the range starting from 
the most recently defined word to the latest defined word just after the most recent gap( a discussion 
on the gap will be given in Section 3 ). These definitions will be saved into an object file whose name 
is the word just following the word 'SAVE'. In case that the file is not a new file, the inter- preter 
will ask the user whether the old file is to be replaced. This word will not affect the dictionary, 
so the word saved can still be used. (6) INCLUDE. This word will copy an object file into the dictionary. 
Before the file is copied, the inter- preter will test to see if the next available location in the dictionary 
is the same as the starting location of the file in the dictionary. If these addresses are not matched, 
an error message will be printed, and the file will not be 'INCLUDED'. After the file is 'INCLUDED', 
the heads of the lists of definitons in the dictionary will be updated according to the information in 
the object file.  (7) ^. This word is used to replace line number n in the pad, n must have been pushed 
onto the parameter stack already. This word is similar to the mechanism in Basic, where the user specifies 
the line number and types the new line to replace the old one.  (8) CLOSE. This word is used for clos- 
ing the source file. The file descriptor of the file to be closed must be in the parameter stack.  
 In order to know the content of the pad, the following sequence of words can be used: PAD %F @ TYPE 
 The content of the pad will then be listed on the screen. %F is a system variable that stores the file 
length of the file whose content has just been read into the pad. The words 'SAVE' and 'INCLUDE' are 
very useful in creating a run-time overlay pro- gram structure. Suppose a problem can be divided into 
a main program and several subprograms. Then the main program can be 'included' into the dictionary, 
followed by including the first subprogram. After processing of the first subprogram, that subprogram 
and any smaller subprogram under that subprogram can be forgotten. Next, the second subprogram can be 
included under the main program in the dictionary. Consequently the words used for the second subprogram 
will be avail- able in IFS instead of those of the first one. By this change of subprogram files, the 
user is actually doing the overlay. ~. Implementation The FORTH words implemented in IFS are a subset 
of the FORTH 79 Standard [8]. IFS is implemented using a high-level struc- tured assembly language PLZ/ASM 
[6]. The implementation structure is basically the same as that described in [1][7], with additional 
words and/or modifications to  78 cater for the facilities of Section 2. IFS is characterized by 4 
major com- ponents. The heart of IFS is the inner interpreter. This is the routine that steps from address 
to address in the threaded list of the program. The next important components are the outer inter- preter 
and the colon compiler which may be combined together. These two are actually secondary words. The last 
but not the least important component to be discussed is the dictionary. The words are linked together 
as a linked list. Each word con- sists of a head and a body. The body con- sists of a lot of threads. 
The first thread always points to an executable rou- tine which is either the colon routine or the specific 
routine that performs the function of that word. In its simplest form, the dictionary can be a single 
linked list. However, search for a word will always follow the llst step by step. It will be very time 
consuming if the linked list is very long. So the diction- ary in IFS has separated the words into 15 
linked lists according to their word lengths. It is certainly true that a lit- tle amount of execution 
time will be lost in getting the head of a particular linked list, but this will be compensated when 
the list grows longer and longer. Accompanying the dictionary is the "GAP STACK". The need of this stack 
and the word 'GAP' arises from two considera- tions. First, in standard FORTH, a word oriented forget 
command is provided. Sim- ply commanding the interpreter to 'forget' a word, say GARBAGE, will cause 
the word GARBAGE and all the word defined after GARBAGE to be forgotten. However this simple method cannot 
be adopted in IFS, since the dictionary of IFS is composed of more than one linked lists. Without accessing 
the head of the lists, it cannot be determined which list a word belongs to by simple inspection on the 
definition of the word. So if IFS adopts FORTH's feature, and the user asks to forget a word, the interpreter 
must first find the address of the stated word, then start from the beginning of each list to deter- 
mine which word in the list should become the new head of that list. It will be very time consumming 
and very inefficient. As a way to overcome this obstacle, IFS requires the user to specify at a particu- 
lar point to remember the head of the lists, so when the word 'forget' is invoked, that particular head 
of the lists will replace the current one. Second, the facility of the object file is provided in IFS. 
However, the object file creates a serious problem in that its position in the dictionary must be the 
same as that at the time it was created. Even if the address in the object file is not absolute, but 
is rela- tive, correction of addresses is needed when it is 'included' into the dictionary. The necessity 
of the correction is clear when a word refers to another word in its definition and that word is outside 
of that particular file. Then this relative address has to be corrected since the dis- tance of the file 
from that word is changed. Besides the inefficiency, the fatal problem is that it is almost impos- sible 
to separate a simple integer data or ASCII code data from the addresses in the threaded code in that 
file. In order to overcome this problem a lot of information must be stored in the object file. How- 
ever, with such a large amount of irrelevant data and inefficiency, it is better to compile the source 
file again. Therefore IFS sets the restriction that the position from where the object file can be 'included' 
must be fixed. Thus, the user is forced to mark precisely where the beginning of the object file is. 
Con- sequently, it is reasonable to use the word 'GAP' to do it. There are four words in IFS for dic- 
tionary management. They do not take any input data. What they actually do is to manipulate the content 
of the "GAP STACK" and to set the value of 'h' and the values of the heads of the linked lists of the 
dictionary. The "GAP STACK is used for TM  storing the address of the next available location in the 
dictionary and the heads of lists of the dictionary. The upper part of the dictionary is fixed and occu- 
pied by the system defined words. So, when the interpreter starts to execute, the heads of the linked 
lists of the dic- tionary is already known. The interpreter will then save these heads and 'h' in the 
"GAP STACK". The dictionary management words are: (i) EMPTY. This word will clear all the definition 
of the user defined words in the dictionary, i.e. it will restore the latest values stored in the "GAP 
STACK" to the heads of linked lists and 'h'. The latest values will be those stored when the interpreter 
started to execute.  (2) GAP. It will form a gap in the dic- tionary, i.e. it is going to push the current 
values of the heads of linked lists and 'h' to the "GAP STACK".  (3) FORGET. This word will forget all 
the words from the most recently defined one to the defined just  after the most recent gap, i.e. it 
is going to pop the values of the heads of linked lists and 'h' that are just on top of the "GAP STACK" 
to the locations that store the current heads and 'h'. If no 'GAP' command has been issued before, the 
word 'FORGET' will affect nothing.  79 (4) BRIDGE. It will cancel the most recent gap in the dictionary, 
i.e. it is going to drop the values of the heads of linked lists and "h' that are just on top of the 
"GAP STACK ", without affecting the current values of the heads and 'h'. 4. Conclusion  FORTH's problems 
are solved by an integrated approach that combines a core FORTH system with the Unix environment. The 
availability of more powerful utility software and the concept of source and object files increase programmer 
produc- tivity and make various manipulations pos- sible. This approach is especially suit- able for 
the development of stand-alone FORTH programs. References  i. L. Brodie, Startin~ FORTH, FORTH, Inc.. 
 2. R.G. Loeli~er, "Sallying FORTH to Battle", Dr. Dobb's Journal, No. 59, se_zp_~. ~81, pp. 25.  3. 
D.M. Richie and K. Thompson, "The UNIX T--~e-Sharin@ System u, CACM, Vol. I_~7, N_~o. 2, 1974, pp. 365-375. 
 4. E.C. McCauley, E.N. Doka  and N.A. Baladi, "Challenging the minis", Mini-Micro Systems, Sept. 1981. 
 5. W. Jo~, and M. Horton, "An introduction to display editing with Vi", Dept. of Electrical En@ineerin@ 
aqd  Computer Science, Univ. of California, Berkeley calif. June, 1981.  6. Z8000 PLUM Assembly Language 
Programmig Manual, zilo@, Inc.  7. R.G. Loeli@er, Threaded Interpretive Languages, Byte Publications 
Inc., 1981.  8. FORTH-79 STANDARD, FORTH Interest GrQup.  P.O. Box i105, San Carlos, CA 94070, Oct. 
1980. 
			