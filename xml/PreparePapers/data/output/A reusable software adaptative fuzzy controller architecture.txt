
 A REUSABLE SOFTWARE ADAPTIVE FUZZY CONTROLLER ARCHITECTURE David Rine, Moataz Ahmed and Junda Chen Department 
of Computer Science, George Mason University Fairfax, Virginia, USA 22030-4444, drine@cne.gmu.edu KEY 
WORDS Software Reuse, Adaptive Controller, Fuzzy Logic, Abstract Data Type, Adaptive Algorithms ABSTRACT 
This paper presents a method for designing a reusable software controller architecture. The proposed 
controller architecture is designed for a specific domain of controllers (e.g. zero order, first order, 
second order ..... nth), and it can be reused to develop a specific controller within this specific domain. 
The basic idea of this reusable controller architecture is to design a general adaptive control system 
in which knowing the plant parameters is not important, as long as they are within prespecified property 
constraints. The proposed controller architecture is composed of two submodel parts: (1) Model Identifier 
which is an on-line fuzzy model identifier represented as an adaptive fuzzy rule based system which takes 
a sample from the input and output signals, tries to approximate the plant model behavior, and, as long 
as it takes more samples, gives a more precise model for the plant; (2) Neurofuzzy Controller which is 
a fuzzy rule based system using a feedforward neural network at the representation level. This feedforward 
network is trained using the information coming from the fuzzy model identifier, from the desired output, 
and from the actual output.The 'experimental computing' aspect is based upon the investigation of several 
kinds of adaptibe algorithms to 'train' the membership functions representation layer, while portraying 
the user interface specifications layer by use of fuzzy logic. The 'applications' aspect is the important 
area of software architecture reuse, especially for the development of control systems software. "Permission 
to make digital/hard copy of all or part of this material without lee is granted provided that copies 
are not made or distributed for profit or commercial advantage, the ACM copyright/server notice, the 
title of the publication and its date appear, and notice is given that copying is by permission of the 
Association for Computing Machinery, Inc.(ACM). To copy otherwise, to republish, to post on servers or 
to redistribute to lists, requires prior specific permission and/or a fee." &#38;#169; 1996 ACM0-89791-820-7 
96 0002 3.50 INTRODUCTION This paper presents a new paradigm for developing reusable software components 
(modules) by incorporating automatic training and adaptive control technologies instead of using the 
more traditional manual (programmers) modification of algorithmic code. The thesis posed in this paper 
is that within the framework of software engineering principles of fuzzy logic are a viable alternative 
to the traditional development of reusable software components. We argue that the use of fuzzy logic 
allows one to develop software components according to the software engineering principles of modularity 
and testability so that the components may be seen as stable at the specification level and adaptable 
at the representation level. In recent years, interest in adaptive control systems has increased rapidly 
along with the general interest and progress in control topics. According to the most widely accepted 
description, "adaptive control systems adjust their behavior to some changing properties of the controlled 
plant and their signals" (Ogata, .1985 [8]; Isermann, 1992 [6]). The cost and effort in developing effective 
control systems over a product family of such systems has not yet been adequately addressed, even though 
there has been a great deal of interest in developing reusable software components over the last twenty 
years. One key to developing cost and effort effective control systems within a product family is to 
plan for the use of reusable templates, architectures and components for such systems (Ahmed and Rine, 
1995 [1]). Such reusable control templates, architectures and components may, once developed, be stored 
in repositories for use in the effective assembly of such control systems. Automobile manufacturing companies 
such as Chrysler Corp., and others, have already begun to report on the cost and effort gains in using 
such a more flexible approach to product line manufacturing, based upon reuse. Moreover, Sonnemann (1995) 
[9] has shown that successful industrial and government software reuse programs 633 . .- :~ .'-2, ~ 
 ~ " include, but are not limited to, the following characteristics: 1. Product-line approach 2. Domain 
specific reusable architectures 3. Domain specific repository of software parts.  In the past ten years 
there have been many important applications of fuzzy logic to the development of systems and circuits 
for controllers, railway transportation, cameras, automobiles and industrial process control. In the 
implementation of fuzzy circuits use has been made of various combinations of fuzzy inferencers, fuzzifiers 
and defuzzifiers (Depicted in Figure 1). In an earlier paper Chen (1995) [3] has reported work on a training 
framework of an effective method for off-line training of a class of control software components (e.g., 
for first-order nonlinear feedback control systems) using combinations of three kinds of adaptation algorithms. 
Each control software component is represented at the abstract level by means of a set of adaptive fuzzy 
logic rules and at the concrete level by means of membership functions. At the concrete representation 
level adaptation algorithms specified for use in adapting fuzzy membership functions are: genetic algorithms, 
neural net algorithms, and Monte Carlo algorithms. A goal of our research is to specify effective combinations 
of these three existing adaptation algorithms to train an erroneous fuzzy logic rule-based software component 
in the tracker control domain. To determine effectiveness, an initial taxonomy of training metrics in 
terms of flexibility, adaptability, and stability is used. In the framework, training consists of two 
phases: testing and debugging. In the testing phase, a test driver generates a minimal set of fault scenarios 
by using each of three adaptation algorithms. In the debugging phase, for each fault scenario the debugger 
corrects component errors by applying adaptation algorithms to modify both the membership functions and 
the rule weighting. An initial design of the simulation environment is presented. This present paper 
presents one approach in developing such flexible, reusable templates and architectures for families 
of control systems. The flexibility and reusability is achieved by means of the fuzzy logic technology. 
With this approach standard interfaces can be designed using fuzzy linguistic variables, and then the 
flexibility is achieved by tuning the fuzzy membership functions using various adaptation algorithms, 
in particular neural networking algorithms. The 'experimental computing' aspect is based upon the investigation 
of several kinds of adaptibe algorithms to 'train' the membership functions representation layer, while 
portarying the user interface specifications layer by use of fuzzy logic. The 'applications' aspect is 
the very important area of software component reuse, especially for the development of control systems 
software.  BASIC CONCEPTS In software engineering modularity is used to design components incorporating 
abstraction, information hiding, encapsulation, abstraction -representation independence and abstract 
data types (ADT). ADTs are comprised of a more stable specification level (abstract layer) and a more 
adaptable representation level (concrete layer). Traditionally, ADTs have been implemented using templates 
and patterns, C++ template classes and Ada genetic package specifications. Our new paradigm uses fuzzy 
(linguistic) variables and rules to describe the specification level of the ADT and uses fuzzy membership 
functions (saw tooth curves) to describe the representation level. Maintaining the performance of the 
ADT, as a reusable component, involves automatically training the membership functions by use of evolutionary 
(adaptive) algorithms, including neural network algorithms, genetic algorithms and monte carlo algorithms. 
Automatic control has played a vital role in the advancement of engineering and science. In addition 
to its importance in space-vehicle, missile-guidance, and aircraft-piloting systems, automatic control 
has become an important and integral part of modem manufacturing and industrial processes. In the conventional 
adaptive control literature, adaptive controllers are classified into two categories: direct and indirect 
adaptive controllers (Harris, 1994) [5]. The indirect adaptive controller is characterized by on-line 
identification to form a plant model which is then used to perform controller design. This has the advantage 
of separating the model identification and controller design stages for easier analysis. The modularity 
in designing the model identifier, as well as the controller, is now achieved. In this paper, this structure 
of adaptive controllers wilI be used to represent a reusable neurofuzzy controller. Let us consider the 
problem of adapting the electro-mechanics of an automotive brake system to accommodate driver foot pressures. 
The problem is comprised of three steps. First, develop the driver (user) model. Second, develop the 
particular automotive subsystem. Let us consider the end-user (driver) interface as depicted in Figure 
2. Figure 3 depicts the interaction of the end-user interface with 634 the adaptation of the fuzzy logic 
membership functions' values to customize driver braking pressure to the specific electro-mechanics of 
the given automobile. Hence, the braking module (subsystem) steps can be viewed as taking place at two 
levels of abstraction: Driver (End-User) Specification Level -- (1) Apply a given force value (e.g. 5 
pounds) (2) Fuzzify force value (e.g. medium pressure) Automobile (Electro-Mechanics End) RepresentatibnLevel 
-- (3) Determine appropriate brake system action using fuzzy logic (4) Defuzzify to a value for electro-mechanics. 
 Advantages to using fuzzy logic, assuming control variables are continuous, over traditional alternatives 
are the following: (1) Fuzzy logic rules will fire over a wider range of variable values, e.g.consider 
variables BRAKE_TEMPERATURE, SPEED, BRAKE_PRESSURE, etc. (2) One fuzzy rule may replace many conventional 
logic rules. (3) Fuzzy logic is easier to prototype. (4) (Zadeh) Fuzzy logics are easier to design 
(for controllers) and, so, easier to produce. (5) Focus is on human operator's (e.g. driver's) behavior. 
 (6) (Yasunobu and Miyamoto) Fuzzy control logic is uperior to conventional controllers in key areas 
such as (a) increased accuracy in stopping vehicles, (b) smoother acceleration and braking, and (c) lower 
electric power consumption.  The design of a fuzzy logic component is generally comprised of five steps: 
(1) Define component's functional and operational characteristic. (2) Define control surfaces by fuzzy 
sets, and define acceptable performance limits. (3) Define behavior of control surfaces by logic rules. 
 (4) Determine a method of defuzzification, e.g, centroid method. (5) Do simulation and tune control 
by adjusting fuzzy membership functions.  A REUSABLE NEUROFUZZY CONTROLLER It is well known that for 
most engineering systems, there are two important information sources (Wang, 1994) [10]: 1. Sensors which 
provide numerical measurements of variables.  2. Human experts who provide linguistic  instructions 
and descriptions about the system. The information from sensors is called numerical information, and 
the information from human experts is called linguistic information. Linguistic information can be represented 
in fuzzy terms (Wang, 1994) [10] because human knowledge about many problems is essentially fuzzy. A 
fuzzy controller has the ability to incorporate the human knowledge, represented in linguistic terms, 
into the engineering system very efficiently. In the proposed adaptive controller model, the interface 
with the users remains unchanged. The only changes are made in the fuzzy set shapes defining the lables. 
The proposed controller model is composed of two submodel parts: 1. Model Identifier which is an on-line 
fuzzy model identifier represented as an adaptive fuzzy rule based system which a. takes a sample from 
the input and output signals, b. tries to approximate the plant model behavior, and c. while taking 
maore samples, gives a more precise model for the plant.  2. Neurofuzzy Controller which is a fuzzy 
rule based system stored in a feedforward neural network. This feedforward network is trained using 
the information coming from the fuzzy model identifier, from the desired output, and from the actual 
output. This fuzzy model identifier can be reused to identify any system dynamics as long as it is within 
the same class. The classes are defined as follows. Given that the system dynamics are discretized, the 
system can be represented as y(k+l) = f(y(k), y(k-1) ..... y(k-n+l), u(k), u(k-1) ..... u(k-n)), where 
y(k) is the SYStem output as the kth instant, u(k) is the system input at the kth instant, and f is the 
linear or nonlinear function. This system is considered to be in the nth class. As an example (Narendra 
and Parthasarathy, 1990) [7], the system governed by the following difference equation is considered 
to be in the second class: y(k+l) = 0.3*y(k)+ 0.6*y(k-1) + 0.6*sin(pi*u(k)) + 0.3*sin(3*pi*u(k)) + 0. 
l*sin(5*pi*u(k)). A fuzzy rule base (Wang, 1994) [10] consists of a collection of fuzzy IF-THEN rules. 
A direct adaptive control scheme may be mapped to fuzzy control rules which state in what situations 
particular control actions should be taken. Our fuzzy model identifier, using an indirect adaptive control 
scheme, may be mapped to fuzzy IF- THEN rules 635  which describe .the behavior of the unknown plant. 
All fuzzy sets generated will be of a triangular shape. The adaptation machine is the algorithm used 
to update the rule based system, along with the fuzzy set parameters. The algorithm is as follows: Let 
C be the system class. Let N be the maximum number of rules. Let e be the tolerance. Let m be the membership 
degree of correctness of the rule. Let 0 <= m <= 1. begin repeat Get new "control action" and "actual 
output", and keep the history of the"control action" and the "actual output" according to the system 
class C. Calculate the "model output" using the current rule base and the inference engine. If abs(Cactual 
output" -"model output")/ "actual output") > e Then Add new rule with centers "control action", "actual 
output", "control action" history and "actual output" history, according to C, Let m = 1, Decrease m 
of neighbors of "control action", Ifn=N Then remove rule with minimum m Else n = n + 1 Endif Else Let 
m of neighbors of "control action" = 1  Endif until {forever}  end. The neurofuzzy controller is represented 
as a fuzzy rule based system stored in a two-layer feedforward neural network (Berenji, 1993 [2]; Fu, 
1992 [4]). The knowledge is described in production IF-THEN rules. Each rule has an antcedent consisting 
of one or more conditions, as well as a single consequence. The neurofuzzy controller is constructed 
in the following manner. First, the input layer includes a fuzzifier whose task is to match the values 
of the input variables against the labels used in the fuzzy control rules. Second, the hidden layer in 
this network corresponds to the rules used in the controller and includes the decision-making logic. 
The inputs to the unit are the preconditions of a rule, and the output of the unit is its conclusion. 
The output layer represents the defuzzifier which combines the conclusion of the individual rules. This 
feedforward network is trained using the model information coming from the fuzzy model identifier, from 
the desired output, and from the actual output.  CONCLUSION A method for designing a reusable software 
controller architecture has been described. The proposed controller architecture is designed for a specific 
class (domain) of systems (e.g. zero order, first order .... nth order), and it can be reused to develop 
a specific controller within this specific class. The next step is to replace the model identifier with 
a neural network which is trained to model the plant dynamics and adapt itself to accommodate any changes 
in the plant dynamics. The cost and effort in developing effective control systems over a product family 
of such systems has not yet been adequately addressed, even though there has been a great deal of interest 
in developing reusable software components over the last twenty years. One key to developing cost and 
effort effective control systems within a product family is to plan for the use of reusable templates, 
architectures and components for such systems. Such reusable contol templates, architectures and components 
may, once developed, be stored in repositories for use in the effective assembly of such control systems. 
This paper has presented one approach in developing such flexible, reusable templates and architectures 
for families of control systems. The flexibility and reusability is achieved by means of the fuzzy logic 
technology. With this approach standard interfaces can be designed using fuzzy linguistic variables, 
and then the flexibility is achieved by tuning the fuzzy membership functions using various adaptation 
algorithms, in particular neural networking algorithms. REFERENCES 1. Ahmed, M. and Rine, D., (November, 
1995). An alternative design for a reusable adaptive fuzzy logic controller using adaptation algorithms, 
published in the Proceedings of the Conference on Artificial Neural Networks in Engineering. 2. Berenji, 
H. R., (1993). A Reinforcement Learning- Based Architecture for Fuzzy Logic Control, Readings in Fuzzy 
Sets for Intelligent Systems, Morgan Kaufmann Publishers, Inc, 368-380. 3. Chen, J. and Rine, D., (November, 
1995). A training framework to develop reusable software components by combining adaptation algorithms, 
published in the  Proceedings of the Conference on Artificial Neural Networks in Engineering. 636  
4. Fu, L., (1992). Connectionism for fuzzy learning in rule-based expert systems, I Intuitive Idea: Fuzzy 
Sets I Proceedings of the 5th International Conference on Industrial and Engineering Example: Automobile 
Brake Control Applications of Artificial Intelligence and Expert Systems, IEAJAI-92, 337-340. 5. Harris, 
C. J., (1994). Advances in Intelligent Control, Taylor and Francis Ltd. 6. Isermann, T., (1992). Adaptive 
Control Systems, Prentice-Hall, Inc. 7. Narendra, K. S., and Parthasarathy, K. (1990). Identification 
and control of dynamical systems using neural networks,  IEEE Transactions on Neural Networks, Vol. 
1, No. 1, 4-27. 8. Ogata, K., (1985). Modern Control Engineering, Prentice-Hall, Inc. 10th Edition. 
9. Sonnemann, R., (1995). Exploratory Study of Software Reuse Success Factors, Doctoral Dissertation, 
School of Information Technology and Engineering, George Mason University, Faifax,VA USA. Also, UMI Dissertation 
Services, 1- 800-521-0600, Ann Arbor, MI. 10. Wang, L., (1994). Adaptive Fuzzy Systems and Control, 
Prentice-Hall, Inc.  FIGURES  Fuzzy Logic System Model PHYSICAL DEVICE } t  circuit ~ circuit  c,rcu,tIINFERENCE 
J Figure I. Fuzzy Logic System. BRAKEPRESSURE Input__..~/ ' / />/ low medium high (Control Surface 
Values) End User (Driver) Interface Figure 2. Intuitive Idea: Fuzzy Sets. Example: Automobile Brake 
Control BRAKEPRESSURE / low medium high Braking System Steps: (1) Apply a given force value (e.g. 5 
pounds) (2) Fuzzify force value (e.g. medium) (3) Determine appropriate brake system action (4) Defuzzify 
to a value for electro-mechanics  Figure 3. Automobile Brae Control Steps. 637  -~ ~ ~ ~.~-~,~;~x,~-...~'~<~. 
~ ,. ,,.. ,,~- , FUZZY APPLICATIONS PANEL SESSION Title: Fuzzy Applications Moderator: Madjid Fathi, 
University of Dortmund Panelists: E. Damiani, University of Pavia D. Rine, George Mason University G. 
Succi, University of Trento G. Trausmuth, University of Wien R. George, Clark University 638  
			