
 Volume Probes : Interactive Data Exploration on Arbitrary Grid s Don Speray The University of Texas 
at Austin, Dept. of Computer Sciences The Computational Mechanics Company, Inc . Steve Kennon The Computational 
Mechanics Company, Inc .  Abstract A taxonomy of computational grids used in scientifi c and engineering 
practice is presented and a techniqu e for cutting them by, and displaying data on, 2D surface s is developed 
. When sliced by a surface, these grids giv e rise to a graph G(C,F) where C, the nodes, are the inter­sected 
cells and F, the arcs, are their connectivity acros s faces . Starting from any cell known to be intersected 
b y the surface (a seed), G is traversed breadth-first and i s constructed locally on the fly, that is, 
only the spread­ing "front" explicitly exists at any time . Only sliced cells are visited, shared computed 
values such as edg e intersections are passed to neighbors, and most of th e geometric work is done via 
table lookup . A seed cell i s found by fence-hopping from any cell to a distinguished point on the surface. 
This means of slicing grids is then utilized in an effectiv e visualization tool . Concentrating on planar 
surfaces , local coordinate systems are defined for constructin g clipping windows and linear transformations 
within th e planes which further reduces display time and allows effects such as zooming within the windows 
. Several of these planar windows are then organized into vari­ous objects, called probes, that can exploit 
the mind' s "retinal memory" when repeatedly swept through amor­phous data . CIt Categories and Subject 
Descriptors: 1.3 .3 [Computer Graphics] : Picture/Image Generation Display algorithms ; I.3.5 [Computer 
Graphics] : Computational Geometry and Object Modeling Geo­metric algorithms ; I.3.6 [Computer Graphics] 
: Meth­ odology and Techniques --Interaction Techniques Additional Keywords : slicing, post processing 
, probes, retinal memor y Permission to copy without fee all or part of this material is granted provided 
that the copie s are not made or distributed for direct commercial advantage, the ACM copyright notice 
and th e tide of the publication and its date appear, and notice is given that copying is by permissio 
n of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission . 1990 ACM 0-89791-4 1 7-1/9 0/00 1 210005 5 1 .50 Introductio n Slicing will remain 
one of the fastest volume displa y methods for scalar fields for the same reason that it com ­plements 
other common techniques . It shows a limite d (one might say infinitesimal) subset of the volume pe r 
slice and displays the full range of data existing there . Contrast this with contouring or ray casting 
where a limited range of data is shown throughout the full vol­ume. These techniques benefit from a priori 
knowledg e of the data for selecting contour or opacity values, say , to arrive at the desired image 
. Since slices can be gen­erated quickly, data exploration with slicing would be a useful first step 
in many analysis regimens . In many applications, however, these other methods are inadequate or inappropriate. 
Choosing a set of distin­guished values to display may be undesirable and i t doesn't take many nested 
colored transparent surface s before confusion ensues. They also suffer when noise or high frequency 
behavior is present in the data nea r values of interest, showing up as "fragmentation" (float­ing gravel), 
confusing surface classification algorithms , or simply taking longer to render . Acquired data is rarely 
smooth and computational results are seldom a s smooth as one wishes (especially in modeling turbulenc 
e [7] I) . Slicing is less susceptible, but not immune, t o these problems. It is hard to imagine comprehensibl 
e 3D versions of the gas jet displays of Norman [10] an d Winkler [9] that attempt to convey an equivalent 
leve l of information . Another issue is the time it takes to ray-cast a volume , or trace out a complete 
contour and photorealisticall y render the result . There is a place in a researcher' s armamentarium 
for simple and fast display, especiall y in light of the fact that these methods may be slower i n the 
context of the grids to be discussed . Finally, planar slices open up volume data analysis t o researchers 
without late-model workstations . The re­sults may be displayed in 2D with line countours or fille d 
polygons, perhaps accompanied with a low bandwidt h 3D display to orient the slice in the volume. We 
further believe that slicing can be effective in show­ing total data behavior when several slices sweep 
th e volume in concert and quickly enough to build and re­inforce a mental image. We begin by discussing 
the grids in use today, follow with an efficient algorithm for slic­ing them, and end with an application 
of the algorithm that satisfies most of the issues raised . Computational Grids for Graphi­cists The 
following taxonomy of grids will suffice for our dis­cussion ; see, for example, [1, 11, 14] for more 
informa­tion . They are presented in order of increasing general­ity (and complexity). With each type 
is the required in­dexing to find a point's world coordinates . Neighborin g points delineate subvolumes 
known as cells or elements . cartesian (i,j, k) This is typically a 3D matrix with no intende d world 
coordinates, so subscripts map identicall y to space . If the cells are small and numerous (as to be 
almost atomic in practice, like 2D pixels) , then it is known as a voxel grid ; however, th e term is 
often loosely applied . regular (i * dx, j * dy, k * dz) Cells are identical rectangular prisms (bricks) 
aligned with the axes . rectilinear (x[i], y[j], z[k] ) Distances between points along an axis are arbi­trary. 
Cells are still rectangular prisms and axis ­aligned. See figure 1 for a simple 2D example . structured 
(x[i, j, k] y[i, j, k], z[i, j, k] ) This type, also known as curvilinear, allows non­boxy volumes to 
be gridded. Logically, it is a cartesian grid which is subjected to non-linea r transformations so as 
to fill a volume or wrap around an object. Cells are hexahedra (warpe d bricks). These grids are commonly 
used in com­putational fluid dynamics (CFD) . See figure 2 . block structured (xb[i, j, k], yb [i, j, 
k], zb[i, j, k]) Recognizing the convenience of structured grids , but the limited range of topologies 
that they han­dle, researchers may choose to use several struc­tured grids (blocks) and sew them together 
to fil l the volume of interest . Figure 1 : Rectilinear unstructured (x[i], y[i], z[i] ) Unlike the 
previous types, where connectivity is implicit, there is no geometric information im­plied by this list 
of points and edge/face/cell con­nectivity must be supplied in some form . Cells may be tetrahedra, hexahedra, 
prisms, pyramids , etc ., and they may be linear (straight edges, pla­nar faces) or higher-order (eg 
. cubic edges, wit h two interior points on each edge) . Tetrahedral grids are particularly useful because 
they allow better boundary fitting, can be built automati­cally, and are often simpler to work with, 
graph­ically. Unstructured grids are standard in finite ­element (PEA) and finite-volume analysis (FVA 
) and are becoming common in CFD . See figure 3 . hybri d It may occasionally be desirable to use structured 
and unstructured grids together, putting eac h where their fitting and computational strength s are most 
beneficial. See figure 4, but note tha t the structured layer is exaggerated . At this scale , it would 
appear as a thick black line . In addition to the three coordinates, there may be sev­eral physical 
quantities computed at each point . The size of grids can range from a few thousand element s for simple 
PEA problems to a several million for com­plex CFD studies and the trend in CFD is to use grids that 
challenge each new generation of supercomputer . Computational grids are designed to minimize numeri­cal 
error and this usually means many small cells are lo­cated where "interesting things" happen in the volume 
. Unfortunately, a fixed grid must anticipate where thes e occur throughout the duration of a time-varying 
phe­nomenon and the result is a dense grid requiring mor e Figure 2 : Structure d Figure 3 : Unstructure 
d Figure 5 : Simple 3D structured gri d computation than might he necessary at any given tim e step 
. Consequently, adaptive refinement of grids is be ­coming more popular . Another means to reduce error 
in unstructured grid s is to use higher-order isoparametric elements . These shape functions and cell 
geometries also permit larger , hence fewer cells. An analysis code using them woul d supply the functions 
for performing interior interpola­tion, which involves solving several simultaneous non­linear equations 
. It is reasonable to place the burde n of such interpolation on the analysis code, which coul d refine 
an element into a number of smaller linear el­ements for display, or provide a simple mechanism t o do 
so, and we will assume this. Incidentally, iterative techniques are used for this, even for the trilinear 
case . For rectilinear grids trilinear interpolation is equivalen t to seven linear interpolations, whereas 
this is no longe r true for general hexahedra, and iterative methods lever ­age the work to compute one 
point for quick convergenc e at nearby points . In CFD, grids extend beyond the region of study solel 
y to eliminate boundary-induced numerical artifacts i n the results, so much of the volume may be of 
no inter­ est at all, though general features are grasped by seeing its entirety. On the other hand, 
quite dramatic behav­ior can occur in small, tightly meshed regions . This grid-driven changing scale 
of focus is characteristic of interactive CFD graphics [12] . The 3D grid in figure 5 is used for later 
illustration of various aspects of the slicing algorithm . This is a struc­tured spherical coordinate 
grid over a hemisphere wit h latitudes near both poles missing . It contains hexahe­dral cells and has 
a non-convex boundary consisting of the inner sphere, the polar cones, two "wings" of con­stant longitude, 
and an outer sphere which is not drawn . A few inner grid surfaces of constant longitude and con­stant 
latitude are shown . Figure 4 : Hybrid It is the intention of this section to raise the literacy o f 
the graphics community about what is encountered i n scientific and engineering practice. Only the final 
four grid types handle arbitrary volumes and are the most i n need of interactive display techniques 
. It is hoped tha t more graphics researchers will find computational flui d dynamics and finite-element 
analysis to be sources o f interesting challenges. A source of ideas in CFD might be further generalizations 
and idealizations, as are par­ticle traces and flow ribbons, of what is actually don e in windtunnels 
[8] . Slicing Slicing amounts to identifying intersected cells and dis­playing data within the region 
of intersection of eac h with the surface . Our goal is to slice any grid with user­defined surfaces 
at any position and orientation in th e volume . The orderliness of a grid and the shape of the surface, 
of course, have an impact on finding intersected cells . This is important since relatively few cells 
are actu­ally cut. For example, a voxel grid sliced by the plan e ax + by + cz + d = 0 has sliced cells 
with the followin g points as vertices: (i ,j, L (ai + bj + d)/c] ), (i ,j, [ (a.i+bj+ d)/c]) This is 
an over-simplified characterization of sliced cells , but it can be seen that speed is achieved by directly 
computing cell locations and by-passing a search . With a structured grid it is common to fix one subscrip 
t and display the resulting surface, allowing for interme­diate positions by using a non-integral "subscript" 
and interpolating. This is fast because it slices the 3D array (in IJK space) with a plane parallel to 
one of the sub­script planes. Of course, the shape and position of the slice follow the grid in world 
coordinates, as with th e inner surfaces in figure 5 . Others have sliced unstructured grids but have 
used ex­haustive search of the grid for intersected cells [4, 5, 13] . The present technique avoids a 
search by utilizing cell connectivities and the continuity of the surface to follo w the surface through 
intersected cells . The emphasis in this paper is on the issues of determining the intersec­tions and 
not on how one might display the results . A cutting surface may be either open or closed, dividin g 
space into two parts . Let the surface be defined by the characteristic function 1 if (x, y, z) is in 
the positive half space S(x, y, z) 0 otherwise Figure 6 : Surface polygon s Surfaces are assumed to be 
approximately planar withi n cells for the purposes of determining edge and face in­tersections, that 
is, faces may be cut only once. This assumption also places a requirement on cell faces : ide­ally, faces 
would be planar, but are often only approx­imately so . In practice, nearly-planar faces have no t been 
a problem ; further cell refinement is possible, per­haps at the cost of interior interpolation . As 
in marching cubes [6], each vertex of a cell is assigne d a bit position within an index and S(x, y, 
z) provides the bit value. This index identifies, in a precompute d table, the intersected edges and 
faces in polygon order . In our implementations, we deal only with tetrahedral and hexahedral cells . 
The table of 14 cases for tetrahe­dra was built by hand. The hexahedral table was buil t by software 
that inspected each of the 254 candidat e cases by walking across faces, following edge intersec­tions, 
until an impossible or disallowed situation was encountered . There are 63 unique valid configurations 
and each appears twice in the table because flipping bit s makes no difference . The table was verified 
by using th e I-lo-Kashyap procedure [2] to linearly separate the ver­tices of a cube and by checking 
the twelve extra cases , due to twisting, by hand . These tables could be used t o verify the integrity 
of a grid by sweeping it with a plan e to cut cells and seek impossible vertex configurations . Given 
a sliced cell, its table entry lists the faces to mov e through to follow the surface . Except for the 
first "seed " cell, then, the search is table-driven . The following sec­tion will deal with finding 
this seed . Intuitively, a cutting surface is covered by a network o f polygons resulting from being 
cut by cell faces . An ex­ample is figure 6, which shows a nearly horizontal plan e cutting the sample 
grid. (Ignore the heavy rectangle, fo r now .) The dual graph of the network is G(C,F) wher e C, the 
nodes, is the set of polygons (intersected cells, in 3D) and F, the arcs, are their connectivities across 
edge s (cell faces, in 3D) . A breadth-first traversal of G, start ­ ing from the seed, is appealing 
for three reasons . First, only the nodes on the traversal front need to be know n so G may be built 
locally and on the fly. Second, it al­lows maximum sharing of computed results across face s since a 
cell's "more distant" neighbors are all added t o the front at the same time . Finally, rules to terminate 
the traversal, such as clipping on the cutting surface or reaching a threshold value in the data, are 
easy to implement . The traversal is performed using a queue, initialized with the seed. In each cell 
entry are the S values for each vertex, interpolated values along each intersected edge, pointers to 
entries of neighboring cells (which als o serve as face markers), bitmaps to tell what info is cur­rently 
known, and a unique id . The queue head (current cell) is processed as follows : 1. compute missing S 
values and do the lookup 2. compute missing edge intersections, for both spa­tial and data value s 
3. for each sliced unmarked face with an unqueue d neighbor, append the neighbor to the queue 4. for 
all neighbors in the queue, pass shared infor­mation and mark their adjoining face pointer s o as to 
ignore the current cell when they queue their neighbors . 5. output display info  The potentially time-consuming 
part is searching th e queue for neighbors in steps 3 and 4 . A cell may have several "closer" neighbors, 
any one of which will process first and queue it . In general, the others have no way o f knowing this 
has happened . The simplest solution, when memory is available, is t o mark each queued cell in an auxilliary 
list with the cur ­rent slice number and its entry's address . This list has a slot for each cell in 
the grid and uses whatever cell ad ­dressing is natural to the grid . Searching is eliminated by comparing 
a cell's recorded slice number with th e current slice . The list need be reset only when the slice number 
wraps around, relative to the word-length allo­cated for them. With this list, face marking in step 4 
is not required since this list serves as a global memory o f processing. Alternatively, the queue may 
be partitioned into eigh t smaller lists by noting that the seed cell divides a vol­ume into octants 
. Each cell is located by either the world coordinates of a distinguished vertex or, for struc­tured 
grids, its subscripts . These locate it relative t o the seed and determine its octant list . This partition­ing 
only affects searches through the single queue . Since Figure 7 : Traversal generation s the traversal 
front surrounds the seed, at least four o f these lists become populated and they assist in reducing 
queue searching . The search time may be reduced further by exploitin g the structure of the queue (and 
each octant list) . De­fine generation G k +1 to be the set of newly-encountere d neighbors of all cells 
in Gk , where Go is the seed cell . Unfortunately, in general, these sets are not disjoint . At any moment 
the queue consists of a shrinking pop­ulation of G k at the front and a growing population o f Gz+1 at 
the rear . If a neighbor is already on the queue , it is more likely to he in G~.+1 so the search begins 
there . It is guaranteed to be there for a cartesian grid and a planar surface, and G k is the set of 
sliced cells wit h Manhattan distance k from the seed . Figure 7 is a rep­resentation of the traversal 
process . A cutting plane is nearly parallel to the rear boundary "wings" and the seed cell is at the 
lone white polygon . Each generation is marked by a different shade of gray, modulo a smal l number of 
shades . The nature of the spreading fron t shows clearly . Informally, with a grid of N cells, the queue 
length i s D(N 1/3 ), since queued cells form the circumference of an area on the surface . Clipping 
Limiting the cutting surface to a neighborhood of th e hot spot can focus the user's attention by eliminatin 
g irrelevant parts of the volume and, by terminating th e graph traversal, their computation time . Further, 
if the shape of the clip region can he controlled, then several such clipped surfaces may be combined 
into objects that convey more information than a single surface . A later Figure 8 : Clipped windo w 
section describes such objects that assume rectangula r clip windows on planar surfaces . When a surface 
cuts a cell's face and enters a neighbo r cell, the intersection becomes an edge on the surfac e which 
separates two polygons . If the edge is completely clipped away, the neighbor is not queued . If the 
edg e is partially clipped then the window-edge endpoint of the edge lies on the face of a cell and linear 
interpola­tion between the original endpoints provides its value . This is Gouraud, not bilinear, interpolation 
and is quit e sufficient . The four corner points of a rectangular cli p window are interior points of 
cells and the analysis code can be called on to compute their values. Depending on the grid resolution 
and needs, the four corner polygons could be ignored, eliminating significant computationa l machinary 
for four points, out of perhaps many thou ­sands. Figure 8 shows clipping applied to figure 6 an d the 
curtailment of the traversal . Seeding the Slice A target point (hot spot) on the surface serves to 
fin d the seed cell and any solution to the point-containmen t problem will work. We don't accelerate 
the search by preprocessing because in the context of interactive slic­ing, our method is not a bottleneck 
. It amounts to line­of-sight fence-hopping (face-hopping) from a known cel l to the point and works 
well when the surface and its ho t spot move smoothly through the grid . Starting at a point in any cell 
(the previous seed is an ideal choice), a line is constructed with parameter t to the target point such 
that t = 0 is the start point and t = 1 is the target. Next, intersections of this line wit h each face 
of the start cell are computed in terms of t . Faces are treated as having infinite extent . The line 
exits the cell on the face with the least positive value o f t . Unlike ray tracing, we don't care if 
a face is actually intersected - we know that one of them is . The line enters the adjoing cell and the 
process repeats . Eventually, a cell is reached where all candidate inter ­sections have t > 1 and this 
is the seed . For the secon d and subsequent cells, the new start point may be repo­sitioned away from 
the edges of the entry face to avoi d looping around edges or vertices. This strategy als o adds robustness 
in case of nearly-planar faces . As a cutting surface is driven interactively by a user , the hot spot 
moves incrementally through the grid an d little work is required to update the seed cell . When the 
hot spot is driven "out of sight" (the line of sigh t exits, then re-enters, a non-convex grid domain) 
of th e starting point or out of the grid, we apply the heuristi c of starting over from another region 
of the grid . For example, in a structured grid the center cell on eac h of the six grid boundaries usually 
provide good vantag e points. If it still isn't located, it is reasonable to assume it is out of the 
grid . One could define alternate ho t spots, refuse to move it out of the grid, or simply ask the user 
to return it . Probes We now turn to an application of the slicing algorith m which uses plane surfaces 
. A probe is a collection o f planar cutting surfaces, refered to as sheets to imply they may have limited 
extent . It has a local coordinat e system defined by the linear transformation to_probe which maps world 
coordinates to the probe's . Likewise , each of its sheets, s, has a local coordinate system de ­fined 
by to_sheets which maps from the probe to th e sheet. A sheet's cutting surface is its z = 0 plane whic 
h conveniently defines the two halfspaces for the charac­teristic function S. Its origin is a simple 
choice for hot spot and the world coordinates are the bottom row (as­suming transforms post-multiply 
points) o f 1 (to_probe * to_sheets) - Each sheet also has a special-effects transform fxs an d a map 
to the unit cube to_cubes . fxs provides zoom­ing and panning (parallel or normal to the by plane) . 
to_cubes maps a selected region of the sheet containin g the hot spot into the unit cube for clipping, 
althoug h for this application clipping applies to the unit square . The complete transformation from 
world coordinates t o each sheet i s to_probe * to_sheets * fxs * to_cube s The inverse mapping i s (to_probe 
* to_sheets * to_cubes) -1 Figure 9 : Paddlewheel prob e and is just a modeling transform to the host 
graphics system, that is, there is no execution overhead . fxs doe s not participate in the inverse so 
that its effects remain for display. The entire probe is driven by manipulating onl y to_probe. Probes 
are designed by specifying each to_sheets . The simplest probe has a single sheet and , with its varying 
clip window and zooming, resembles a magnifying glass roaming through the data . Two othe r designs are 
trihedral: This probe uses three orthogonal sheets an d provides good three-dimensional information nea 
r their intersection . Such "corner" views are com­ mon with voxel-based tools, but this probe is eas­ily 
rotated to any orientation . paddlewheel: Several sheets touch along an axis an d are separated by at 
least 60°, less if transparency is used to avoid obscured sheets . When rotated about the axis, the paddlewheel 
sweeps out a re­gion . A complete revolution may be faked by fil m looping the sweep between consecutive 
vanes. Fig­ure 9 shows a 3-vane paddlewheel . The potential for probes lies in the speed in which a volume 
may be swept by multiple surfaces . When they are swept rapidly, smoothly, and repeatedly through the 
volume, using nothing more than color-encoding of th e data and Gouraud polygon fill, the effect can 
be like a continuum of contour shells . Experience with multipl e IJK slices of structured grids, as 
described earlier, o n 16mm film showed that "retinal memory" is a powerfu l mechanism for grasping the 
whole of a volume . t Probes provide additional structure to the slices and sugges t ways of sweeping, 
as in the paddlewheel . With today's t Work done by Robert Smith, Eric Everton, and one of the authors 
(DS) at NASA Langley Research Center, starting in 1982 , and described briefly in N . top-end workstations, 
and whatever the future holds , this effect is within reach of interactive use . Of course , it could 
also work for other volume display methods , though slicing holds the earliest promise for the firs t 
reason mentioned in the introduction .  Extensions We have two planned extensions for probes . The firs 
t will incorporate contouring within the neighborhood o f a sheet . By moving a (2D) pointer along the 
surface o f a sheet, the user will be selecting the data value at tha t point . Its contour will then 
be built within the sheet's clipping box. By varying the probe's position and size of the box, users 
will see contours in any region of interes t without an exhaustive search through the entire grid . The 
second extension is for vector fields . By adding to the scalar display, on sheets, lattices of points 
from which vectors or particles may launch, probes becom e devices that vary continuously from "tuft 
screens" [8] to particle rakes . Tufts are pieces of yarn which blo w in the direction of flow and are 
idealized in graphics b y variable length vectors (and are not to be confused wit h "hedge-hogs," which 
display surface normals) . A vecto r is essentially a single time-step particle trace . This de­vice 
gives the user control over its size, lattice density, and the number of time steps (and their direction 
i n time) to trace particles . Conclusio n We have presented an algorithm for slicing the compu­tational 
grids commonly used today . It maximizes th e use of local knowledge, at each sliced cell, of the behav­ior 
of the slice in order to eliminate global search an d redundant calculations . Using it for planar surfaces 
, we next constructed probes of several planes for use i n scalar fields. Probes may be used to show 
total dat a behavior in a volume by exploiting the mind's ability t o accumulate an image by repeated 
exposure to pieces o f it . Two simple extensions are described for merging slicin g with contouring 
and for examining vector fields . The characterization of all the tools discussed is that they have user-defined 
extent and six-degrees-of-freedom mo­bility, emphasizing their role in exploring data . Acknowledgement 
s We appreciate the helpful discussions with Chris Berry , Olivier Hardy, and C. Y. Huang of The Computational 
Mechanics Company, K. R . Subramanian and Chri s Buckalew of UT's Computer Sciences Department, an d 
Lee Metrick of Schlumberger's Austin System Center . Keith Waters of Schlumberger's Lab for Computer 
Sci­ences provided help in making a video at a crucial poin t and C . Y . Huang provided the images of 
2D grid types . References [1] Computational Fluid Dynamics, Office of the Chief Scientist, NASA Langley 
Research Center, un­dated . [2] Duda, R., Hart, P., Pattern Classification and Scene Analysis, John Wiley 
&#38; Sons, 1973 . [3] Gregory, T ., Carmichael, R., "Interactive Com­ puter Graphics : Why's, Wherefore's, 
and Exam­ples," Astronautics &#38; Aeronautics, April 1983 . [4] Ho, S. H., "Visualization of 3D Solid 
Finite Ele­ment Meshes by the Method of Sectioning," Corn­pu.ters ff Structures, Vol . 35, No . 1, pp 
. 63-68 , 1990 . [5] Ldhner, R., Parikh, P., Gumbert, C., "Some Al­gorithmic Problems of Plotting Codes 
for Unstruc­tured Grids," Proceedings of the AIAA 9 th Corn­putational Fluid Dynamics Conference, June 
1989 , AIAA-89-1981 . [6] Lorensen, W ., Cline, H ., "Marching Cubes : A High Resolution 3D surface Construction 
Algorithm," Computer Graphics, Vol . 21, No. 4, 1987 . [7] Mandelhrot, B., The Fractal Geometry of Nature 
, W. H. Freeman &#38; Co., 1983 . Merzkirch, W ., Flow Visualization, 2"d edition , [8] Academic Press, 
Inc ., 1987 . [9 ] Neal, M ., "What's Going On Up There ?", Applica­tion Briefs, Computer Graphics and 
Applications , July 1987, p . 8 . ; also in "Visualization in Scientific Computing," SIGGRAPH Video Review 
28 . [10] Norman, M., in "Visualization in Scientific Com­puting," SIGGRAPH Video Review 28 . [11] Sengupta, 
S ., Hauser, J ., Eiseman, P ., Thompson , J . (eds .), Numerical Grid Generation in Computa­tional Fluid 
Mechanics '88, Pineridge Press Ltd. , 1988 . [12] Watson, V ., Buning, P ., Choi, D ., Bancroft, G . 
, Merritt, F ., Rogers, S ., "Use of Computer Graph­ics for Visualization of Flow Fields", State of the 
Art in Data Visualization, SIGGRAPH '89 Cours e #28 Notes, July 1989; also in AIAA Aerospace En­gineering 
Conference, Feb 1987 . [13] Winget, J ., "Advanced Graphics Hardware for Fi­nite Element Results Display," 
Advanced Topics i n Finite Element Analysis, ASME Pressure Vessel s and Piping Conference, 1988, PVP 
Vol . 143 . [14] Zienkiewicz, 0 ., Taylor, R., The Finite Element Method, 4 th ed., vol. 1, McGraw-Hill, 
1989 . 
			