
 Satisfiability of Equations in Free Groups is in PSPACE Claudio Guti@rrez Computer Science Group, Dept. 
Mathematics, Wesleyan University, U.S.A. and Departamento de Ingenier/a Matem~tica, Universidad de Chile, 
Chile cgutierrez @ wesleyan.edu ABSTRACT We prove that the computational complexity of the problem of 
deciding if an equation in a free group has a solution is PSPACE. The problem was proved decidable in 
1982 by Makanin, whose algorithm was proved later to be non primitive recur- sive: this was the best 
upper bound known for this problem. Our proof consists in reducing equations in free groups to equations 
in free semigroups with antiinvolution, and pre- senting an algorithm for deciding equations in free 
semi- groups with antiinvolution. 1. INTRODUCTION Let E = {al,...,a,~} be an alphabet. An equation in 
the free group G generated by E with unknowns xl,... ,Xm is an equality of the form w(xl,. , xm, al,. 
 , a,~) = 1, where w is a word formed fromthe letters xl,...,x,~,al,...,a,~ and their inverses. A solution 
of such an equation is a list Vl,...,Vm of words in ax,... ,an,a~l,...,a~ 1 such that w(vl,...,v,~,al,...,an) 
= 1 in the group G. In this paper we prove that the problem of deciding if such an equation has a solution 
is in PSPACE. In the early 60's Markov, studying algorithmic problems of semigroups and groups, posed 
the following question: Is there an algorithm for solving arbitrary equations in free groups? (or in 
unification language: is the unification prob- lem for groups decidable?). This problem and the related 
one for free semigroups has lately attracted much attention from the theoretical computer science community, 
see for example [2], [8], [9], [3], [16], [17], [18]. Special particular cases were answered positively 
by Lyndon [12], Lorents [10], Kmelevskii [6], [7]. In 1982 Makanin [14] (corrections in [15]) presented 
an algorithm that solves the general case, still the only one known. Koscielski and Pacholski [9], by 
showing that 'contrary to the common belief' this algorithm is not primitive recursive, stated the current 
upper bound for this Partially supported by FONDAP, Matematicas Aplicadas. Permissionto make digital 
or hard copies of all or part of this work for personal or classroom use is granted without fee provided 
that copies are not made or distributed fbr profit or commercial advantage and that copies bear this 
notice and the thll citation on the first page. To copy otherwise, to republish, to post on servers or 
to redistribute to lists, requires prior specific permission and/or a fee. STOC 2000 Portland Oregon 
USA Copyright ACM 2000 1-58113-184-4/00/5...$5.00 problem. As for lower bounds, Durnev [2] showed a 
NP-haxd lower bound. On related algorithmic aspects of equations on free groups we can mention the work 
of Razborov [19] who presented an algorithm for generating all the solutions to a given group equation, 
and Durnev [2] which proves the undecidability of several related problems. Summarizing, the current 
complexity of the problem of sat- isfiability of equations in free groups is between NP-hard (see [2]) 
and PSPACE (this paper).  Overview of the paper In [4] we reduced the problem of satisfiability of equations 
in free groups to that of satisfiabitity of equations in a sim- pler theory, namely in free semigroups 
with antiinvolution (SGA), via a PSPACE translation. In this paper we prove that satisfiability of equations 
in free SGA is in PSPACE, hence giving a PSPACE upper bound for the case of free groups. The theory SGA 
is 'in between' that of semigroups and groups, and is defined by the equations x(yz) = (xy)z, (xy) -1 
= y-ix-1 and (x-l) -1 = x. A free SGA over the set E is the set of words over the alphabet EU{a -1 : 
a E E} together with an operator ( )-1 which reverses a word and changes the exponent of the base letters. 
Makanin in [14] reduces satisfiability of equations in free groups to the satisfiability of a special 
kind of equations in free SGA, namely those whose solutions are non-contractible. A contractible word 
is, roughly speaking, one which does not contain any factor of the kind cc -1 or c-lc for c constant. 
Then he applies to these special equations a methodology similar to that of his famous previous algorithm 
on word equations by defining generalized equations and the corre- ponding traaasformations. We followed 
a different path, whose schema can be summa- rized as follows: 1. Reduce satisfiability of equations 
in groups to satisfia- bility of equations in SGA with non-contractible solu- tion. Claim 1: For each 
equation E in free groups we get a set of equations E~,... ,E~ in SGA such that E has a solution iff 
one of the E~ has a non-contractible solu- tion. (This first step is the same as in Makanin [14]; from 
here on, the approaches differ completely.) 2. Reduce satisfiability of equations in free SGA with non-contractible 
solutions to satisfiability of equations in free SGA (i.e. no restriction on the solutions). Claim 2: 
For each equation E' in free SGA there is a set E~',..., E~' of equations in free SGA such that E' has 
a non-contractible solution iff one of E~' has a (ordinary) solution. 3. Generalize the method used in 
[18] for deciding sat- isfiability of word equations to a method for deciding satisfiability of equations 
in free SGA. Claim: Satisfiability of equations in free SGA is in PSPACE. The size of the set of equations 
in Step 1 is exponentially bigger than the size of E. Same for Step 2. The good news is that they can 
be generated non-deterministically in polynomial space. So we can conclude that satisfiability of equations 
in free groups is in NPSPACE, hence in PSPACE. As we said, Claim 1 is in Makanin's paper [14]. We proved 
Claim 2 in [4]. From these proofs it is straightforward to con- clude that these sets can be generated 
non-deterministically in polynomial space. For the sake of completeness, we will state the relevant theorems 
from these papers in the Ap-pendix. What remains is Claim 3, which is what we essentially present h is 
Ih(wl)l. By h(E) we denote the word h(wl) (which is the same as h(w2)). The exponent of periodicity of 
a word w is the maximal integer p such that w = xyPz for x, y, z words and y non- empty. By the exponent 
of periodicity of a solution h we mean the exponent of periodicity of h(E). The next is an important 
the'orem. THEOREM 1. Let E be an equation in free SGA. Then, the exponent of periodicity of a minimal 
solution of E is bounded by 20(IE[). PROOF The proof is a straightforward generalization to SGA of the 
result proved in [8] for words; a sketch of the proof can be found in [4]. [] 2.2 Sequences of words 
Given sequences $1 = Wl, ..., Wn, $2 : Vl,. ., Vm of ele- ments of E*, the composition $1, $2 denotes 
the sequence wl,...,w,~,vl,...,vm. In general, for Si sequences of E, in this paper. This generalization 
follows the seminal Plandowski's we define inductively $1,..., S~ as the composition of the paper [18], 
and is a combinatorial proof. The idea is to define a non-deterministic transformation > among equa- 
tions which preserves satisfiability. The algorithm consists in generating non-deterministically equations 
from the sim- ple (satisfiable) equation (c = c) for a constant c. The diffi- cult part is to prove that 
this process can be done in poly- nomial space. The reader familiar with [18] will recognize our indebtedness 
to that paper 2. PRELIMINARIES AND NOTATIONS 2.1 Equations in SGA A semigroup with anti-involution (SGA) 
is an algebra with a binary associative operation (written as concatenation) and a unary operation ( 
)-1 with the equational axioms (xy)z = x(yz ) (1) (xy) -1 ----y-ix-1 (2) --1--1 x = x. (3) A free semigroup 
with anti-involution is an initial algebra for this variety. It is not difficult to check that for a 
given alphabet A, the set of words over A to A -1 together with the operator ( )- 1, which reverses a 
word (changing also the exponent of the letters), is a free algebra for SGA over A. 2.1.I Equations 
and solutions Let E and V be two disjoint alphabets of constants and vari- ables respectively Denote 
by E -1 --{c -1 : c E E}. Simi-larly for V -1. An equation E in free SGA with constants E and variables 
V is a pair (wl, w2) of words over the alphabet .4 = E U E -1 U V U Y -1. The number [E I = Iwll + [w21 
is the length of the equation. These equations are also known as equations in a paired alphabet. A map 
h : V ~ (E tO E-l) * can be uniquely extended to a SGA-homomorphism h : A* ~ (E tO E -1) by defining 
h(c) = c for c e E and h(u -1) = (h(u)) -1 for u C E tO V. We will use the same symbol h for the map 
h and the SGA- homomorphism /t. A solution h of the equation E is (the unique SGA-homomorphism defined 
by) a map h : V ----+ EUE -1 such that h(wl) = h(w2). The length of the solution sequence $1,...,S,~-1 
with S,~. By S t we denote the se-quence S,..., S consisting of t repetitions of S. Also S -~ = Wn I 
, . . . ~ Wl I Given a sequence S --wl,..., w~, we will give special names to the following objects: 
conc(S) = wl...w,~, length(S) = n; first(S) --wl; last(S) = w~; ker(S) = w2,...,w,~-i if length S > 2, 
otherwise ker(S) = e. If R is another sequence, then the substitution in S of wj by R is the composition 
of the sequences wt, . . . , wj- 1, R, wj+l, . . , w,~. The sequence S is a refinement of R if conc(S) 
--conc(R) and there are indices i~ < .-. < ik such that R = conc(wl,..., w,1), conc(w,l+l,..., wi~),. 
. . . ,conc(wik+l ,  . ,wn). 2.2.1 Exponential expressions Given a word w and a positive integer t, 
we will denote the sequence w,...,w (t-times) by w t. If we extend the definition of sequence allowing 
these kind of expressions we get what is called an exponential expression. So we can codify sequences 
by exponential expressions in the ob- vious way. For example ab, ab, ab, ab, a, a, a, b can be codi- 
fied as (ab)4,a3,b, etc. The height of an expression is de- fined recursively as follows: height(w) : 
0 for a word w, height(S1, Sz) = max(height $1, height $2) and height(S t) = 1 + height(S). We will deal 
most of the time with sequences of height no bigger than 1. The size of an exponential expression is 
defned as follows: s(w) = 1 for a word w, s(S1, $2) = s(S1) + s(S2) and s(S t) = 1 + s(S). For our purposes 
what will be important are not the particu- lar words in a sequence, but the pattern of their occurrences. 
So we define two exponential expressions S, R to be isomor-phic if for the sequences they represent, 
say wl,..., wm and vl,..., v~ respectively, it holds m = n and there is a bijec- tion ~: {wl,...,w,~} 
---+ {vl,...,v,~} such that vi ----~o(wi) and ~o(w -1) = (~(w)) -1. The following Lemma is due to Plandowski 
[18]: LEMMA 1. The isomorphism of two exponential expres-sions of polynomial size can be checked in polynomial 
time. 22  2.3 Facts from word combinatorics Given a word w, the subword starting at position i and ending 
at position j is denoted by w[i, j]; we will write w[i] for w[i, if. A period of w is a number p such 
that for all i, w[i] = w[i + p] whenever both sides are defined. The following result uses essentially 
a well known result by Fine and Wilf about periodicity, and appears in [18]: LEMMA 2. Let i < j < k be 
three consecutive starting positions of occurrences of a word v in w. If i + [v[ >_ k then k -j = j -i 
and k -j is a period of a word w[i, k + [v[ -1]. The following is an easy result on conjugate words, 
see e.g. [11]: LEMMA 3. Ifu:w = WU2 then there are words v:,v2 such that u: = v:v2 and ulw = vi(v2vl) 
TM for some integer m. 3. FACTORIZATIONS DEFINITION 1. 1. A factorization F(w) of a word w is a sequence 
of non-emtpy words F(w) = wl,we,...,w, (4) such that w = conc(w:,...,w~). 2. For positions 1 ~_ i,j < 
]w] of w, we define the parti- tion F(w)[i,j], the restriction of the partition F(w) to w[i, j], as follows: 
F(w)[i,j] = w[i,p,+l -1],w,+:,... , wf , w~y+: 1,j], - where pl < "" < Pk are the starting positions 
of Remark. The factorization FD(w) above factors w along the boundaries marked by the 'middle' of the 
words in D, hence we need words of even length. (In [18] the beginning of the words signal the marks 
for the factorization.) Typically D will be a finite set of words of the same even length closed under 
converse, i.e., ifw G D then w -1 E D. LEMMA 4. Let D be a set of words of the same length 2t. Let i 
< j < k be starting positions of three consecutive occurrences of a word v C D in w such that i+ 2t ~ 
k. Then (FD(w)[i + t,j + t --1]) ~ = (FD(w)[j + t, k + t -1]) ~. PROOF. Along the same lines as in [18]. 
By Lemma 2, k-j=j-iandk-jisaperiodofu=w[i,k+2t-1]. It is enough to prove that for 0 < p < j -i the words 
of length 2t starting at positions i + t +p and j + t +p in w are identical. This is true because these 
two words are wholy contained in u and the distance between their occurrences in u is equal to j- i which 
is a period of u. [] LEMMA 5. Let D be a set of words of the same length 2t. Let i < k be occurrences 
of two words u, v E D in a word w. Assume that i + 2t >_ k. Then (FD(w)[i + t,k + t- 1]) ~ can be represented 
by an exponential expression of size O(]D[e). PROOF. Along the same lines as in [18]. [] The key point 
in Lemma 5 is the fact that the size of the expression does not depend on t, but only on the size of 
the set D. w: , . . . , w~ in the factorization (4), that is pj = [w: ... wj- : [q- LEMMA 6. Let D be 
a set of words of the same length 2t. 1, and s, f are the subindices such that p~ ~ i < ps+l and pf < 
j ~_ py+~. We will be mostly interested in the following kind of factor- izations: DEFINITION 2 (D-FACTORIZATION).Let 
D be a set of words of the same even length 2t > 0 and w any word. Let 1 ~_ pl < " < pk < Iwl be the 
set of starting positions of all the occurrences of words of D in w. Let vj = w~j , pj + 2t-1] forj = 
1,...,k. 1. The D-factorization of w is defined as: = - -  F~(w) w[1,p, +t If no word of D occurs W. 
2. For each j(1 < j < k), 1], w[p: +t,p: +t 1],... ...,w[pk +t, lwl]. (5) in w, then we define FD (w) 
= the pair of words vj,vj+: de- termine the factor uj = w~vj + t,pj+: + t -1] of (5). The triple (uj, 
vj, vj+: ) is called the extended factor of the factor uj. For the cases uo --w[1,pl + t -1] and Uk = 
w~vk + t, [w[], the extended factor is defined as (no, $, v:) and (uk,vk,$) respectively, where $ is 
a new symbol. If FD (w) = w then (w, $, $) is its extended factor. 3. For a subsequence S of FD(w), we 
will denote by (S) e the sequence of extended factors obtained from S by replacing each factor by its 
extended factor. 1. If kerFD(w[i,j]) is empty, then ((FDw)[i,j]) e can be represented by an exponential 
expression of size (9([D]2). 2. Ifker FD(W[i,j]) is not empty, then  ((FD(W) )[i,j]) ~ = (RO e, (ker 
FD(w[i,jD) ~, (R2) e where R~ and R~ can be represented by exponential expressions of size at most (.O(IDI2), 
and conc(R:) = first(FD (w[i, j])) and conc(R2) = last(FD (w[i, j])). PROOF. The factorization F D (w) 
of W and FD (w[i, if) of w[i, j] are based on occurrences of the words of D in w and w[i, j], respectively. 
( FD (w) )[i, j] differs from FD (w[i, j]) on possible occurrences of words from D Which either cover 
the positions i or j in w. Apply then Lemma 5. [] We will need also the following result in the case 
of words with converse: LEMMA 7. Let D be a set of words of the same length 2t closed under converse, 
and w a word such that ker FD(w) is not empty. Then if (ker F~ (w)) ° = (wl, v::, vie), ., (w~, ~.1, 
~) it holds , ~,e, ~,: ),.. , (wi-:, v5 :, ~51). (ker FD(w-:))e = (w~: -1 -: PROOF. Just note that 
if there is a word u in D and u --w[p -t + 1,p + t], then u -1 is also in D and u -1 ----w':f[v[ -p-t+ 
1,]v[-p+t]. The result follows then immediately. [] 4. FACTORIZATIONS OF SOLUTIONS OF EQUATIONS From 
now on we axe going to fix a satisfiable equation E : (u, v) in free SGA and a minimal solution h of 
it. Denote IEI = lul + Ivl. A boundary of a word w is a pair (p,p + 1) of consecutives positions. By 
extension we define (0, 1) and ([w[, Iw[ + 1) as the initial and final boundaries respectively. Note 
that for each boundary (p,p + 1) of u (resp. v) there is a unique 'image' boundary in h(u) (resp. h(v)), 
namely (q,q + 1), where q : Ih(u[1,p])l, which is called a cut of h. Because h(u) = h(v) there are no 
more than IEI cuts. The following proposition about cuts is a straightforward generalization for free 
SGA of the similar result for words due to Rytter and Plandowski [16]. The proof can be found in [4]. 
PROPOSITION 1 (LEMMA2 IN [4]). Assume S is a min- imal (w.r.t. length) solution of E. Then 1. For each 
subword w = h(E)[i,j] with Iwl > 1, there is and occurrence of w or w -1 which contains a cut of h which 
is neither the initial nor the final boundary of that occurrence. 2. For each letter c = h(E)[i] of 
h(E), there is an occur-rence of c or c -1 in E.  We will need D-factorizations with a special set 
D as intro- duced in the next definition. DEFINITION 3 (THE SET OF WORDS Dl). For each nat- ural number 
I > 1 define, from E and h, the set Dt of words as follows: w E Dl if and only if either 1. w = h(u)[q-l 
+ 1,q + If for some cut (q,q + 1) ofh. 2. w is the converse of a word in (1).  These sets Dl (parameterized 
by 1 > 1) axe going to play a key role in what follows. Observe that IDll < 2[E]. Notation. Given a 
word w, if no confusion arises, we will write F~w for the factorization FD, (w). We will prove next that 
the factors in Fzh(u) have a small representation. LEMMA 8. Each factor in Fth(u) is of the form wlwPw3 
 where Iwl],lw2], Iw31 < 211E] andp e 2 °(IEI). PROOF. The factorization of Flh(u) is determined by oc- 
 currences of words of Dl in h(u). Consider a factor w of Fib(u), and w.l.o.g suppose Iwl > 61n, and 
let w = h(u)[i, j]. By definition of factorization, h(u)[i -l, i + l- 1] and h(u)~ -l + 1,j + I] are 
in Dz and there are no other occurences of words of Dz in h(u)[i -l, j + l]. By Proposition 1, w or w 
-1 has an occurrence over a cut; w.l.o.g, suppose that w occurs over a cut in h(u). The cut divides w 
into w',w', and Jw'J < I or ]w" I < I (otherwise h(u)[i + Iw'l l, i + Iw'l +1 1] 6 Dz and w would not 
be a factor). Suppose Iw"l < I. Then consider wl = w' and by Proposi- tion 1, w~ has an occurrence over 
a cut. The cut divides w~ ' " into W 1 ~ W 1 : and Jw~ I < I or Iw~'l < I. Continue on for 41E I + 1 
steps. Because there are no more than ]El cuts in h, there must be two indices i0 < j0 <_ 41E I + 1 such 
that w~ o and Wjo (or w~o 1 and w~o ~) hit the same cut, say (q, q + 1) of h(u), and either IW~o I, IW~o 
t < l or Iw~'0 h Iw~'01 < I. Suppose w.l.o.g, that Wio and Wjo hit the same cut, and Iw~0 [, Iw~01 < 
1 (see Figure 1). We know that Wjo t_ ........................... w j0 I I I I I I I I I I I wi0 -_b 
I- -V1 -I me cut (q,q+l) Figure 1: Visualization of proof of Lemma 8. Wio ~-VlWjoV2 and Ivll < (jo -io)l 
and also that vlwj0 = h[q + 1, q + 1 + Ivlw~0 If = W~oV'l for some Vl,V~. Then by Lemma 3, wjo = uo(vouo) 
p for certain p > 0, and Ivouol = Ivll. The statement of the lemma follows from the fact that h is a 
minimal solution, hence by Proposition 1, p < 2 c]EI, and so can be encoded by clE 1 bits. [] LEMMA 9. 
Let w be a factor of F~+lh(u). Then the fol- lowing hold: 1. It is refined in Fzh(u) by a sequence of 
factors S and (S) e can be represented by an exponential expression of size O(IEI3). 2. Moreover, any 
two occurrences of w in F,+lh(u) which have the same extended factor are refined in Flh(u) by the same 
sequence of extended factors. PRoof. Part 1. By Lemma 8, w = wlw~w3 with Iwll < 211E I and p can be 
encoded by clE I bits. First, let us remark that the proof of Lemma 11 in [18] works for the general 
case ]w I < (alE I + b)l + c, where a, b, c are positive integers. We are going to use this case below. 
If Iw~l _< 21 then Iwl <: (41E I + 2)l, and proceed as in the proof of Lemma 11 in [18]. Otherwise, let 
us write w2 P = vlv2v3 with IVll = Iv31= 1; so W ~ WlVlV2V3W2. Because Iwlvll <_ 21Ell + 1 and Ivaw31 
< 21Ell + 1, we can apply Lemma 11 in [18] to these pieces. As for v2, we can pl write v2 = zlw2 z2 
with Izit < Iw21. The key point now is the observation that the D~-factors of v3 are periodic: If certain 
word of Dl occurs in v3 determining a boundary in certain copy of w2, then that same word of Dl determines 
a boundary in each copy we in v3 (thus the choice of vl, v2). t Hence the extended factorization of the 
middle part w2 p is just the extended factorization of any copy of w2 raised to the power p'. Because 
p' _< p < 2 clEI and [W21 ~_<21Ell, it follows that can be represented in space C9(1EI3). For Part 2, 
just notice that both occurrences of w must occur inside identical contexts wlww2 with Iwd = l + 1. [] 
24 5. FACTOR EQUATIONS It will be convenient to view free SGA equations as se-quences of words instead 
of words themselves. So for ex-ample, the equation (xay -1, abxx) can be thought of as the pair of sequences 
(x, a, y-l), (a, b, x, x). A factor equation is a pair (U, V) of sequences of of elements of (E* U V). 
A solution is an assignment h : l; ~ S, where S is the set of sequences of elements of E* such that the 
substitution h(x) for the variables x occurring in U or V make both sequences equal (i.e. both sequences 
have same i-th factors). Two factor equations (U~, 171) and (U~, 172) are isomorphic if the sequence 
U~, =, V1 is isomorphic to 0"2,----, V~, where '=' is a new symbol. Notice that a free SGA equation over 
E is naturally a factor equation over E: the sequences built by transforming the pair of words into a 
pair of sequences (each symbol is trans- formed into an element of the sequence). In what follows we 
will talk only of factor equations, and identify a free SGA equation (via the above inclusion) with the 
corresponding factor equation. Let us recall some facts which will be useful in what follows. E = (u, 
v) denotes a satisfiable free SGA equation, and h a  minimal solution of it. Let us assume that u = 
ul  un and v =v~...Vm, for ui,vj ~ EUV. Ifuk is avariable or the inverse of a variable, say x, and 
i < j are such that h(u~) = h(u)[i, j], then from Lemma 6 we know that if ker F~h(x) is not empty, 
((Fth(u))[i,J]) ~ = (RI) e, (kerFth(x)) ~, (R2) ~ (6) where (R~) e, (Re) ~ can be represented by exponential 
ex-pressions of size O(IDI2). In particular, (kerF~h(x)) ~ is the same sequence for all occurrences of 
the variable x in E. Also, from Lemma 7 we know that if h(x) and h(x -~) occur in Fth(u), (ker F~ h(x-~)) 
e = ((kern h(x)):~) ~. (7) DEFINITION 4 (FACTOR EQUATIONSEt(h)). Let l > 1 be an integer, and E and 
h as before. 1. For each extended factor (w, vl,v2) in (Fth(u)) e de-fine a fresh constant c(~,~,~2). 
Also, if (w, vl,v~) ¢ (w -1, v; a, v[ ~) and both occur both in (Fzh(u) ) ~, iden- tify the constants 
c(~_~,.~,~i_~ ) and c71t~,,~,,2J'" 2. Let (w, vl, v2) be an extended factor in (Fth(u)) ~. De-fine the 
map ( )* as follows:  (a) (w , v~, v~) * = -~ if (~, v~, ~) C(w, vl ,~2 ) c(w,v~ ,v2 ) (~-~,v;~,~;~), 
(b) (w, vl, v2)" = c(w,.x,~2) otherwise. 3. Define Ul as follows (the case for Vt is similar): con-sider 
the extended faetorization (Fzh(u)) ~. Note that for each symbol u~ of u which is a variable (say x) 
and ker Fth(x) is not empty, (kerFlh(x)) ~ occurs as a sub- sequence of (Fth(u)) e. Then Ul is built 
from (Fth(u)) ~ by replacing each such subsequence by the one-element sequence consisting of the corresponding 
variable x. . Define U[ from Ut by replacing each element (w, vl , v2 ) of U~ which is not a variable 
by (w, vl, v2)*. Similarly for Vt*. Then define Edh ) as the pair (Ut*, Vt*). For I = 0 we make the 
convention that Uo = ul,..., un and 17o = vl,... ,v,~, i.e., Eo(h) is E. LEMMA 10. Same notations as 
before. For each integer l >_ 0 it holds: 1. El(h) is satisfiable. 2. El(h) can be represented by an 
exponential expression of size O(IEla).  PROOF. For Part 1 consider the map h' defined for con- stants 
as h'(c) = c, and for variables as h'(x) : ((kerFlh(x))e) *, that is (kerFth(x)) ~ with ( )* applied 
to each component. Observe that ((kerFlh(x))~) * does not depend on the oc-currence of the variable x. 
Also h'(x) = (h'(x-1)) -1 follows from (7) and the identification of some constants in part 1 of Definition 
4. Finally it is clear from the definition of El (h) that h'(U~') = h'(V~*). For Part 2 just note that 
Ut consists of: (1) possibly all the constants of u (no more than those of E), and (2) the extended factorization 
of each h(uj) for uj variables, with (kerFlh(uj)) ~ replaced by one symbol when it is not empty. Then 
use Equation (6) and Lemma 6 to conclude that Ul can be represented by an exponential expression of size 
O(IEla). Hence Ut*, Vz* have also a small representation. [] DEFINITION 5 (NON-DETERM. TRANSFORMATION 
-----+). Let El, E2 be exponential expressions representing factor equa- tions. Then E1 -----+ E2 if 
and only if E2 is isomorphic to an equation obtained from E1 as follows 1. Replace constants of E1 by 
exponential expressions of size O(IEI a) with exponents at most 2 clEI consistently, i.e., ira := exp~ 
then a -1 := (exp,) -1. 2. Suppose u is a variable and $1, $2 sequences. If all oc- currences of u (resp. 
u -1) in E1 are in the context of subsequences of the form $1, u, $2 (resp. S; 1 , u -1 , S~ I ) and 
they do not overlap, then replace all occurrences of Sl,u, S2 (resp. S21,u-l,Sll ) byu (resp. u-l). 
3. Replace some occurrences of a subsequence S by a new variable y and S -1 by y-1 (for the same variables, 
the sequences replaced should be the same).  LEMMA 11. Let El,E2 be exponential expressions repre- 
senting factor equations. If E1 > E2 and E1 is satisfiable, then E2 is satisfiable. PROOF. Let hi be 
a solution of El. For each constant a, denote by expa the expression which replaces a in Step 1 of the 
definition of --+. This replacement defines a morphism a with a(w -1) ----(a(w)) -1 such that a(a) = 
exp~ for each constant a of El. Denote by S~, S~ the exponential expressions introduced in Step 2 of 
the definition of ~ for the variable x. Denote by PY the sequence of constants which is replaced by a 
new variable y. Then it is not difficult to check that ~S~,a(hl(x)),S 2~ ifx OCCURSin E1 and E2 h2(x) 
= [P~ if y does not occur in E1 is a solution of E2. Observe that h2(x -1) = (h2(x)) -1 be- cause (ah1(x)) 
-1 = a(hl(x-1)) and py-1 = (pu)-i [] PROPOSITION 2. For each integer I k O, it holds El+l (h) El(h). 
PROOF. For l = 0, it is easy to check that El(h) --+ Eo(h). For I k 1, by Lemma 9, (Flh(u)) ~ can be 
got from (Fl+lh(u)) e by replacing each extended factor of the sequence (Fl+l h(u)) ~ by a sequence 
of extended factors representable by an expo- nential expression of size O(]E]3), and moreover (Part 
2 of the lemma) two factors with identical extended factors are replaced by the same sequence of extended 
factors. Now recall that Ul+l differs from (Fz+lh(u)) ~ in that for each occurrence of a variable x in 
E with kerl+l h(x) not empty, the corresponding occurrence of (kerl+l h(x)) ~ is replaced by x. Also 
recall that if kerl h(x) is not empty, then (kerl h(x)) e is a subsequence S of (Flh(u)) e. Moreover, 
if additionally kerl+l h(x) is not empty, then (kerl h(x)) ~ = $1, (K) e, $2 where K is a refinement 
of kerl+l h(x) and $1, $2 are some sequences of extended factors. From these facts, it is clear that 
El+l(h) -----+ Ez(h) is got by doing the steps 1,2,3 (in that order) in Definition 5. [] Remark. Observe 
that if E~ (resp. E~+I) is an expo-nential expression representing Et(h) (resp. El+l(h)), then E~+I ~ 
E~. (Same replacements, sequences, etc. used in El+l(h) -----+ El(h) work here.) LEMMA 12. (a = a) ---+* 
E if and only if E is satisfiable. PROOF. If E = (u,v) is satisfiable, let h be a minimal solution. 
Then Eih(~)l(h) >* Eo(h) by Proposition 2, and observe that Eih(,)l(h ) is isomorphic to (a = a) and 
Eo(h) is E. If E is not satisfiable,- then from Lemma 11 it follows that the equation (a = a), which 
is trivially satisfiable, cannot rewrite to E. [] THEOREM 2. Satisfiability of equations in free SGA 
is in PSPA CE. PROOF. Consider the space M of exponential expressions of size O(IEI 3) representing factor 
equations. Consider (a = a) and apply nondeterministically ---+. That the algorithm is correct follows 
from Lemma 12 and the fact that the chain (a = a) ~* E can be done in M, which follows from Lemma 10, 
Part 2, the remark above, and Lemma 1. [] 6. SATISFIABILITY OF EQUATIONS IN FREE GROUPS As we mentioned 
in the introduction, the first step to de- cide satisfiability of equations in free groups is the following 
reduction: THEOREM 3 (THEOREM 9, [4]). For each equation E in a free group G with generators C there 
is a finite set Q of equations in a free semigroup with anti-involution G t with generators C U {cl,c2}, 
cl,c2 ~ C, such that the following hold: 1. E is satisfiable in G if and only if one of the equations 
in Q is satisfiable in G'. 2. There is c > 0 constant such that for each E' E Q, it holds IE'[ <_ clEI 
a.  This theorem is proved in [4]. For the sake of completeness we will indicate the steps of the proof 
given in [4] using the Propositions in the Appendix. 1. From E generate a finite list of system of equations 
in SGA with properties as in Proposition 4. 2. From each of these systems, using Proposition 3 build 
a non-contractible equation in SGA. 3. From each non-contractible equation got in (2), gener- ate a 
list of systems of equations in SGA with proper- ties as of Proposition 5. 4. Again use Proposition 
3 to obtain from each system in  (3) and equivalent equation in SGA. Remark. The equations in the set 
Q can be generated non-deterministically in polynomial space. Finally the main result of this paper: 
 THEOREM 4. Satisfiability of equations in free groups is in PSPACE. PROOF. The algorithm works as follows: 
From an equa- tion E generate non-deterministically an SGA-equation E' in the set Q (as in Theorem 3). 
Then use Theorem 2. [] After Theorem 4, the current complexity of the problem of satisfiability of equations 
in free groups is between NP-hard (see [2]) and PSPACE (this paper). 6.1 Comparison with other work The 
only published upper bound on the complexity of equa- tions in free groups is [9], which is non primitive 
recursive. The problem of equations in free SGA was stated in [4], where the problem about its decidability 
is asked. It seems that nothing was known before about this problem. Diekert and Hagenah [1] have recently 
proved independently of us its decidability. The lower bound NP-hard is proved in [4]. Theorem 2 gives 
a tight upper bound. As for the method- ology in proving Theorem 2, Theorem 1 generalizes [8], and Lemmas 
4, 5, 6, 8, 10, 9, 11, 12 and Prop. 2 have their counterparts in [18]. Acknowledgements. The people of 
DIM, Universidad de Chile, especially Marcos Kiwi and Martin Matamala, heard a first version of this 
paper. Useful remarks where also provided by Dan Dougherty and Volker Diekert. Discus-sions with Alexander 
Razborov led to several improvements. Thanks to them all. 7. REFERENCES [1] V. Diekert, Personal communication, 
8 Oct. 1999. [2] V. Durnev, Studying Algorithmic Problems for Free Semi-groups and Groups, Proceedings 
of the 4th Interna- tional Symposium in Logical Foundations of Computer Science, Yaroslavl 1997. LNCS 
1234. [3] C. Guti~rrez, Satisfiability of Word Equations with Con- stants is in Exponential Space, in 
Proceedings FOCS'98, IEEE Computer Soc. Press, Palo Alto, California, 1998. 26 [4] C. Guti4rrez, Equations 
in free Semigroups with anti-involution and their relation to equations in free Groups, Proceedings of 
Latin American Theoretical INformat- ics, LATIN'2000, to appear in LNCS 1776. Also avail- able as Technical 
Report MA-99-B-474, Departamento de Ingenieda Matemgtica, Universidad de Chile; and in http ://www. wesleyan, 
edu/~ cgut ierrez/st ocO0. ps [5] Y.I. Kmelevskii, Equations in a free semigroup, Trudy Mat. Inst. Steklov 
107(1971); English trans. Proc. Steklov Inst. Math. 107(1971). [6] Y.I. Kmelevskii, Systems of equations 
in a free group I, Izv. Akad. Nauk. SSSR Ser. Mat. 35(1971), 1237-1268; English trans, in Math USSR Izv. 
5(1971). [7] Y.I. Kmelevskii, Systems of equations in a free group II, Izv. Akad. Nauk. SSSR Set. Mat. 
36(1972), 110-179; English trans, in Math USSR Izv. 6(1972). [8] A. Kogcielski, L. Pacholski, Complexity 
of Makanin's al- gorithm, J. Assoc. Comput. Mach. 43 (1996) 670-684. [9] A. Ko~cielski, L. Pacholski, 
Makanin's algorithm is not primitive recursive, Theoretical Computer Science 191 (1998) 145-156. [10] 
A.A. Lorents, Representation of solution sets of sys- tems of equations with one unknown in free groups, 
Dokl. Akad. Nauk SSSR 178(1968), 290-292; English trans, in Soviet Math. Dokl. 9 (1968). [11] Lothaire, 
M. Combinatorics on Words, Cambridge Mathematical Texts, reprinted 1998. [12] I~.C. Lyndon, Equations 
in free group% Trans. Amer. Math. Soc. 96(1960), 445-457. [13] G.S. Makanin, The problem of solvability 
of equations in a free semigroup, Mat. Sbornik 103, 147-236 (in Rus- sian). English translation in Math. 
USSR Sbornik 32, 129-198. [14] G.S. Makanin. Equations in a free group, Izvestiya NA SSSR 46(t982), 1199-1273; 
English translation in Math USSR Izvestiya, 21 (1983), 483-546. [15] G.S. Makanin. Decidability of the 
universal and positive theories of a free group, Izvestiya NA SSSR 48(1984), 735-749; English translation 
in Math USSR Izvestiya, 25 (1985), 75-88. [16] W. Rytter and W. Plandowski, Applications of Lempel- Ziv 
encodings to the solution of word equations, In Pro- ceedings of the 25th. ICALP, 1998. [17] Plandowski, 
W., Satisfiability of word equations with constants is in NEXPTIME, in Proc. STOC'99. [18] Plandowski, 
W., Satisfiability of word equations with constants is in PSPACE, in Proc. FOCS'99. [19] A.A. Razborov, 
On systems of equations in a free group, Izvestiya AN SSSR 48 (1984) 779-832 (in Russian). En- glish 
translation in Math. USSR Izvestiya 25 (1985) 115- 162. Appendix The first proposition is an old observation 
of Kmelevskii [5] for free semigroups which extends easily to free SGA: PROPOSITION 3 (PROPOSITION4, 
[4]). For each system of equations E in free SGA with generators C, there is an equation E in free SGA 
with generators CUc, c ~ (CUC-1), such that 1. S is a solution of E if and only if S is a solution of 
E. Z. [El _< 4[El. Moreover, if the equations in E are non-contractible, the E is non-contractible. 
PROPOSITION 4 (LEMMA 1.1 IN [14]). For any non con- tractible equation E in the free group G with generators 
C we can construct a finite list of systems of non-contractible equations in the free SGA G' with generators 
C El, ., Ek such that the following conditions are satisfied: 1. E has a non-contractible solution in 
G if and only ilk > 0 and some system Ej has a non-contractible solution in G'. 2. There is a constant 
c > 0 such that [Ei[ _< c[E[ 3 for each i = 1,.. . ,k. 3. k < 2 clef3 for some constant c > O.  PROPOSITION 
5 (PROPOSITION 3~ [4]). For each non con- tractible equation E there is a finite list of systems of equa- 
tions El,.. , Ek such that the following conditions hold: 1. E has a non-contractible solution if and 
only if some of the Ei has a solution. 2. k _< 2 clEI2, for c > 0 a constant. 3. There is a constant 
c > 0 such that for each i, [El[ _< gEl.     
			