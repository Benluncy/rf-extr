
 MDA-Based Tool Chain for Web Services Development Pekka Aho Matti Mäki VTT Technical Research VTT Technical 
Research Centre of Finland, Centre of Finland,  Kaitoväylä 1, 90570 Oulu, Kaitoväylä 1, 90570 Oulu, 
Finland Finland pekka.aho@vtt.fi matti.maki@vtt.fi ABSTRACT One of the challenges in Model Driven Architecture 
(MDA) is the variety of tools which are not interoperable with each other. Also, a design flow s upporting 
different phases of MDA-based development is o ften missing. This paper presents a tool chain and design 
flow for MDA-based Web Services development. The presented t ool chain covers mode lling with doma in-specific 
Unified Modelling Language ( UML) profiles, transformation of the UML models i nto Web Services Definition 
Language (WSDL) files, and Java code generation. The tool chain i s validated in a case study where it 
is used in the development of a web service c alled Res ource A vailability Service ( RAS). In th e validation, 
th e tool chain w orked well, since t he proportion of generated code in RAS is over 95%. The residual 
5% of the code includes manual integration and business logic. User experiences indicate that using t 
he tool chain improves the d eveloper productivity in Web Services development. Categories and Subject 
Descriptors D.2.2 [Software Engineering]: Design Tools and Techniques Computer-aided software engineering 
(CASE), Object-oriented design methods. H.3.5 [ Information Storage and Retrieval]: On-line Information 
Services Web-based services. H.2.1 [Database Management]: Logical Design Data models, Schema and subschema. 
  General Terms Design, Experimentation.  Keywords Model-Driven Development, UML, WSDL. 1. INTRODUCTION 
Software s ystems a re beco ming increasingly complex as customers demand richer functionality delivered 
in e ver s horter timescales [1]. Despite the significant advances in programming Permission to make 
digital or hard copies of all or part of this work for personal or classroom use is granted without fee 
provided that copies are not made or distributed for profit or commercial advantage and that copies bear 
this notice and the full citation on the first page. To copy otherwise, or republish, to post on servers 
or to redistribute to lists, requires prior specific permission and/or a fee. WEWST 2009, November 9, 
2009 Eindhoven, Netherlands. Copyright 2009 ACM 978-1-60558-776-9/09/11 $10.00.  Daniel Pakkala Eila 
Ovaska VTT Technical Research VTT Technical Research Centre of Finland, Centre of Finland, Kaitoväylä 
1, 90570 Oulu, Kaitoväylä 1, 90570 Oulu, Finland Finland daniel.pakkala@vtt.fi eila.ovaska@vtt.fi languages 
and supporting in tegrated d evelopment environments (IDEs), developing complex software systems using 
current code­centric technologies is difficult and costly [2]. A ccording to the Standish Group, 84% 
of software projects fail to deliver what has been promised on time and according to budget [3]. One 
promising ap proach to i ncrease p roductivity in sof tware development and manage the complexity of 
software is to shift from programming in solution-space to modelling in problem­space by utilizing t 
he means of M odel-Driven Development (MDD) [2]. Experiences indicate that effective complexity management 
me chanisms au tomate mun dane de velopment t asks and provide strong support for separation of concerns 
[4]. In the MDD v ision of softw are development, models are t he p rimary artefacts of development and 
developers rely on computer-based technologies to transform models to running systems [2]. MDA i s most 
often applied in t he co ntext of component and object oriented software systems. However, it has potential 
also in the development of s ervice-oriented s ystems. The contributions of this paper ar e a n M DA-based 
t ool cha in an d supporting de sign fl ow for using M DD in W eb Services development. The tool chain 
was validated by developing a web service called R esource Availability Service (R AS) b efore enlarging 
t he usage of th e approach t o al l Web Services development of the project. Also detailed guidelines 
for using the modelling a nd code generation tools were created during the RAS development. This paper 
is structured as follows. First, MDD, MDA, UML and Web Services are introduced as background information. 
Second, a tool chain f or mode l-driven We b Se rvices de velopment is presented. Third, validation of 
the tool chain in the development of RAS is presented, followed by discussion and conclusion.  2. BACKGROUND 
 2.1 Model-Driven Development Throughout the history of software development, moving further off from 
programming in solution-space has been the cause of the largest leaps in developer productivity. The 
latest example was the move from Assembler to Third Generation Languages (3GLs) [5]. MDD is aiming to 
be the next s tep against the growing complexity of the software systems, as illustrated in the Figure 
1.  Figure 1. Moving further off from programming in solution­space. MDD can be viewed a s an evol ution 
of e arly computer-aided software eng ineering (CASE) [ 2]. A lthough CASE achieved considerable attention 
in research and literature, it had relatively little impact on commercial s oftware development during 
the 1980s and 1990s. One of the problems with CASE was that the diagrams w ere r arely in sy nc with 
the c ode during the later project stages [6]. Experiences indicate t hat effective c omplexity management 
mechanisms automate ordinary de velopment t asks a nd p rovide strong support for separation of concerns 
[4]. In the MDD vision of software d evelopment, m odels are t he primary artefacts of development, a 
nd developers r ely on c omputer-based technologies to t ransform models to running systems [2] . Th 
e models should always be up-to-date with the implementation as the changes are m ade i nto th e mo dels 
an d generated automatically from models to the so urce c ode [ 7]. T herefore, models become a ssets 
instead of ex penses which t hey are n ow [8]. To utilize MD D effectively, th e mo dels need to be abstract 
enough to be ea sy to understand, but accurate e nough t o be unambiguous and make code generation possible. 
It must also be substantially cheaper and faster to model t he system than to implement it without modelling 
[9]. Some MDD tools claim to generate a complete application from models while others focus on removing 
the most redundant coding tasks [10]. In both cases, the g oal is to increase productivity in software 
development, reduce human made errors and re duce t he a mount o f work needed for implementing changes 
into the system [11].  2.2 Model-Driven Architecture MDA is the best known of the MDD frameworks. MDA 
is an initiative by Object Management Group (OMG) offer ing a conceptual framework to support MDD. The 
three primary goals of MDA are portability, interoperability and reusability through architectural separation 
of concerns [12]. One of the advantages of MDA is the use of open standards, which makes at least in 
theory the adoption of MD A ea sier for tool ven dors an d m akes the interoperability of MDA tools possible. 
To improve po rtability, M DA specifies thr ee viewpoints on a system: a compu tation-independent viewpoint, 
a pl atform­independent viewpoint and a p latform-specific viewpoint. Respectively, t here are t hree 
ty pes o f models i n M DA: computation-independent model (CIM), platform-independent model ( PIM) and 
platform-specific model (PSM). M odel transformations, especially from PIM to PSM, form a key part of 
MDA. Th e m odels are transformed automatically, p ossibly several t imes, and th en a substantial amount 
of source co de is automatically generated from the final model. Requirements of a system specified in 
CIM should be traceable to the PIM and PSM constructs that implement them, and vice versa. [12] Sometimes 
the model transformation is not complete and model elaboration is needed [8]. In MDA, there can be a 
lot of code and models that the developers did not write b ut are ex pected t o maintain [5]. Protected 
mo del areas ma y be us ed for gen erated parts of the model to prevent models getting out of synch, 
but it is even more challenging when the changes are made to the code and mode ls should b e up dated. 
Th e pr oblem i s how t o allow round-trip engineering without lowering th e l evel of abstraction in 
modelling. OMG recommends u sing UML as the mode lling language f or MDA framework, but it is also possible 
to use some other Meta-Object Facility (MOF) compliant language, which means that at least the metamodelling 
language is based on UML [8]. 2.3 Unified Modelling Language Unified Modelling L anguage ( UML) is an 
open s tandard for a general-purpose m odelling la nguage (GPML) that pr ovides means f or c ommunication 
and un derstanding between the members of the development team [13]. Due to the industry-wide adoption, 
UML i s currently the d e facto st andard f or mode lling languages. The i dea o f GPM L is t o have 
a broad s cope t hat covers a large and diverse s et of ap plication domai ns [14 ]. The language should 
be modular, flexible and extensible, for example providing mea ns to de fine domain-specific ex tensions 
for the language [15]. Profiles are the primary extension mechanism fo r defining domain-specific UML 
variants [2]. A profile describes how UML metamodel is extended to support usage in a particular domain 
or technology platform [8], or c onnecting other pr operties i nto t he models [16]. The model elements 
are extended using stereotypes and t agged v alues t hat define ad ditional pro perties t o be associated 
with the el ements [15]. OMG h as s pecified U ML profiles f or s everal c ommon d omains, f or ex ample 
data distribution, enterprise application integration, software r adio, and real-time embedded systems. 
In t his pa per, two UML profiles were used for modelling platform-specific models of t he system being 
developed.  2.4 Web Services Web Services is a family of standards that provide a layer of abstraction 
above existing software systems. A web service is an Extensible Markup L anguage (XML) application mapped 
t o programs, objects, databases, or comprehensive business functions, as illustrated in Figure 2. The 
application sends and receives XML documents in the form of messages. Web Services standards define the 
format of these messages. [17]  Figure 2. Basic architecture of Web Services. XML p rovides the de scription, 
storage a nd transmission fo rmat for data e xchanged v ia We b Se rvices. Sending requests wi thin XML 
d ocuments has many advantages, such as i mproved d ata typing and structure, greater flexibility, and 
extensibility. XML schemas can be used to v alidate t he d ata se parately and t o describe other attributes 
and qualities of the data. If two parties share the same schema, th ey can be sure to understand the 
meaning the same element tags in the same way. This is utilized also in Web Services. [17] WSDL is an 
XML-based f ormat for describing an d publ ishing Web S ervices i nterfaces. W SDL provides a common 
way to represent the data types passed in messages, the operations to be performed on the messages and 
t he mapping of the messages onto network transports. WSDL consists of three major elements: Data type 
definitions, Abstract operations and Se rvice b indings. All elements can be defined t ogether i n a 
single WSDL or e ach element can be specified i n a separate XML document an d imported in v arious co 
mbinations t o create t he We b Se rvices description. [17]  2.5 MDA-Based Web Services Development 
MDA-based Web Services development has been r esearched i n several other publications, s uch a s [ 28, 
29]. Compared t o the related work, a more p ractical ap proach with supporting tool chain and de sign 
f low for MD A-based W eb S ervices development is presented in Chapter 3.  3. A TOOL CHAIN FOR MDA-BASED 
WEB SERVICES DEVELOPMENT One of the challenges in MDD is the variety of tools which in practice are not 
i nteroperable, altho ugh O MG is pu tting considerable am ount o f e ffort on tool interoperability 
with its open s tandards. Plenty of U ML-based M DA tools, i ncluding ready-to-use code generators, were 
found whe n s earching for tools for model-driven development of Web Services. However, a single to ol 
f ulfilling all the r equirements w as not found, so a chain of interoperable tools had to be found. 
The aim was to use UML for Web Services modelling, transform the UML models into WSDL files and generate 
Java code from the WSDL. Open source or otherwise free of charge tools were used in the tool chain when 
applicable. Since the requirements of the validation c ase R AS were al ready known, also data modelling, 
database schema generation and Java code generation for accessing the database were included into requirements 
of the tool chain. T he aim was to find suitable tools that satisfy the following requirements: 1. Possibility 
to model Web Services or WSDL, 2. Possibility to generate WSDL and XSD files from the model, 3. Possibility 
to generate web service Java code from the WSDL, 4. Possibility to model database schema, 5. Possibility 
to generate relational database schema from the model, and 6. Possibility to generate Java code for 
a ccessing the relational database.  Based on t he related r esearch [18], finding t ools for gen erating 
Web Services from WSDL was expected to be easier than finding UML mode lling tools able to g enerate 
W SDL. However, ma ny commercial tools w ere f ound claiming to support modelling of Web Se rvices using 
UML (req. 1), an d generating WSDL and XSD from UML models (req. 2), such as [19, 20, 21]. Unfortunately, 
none of the evaluated open source tools supported WSDL generation, and therefore a commercial tool had 
to be chosen. Since the tool chain presented in this paper was planned to be used also fo r the development 
of o ther W eb S ervices, s everal licences for required commercial tools needed to be acquired for the 
p roject pe rsonnel. F or this reason th e p rice of the tools was also included in the selection criteria. 
Sparx Systems Enterprise Architect 7.1 (EA) [19] was selected to be us ed f or U ML modelling, sin ce 
i t was the best s uitable, inexpensive tool s upporting WSDL generation ( req. 1-2) and it also supports 
data modelling (req. 4-5). EA offers two specific UML profiles w ith s pecific t oolboxes in it s u ser 
in terface f or data m odelling and WSDL modelling. U nfortunately, EA was able to generate only rough 
skeleton code and data classes from the models, so using separate code generation tools was needed. There 
are only a few tools able to generate web service Java code from WSDL and XSD files (req. 3) such as 
Apache Axis2 [22]. Axis2 is also an open source tool and therefore it was selected to be u sed f or web 
s ervice code gene ration. In ad dition, Axis2 i s well supported with many tutorials and e xamples avai 
lable online at the Axis2 project web pages. Axis2-plug-in for Eclipse is included in the Eclipse Web 
Tools Platform (WTP) [23], so it is also used in the development. Since databases are needed in a wide 
variety of software systems, there ar e many commercial and open source t ools available for data modelling 
(req. 4 ). T here a re a lso ready-made c ode generators that produce J ava co de for accessing databases 
available (req. 6), especially for M ySQL which w as s elected t o be us ed a s the d atabase. Since 
EA was a lready selected for WSDL modelling, it was used also for data modelling and generating S QL 
scripts for creating My SQL schema (req. 4-5 ). FireStorm/DAO Enterprise Edition [24] is available as 
a free product that is fully functional for a small database schema, such as it is with R AS. Th erefore 
F ireStorm/DAO was selected for generating J ava code for accessing the da tabase (r eq. 6 ). The selected 
tool utilizes a live JDBC connection to the database, The design flow for using the tool chain can be 
divided into two offers a graphical user interface to view and edit the schema, and separate branches: 
Web service and d atabase schema generates fully functional Java code for accessing the database. development, 
as illustrated in Figure 3.  Figure 3. The design flow for using the MDA-based tool chain for Web Services 
development. The Web service branch includes three phases: 1. Modelling Web service with UML, 2. Generating 
WSDL and XSD files from UML models, and 3. Generating Java code from WSDL and XSD files.  The database 
branch includes four phases: 1. Modelling database schema with UML, 2. Generating SQL scripts from the 
UML model, 3. Using the SQL script to create the MySQL database schema, and 4. Generating Java code 
for accessing the database.   4. VALIDATING THE TOOL CHAIN IN THE DEVELOPMENT OF RAS The tool cha in 
f or mode l-driven d evelopment of Web Se rvices, presented in the previous section, was validated by 
developing a web service called Resource Availability Service (RAS). RAS is a we b service for off ering 
availability information a bout resources s uch as se rvices, c ontent, us ers and terminals. The information 
can be used for enabling context awareness in other services and ap plications, for e xample c ommunication 
applications and load balancing functionality. When s tarting to use t he M DA-based t ool c hain in 
development of RAS, functional requirements and high level architecture were already known. Based on 
the high-level architecture, illustrated in Figure 4, the service could be divided into two major parts: 
the web service an d t he da tabase system. Both ar e com mon technology domains, and Java code generators 
could be expected to be available. Thus, MDA with UML as a modelling language was well suited for the 
development framework of RAS. Also the design f low for usi ng the tool chain was divided into two separate 
branches, as illustrated in Figure 3. Figure 4. The high-level architecture of Resource Availability 
Service. 4.1 Web Service Development Enterprise Architect 7.1 provides a specific U ML pr ofile and 
toolbar in i ts user interface for modelling W SDL. When a new WSDL namespace i s created, EA generates 
a new t emplate for WSDL model. The namespace is modelled as UML package with stereotype <<WSDLnamespace>>. 
The t emplate pr ovides instructions and class diagrams for XM L Schema da ta t ypes, Messages, Port 
Types, Bindings an d Se rvices, as i llustrated i n Figure 5.  «XSDschema» Types Messages PortTypes 
Bindings Serv ices + SampleInput + SampleOutput + SamplePortTypeHTTP + SamplePortTypeSOAP + SampleBindingHTTP 
+ SampleBindingSOAP + SampleService + InputParameters + OutputParameters Presuming t hat the fu nctional 
requirements a nd hi gh level architecture are k nown, a l ogical starting point f or w eb s ervice modelling 
is to model the m essages at f irst. Th e messages diagram illustrates what kind of functionality the 
modelled web service offers and what kind of response messages it may send. In E A, UM L class with <<WSDLmessage>> 
s tereotype is created for every request and response message, as s hown in Figure 6. When using EA for 
mode lling, e ach me ssage s hould have only one message parameter and the parameters used in the messages 
diagram should be modelled in more detail in the XML schema. Figure 7. XML schema modelled with Enterprise 
Architect. The next step was to define the WSDL port types. EA uses UML interface with <<WSDLportType>> 
stereotype to mode l each port type and port type operations are added into its parameters. The WSDL 
mes sages d efined ea rlier a re us ed a s i nputs an d outputs of the port type operations. HTTP and 
SOAP ports are already included in the template. The final model of the WSDL port types of RAS is shown 
as Figure 8. Figure 8. WSDL port types modelled with Enterprise Architect. The template WSDL model 
created by EA was really helpful since tw o remaining class di agrams, bindings and services did not 
need much editing. EA uses UML c lass wi th the <<WSDLbinding>> stereotype to model bi ndings a nd a 
nother UML class wi th the <<WSDLservice>> st ereotype t o model services. The bindings are connected 
to the port types d efined earlier and to th e service being m odelled. The port type operations defined 
earlier can be selected to be included in the bindings. Finally, all the diagrams needed for WSDL modelling 
wi th E A are covered, and EA is able to generate the WSDL and XSD files from t he model. Therefore t 
he second p hase o f th e we b s ervice development branch i s a very easy one. Depending on t he configurations 
of development and deployment environments, the path of t he XSD fi le may have t o be cha nged m anually 
into the generated WSDL. However, it is easy to edit manually with the graphical WSDL ed itor included 
in the E clipse Web Tools Platform. In t he t hird phase o f web service d evelopment, A pache A xis2 
WSDL2Java tool is u sed to generate W eb s ervice Jav a c ode. Eclipse WTP offers a pl ug-in with graphical 
wizards to help in using the A xis2 c ode g enerators. A xis2 W SDL2Java supports code generation for 
b oth SO AP s erver a nd S OAP cli ent. From the WSDL an d XSD fil es of R AS, Axis2 g enerated 7 3 Ja 
va classes having altogether 2337 blank lines, 3194 comment lines and 7636 code lines. Only one of the 
generated J ava cla sses i n RAS had to be edited manually.  4.2 Database Schema Development Enterprise 
A rchitect 7.1 (E A) offers another specific UML profile and toolbox in its user interface for data modelling. 
UML classes with stereotype <<table>> are used to model t he t ables of the database and the columns 
of the tables are inserted as class attributes wi th st ereotype <<column>>. Primary and fo reign keys 
and unique data also have s pecific stereotype val ues, as shown in Figure 9. To enable accurate generation 
of SQL scripts, MySQL was selected to be the target database, and MySQL data types and default values 
were used for the columns of the model. Also, enumerations for t he re source ty pe and us er p reference 
profile based on [25] were defined to the data model.  Figure 9. Data model of Resource Availability 
Service. The second and third phases of database schema development are very easy and straightforward. 
In the second phase, EA is used to generate S QL script for c reating the MySQL database schema. EA supports 
also ot her relational databases. In the third ph ase, MySQL Administrator to ol is u sed to run the 
generated SQL script and database schema is created. The script could be executed also with a command 
line tool. In the fourth phase, FireStorm/DAO i s used t o generate J ava code for access the database. 
FireStorm supports many kinds of relational d atabases, including MySQL, and is able to use live connection 
to database. In addition to Java code generation, FireStorm off ers graphical user i nterface t o edit 
the da tabase schema, sim ilar to MySQL Administrator. From the database schema o f RAS, Fir eStorm g 
enerated 15 Java c lasses ha ving altogether 429 blank lines, 1027 comment lines and 1472 code lines. 
The generated code can be used as it was a third party Java library. None o f th e g enerated J ava c 
lasses has to be edited manually.  4.3 Integration Work After using the MDA-based tool chain, the remaining 
integration work is to co nnect the incoming S OAP m essages of th e we b service into c orrect database 
functions a nd se nd val id r esponse messages, based on proper business logic. The remaining tasks can 
be summarized as follows: 1. To integrate the two generated subsystems: web service and database system, 
 2. To implement the test applications based on t he generated SOAP client, and 3. To implement the 
missing parts of the business logic of the application.  The o ne Ja va c lass wh ich ne eded to be 
edited manually after code generation was a service skeleton for handling the received SOAP messages. 
Most of the manual integration and business logic code of RAS was implemented into a single Ja va cl 
ass which used the generated Java code for accessing the database, and w as called by the generated web 
service code. The test applications for RAS were implemented manually utilizing the SOAP client code 
generated with Axis2. The Resource Availability Service implementation had altogether 16778 l ines of 
co de including bl ank and co mment l ines. Les s than 800 lines were manually edited or implemented, 
so over 95 percent of t he code was generated. An open source too l, C ount Lines of Code (CLOC), was 
used to measure the source code and produce the calculations shown in Table 1. Table 1. Java classes 
and lines of code in Resource Availability Service Java class files Blank lines Comm ent lines Code 
lines Lines altoge ther Code generated by FireStorm 15 429 1027 1 4 72 2928 Code generated by Apache 
Axis2 73 2337 3194 7538 13069 Generated c ode that had t o be edited manually 1 0 0 98 98 Manually implemented 
code 8 90 56 537 6 8 3 Altogether 9645 16778  5. DISCUSSION According t o t he M DA concepts, P latform 
Independent M odels (PIM) are designed first, and t hen Pl atform Spe cific Models (PSM) are automatically 
created by model t ransformations. Unfortunately, none of t he evaluated tools s upported mo del transformation 
from PIM to the Web Services specific model. In our case, both data models and Web service models are 
already platform-specific models, since the target platform, data model or Web service, have to be chosen 
when starting to use the domain specific UML profile f or the modelling. T hus, the automatic model transformation 
from PIM to PSM is missing from the tool chain. Basically the da tabase s chema m odel contains th e 
same information as the XML schema model. It would speed up the design to have more support for automatic 
model transformations so t hat the same i nformation would not have to be m odelled again from a different 
point of view. The optimal way would be to: 1. Design a PIM of the web service interface, 2. Automatically 
transform the interface m odel i nto WSDL model, 3. Model XML schema into WSDL model, 4. Automatically 
transform XML schema into database schema model, and 5. Then generate the description files and source 
code.  One promising o pen s ource tool was UM L Model Transformation Tool (UMT) p resented in [26]. 
Unfortunately, the XMI format used in UMT was not compatible with the evaluated UML modelling tools. 
During t he i ntegration wor k, some cha nges w ere n eeded t o both data model and WSDL mode l. Making 
t he cha nges i nto the models and generating the changes into the code was easy, but the o ne m anually 
edited c lass in the web service code was overwritten and the manual changes had to be done again. Quick 
fix for the pr oblem wa s ch anging the na me of t he ma nually modified Java class, but still some copy-paste 
was needed after code generation. Nonetheless, us er ex periences g ained w hen u sing the selected 
tools in the development of other Web Services indicate that the tool chain improves the de veloper productivity 
in We b Se rvices development.  6. CONCLUSION In this paper we presented an MDA-based tool chain and 
design flow suitable for Web Services development. The goal was to find a chain of i nteroperable t ools 
to support us ing UML for modelling We b S ervices and database sche ma, g enerating WSDL, XSD and SQ 
L script f iles f rom the U ML models, a nd using WSDL and database schema to generate Java code for 
Web Services and accessing th e database. Open s ource tools wer e used in the tool chain when applicable. 
Based on evaluation of MDA tools, S parx S ystems Enterprise Architect w as selected for UML modelling 
tool. E A supports both W SDL and database schema modelling, a nd is able to generate WSDL, XSD and SQL 
script files from UML models. It is also affor dable enough t o be p urchased fo r a ll de velopers of 
the pro ject. Apache Axis2 was se lected for W eb Services generation, since it is an ope n s ource t 
ool a ble t o generate We b service Java code from WSDL. FireStorm/DAO was used t o generate Java code 
for using MySQL database, since it was easy to use and the Enterprise Edition was available as a free 
product. The t ool chain w as v alidated in th e d evelopment RAS Web service. WSDL, XSD and SQL script 
files were generated from the U ML models a nd th e code generators of the tool c hain worked well in 
the validation. The pr oportion of the gen erated code in RAS was over 95%. Although only one of the 
gen erated Java classes had to be modified, it was still a bit problematic, since the manual changes 
were overwritten when the code was re-generated. An op en q uestion f or f uture res earch i s ho w to 
cover smooth linkage of generated and manually written code in the design flow. One of th e cha llenges 
faced du ring our project, not covered i n this pape r, w as ho w to coordinate the design flow when 
more than one person are designing d ifferent services of the s ame system o n pa rtially overlapping 
areas. P robably more detailed guidelines for using the tool chain would ensure that the tools are utilized 
in a uniform manner. In future, we will continue the research by defining a Domain-Specific Modelling 
Language (DSML) for modelling WSDL and developing a WSDL g enerator f or t he DSML. The co de generators 
used in the tool chain can be also used without UML. Using a DSML for the tool cha in in stead of UM 
L will combine modelling aspects from Domain-Specific Modelling (DSM) into ready-to-use code generators 
typical for MDA-based solutions. 7. ACKNOWLEDGMENTS The w ork pr esented in this pa per h as been done 
within the Eureka ITEA C AM4Home pr oject, funded pa rtially by VTT Technical Research Centre of Fi nland 
and TEKES F innish Funding Agency for Technology and Innovation.  8. REFERENCES [1] Clark T., Sammut 
P., and Willans J. 2008. Applied Metamodelling: A Foundation for Language Driven Development. Second 
Edition. Ceteva http://www.ceteva.com/home/Papers/Applied%20Metamode lling%20(Second%20Edition).pdf [2] 
France R. and Rumpe B. 2007. Model-driven Development of Complex Software: A Research Roadmap. In Future 
of Software Engineering FOSE 07, 37-54. [3] Greenfield J. and Short K. 2004. Software Factories: Assembling 
Applications with Patterns, Models, Frameworks and Tools. Wiley Publishing, Inc., Indianapolis, USA. 
[4] France R., Ghosh S., and Dinh-Trong T. 2006. Model-Driven Development Using UML 2.0: Promises and 
Pitfalls. In Computer, vol. 39, no. 2 (Feb. 2006), 59-66. [5] Kelly S. and Tolvanen J.-P. 2008. Domain-Specific 
Modeling: Enabling Full Code Generation. Wiley-IEEE Computer Society. [6] Schmidt D. 2006. Guest Editor's 
Introduction: Model-Driven Engineering. In Computer, vol. 39, no. 2 (Feb. 2006), 25-31. [7] Riehle D., 
Fraleigh S., Bucka-Lassen D., and Omorogbe N. 2001. The Architecture of a UML Virtual Machine. In Proceedings 
of the 16th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications 
OOPSLA 01, 327-341. [8] Mellor S. J., Scott K., Uhl A., and Weise D. 2004. MDA Distilled: Principles 
of Model-Driven Architecture. Addison-Wesley, An imprint of Pearson Education. [9] Selic B. 2003. The 
Pragmatics of Model-Driven Development. In IEEE Software, Vol. 20, Issue 5, 19-25. [10] Kontio M. 2005. 
Architectural manifesto: MDA in action. http://www.ibm.com/developerworks/library/wi-arch19/ (accessed 
11.8.2009) [11] Sivonen S. 2008. Domain-specific modelling language and code generator for developing 
repository-based Eclipse plug­ins. VTT publications. http://www.vtt.fi/inf/pdf/publications/2008/P680.pdf 
[12] OMG 2006. MDA Guide Version 1.0.1. http://www.omg.org/docs/omg/03-06-01.pdf [13] Lister P., Trignano 
V., Bassett M., and Watten P. 2004. UML-Executable Functional Models of electronic systems in the VIPERS 
Virtual Prototyping Methodology. In Proceedings of Forum on Specification and Design Languages FDL'04, 
Lille-France. [14] Rumbaugh J., Jacobson I., and Booch G. 1999. The Unified Modeling Language Reference 
Manual. Addison-Wesley. [15] OMG 2007. Unified Modeling Language (OMG UML), Superstructure, V2.1.2. http://www.omg.org/spec/UML/2.1.2/Superstructure/PDF 
 [16] Evesti A. 2007. Quality-oriented software architecture development. VTT publications. http://www.vtt.fi/inf/pdf/publications/2007/P636.pdf 
[17] Newcomer E. 2002. Understanding Web Services: XML, WSDL, SOAP, and UDDI. Addison-Wesley, Boston. 
[18] Vara J. M., De Castro V., and Marcos E. 2005. WSDL automatic generation from UML models in a MDA 
framework. In Proceedings of the International Conference on Next Generation Web Services Practices. 
IEEE Computer Society, Washington, DC, USA. [19] Sparx Systems Enterprise Architect. http://www.sparxsystems.com.au/products/ea/ 
(accessed 11.8.2009) [20] IBM Rational Software Architect for WebSphere Software, http://www.ibm.com/developerworks/rational/products/rsa/ 
(accessed 11.8.2009) [21] MagicDraw, http://www.magicdraw.com (accessed 11.8.2009) [22] Apache Axis2 
project, http://ws.apache.org/axis2/ (accessed 11.8.2009) [23] Eclipse Web Tools Platform (WTP) project, 
http://www.eclipse.org/webtools/ (accessed 11.8.2009) [24] CodeFutures Firestorm/DAO, http://www.codefutures.com/products/firestorm/ 
(accessed 11.8.2009) [25] Pakkala D. 2004. Lightweight distributed service platform for adaptive mobile 
services. VTT publications. http://www.vtt.fi/inf/pdf/publications/2004/P519.pdf [26] Grønmo R. and Oldevik 
J. 2005. An Empirical Study of the UML. Model Transformation Tool (UMT). In Proceedings of First Interoperability 
of Enterprise Software and Applications (Geneva, Switzerland). http://heim.ifi.uio.no/~roygr/INTEROP-ESA-2005.pdf 
[27] Grønmo R. and Oldevik J. 2005. An Empirical Study of the UML. Model Transformation Tool (UMT). In 
Proceedings of First Interoperability of Enterprise Software and Applications (Geneva, Switzerland). 
http://heim.ifi.uio.no/~roygr/INTEROP-ESA-2005.pdf [28] Bézivin J., Hammoudi S., Lopes D., and Jouault 
F. 2004. Applying MDA Approach for Web Service Platform. In Proceedings of Eighth IEEE International 
Enterprise Distributed Object Computing Conference EDOC 2004, 58­ 70. IEEE Computer Society Washington, 
DC, USA. [29] Grønmo R., Skogan D., Solheim I., and Oldevik J. 2004. Model-Driven Web Services Development. 
In Proceedings of the IEEE International Conference on e-Technology, e-Commerce and e-Service (EEE'04), 
42-45. IEEE Computer Society Washington, DC, USA.  
			