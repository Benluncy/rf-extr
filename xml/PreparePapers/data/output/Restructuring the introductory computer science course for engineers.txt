
 Restructuring the Introductory Computer Science Course for Engineers Joseph M. Lambert Department of 
Computer Science and Engineering The Pennsylvania State University University Park, Pa. 16802 November 
7, 1994 A/Mract: In Engineering curricula, the in­ troductory course in computer science is an es­sential 
component of the lower division prepa­ration of all engineers. Unfortunately, there is absolutely no 
consensus what should be in­cluded in an introductory computer science course for engineers. Moreover, 
limited energy has been given by the departments who deliver this introductory course to the currency 
and vitality of the course. The focus of this paper is to promote a dis­ cussion regarding the design 
and implementa­ tion of a three credit course that meets the the overriding concerns voiced by Engineer­ 
ing faculties and by students who enroll in the courses. We present a prototype of a course that addresses 
the concerns of language prefer­ ence expressed by Engineering faculty as well as their concern regarding 
the selection of the ever changing software packages to be pre­ sented to the students. Permission to 
co y without fee all or part of this materiai is ranted provided t I at the wpies are not made or distributed 
for ~irectcommercial acfvantage,theACM @pyright~~cea~the title of the pubkation and its date appear, 
and notice is given that copying is by permission of the Association of Computing Machinery. To copy 
otherwise, or to repubiish, requires a fee andor ecific permission. SiGCS? 953/95 Nashviile, TN USA @ 
1995 ACM O-89791-693-ti9WOW ....50.5o Our design presents a course that will chal­lenge all students 
regardless of their back­ground in computing. This course would set in place a continuing mechanism to 
insure rel­evancy of the course to the students. 1 Introduction In Engineering curricula, an introductory 
course in computer science is an essential com­ponent of the preparation of ail engineers. The course 
must teach future engineers algorithmic design methods as an important example of engineering design. 
It must lay the foundation for effective computational proficiency in the subsequent course work of the 
engineer. The course must be built upon in ensuing engineer­ing courses so that the student sees the 
power of a modern computational engineering envi­ronment. This course must provide the solid base for 
continuing education of an engineer once she enters the professional discipline. The Accreditation Board 
for Engineering and Technology recommends effective incor­poration of computer activity throughout the 
entire curriculum. Many Colleges of Engi­neering use a three credit course taught by a Department of 
Computer Science to pro­vide the base. As stated in [3], the typical programming course is a course involving 
the FORTRAN language with applications com­ing from the field of numerical analysis. The author states 
that texts do an excellent job of teaching structured programming and that the results are generally 
positive. However, the sequence of assignments given in the in­troductory course appear to lack substance 
to the students. In recent years, Engineering Colleges have offered personal computer based courses 
to freshman engineers generically titled Intro­duction to Engineering . These courses ex­pose students 
to microcomputers, word pro­cessing, spreadsheets, simple CAD packages, and present elementary programming 
concepts as well as giving the students an overview of the engineering disciplines. At the same time, 
[5] reports the results of surveys that incoming freshman engineer­ing students have increasing significant 
expo­sure to computing before college matricula­tion. In 1983, 70% of incoming students re­ported significant 
exposure with the percent­age increasing to 8370 in 1987. Computer Sci­ence departments have noticed 
a trend voiced in [1], that students who enter with supposedly strong backgrounds in computing, are not 
as skilled as the students perceive themselves to be. Against this background, [6] reports that the 
number of credits of computer science taken by engineers continues to increaae. In 1984, 35.2% of engineering 
programs explic­itly required three credits of computer science. In 1987 the percentage increased to 
42.8%. In 1984, 12% of the engineering programs re­quired six credits of computer science. In 1987, the 
percentage grew to 21%. FORTRAN re­mains the favorite language, but in 1987, only 57% of those programs 
that required three credits of computer science used FORTRAN. This was a decresse from the usage of FOR-TRAN 
by 81% of these programs. Other lan­guages have shown some popularity, with Pas­cal and C being the leaders. 
C has become popular as the language of choice for a second programming language in those programs that 
require six credits of computer science. A mla­jor curriculum problem occurs when College requirements 
allow at most three credits of computer science courses and the departments within the College can not 
agree on the vehi­ cle language for the course. Our solution to this quandary is incorporated into our 
course design,  2 The Current Scene Over the past five years there were no arti­cles in the primary 
educational journals of the ACM and ASEE which discussed the content of the introductory computer science 
coume for engineers, There were a considerable num­ber of articles written in the ACM SIGSCE Bulletin 
regarding the content of CS1. In the publications of the ASEE over the past five years, one finds only 
statistical data on lan­guages taught and credits taken. One does find good discussions found on engineering 
de­sign and the use of microcomputers in the cur­riculum. Given the evidence in [1], and [5], and the 
fact that the engineering disciplines continue their movement to diversifying their historical student 
clientele, we can no longer feel confi­dent that the majority of the clientele will have a significant 
proper preparation in computing. Thus any course that is developed must meet the needs of a heterogeneously 
prepared stu­dent clientele. Moreover, students must see the relevance of the course and be challenged 
throughout the entire course. Students must reach a level of competency that insures that all subsequent 
courses using computing can proceed from a common base. The focus of our course proposal is to specify 
a three credit course that meets the require­ments described above. 3 Goals and Specific Ob­ject ives 
The goals are easily stated given our prelimi­nary remarks. Design a three credit introductory com­puter 
science course that meets the fol­lowing requirements: At the conclusion of the course, all students 
should have a minimum level of competency in computer pro­gramming and computation to meet the computational 
prerequisitea of subsequent engineering courses.  Assignments must be relevant and be perceived by the 
students to be relevant.  All students must be challenged throughout the course regardless of their 
background in computational science.  The course must be easily modified to reflect new hardware and 
software technologies.  subject to the following constraints: The course must be suitable for a large 
lecture / small recitation for­mat.  The course must be suitable for a lec­ture format with no recitation. 
 The course must be viable for differ­ing computational environments in­cluding  * Mainframe computers 
* Workstations * Personal Computers  Provide a mechanism to continuous y re­vise the course in order 
to keep it relevant to students.  4 Assumptions Regarding Clientele The clientele will assumed to have 
differing competency levels in mathematics and com­puter science. At a minimum, we assume that the students 
have completed one semester of university calculus. We assume no previous computer background for students. 
Admittedly, some students will have over two years experience in a structured program­ming language such 
as Pascal. The entire clientele must be served and challenged. 5 Proposed Revision of the Introductory 
Com­ puter Science Course for Engineers It is assumed that the course is offered in a fifteen week semester 
with three lectures per week or two lectures and two recitations per week. It is assumed that students 
have ac­cess to computational environments includ­ing a mainframe computer, workstations, and microcomputers. 
If any of the environments are not available, obvious deletions should be made in the subsequent desi~n 
description. The design attempts to meet the language issue head on by allowing as many vehicle lan­guages 
that can be economically taught. To be more explicit as a first example, we assume that 500 students 
are scheduled to take the course. One professor is assigned responsibil­ity for the course. She is sssisted 
by one mas­ter teaching assistant and five recitation teach­ing assistants. The first lecture of the 
week is given by the professor. The lecture is language independent and is offered to all students in 
a large lecture. The second lecture of the week would be language dependent. It would be offered to smaller 
sized groups which would range from 200 to 300 students. The number of distinct lectures that would be 
given would be a function of the number of languages be­ing supported by the course. In our model we 
will use FORTRAN and C. Thus the profes­sor would give a lecture in FORTRAN and the master teaching assistant 
would give the lec­ture in C. The students would be assigned to a recitation section that would meet 
in an ss­signed location once a week based on the lan­guage of choice. It is the one administrative contact 
students will have during the course. The teaching assistants, responsible for that recitation class, 
would have to be proficient in the language, They would be responsi­ble for collecting all assignments, 
having them graded, and then returning them to the stu­dents. During each week there would be a second 
recitation that would cover topics including tl: a mainframe operating system , t2: an introduction to 
microcomputers, t3: a PC operating system , t4: an introduction to numerical software packages, t5: a 
word processor, t6: a spreadsheet program, tr: a symbolic mathematical manipulation program, t 8: a microcomputer 
based database pro­gram, t 9: an introduction to Unix and its tool set, Students would be required to 
show profi­ciency in the first six topics. The mate­rial would be spread across recitation sections throughout 
the semester in a pattern shown below. Students could attend any recitation that fit their schedules. 
Proficiency would be measured by homework assignments. Scheduling of Recitation Two Topics The design 
proposed above meets the con­cerns of language preference, software pack­ages to be presented to the 
students, and a measure of challenge to the best students. The relevancy of the material remains. The 
offer­ing department must work with each of the de­partments in the College of Engineering to ob­tain 
computer related assignments from all up­per division courses. These assignments would then have to be 
modified realizing the more limited technical backgrounds of the students. Assignments would then be 
given to the stu­dents during the mandated attendance recita­tion. Students would be encouraged to use 
any well designed solution. If a spreadsheet with accompanying microprograms yields a solution quickly 
and with sufficient numerical accuracy, the student need not write a pro­gram in FORTRAN or C. The course 
must open the vistas of computing to students, not bend them to fixed routine solutions. The design has 
to be modified somewhat as we move to the example of an all lecture for­mat. Here we assume there are 
80 to 100 stu­dents enrolled in the course in two sections. Normally each section would meet three times 
a week for lecture. The first lecture of the week would be to all 100 studenta in a single lecture. This 
would be the language indepen­dent lecture. During the second lecture of the week, the faculty member 
would meet with the FORTRAN section and then with the C sec­tion. During the third lecture of the week, 
the software topics would be covered in a recita­tion environment with all 100 studenta. In this third 
lecture, the first six software topics would be covered. To satisfy the challenge of advanced students, 
there are two possible solu­tions. The faculty member worka individually with the students or advanced 
undergraduate students, working at hourly ratea in the com­puter laboratory, provide tutorial assistance 
on software topics 2,3,5, and 6. The faculty member should receive course load credit equivalent to two 
three crecM aec­tiona of an introductory course. There would be four lectures involved and heavy adminis­tration 
and grading. The course described above meets the crite­ria set as design issues in the Goala and Spe­cific 
Objectives section. 6 Integration into the En­gineering Curriculum. The salient feature of keeping a 
continual flow of computer related assignments to the in­structing department will enable the course 
to be relevant to students. As changea occur in the Engineering curriculum, those changes will be reflected 
in the computer related aaaign­ments that are given to their students. The instructing department can 
then modify the course by changing vehicle languages, software packages, hardware platforms, and most 
im­portantly the assignments. 7 Anticipated Results Heightening the awareness of instructing de­partments 
of the issue of the engineering ser­vice course in computer science must be the primary outcome of this 
paper. Modifying up per ditilon computer related engineering aa­signmenta for freshman students ia likely 
to be an art form. However, it is the corner­stone of the solution of the relevancy problem for the engineering 
students. The author ex­pects heated discussions regarding the ambi­ tious scope of the course design. 
Such discu~ sion is healthy and can stimulate revisiona at many institutions.  8 Acknowledgment This 
work ia supported by a grant from the Westinghouse Foundation. References [1] Alley,J.,et.aL, Reexamining 
the Introduc­tory Computer Science Course in Lib­eral Arta Institutiona., SIGSCE Bulletin 22(1990)10&#38;104 
[2] Dewey, B. R., Broadening the Base of Soft­ware Applications., ASEE Annual Con­vention Proceed@s. 
(1988) 1133-1134. [3] Hahrtead,R., The lleshman Engineering Program. A Eeginning at Clemson Uni­versity., 
ASEE Annual Convention Pro­ceedings. (1987) 1372-1378. [4] McCullough,E.S. and Lufy,F.J., Com­puter Education 
for Engineers, Part III. Engineering Education ,79 (1989)1115­ 1117.  
			