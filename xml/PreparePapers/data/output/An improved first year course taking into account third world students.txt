
 An Improved First Year Course Taking Into Account Third World Students Conrad Mueller, Sheila Rock* 
and Ian Sanders Department of Computer Science University of the Witwatersrand Johannesburg, South Africa 
 conrad@concave. cs.wits.ac.za sheilar@aisb.edinburgh .ac.uk ian@concave.cs. wits .ac.za *Presently 
in the Department of Artificial Intelligence at the University of Edinburgh ABSTRACT Theincreasing number 
ofeducationally disadvantaged students, typically from third world environments, entering our first year 
course has forced us to re-evaluate the course. The class composition is extremely non-homogeneous creating 
major problems in the teaching of a first year course concentrating on programming. To address these 
problems we have developed a new curriculum based on the ACM task force report and focusing on fundamental 
principles. 1. INTRODUCTION Thechanging political climate in South Africa has meant that there has been 
an increase in the number of educationally disadvantaged students coming into our department. We expect 
this increase to continue as we feel the university population should reflect the composition of our 
society. We wish to maintain or even improve standards while increasing the chances of success of these 
disadvantaged students. This changing situation has meant that our department was encountering problems 
in teaching the first year course. These problems stemmed from the non-homogeneous composition of the 
class. The students come from a wide range of backgrounds. Some of them are highly computer literate 
while others have had no exposure to the technology. In the past our first year course has concentrated 
on the teaching of programming and this emphasized thedisparity between the students. To address these 
problems, we decided to re-evaluate the aims and objectives of our course. We used the ACM Task Force 
report [Denning et al. 1988] to aid us in this. We wanted to address the problems that we have and also 
to keep in line with current trends in the teaching of Computer Science. The recommendations of the Task 
Force are to concentrate on teaching the fundamentals of computer science and to re­emphasize the teaching 
of programming in first year. We found this useful in addressing the problems facing disadvantaged students 
and have based our course on these recommendations. We have also used Computing Curricula 1991 [Tucker 
et al. Permission to copy without fee all or part of this material is granted provided that the copies 
are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
ACM-24thCSE-2/93 -lN, USA @ 1993 ACM 0-89791 -566 -6/93 /0002 /0213 . ..$1 .50 1991] as a guide for 
structuring and improving our course. The new curriculum was implemented in 1990 and we have been able 
to draw some interesting conclusions from our experiences with the course. This experience has led us 
to believe that we have met most of our aims and {objectives. We thus feel that our new curriculum has 
met the needs of our disadvantaged students and has potential for use in other environments with similar 
problems. 2. THE UNIVERSITY The University of the Witwatersrand (Wits) is located in Johannesburg, the 
economic capital of South Africa. It is one of the foremost universities in the country. The university 
has about 20000 students and an academic staff of about 2000. The department of Computer Science is one 
of the departments in the Faculty of Science and at present has an academic staff of 10. We offer a major 
course in Computer Science as well as the opportunity to read for gri~duate degrees. The student numbers 
at present are approximately 140 in first year, 80 in second year, 80 in third year and 20 in honours. 
The BSC degree in South Africa comprises three years of study, honours is an additional one year degree. 
We also currently have 13 registered masters students. The first year course in Computer Science is made 
up of four 45 minute lectures per week plus a 45 minute tutorial and a three hour laboratory session. 
The second and third year courses are similar but have an additional lecture. At IHonours level students 
typically have twelve lectures per weelc plus tutorials and laboratories which depend on the course being 
taught, the Honours year is a concentration on Computer Science. Our standard is very high, degrees from 
the university of the Witwatersrand are recognized international y and many of our graduates undertake 
higher degrees at overseas universities. 3. OUR PARTICULAR ENVIRONMENT The apartheid policy of the National 
Party government in South Africa has resulted in a society divided along socio­economic lines. On one 
hand we have the privileged white minority with the benefits of a high standard of living, a good education 
system and access to technology who make up the first world population. On the other the blacks, who 
have been subjected to appalling living conditions, poor education and exploitation, who make up a typical 
third world population. Until recently almost all of our students have come from the privileged white 
minority group and have had a thorough high school education. Many of these students have used computer 
technology at school or at home and some of them have done Computer Studies at school. With the changing 
political climate in South Africa we have an ever increasing number of educationally disadvantaged students 
in our classes. These stndents come from the third world South Africa. They have been educated under 
the infamous Bantu Education Scheme which was set up as part of the apartheid policy. This education 
system is administered by the Department of Education and Training (DET) and is generally accepted as 
being of a much lower standard than the white school system. Most of these students have attended schools 
in the rural areas and have received very poor teaching. In addition they often come from appalling socio-economic 
backgrounds. They are very badly prepared for study at the university level. The University of the Witwatersrand 
is committed to affirmative action as concerns these educationally disadvantaged students and programmed 
have been instituted to prepare them for the mainstream university courses. These programs are primarily 
concerned with addressing the deficiencies in the students backgrounds but many students who begin our 
first year class are still badly underprepared. Our department is committed to helping these students 
but we also have an obligation to our other students and to the reputation and standing of the university. 
We cannot afford to let our standards drop, degrees obtained at Wits must continue to be recognized as 
good qualifications outside of the borders of South Africa. 4. PROBLEMS ENCOUNTERED IN THE PAST The lecturers 
involved in teaching the first years computer science class before 1990 encountered a number of problems. 
Disadvantaged backgrounds We are committed to helping educationally disadvantaged students succeed in 
computer science. These students typically have never had any exposure to computers and computer science 
is thus a completely new domain to them. Our course threw the students straight into an intensive course 
of programming which gave students little opportunity to survive if they were not coping initially. The 
disadvantaged students were generally in this category. We are getting increasing numbers of DET students, 
and we want to cater for their needs while retaining academic standards. We do not want to separate this 
group out from the rest of the class it is not a good principle psychologically for these students to 
be labeled as having learning difficulties when it is just that they have had educational disadvantages. 
Class composition The students backgrounds are extremely diverse. Some of the class has been exposed 
to programming and is bored by a topic on programming. Others have had no exposure to technology and 
are totally lost by all the new concepts. We landed up with a situation where we were lecturing to only 
a fraction of the class. Not only is it very difficult to lecture to such a class but it creates a negative 
picture of the department and of Computer Science. Similar problems were encountered in the tutorials 
and laboratory sessions. We felt that it was essential that our lectures reached the majority of the 
students and kept their attention. Students Misconceptions of Computer Science We discovered that many 
of our students perceived Computer Science as writing programs. They had a negative attitude to the theoretical 
aspects of the course and questioned the relevance of these sections. A reasonable proportion of our 
students have been exposed to programming (either at school or having worked before coming to the University) 
and have the perception that they know what Computer Science is all about. Most of these students have 
learnt programming by a trial and error / brute-force approach and reacted negatively when they were 
marked down for poor programming skills. They had difficulty in accepting that a program which works 
 should not automatically get 100%. Students are being Misled At Wits first year is seen as giving 
students an opportunity to decide which direction of study they wish to choose. Most students are able, 
to some exten~ to change their direction of study after the first year. A major concern we had was that 
we were misleading our students as to the true nature of Computer Science. By covering very little theory 
and being mainly a practical course in the first year we were encouraging students to regard Computer 
Science as being mainly about programming. It worried us that a number of students became disillusioned 
in later years when we addressed the more theoretical topics. Luck of emphasis on the science of Computer 
Science Being in the science faculty, our course should focus on the science of computing. Nowhere in 
our first year course did we emphasize this. Our students should learn to experiment and analyze, they 
should be doing experiments involving programs to determine the behaviour of the programs and they should 
be encouraged to analyze the order of complexity of the algorithms used in the programs. Lack of basic 
principles required to teach programming In the past our students had struggled at the beginning of 
second year. We realized that the real reason for this poor performance was that they did not have the 
necessary background before their first course in programming. Students should have some knowledge about 
algorithms, data structures and machine organization before learning to program. We also realized we 
should not be teaching programming as an end in itself but to be used as a vehicle for students to apply 
their theoretical knowledge. Staffing resources Teaching programming is heavy on resources and our department 
has always placed a heavy emphasis on providing adequate resources. In the past the department attempted 
to address this problem by greatly restricting the number of students we admitted to our first year. 
This was only a partial solution and we still required considerable resources. By placing the concentration 
on the teaching of programming in the second year we felt we could eliminate the resources required to 
teach students who only take up Computer Science for one year, to learn to program. 5. AIMS AND OBJECTIVES 
Based on the problems and issues described above we decided to investigate putting forward an improved 
curriculum for our first year course. We identified the following as being meaningful aims for a new 
course: . emphasize the nature of Computer Science give an overview of Computer Science introduce the 
terminology used in Computer Science . cover some of the basic knowledge in Computer Science . teach 
students to express coherently their Computer Science knowledge lay a basis for topics given later (for 
example, advanced programming and machine organization) build some essential theoretical background 
start to teach the theoretical skills of proving familiarize students with simple computers and operating 
systems attempt to level out discrepancies in schooling expose students to software engineering principles 
 Using the above aims we formulated specific objectives for the course. Our intention was that by the 
end of first year our students should be able to: define what Computer Science is . make a decision as 
to whether to major in Computer Scien ce specify, design, verify and do simple analysis of an algorithm 
explain computer organization, computability, number systems, data and data structures do a simple proof 
and have a working knowledge of logic . evaluate the efficiency of an executing program find and apply 
knowledge found in manuals write up laboratory reports using software engi neering principles 6. COURSE 
STRUCTURE In order to achieve the aims and objectives discussed above, we developed a first year curriculum 
that emphasizes concepts and science, and does not include any formal teaching of a programming language. 
The course is divided into four topics each having four lectures; a tutorial (1 period) and a laboratory 
session (1 afternoon) per week and extending over about seven weeks. The four topics together extend 
over the full academic year. Each topic is assessed by at least one assignment (which may, depending 
on the nature of the assignment, have an associated assignment test), a class test and an examination. 
Our aim has been to try coordinate the laboratory sessions and tutorials with the course work. The intention 
was for the laboratory sessions to be used in much the same way as is done in a physics laboratory, the 
emphasis being on developing principles and concepts using experiments. The course itself has evolved 
over the three years it has been given. The topics which make up the course are: Fundamental Algorithmic 
Concepts The main purpose of this topic is to deal with the essential aspects of Computer Science. Having 
identified that algorithms are central to Computer Science, the topic then goes on to address the question 
of how to design and specify correct efficient algorithms . Basic Computer Organization This topic addresses 
the question of how do we build a device for executing algorithms and why? . A simple single accumulator 
hypothetical Von Neumann machine model formed the basis of the course. Data and Data Structures The purpose 
of this topic is to address the question how is data represented and structured? . Limits of Computer 
Science The basic question here is what can machines do, what can they not do and what should they be 
allowed to do? . Details of the topics are given in Appendix A. The laboratory sessions are designed 
to emphasize the idea of Computer Science as a science. The students are expected to experiment, measure 
and evaluate. An example would be the laboratory session on sorting algorithms. The students were required 
to run and then plot graphs of time versus input size for three sorting programs (bubblesort, mergesort 
and quicksort). They were also expected to consider best, worst and average cases for the algorithms. 
In 1990 the course was given using a prescribed textbook [Pohl and Shaw 1981] with each topic based on 
particular sections from the textbook (not in the order that they are presented in the textbook). We 
were not entirely happy with the textbook and in 1991 we moved to the approach of the lecturers preparing 
and distributing their own course notes. This approach has been carried through into 1992. We do not 
have a prescribed textbook for the course. Instead we recommend a number of books and we have made sure 
(through a donation from industry) that there are sufficient copies of these books available to students 
for short term loans. A list of the books recommended for the course is given in Appendix B. 7. EXPERIENCES 
IN THE COURSE SO FAR We have evaluated the success of the course so far by looking at class records, 
surveys of students and tutors, and personal observations of the lecturers involved. This results are 
summarized below. 7.1 Positive Aspects Greater success with disadvantaged students -We have more students 
from disadvantaged backgrounds in our second and third year classes. We believe we will have improved 
pass rates in this category of students but the final examinations have not yet been completed. We have 
addressed the problems of disadvantaged students and a non-homogeneous class This problem has been largely 
relieved by the teaching of concepts whichl are new to all students. The disparity of backgrounds is 
no longer as noticeable. Highly tnotivated class We now have a highly motivated first year class. The 
class participation in lectures has been good. The turn out at tutorials and laboratc]ry sessions has 
been exceptionally good (generally close to 100%), and students have willingly completed optional assignments. 
Getting used to computers without stress -We are using machines in laboratory sessions to illustrate 
concepts, which means that students get to use the machines without the compelling burden of having to 
produce results in the form of working programs. This is shown by the fact that many students (including 
those who hacl never used a computer before) are returning to the computer room to rerun programs, and 
are also using the equipment for writing their essays. Algorithms are central to Computer Science We 
consider that a knowledge of algorithms, data structures and machine organization is important for teaching 
of Computer Science. In addition we feel that understanding of these concepts will facilitate the development 
of good programming techniques. Our curriculum lends itself to this approach and we feel it has been 
effective. ~Durstudents are thinking about the problems they are called upon to solve and are capable 
of developing rigorous techniques for solving problems, without viewing everything they do from the point 
of view of programming. Students approach is to think rather than do In our opinion the teaching of 
problem solving and development and understanding of algorithms without worrying about the underlying 
syntax and semantics of a higi]-level language means that students can devote themselves to understanding 
the problems and deriving efficient solutions rather than being forced to produce answers by hacking,. 
Students ask tizore relevant questions Generally the students have asked more relevant questions, that 
is questions about Computer Science rather than questions about programs. For example, we are asked, 
is quicksort better than mergesort, and why? rather than how do yott program quicksort? . We are teaching 
Computer Science In the past we have been teaching the first year students programming and very little 
else. Now we are teaching fundamental concepts of Computer Science, and stressing the fact that Computer 
Science is a science, from the beginning of the first year course. Easier to teach Computer Science 
Teaching Computer Science concepts to our first year class is far less intensive than teaching programming 
as regards teaching resources. We do not have to allocate time (our own or tutors ) to assist students 
with the debugging of programs. Feed-back from tutors Our Honours students, who act as tutors for the 
first year course, have reported that the students are very keen and that they have to be on their toes 
to be able to deal with some of the issues raised in the tutorials. A comment made by one of the tutors 
bears repeating: I wish our first year course had been like this... No frantic demand for resources 
The machines in our laboratory are used regularly and are in demand but there is no frantic overload 
the day before an assignment is due, as has been experienced in the past. In addition, students whose 
finances do not allow them to have their own computer at home arenot further disadvantaged. Easier to 
assess the students understanding In the past, anyone who devoted enough time to a program could get 
it to work. It was difficult to assess the student s level of understanding. We are now far more directly 
assessing the students understanding of concepts by means of assignments, tests and in lectures. 7.2 
Negative Aspects Order of the topics In 1990 we started by teaching Basic Computer Organization in the 
first block but decided that algorithms is a far more logical starting point. me major problem was encountered 
when teaching aspects of architecture, and the basic workings of a Von Neumann machine. The approach 
we wanted to take was to see this machine as a vehicle for achieving the instructions in an algorithm, 
and this was very difficult as the students had not yet covered the material on algorithms. Related to 
this was the problem of describing the instruction cycle in terms of being an algorithm. In 1991 the 
algorithms topic was taught first and this was a better arrangement. In 1992 we taught the two topics 
in parallel, that is two lectures per week per topic, and combined laboratory sessions and tutorials. 
In our opinion this worked very well and is probably the best way to handle the teaching. The problem 
with this approach is that it is dependent on the lecturers involved being able and prepared to work 
together. Problems with expressing algorithms We have discovered that some of our students have difficulty 
in determining the correct level of abstraction at which to express their algorithms. In order to assist 
them with this we have developad a tool called ALEX which allows them to specify algorithms in an English-like 
form and have them executed [Pyott and Sanders 1991]. PascaJ programs in laboratory confusing For some 
students, being given working programs in Pascal in the laboratory sessions and being asked to run or 
modify them is still a quantum jump from anything they have experienced before. We have been looking 
at this problem and have developed a simple programming toolbox and program animator to assist them [Sanders 
and Gopal 1991]. Relation between structured constructs and architecture We try to teach students to 
express the repetitive aspects of algorithms in the form of while and repeat constructs rather than using 
jumps. We also introduce recursion as a way of expressing some algorithms. However, this presents difficulties 
when trying to relate algorithms to the execution of their instructions on a machine that provides only 
branching instructions. lack of Equipment for machine organization We feel that it would have been effective 
to have been able to illustrate some of the basic concepts of machine organization (e.g. flip-flops) 
using simple circuits. These were not available to us because of the cost of acquiring the necessary 
components. In 1992 we developed a computer simulation which allowed the stndents to assemble simple 
circuits. We feel that while this is not an ideal situation. it still benefits our students. Textbook 
not ideal As yet we have not found a textbook which is truly adequate for our course so we are continuing 
to produce our own notes. 8. EFFECTS ON THE DEPARTMENT This new curriculum has had a major effect on 
our department and we have had to make some changes in the second and third year courses. The most significant 
changes have been in the second year advanced programming topic because a number of issues which were 
covered there are now addressed in the fwst year algorithms topic. The second year machine Organization 
topic has also had to be revised considerably. Other courses have not been too severely affected but 
have needed some revision. Some of the students who did this course have now reached third year level. 
We are extremely positive that the first year course has been beneficial to these students but the real 
proof of the merits of new curriculum will only be established when we can evaluate their final results. 
 9. CONCLUSION We identified our biggest problem as being the non­homogeneous class composition and the 
increasing number of educationally disadvantaged students in the class. We feel that the new curriculum 
has to a large extent addressed these problems whilst retaining academic standards. The new curriculum 
is also in line with the ACM Task Force recommendations. Many third world countries have students with 
similar problems to those faced by our students. It is our belief that our curriculum will be of value 
in these environments. ACKNOWLEDGMENTS We would like to thank all those who helped in proposing the new 
curriculum, especially Scott Hazelhurst and Philip Machanick. We would also like to thank all the lecturers 
who have been involved in teaching the course and the senior bursars for their assistance in tutoring. 
REFERENCES Denning P J, Comer D E, Gries D, Mulder M C, Tucker A, Turner A J and Young PR. Report of 
the ACM task force on the core of Computer Science, ACM Press, ISBN O-8791­293-4, 1988, Pohl I and Shaw 
A. The nature of computation, Computer Science Press, ISBN 0-914894-12-9,1981 Pyott S W and Sanders I 
D. ALEX: An Aid to Teaching Algorithms, ACM SIGCSE Bulletin, Vol. 23, No 3, September 1991. Sanders 
I D and Gopal H R. AAPT: Algorithm Animator and Programming Toolbox, ACM SIGCSE Bulletin, Vol. 23, No 
4, December 1991. Tucker A B, Barnes B H, Aiken R M, Barker ~ Bruce K B, Cain J T, Conry S E, Engel G 
L, Epstein R G, Lidtke D K, Mulder M C, Rogers J B, Spafford E H and Turner A J. Computing Curricula 
1991, Communications of the ACM, Vol. 34, No 6, June 1991. APPENDIX A The details of the individual 
topics are given below: Fundamental Algorithmic Concepts Introduction to Computer Science (origins, definition, 
core topics) Algorithms, Programs and Computations (specification, design, modularity, recursion) Analysis 
of Algorithms (order of complexity) Correctness and Program Proving. Searching, sorting and related algorithms. 
The assignment for this topic requires the students to develop searching and sorting algorithms for particular 
applications and to analyze these algorithms. The laboratory sessions for this topic involve running 
programs designed to illustrate concepts; designing and implementing algorithms; empirical measurements 
of implementations of various algorithms for searching, sorting and numerical calculation. Basic Computer 
Organization Propositional logic Boolean algebra Switching algebras and circuits Digital logic Hardware 
structures and basic circuits (combinational and sequential circuits, flip-flops, registers, adders, 
decoders) State machines Computer architecture The assignment for this topic requires students to understand 
and complete a program which is a simple simulation of a Von Neumann architecture and then to write some 
basic programs at machine level to run on this machine. The laboratory sessions for this topic involve 
running programs to experiment with propositional logic; designing simple circuits; simplifying circuits 
using Karnaugh maps; working with a program to illustrate state machines. Data and Data Structures numbers, 
characters and strings . one and two dimensional arrays, sets, records queues and lists, list processing, 
trees . stacks and recursion The assignments for this topic require students to write programs involving 
various stack manipulations and list processing. The laboratory sessions for this topic involve developing 
and running programs using arrays, sets, recursive structures and linked lists. Limits of Computer Science 
Turing machine and Church-Markov-Turing Thesis Universal Turing machine Halting problem Alternative forms 
of computation Introduction to AI (Definition, Game playing, Natural language, learning, trends) Social 
and ethical questions The assignment for this topic requires students to do some additional reading and 
then to design a poster which addresses social and ethical questions. The laboratory sessions for this 
topic involve working with a number of AI concepts such as expert systems, game playing and natural language 
processing systems; exploring a simple Turing machine; case studies on ethical issues. APPENDIX B Bibliography 
of books used to support the course: Dowsing R D and Woodhams F W D. Computers from Logic to Architecture, 
Van Nostrand Reinhold (International), 1990. Dunlop C and Kling R (Eds.). Computerization and Controversy: 
Value Conflicts and Social Choices, Academic Press, 1991. Harel D. Algorithmic: The Spirit of Computing, 
Second Edition, Addison-Wesley, 1992. Pohl I and Shaw A. The nature of computation, Computer Science 
Press, 1981 Sedgewick R. Algorithms, Second Edition, Addison-Wesley, 1988. Tenenbaum A M and Augenstein 
M J. Data Structures using Pascal, Second Edition, Prentice-Hall Inc.. 1986.  
			