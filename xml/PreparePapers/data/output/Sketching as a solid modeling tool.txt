
 Sketching as a Solid Modeling Tool Lynn Egglit, Beat D. Briiderlint, Gershon Elber$ ~Computer Science 
Department, University of Utah, Salt Lake City, UT 84112 $Computer Science Department, Technion lIT, 
Haifa 32000, Israel Abstract This paper describes Quick-sketch , a 2d and 3d modeling tool for pen based 
computers. Users of this system define a model by simple pen strokes drawn di­rectly on the screen of 
a pen-based PC. Lines, circles, arcs, or B-spline curves are automatically distinguished, and interpreted 
from these strokes. The system also au­tomatically determines relations, such as right angles, tangencies, 
symmetry, and parallelism, from the sketch input, These relationships are then used to clean up the drawing 
by making the approximate relationships exact. Constraints are established to maintain the relation­ships 
in further editing. A constraint maintenance sys­tem, which is based on gestural manipulation and soft 
constraints, is employed in this system. Several tech­niques for sketch based definitions of solid objects 
are provided as well, including extrusion, surface of revolu­tion, ruled surfaces and sweep. Feat ures 
can be sketched on the surfaces of 3d objects, using the same 2d-and 3d techniques. This way, objects 
of medium complexity can be sketched in seconds. The system can be used as a front-end to more sophisticated 
modeling, rendering or animation environments, serving as a hand sketching tool in the preliminary design 
phase. Introduction Much effort has gone into making graphical design tools more efficient and easier 
to use, mainly by providing mouse controlled object-oriented graphical user inter­faces. In recent years, 
this effort succeeded in making Computer Aided Design available to drafts people who aren t computer 
specialists, and, at the same time, im­proved their productivity. Nonetheless, these CAD sys­tems are 
far away from being optimal for an application Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication and its date appear, and notice is given that copyin 
is by permission of the Association of Computing Machinery. ? o copy otherwise, or to republish, requires 
a fee an#or specific permission. Solid Modeling 95, Salt Lake City, Utah USA O 1995 ACM 0-89791 -672 
-7195/0005 ...$3.50 in the initial dmign phase. It still takes hours of con­centrated effort to create 
the three dimensional models for new d~igne, illustration purposes, or for animation. This is in contrast 
to the seconds or minutes it takes to quickly sketch an idea on paper which is often good enough to convey 
the essentials of a new concept. With the work presented here} we tried to combine some of the sketching 
techniques engineers are already famil­iar with, with the power of solid modeling, to build a design 
tool for two and three dimensional objects. After a brief survey of related work in section 2, sec­tion 
3 describes the basic functions of interpreting pen strokes aa shapes, such as lines, circles, arcs or 
B-spline curves, and also how geometric relationships are recog­nized from the sketch. This information 
is used to clean up the drawing, and to establish constraints. Section 4 describes, in some detail, the 
criteria applied in inter­preting the information, and also the type of feedback the system provid= to 
the user. Section 5 demonstrates the constraint system which is baaed on soft constraints and gestural 
manipulation. Section 6 describes a num­ber of sketch based 3d techniques developed for Quick­ sketch. 
A brief description of the software components employed in the prototype implementation is given in section 
7.  2 Related Work This paragraph describes related research in sketch interpretation, and the use 
of constraints in design, which haa to some degree influenced our development. The paper Design Capture 
System: Capturing Back-of-the-Envelope Sketches by Hwang and Unm­an [7, 8] is interesting both for the 
system imple­mented and for the background research behind their system. The authors performed an extensive 
study of mechanical engineers in action. They videotaped me­chanical engineers solving ill-defined problems 
for over 46 hours. One of their chief observations was the cen­tral role that sketching plays in the 
design process. It was hypothesized that sketching is an extension of vi­ sual memory. It was also noted 
that these profession­als possess considerable expertise in sketching. This talent is generally unexploited 
in contemporary CAD systems. The study concluded that, in order to be ef­fective, a CAD system must allow 
sketched input, have a variety of interfaces, recognize features, and manage constraints. From these 
criteria they built a system they felt would be useful to engineers. Their system has two phases. The 
first is a two-dimensional stroke recognition system. Sketched strokes are interpreted as lines, arcs, 
circles, ellipses, etc. These primitives are accumulated until they can be recognized as a 3D fea­ture. 
The features are then placed in a coherent three+ dimensional topology. New features can be built upon 
previous ones. The limitation with this system is, that it will only recognize a limited set of features 
(blocks, cylinders and spheres) sketched from a fixed perspec­ tive. Also, no constraint system was implemented 
in the described system. The system describwl in Designing Solid Objects Using Interactive Sketch Interpretation 
(Viking) [10] lets the user sketch a whole line drawing of an object in 2D, and then attempts to interpret 
it into 3D. The system uses hints, such as shading of non-visible lines, and previous interpretations 
of the object, to guide the interpretation. Additionally, the user can specify con­straints on the objects. 
Sketched segments are automat­ically aligned, where appropriate, making input easier. The object can 
be viewed from any view point, and the user can make modifications to any side of the object, later. 
There are possibly a few limitations with this system: Forcing the user to shade non-visible line seg­ments 
seems tedious and error-prone. Furthermore, it seems questionable that the system could successfully 
interpret a large complicated drawing all at once. In the thesis, A User Interface Model and Tools for 
Geometric Design [1], the author outlines an architec­ture for graphical user interfaces. The architecture 
is applied in a system that creates B-spline curves from sketched data, using an incremental knot removal 
alg~ rithm. The user may edit the curve s control-polygon with gestures. This system considers how the 
pen stroke crosses a segment (or multiple segments) of the control polygon, and determines the user s 
intent of changing the shape from that input. The paper Constraint Objects -Integrating Con­straint Definition 
and Graphical Interaction [5], de­scribes a constraint-based modeling system tailored to be highly interactive. 
Constraint objects and parame­ter objects are used to simulate degrees of freedom be­tween objects. In 
this system, the user picks a point. From this point, a constraint-dependency graph is con­structed in 
a non-deterministic fashion. The depen­dency graph is evaluated while the user drags the se­lected point. 
This system also automatically derives constraints from construction operations, such that con­straint 
specification, construction operations, and inter­active dragging can be mixed freely. One drawback this 
system has is that the response generated from the non­deterministic dependency graph is not always intuitive. 
It is sometimes difficult to guess exactly how the system will react to a drag operation. The DeltaBlue 
Algorithm: An Incremental Con­straint Hierarchy Solver [4] is an incremental con­straint solver. In this 
system, a new solution to a sy5 tern of constraints and variables is based on previous solutions. Changea 
between solutions are assumed to be small. Emphasis is placed on speed over generality. The programmer 
is able to assign weighta to the con­straints as they are added to the system. These weights range from 
an inviolable hard constraint to the weak­est default stay constraint. These constraints form a hierarchy. 
When a constraint is added or deleted, the algorithm determines from this hierarchy, which con­straints 
to satisfy, and how.  3 Interpreting Pen Strokes as Geometric Shapes A user of the Quick-sketch system 
draws directly on the pressure sensitive LCD screen of a laptop PC, with a pen. Figure 1: Example of 
sketching primitive shapes with a pen. Figure 2: The program interprets the stokes as circle, cubic Bezier, 
line, horizontal and vertical lines. Tw~dimensional lines, circular arcs, full circles, and B-spline 
curves can be sketched. The stroke is samp­led as a sequence of points from which the program interprets 
the type of shape, using some mode depen­dent preference function (see section 4). Once the type is decided, 
the closest fit to the stroke is determined, using different numerical techniques (a leaat square fit 
approach is taken for lines and B-spline curves; circles and circular arcs are determined using a gridding 
tech­nique). Figure 3: Sketching a sequence of strokes. Figure 4: The program automatically recognizes 
rela­tionships. Once the closest fitting primitives have been found, the system tries to interpret certain 
relationships be­tween them (e.g. whether two curves are adjacent and whether two adjacent lines are 
at a right angle). If such a relationship is found within tolerance, the parameters of the primitives 
are altered to establish an exact rela­tionship. Figures 3 and 4 show the effect of the inter­pretation. 
The program automatically recognizes adja­cencies and the right angles, and cleans up the drawing. Two 
exact rectangles are created (the second one is axis­ aligned). Angle constraints A and slope constraints 
S are associated with the points and lines, keeping these relations intact when the geometry is changed 
by drag­ging. More examples are shown in figures 10 and 11. System Behavior and Feedback Quick sketch 
applies a number of criteria to inter­pret the type of shape and the relationships between objects. Since 
the sketched shapes are not usually ex­act, the system haa to apply tolerance in interpretation. If the 
interpretation doea not correspond to the users intention, there needs to be an easy way of recognizing 
and changing it. This paragraph describes the concepts in some detail. 4.1 Tolerance-based Interpretation 
The interpretation of pen strokea is taking into ac­count the closeness c to the exact shape, the speed 
of the input u, a user settable tolerance r which is as­sociated with the user s skill, the length of 
the stroke (significance u), and the user preference mode p, which repr~nta the type of the task. Afodes: 
Examples for user preference modes are for instance: . Technical druwing mode, preferring lines and circu­lar 
arcs, right angles and tangencies, parallel lines, and concentric circles. . Symbol mode, preferring 
horizontal and vertical lines, symmetric shapes, right anglea, parallelism, semi-and quarter-circles. 
 . Free ~own mode, preferring B-spline curves and tan­gencies.  In each of the modes, a higher tolerance 
is applied to the preferred attributes, making them a more likely choice. Significance: The longer a 
curve is, the more ac­curate it s relative global features will be drawn This is based on the assumption 
that the user will have a chance to do some midcourse correction. For instance, a short horizontal line, 
in the average, will deviate by a larger angle from an exact horizontal line than a long one. The system 
divides the tolerance applied to angles by Sqrt(length-of-line), within certain limits. Similarly, other 
properties are derived using a length dependent tolerance function. Speed: Sketching an object very quickly, 
will be less accurate, in general, than drawing it more carefully and slowly. The speed of a stroke is 
taken into considera­tion by multiplying all the tolerances with the speed. Therefore, the faster an 
object is drawn, the higher is the tolerance used in the interpretation, and thus it is more likely that 
a correction is applied. This approach is assuming that the faster strokea are more sloppy, and in reality 
should represent some more accurate shape (for instance a rectangle). This behavior can also be exploited 
by the user. For instance, to draw a line that haa a slight slope, and therefore should not be inter­preted 
as horizontal, one would draw such a line more carefully and deliberately. Skill: The speed factor is 
compensated somewhat by a user settable skill factor. The more skilled a designer is, the less his or 
her drawing should be revised, even if drawn fast. This is achieved by setting the tolerance T to be 
inverse proportional to the skill. 4.2 Cleaning up the Drawing and Es­tablishing Constraints The system 
tries to satisfy the relationshipa inter­preted into the sketch, with the least amount of change. This 
paradigm is applied on a case by csae basis, us­ing some heuristic rulea, as shown in the following ex­ample: 
The angle between the two lines in figure 5 is close to a right angle (within tolerance). The right an­gle 
can be achieved by rotating the second (vertical) line about the point of incidence. This, however, would 
make the other end of the line jump unexpectedly, and might confuse the interactive user, even though 
a right angle was intended. The system uses an alternative o lution, namely to rotate the second line 
about its center point, and to elongate the first line, to maintain inci­dence between the lines. Generally, 
the system attempts a few small distributed changes, rather than causing one big local change. After 
the correction is made, a right angle constraint is established between the two lines. The constraint 
ensures the right angle relationship to be maintained during interactive manipulations, later. Figure 
5: Snapping to a right angle constraint (2 possi­bilities are shown)  4.3 Correction of Automatically 
Made Interpretations The criteria applied in making automatic interpreta­tion work together naturally, 
and make the behavior of the system quite predictable. Nevertheless, there will always be cases where 
the system makes a wrong inter­pretation of the users intent. It is therefore essential, to provide the 
designer with clearly understandable feed­back about the interpretations made, and to allow for a simple 
way of correcting them, if they are wrong. Each interpretation made by the system will result in highlighting 
of corresponding icons that easily identify the choice (see, for instance, figure 6. The Isst stroke 
was interpreted as a line with a right angle constraint). The user can quickly unselect the highlighted 
constraint on the menu, or select others instead, and the program instantly reinterprets the stroke. 
Shape Constraints  ZEcz w Figure 6: Highlighting the system s choice Using a context sensitive menu 
for corrections after­th-fact is a very efficient way of interaction, especially for pen baaed computers. 
With mouse based interac­tion, on the other hand, it is necessary to first tell the system each time 
whether we want to draw a line, B­spline curve, or a circle, and then we have a few lim­ited options 
of determining the shape interactively, by dragging the provided handles into place. Since a pen provides 
a lot more dexterity, we just draw the object and let the system figure out the type of object, the parameters, 
and the relationshipa to other objects. In the majority of cases the automatic interpretations are correct 
and easy to predict. Only the menus/icons rel­evant to the objects drawn will then be displayed, so the 
user can make possible corrections (e.g., to undo snapping to right angles, or to reinterpret a stroke 
aa a low curvature arc, instead of a line, etc.). Together, these approaches speed up the design significantly, 
as the examples show. 5 Editing with Gestures and Soft Constraints Quick sketch allows for interactive 
manipulation of sketches, by dragging the control pointa displayed in the drawing. The previously established 
constraints are maintained during dragging. Geatural manipulation is used to disambiguate the interaction 
for undercon­strained drawings, taking the direction of the stroke into account. Implicit (soft) constraints 
have also been intro­duced to achieve even better predictable behavior when manipulating underconstrained 
drawinga. The follow­ing example shows how the system reacts when drag­ging points of a profile (with 
circular arc tangent to two lines, and two right angles at both ends; figures 7 and 8). The idea behind 
gestural manipulation is to use the direction of the pen stroke (gesture) in determining Figure 7: a) 
Dragging the point at the top upward (see direction of arrow) will stretch the upper portion of the profile 
(see figure 7 b) Dragging a point on the periphery of the circular arc inward causes the circle to shrink 
in size (see figure 8a) which effect a manipulation will have. In simple terms, the direction of the 
stroke is compared against the di­rection of each line adjacent to the point picked. In case of circles 
or B-spline curves the control polygons are used as a reference (drawn dimly in the illustra­tions). 
If the stroke is (within tolerance) along such an existing line, the constraint solver tries to achieve 
a one dimensional degree-of-freedom motion in this direction. Gestural manipulation for 3d interaction 
was previously proposed in [9]. Due to the increased dexterity of a pen over a mouse, this type of interaction 
gains new impor­ tance. The possible reaction to manipulations, even with gestures, may still be ambiguous, 
especially, if only a few constraints are defined. The following example shows how implicit constraints 
can be used to obtain predictable behavior, even in highly underconstrained situations. The polyline 
in figure 9 has no explicit con­ straints. Implicit constraints automatically define dis­tance constraints 
between pairs of points connected by a line. Angle constraints between two adjacent lines, p~ sition 
constraints for each point, and a slope constraint for each line are also defined implicitly. In contrast 
to explicitly defined constraints, these implicit constraints are so called soft constraints, i.e. they 
are only observed if they do not contradict any explicit (hard) constraints. Each type of soft constraint 
has a mode dependent weight associated with it. The weight is interpreted as a penalty for violating 
that constraint. For hard con­straints the penalty is infinity (the ultimate penalty). When manipulating 
an object, the constraint solver, in its planning phase, tries different ways of transforming the objects 
while dragging. For any given plan, some of the soft constraints will have to be violated. The weight 
of each violated constraint is summed up. Sev­eral plans are analyzed, and in the end the one with the 
Figure 8: a) Dragging that same point tangential to the circle causea a change in the opening angle. 
b) The change causes the upper half of the profile to be rotated about the circle center due to the constraints. 
Notice that all the previously imposed constraints, such as right angles, and tangencies, are maintained 
during all manipulations. least penalty is used. Giving different weights to differ­ent types of constraints 
will effect different behaviors in interactive situations. In our system, we do not put the burden to 
assign weights to the individual constraints on the user, but rather provide predefine sets that can 
be associated intuitively with some geometric behavior. The weights are summarized in table 1. b) / 
 Figure 9: Tbe polyline (a) is edited in bend mode (b), or in stretch mode (c) In riy d mode, a high 
penalty is associated with viola­tion of distance and slope constraints but no penalty is associated 
with position and slope constraints, causing concatenated primitives (e.g. in a profile) to be trans­lated 
or rotat&#38;l as a rigid object. in stretch mode, no penalty is associated with di~ tance violations 
but slopes and angles carry a high Table 1: Mode dependent weights for soft constraints Mode I position 
[ slope I distance I angle rigid I o IoI 10 10 bind 5 0 10 0 stretch 5 10 0 10  :;X / \ , free 5000 
\, . i . penalty. The penalty on position constraints keeps the transformation more local which causes 
the objects to be stretched locally. In bend mode, angle constraints have no penalty, but the system 
tries to maintain distances causing a kind of a bending or shearing transformation. In free mode, only 
position constraints carry a penalty, causing free local deformations, maintaining neither angles nor 
distances. Figure 10: A 2d sketching of a profile of a mechanical part The way the soft constraints are 
treated in the con­straint solver, is similar the hierarchical constraint solver described in [4], however, 
the solving mechanism used here is quite different. The details of the mech­anism cannot be described 
in the space provided here, but instead we refer to [3]. Sketching in 3D To model three dimensional 
objects by sketching, the system currently allows the following techniques Ex­trusion surfaces can be 
generated by sweeping a two­ . ; $x : A . . $.fi - ; f-Yr  x: : ....j ; j j. f, .. i , .: > ./, ; ,.,, 
. ., -. ., . .. , -.. ... . ... . . .... . .... <, .. .... . .% ./ .. .. , ....... .. ....... .,. -- 
  / ~. ~~ Figure 11: Pen strokea of figure 10 recognized as circular arcs and lines dimensional profile 
along a straight line. Ruled surfaces can be defined between two sketched curves. A sketched cross section 
can be swept along a sketched curve (figure 17), creating a sweep surface. A surface of revolution can 
be created, by simply sketching two approximately symmetric silhouette lines. Also, lines and curves 
can be sketched on planar faces of existing objects. This way, features can be quickly added to objects. 
 6.1 Sketching of a Solid Model An example sequence for sketching a 3d object from scratch is shown in 
figures 10, ... 14. We start by sketching a 2d cross section (profile) of a mechanical part (figure 10). 
The pen strokea of figure 10 are recognized as circular arcs and lines. Also, the lines are recognized 
to be tangent to the circles. Parallel lines, concentric circles, and right angles are interpreted. The 
drawing is cleaned up instantly, and constraints are established (Figure 11). The 2d profile can then 
be extruded into the third dimension (indicated by a pen stroke near the top right), which results in 
a solid object (see figure 12). Featurm can be sketched onto any flat surface facing the viewer in the 
current perspective (figure 13). These features are also cleaned up (by establishing right an­gles, and 
aligning them with the boundary lines), and then extruded with a pen stroke. All the previously in­troduced 
2d techniques also work for profiles sketched onto a face (e.g. detection of parallelism, snapping to 
 Figure 12: The 3d part right angles, tangent circles, constrained manipulation etc. ) however within 
the local coordinate system of the face they are drawn on. The resulting solid object was rendered with 
the IRIT modeling system (figure 14). The data can be exported to any solid modeling sys­tem, for postprocessing. 
The interactive modeling of this solid from scratch took about 35 seconds. This is even slightly f~ter 
than trying to sketch the same object with pencil on paper, and it h= the additional advantage of generating 
a full 3d CAD model that can be edited, dimensioned, and rendered, etc, Another example for parts sketched 
with the system is shown in figure 15. Sketching FYee-Form Surfaces This paragraph shows a few sketching 
techniques for sculpted surfaces, in Quick sketch . Ruled surfaces are created by interpolating between 
two curves (figure 16). The two curves are first interpreted in the x/y plane. The stroke between the 
two curves is then used to de­termine the depth. It is first projected onto the x/z plane, in the view 
direction; and then an orthogonal projection within the x/z plane onto the z-axis deter­mines the offset 
between the two interpolated curves in the z-direction, assuming that the stroke is parallel to the x/z 
plane. Sweepingacircular arcalongaB-splinecurvecreates a sweep surface, as shown in figure 18 a). The 
stroke for the cross section curve is interpreted as a projection onto the x/y plane, and the sweep curve 
is projected onto a plane parallel to the x/z plane. In 18 b) a cir­cular arc is swept along another 
circular arc, creating a Figure 13: Sketching featurea on the solid portion of a torus. A surface of 
revolution can be created by sketching two approximately symmetric silhouetk lines in the x-y plane. 
The system determines the symmetry axis to be parallel to either the x-axis or the y-axis (figure 19). 
7 Implementation The prototype implementation of Quick-sketch was realized with GDI, a portable graphical 
user interface toolkit, and the IRIT computer aided geometric d­sign package. The program runs, among 
others, on a Compaq Concerto which is a pen-baaed laptop PC, running with an Intel 486 Processor, at 
33 MHz. The response times for all the examples shown in this paper are unnoticeably short. The only 
operation that isn t done in real-time on this machine, is the redrawing of the sculpted surfaces. The 
IRIT libraries [2] provide us with the necessary mathematical tools, such as, least square fit, calculat­ing 
B-splines curve of arbitrary orders and degrees of freedom through the sampled points of a pen stroke. 
Functions for creating surfaces of revolution from two silhouette curves, for constructing sweep surfaces 
from cross section and axis curves, and for Boolean sum sur­faces or Coons patches are also available 
in lRIT. The GDI library [11] providea the graphical user in­terface to the system. GDI consists of 2d 
gadgeta and 3d interactors and display functions have been imple­mented as C++ classes in a portable 
way. An interac­tive geometric modeling system has been implemented, using GDI. The portability of the 
library allows this modeler to run on PCs under Windows 3.1, as well as Figure 14: A shaded rendering 
of the part in figure 13 Unix, with X-windows (with or without Motif) virtually unmodified. 8 Conclusion 
and Outlook The experience drawn form the development of Quick-sketch is that, in 2d, the automatic interpre­tation 
of pen strokea is a powerful technique. Reading the users mind can be done reliably, since the input 
device (pen) is also two dimensional. The extra con­trol and dexterity provided by the pen allows for 
these new techniques that would have been impractical with a mouse. The automatic interpretation is generally 
cor­rect, and in the few cases where it is wrong it can be corrected with a preaa of a button. The way 
of designing with sketches feels very natural and is also very efficient. In three dimensional design, 
the situation is much more difficult. Interpreting an arbitrary 2d input as a 3d object is too ambiguous, 
in general. We decided against this idea, and instead, we developed specific drawing techniques that 
have an unambiguous interpre­tation in 3d. These techniques are partly adaptions of conventional 3d techniques 
for a sketch based environ­ment, in combination with the new 2d sketching and 320 Figure 15: Sketching 
parts for assembly Y x Figure 16: Ruled surface construction manipulation techniques. In the future, 
we plan to add many more techniques specifically for fr-from surface design, for which sketching can 
be a powerful technique. Each of these techniques will purposely be limited and therefore simple. However, 
we feel that a transparent combination of a few such simple techniques will add up to a very powerful 
tool. The use of geometric constraints has proven to be a powerful tool to express design intent, especially 
in the preliminary design phase, where the exact shape is not generally known. The geometric relationships 
can be derived from the sketch input in many casea. These constraints become part of the designed object. 
In the later design phasea the shape of the model can be re­fined and modified, for instance, by adding 
more few tures, adding exact dimension information, in form of additional constraints, and by editing 
the constraints. In our new version we are using a general purpose con­straint solver, described in [6], 
which allows for interac­tive constraint-based manipulations of objects directly in 3d. 9 Acknowledgments 
Figure 17: Ruled surface between a line and a semi­circle Figure 18: Sweep surfaces It is our goal, 
to make sketching with the computer as natural as using paper and pencil, and even more efficient. It 
should be possible to jot down an idea in a few minutes or even seconds, avoiding the tedious­ness of 
current drafting packages. Sketching makes it worthwhile using the computer in the preliminary de­sign 
phase, where idess are still developed. Up until now, in this stage, designers still use pencil and paper. 
Only after an idea is almost completely thought out, it has to be transferred to the computer, by hand. 
With the new sketching technology being developed, a three dimensional model can be in digital format 
even during the conceptual phase, and it can directly be used for refinement in the later stages of design. 
~.-,,.,_...~..._..., ~.h. /. ----------­ ----- - . .... .... .... .. \F ..... ..._ .... .... Figure 
19: Sketching surface of revolution and its ren­dering with IRIT This work was supported in part by grant 
No. 92-00223 from the United States-Israel Binational Science Foun­dation (BSF), Jerusalem, Israel, and 
an NSF/CISE in­frastructural grant. However, opinions, conclusions or recommendations arising out of 
supported research ac­tivities are those of the authors or the grantees and should not be presented as 
implying that they are the views of the sponsoring agencies. References [1] Banks, M. A user interface 
model and tools for ge~ metric design. Master s thesis, University of Utah, 1989. [2] Elber, G. IRIT 
4.0 User s Manual. [3] EggIi, L. Sketching with constraints. Master s the­sis, University of Utah, 1994. 
[4] Freeman-Benson, B. Maloney, J. The delta-blue al­gorithm. Tech. rep. 88-11-09, University of Wash­ington, 
1988. [5] Hsu, C.-Y, Bruderlin, B. Constraint-objects -in­tegrating constraint definition and graphical 
inter­action. Proceedings Second Symposium on Solid Modeling and Applications, 1993. [6] Hsu, C.-Y, Bruderlin, 
B. An interactive n­dimensional constraint Solver. Technical Report UUCS-94-036, Department of Computer 
Science, University of Utah, November 1994. [7] Hwang, T. Unman, D. The design capture system: Capturing 
back-of-the envelope sketches. Journal for Engineering Design 1, 4, 1990. [8] Hwang, T. Unman, D. Recognizing 
features from freehand Sketches. Computers in Engineering ­1994 Vol. 1, ASME. [9] Nielson, G, and Olsen, 
Jr., D. Direct Manipulation techniques for 3d objects using 3d locator devices. Proceedings of the 1986 
Symposium on Interactive 3D Graphics (1987). [10] Pugh, D. Designing solid objects using interac­tive 
sketch interpretation. Proceedings of the 1992 Symposium on Interactive 3D Graphics. [11] Salem, M. Skowronski, 
S. and Bruderlin, B. GDI reference manual. Tech rep. UUCS-92-031, Univer­sity of Utah, 1992.   
			