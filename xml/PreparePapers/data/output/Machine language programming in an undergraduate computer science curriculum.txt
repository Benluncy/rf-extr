
 MACHINE LANGUAGE PROGRAMMING IN AN UNDERGRADUATE COMPUTER SCIENCE CURRICULUM Ian Sommerville, Dept. 
of Computer Science, Heriot-Watt University, Edinburgh, Scotland. ABSTRACT This paper examines the 
advantages and dis- advantages of teaching machine inaguage pro- gramming to computer science undergraduate 
students. A teaching language based on re- verse Polish notation, but with high-level control constructs, 
is presented as an alter- native to conventional assembly language. Experiences with using this language 
are de- scribed. INTRODUC TION Since the introduction of undergraduate com- puter science courses in 
universities an as- sembly language programming module has been widely regarded as an essential part 
of the curriculum. Such a module is usually inclu- ded either at the end of the first or at the beginning 
of the second year after students have learnt some high-level language. Their programming experience, 
at this stage is usually fiarly limited. The inclusion of such a machine language pro- gramming course 
offers some benefits:- (i) Assembly code is used a great deal in the commercial programming en- vironment. 
Exposure to a low-level language provides a practical train- ing for the student. (i~) Programming at 
machine level prov~ ides knowledge and understanding of the host machine and of concepts of machine 
architecture. (iii) Assembly language programming gives students an indication of how high- level language 
statements may be translated to machine code. This provides background material for a compiling course. 
 Benefits (ii) and (iii) above are very real but the first 'benefit' is oftvery dubious nature. Commercial 
utilisation of assembly languages is often based on ill-considered ideas of efficiency. Thankfully 
more and more users are realising that machine effic- iency and system economy are not synonymous 
terms and are turning away from assembly language programming. As a result, the market for machine language 
 programmers is contracting and probably only a fiarly small percentage of graduates will be employed 
in this task. Time spent in 'practical training' can therefore be time wasted for most students. However, 
there are also a number of disad- vantages involved when a course in assembly language programming is 
included in the cur- riculum:- (i) A course of this nature using a language such as IBM S/360 as= sembler 
is time consuming for both staff and students. Typic- ally a course like this occupies 20-25 lecture 
hours. About half this time is spent covering back- ground material needed before the student can run 
a program.  (ii) Assembly language programming is error prone and most assemblers are not noted for 
the quality and readability of their error diagnostics. This is discouraging and the students motivation 
is rapidly eroded.  (iii) 'Bit twiddling' constructs are available most assemblers and inexperienc,:d 
programmers see no reason why these should not be used. Hence, the more able students tend to develop 
"dirty" programming habits. Our experience has been that, in teaching a conventional assembler, the 
time spent by both staff and students is disproportionate to the returns obtained in terms of the student's 
understanding of computing concepts. However, we recognise the advantages which I04 accrue from learning 
a low-level language and are relectant to lose them by merely teaching high-level languages. It was, 
therefore decided to design and implement a low-level language for teaching purposes. The language bad 
to illustrate principles of machine architecture and the translated form of high-level language st- atements. 
Essential requirements for this system were identified as:- (i) The language should be easy to use and 
understand.  (ii) Cleanliness and consistency should be inherent -"dirty" programming should be impossible. 
  (iii) The implementation should be such that discouraging and inexplicable errors should not occur. 
 (iv) The language should be teachable in not more than eight one hour lectures. It was finally decided 
that the most suitable type of language was not a conventional assem- bler-like language; but a form 
of reverse Polish notation. As the students had previously attended an ALGOL programming course, a reverse 
Polish language is eminently Suitable for illust- rating the translation of ALGOL statements to some 
lower level form. Our language, POLLY. is described below. THE PROGRAMMING LANGUAGE POLLY A POLLY program 
consists of variable and procedure declarations followed by a reverse Polish string of instructions. 
Basically these have a one-to-one correspondance with machine instructions but higher-level control statements 
have been included in the langu- age. The language description below is very informal and illustrates, 
mostly by example, the language POLLY. The system is described ~ fully in the appropriate reference 
manual [i]. Va r ia ble s All variables used in a POLLY program must be declared and initialised before 
they are used in instructions. Variables are not typed and both simple variables and arrays are declared 
using a Y~EF declaration. For example:- %DEF A=I, B=2, C(3):(Ij,2 3); This declares A and B as simple 
variables, initialised to 1 and 2 respectively, and a 3 element array C with the elements initia- lised 
to i, 2, and 3. %DEF STR(16) = "THIS IS A STRING", BIGARRAY(IOO) = (0*50, 1"50); Declares two arrays, 
STR ~nitialiFed to the character string "THIS IS A STRING" and BIGARRAY. The first 50 elements of BIGARRAY 
are initialised to 0, to last 50 to i. Procedures The POLLY programmer may name sections of code by 
declaring them as a procedure. Pro- cedures do not have parameters but local variable declarations are 
allowed. An ex- ample of a procedure declaration is:-  %PROC ANYPROC [  %DEF P=O, Q=O; POLLY instructions 
 ]; Procedures are activated using the %CALL statement thus:- %CA LL A NY PROC Parameters may be 
passed to a procedure by leaving their addresses or values on the machine stack before calling the 
pro- cedure and storing them in local variables on entry to the procedure. Statements The machine 
instructions in a POLLY program are written as a reverse Polish string with the elements of that string 
separated by commas. For example : - ~C, A, B, +, 6] -, %STORE corresponds to the assignment statement 
 C :=A+ B-6 Notice that variable and constant values are stacked merely by writing the variable name 
or constant itself. A variable address is stacked by preceding the name by an symbol. The usual arithmetic 
and conditional operators +, -, *, /, =, ,, etc. are provided along with stack operations such an YJJNSTACK~ 
Y~)UP (push a copy of the top element) and %SWAP (swap the top two elements). There is no mechanism 
in POLLY for array indexing and this must be handled by the programmer. For example~ element P+Q of array 
A would be loaded onto the machine stack as follows:-  105 ~A I Load base address of array P,Q,+,+, 
[ Compute index and add to base ! %LOAD [ Load value onto stack The language has a number of operations 
for working with arrays:- %LOAD Replace address on top of stack with its contents. %LDSAVE Push contents 
of address on top of stack onto the stack. Y~TSAVE Store top of stack at address in second top element. 
 Leave address on the stack. ZINC Add 1 to top of stack. Control Statements Unlike most languages at 
this level POLLY does not use conditional and unconditional goto statements to control the flow of the 
 program. Rather, two bigber level statements, the IF statement and the REPEAT statement are provided. 
 The IF statement is the familiar two-armed conditional but with the condition preceding the if part. 
For example:- A, B, :, %IFTRUE X Y~LSE Y, If A=B then X otherwise Y is pushed onto the stack. A,B,:,C,D,>,~ND.%IFTRUE(A,B,+) 
 If A=B and C D then A÷B is pushed onto the stack. Notice that brackets group POLLY in- structions 
into a compound statement.  %READ Reads a number onto the stack. %READCH Reads a character onto the 
stack. %READSTR~array name> Reads a string of chara- cters into the given array. ~RITE Prints the top 
of the stack as a number. ?~RITCH Prints the top of the stack as a Character. ?~RISTR<a rray name> Prints 
the string held in the given array. Y~EWCARD Go onto next card. Y&#38;NEWLINE Print on new line. Y~NEW 
PAGE Print on new page. Experience has shown that these commands are easy to use and not particularly 
error prone. IMPLEMENTING POLLY POLLY is implemented using a compiler/in-terpreter system with the 
underlying abstract machine designed to provide diagnostic facilities and to protect the programmer from 
himself, The organisation of this machine (STAC) is diagrammed below in figure i,  / DATA STOKE STORE 
I A loop may be programmed by preceding a com- pound statement with the command %REPEAT. This will 
cause that statement to be repeated- ly executed until either a %BRKTRU (condit- ional break) or %BREAK 
(unconditional break) instruction is executed. Control is then transferred to the following POLLY instruction. 
 For example:- ~EPEAT (I,+,%DUP,10,=,ZBRKTRU) This will add i to the top stack element until it is 
equal to i0. The compiler checks that there is always a break state- ment as part of the compound statement 
thus avoiding one source of infinite loops. These control statements were chosen for POLLY on the 
basis of their simplicity, their re- latively structured nature and because they fit into a reverse 
Polish notation. Input-Output Instructions Input/output instructions are often difficult to understand 
and use at this low-level. Hence a simple but adequate set of I/O inst- ructions have been included 
in POLLY. These are:-  ARITHMETIC UNIT 1 I PROGRAM ADDRESS STACK STACK Orsanisatlon of the STACMachln£ 
 Fisure 1 Notice that the m~cbine has five distinct data areas:- (i) A program stack Used for computat- 
ion  (ii) An address stack Stores return ad- dresses  (iii) A data store Stores program var- iables 
 (iv) A program store Stores compiled program  (v) A symbol table Stores information about declared 
  na me s.  106 The organisation ensures:- passing techniques, which POLLY illustrated (i) That the 
student cannot overwrite his program code  (ii) That return addresses cannot be accidentally used as 
data.  '(iii) Variable names are available for diagnostic purposes. All POLLY variables and procedures 
are addres- sed indirectly via the symbol table. For ex- ample, the statement ~/2ALL ANYPROC compiles 
into <call op code> ~ymbol table address of ANYPROC~. This addressing technique makes the implemen- 
tation of diagnostic facilities very straight- forward. For example a statement %TRACE A, B, C which 
prints the values of A, B and C when- ever they are changed may be simply implemen- ted by flagging 
A, B and C in the symbol table. In addition to this trace statement the fol- lowing diagnostic facilities 
are provided:-  ( i ) CTRA CE Diagnostic information for each instruction executed is printed. (ii) 
PTRACE A trace of procedure calls is printed (iii) SDUMP Prints the program stack. (iv) VDUMP Prints 
values of all declared variables. POLLY IN USE In this section, we discuss the reaction of the students 
to POLLY, and compare that re- action with the feelings of students who were taught a conventional (S/360) 
assembler lan- guage. To our surprise, students who had no previous knowledge of low-level programming 
reacted to POLLY extremely well. The class~ in general, progressed very quickly and the hotion of re- 
verse Polish notation was easily understood. Students enjoyed the course, found the lan- guage interesting 
(many tackled signigicant personal programming projects) and some sug- gested extensions to the language. 
 Programming projects with a time limit set on the basis of conventional assembler projects were, in 
many cases, completed in less than half the allotted time and were generally well programmed. After 
learning and using POLLY, the student's unaerstanding of ALGOL concepts was improved. This is especially 
true of procedure parameter very well. These reactions may be compared with those of another group 
of slightly more advanced students who were concurrently attending a course in S/360 assembler. In general 
 this language was disliked for its incon- sistent and unstructured nature. Projects were late, badly 
programmed and, in some cases, were carried out mechanically by programming in ALGOL and band translating 
this to assembler. They questioned why they had to learn that language rather than POLLY. Subsequent 
questioning (6 months later) of each group of students revealed that those students who studied POLLY 
appeared to have assimilated the concepts of stack machines and reverse Polish programming. On the other 
hand, the S/360 group seem to have forgotten almost everything they learned about the 360 structure. 
 A total of seven one-hour lectures were spent teaching POLLY. These were broken shown as follows:- 
Lecture 1 Stacks and reverse Polish notation Lecture 2 POLLY Declarations Lecture 3 POLLY Statements 
Lecture 4 The STAC Machine Lecture 5 Procedures and parameter passing Lecture 6 Arrays Lecture 7 Use 
of diagnostics As a result of our experiences, conventional assembly language teaching has now been 
dropped from our course. The time saved (15 hours) is devoted to a course in com- paritive machine architecture. 
We feel this benefits the students more than wrestling with the idiosyncracies of assembly code. REFERENCES 
 i. POLLY - A Reverse Polish Programming Language. Ian Sommerville, Department of Computer Science, Heriot-Watt 
University. Revised edition June 1976.  107 
			