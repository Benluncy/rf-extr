##[[DATA:data/orbz_sec/Animating facial expressions.txt|
             
 
			
]]
##[[DATA:data/orbz_sec/Another approach to service courses.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animating human athletics.txt|
               
			
]]
##[[DATA:data/orbz_sec/Antecedents and consequences of job satifaction among information center employees.txt|
                   
]]
##[[DATA:data/orbz_sec/Analysis of SRPT scheduling.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of long queries in a large scale search log.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of electronics assembly operations.txt|
 AUTHOR BIOGRAPHIES KURT G. SPRINGFIELD is a member of the technical staff for TASC, 
Inc. in Huntsville, AL. He holds a B.S. in Mechanical Engineering from the University of Tennessee and 
an M.S. in Industrial and Systems Engineering from the University of Alabama in Huntsville. He is a member 
of SCS, RAHMORS, and ASQ. He is a registered professional engineer. JOHN D. HALL is a senior engineer 
for APT Research, Inc. in Huntsville, AL. He holds a B.S. in Aerospace Engineering from the U.S. Military 
Academy, a M.S. in Industrial Engineering from California Polytechnic State University, and a Ph.D. in 
Industrial Engineering from Mississippi State University. Dr. Hall specializes in conducting product 
and process improvement projects for the aerospace and defense industries. He is a member of IIE, INFORMS, 
and ASQ. Dr. Hall is an ASQ Certified Quality Engineer, Quality Manager, and Reliability Engineer. GREGORY 
W. BELL is the Longbow Missile Production Program Manager for Northrop Grumman Land Combat Systems - 
Huntsville. He started with Westinghouse in 1984 after graduating from Loyola College with a B.S. in 
Engineering Science. He has held various manufacturing positions within Westinghouse and Northrop Grumman. 
He moved to Huntsville in 1992 and served as the Lead Production Engineer for the Longbow Missile until 
his promotion to Operations Manager in 1996. Mr. Bell also held positions in test equipment design, test 
engineering, factory supervision, and production systems development and control during his fifteen years 
in manufacturing. 
			
]]
##[[DATA:data/orbz_sec/Antialiased ray tracing by adaptive progressive refinement.txt|
 Samples per Pixel Histogram for Lamp 
Image (512x512) 120~ 100 - 80 --Number of 60 - Pixels (x 103) 40 -i 20 - 02 5 t0 15 20 25 Figure 1. 
The k-D subdivision of the image plane. The bold path Samples per Pixel leads to the next node to be 
subdivided. Samples per Pixel Histogram for Teapot Image (512x512) Algorithm Performance: Lamp Image 
 120 Cpu time (seconds) 100 Resolution Generate I Evaluate Reconstruct Rays per Pixel 64 250.5 2900 
286.1 5.002930 80 Number 128 753.9 9800 906.6 3.905520 of Pixels 60 256 2117.9 33900 2883.7 3.012775 
(N 103) 40 512 7075.3 103620 9505.7 1.880589 20 0 --1 5 10 15 20 25 Algorithm Performance: Teapot Image 
 Samples per Pixel Cpu time (seconds) Resolution Generate Evaluate Reconstruct Rays per Pixel 64 125.1 
710 169.2 2.607670 128 456.8 2680 605.6 2.347838 256 1777.9 9594 2276.7 2.139068 512 6466.6 34217 8629.7 
1.970165  
			
]]
##[[DATA:data/orbz_sec/Animation support in a user interface toolkit.txt|
             
 
			
]]
##[[DATA:data/orbz_sec/Analyzing and re-engineering business processes using simulation.txt|
AUTHOR BIOGRAPHIES R. BHASKAR is 
a scientist in the field of artiticiat intel­ligence. He has been at IBM since 1982. He can be reached 
by email at bhaskar@watson. ibm.com. HO S00 LEE is a Research Staff Member in the Manu­ facturing Research 
Department at the IBM T. J. Watson Research Center. He received his Ph.D. in artificial intel­ligence 
from Northwestern University in 1985. His research interests include knowledge-based systems, search 
algorithms for scheduling and constraint satisfac­tion problems, and business process re-engineering. 
ANTHONY LEVAS is an Advisory Programmer in the Manufacturing Research Department at the IBM T. J. Watson 
Research Center, He received his M.S. degree in computer science from the University of Connecticut at 
Storrs in 1983. He has worked in the areas of speech per­ception and speech synthesis, robot task planning 
and simulation, sensor based smategies, and knowledge based modeling and simulation. His current research 
focus is in business process modeling and simulation. RAJA PkTRAKIAN is a Research Staff Member in the 
Manufacturing Research Department at the IBM T. J. Watson Research Center. He received his Ph.D. degree 
in industrial engineering and operations research from the University of California at Berkeley in 1991, 
His research interests me in business process modeling and simulation, supply chain management, job shop 
schedul­ing, production planning, and optimization. FLORA TSAI is a Senior Associate Programmer in the 
Manufacturing Research Department at the IBM T. J. Watson Research Center. She received a B.S. degree 
in Electrical Engineering from MIT in 1991, and a M.S. degree in Computer Science from Columbia University 
in 1992, She has previously worked on job shop schedul­ing, rule classification for database mining, 
and statistical analysis of randomly-generated data. Currently, she is working on business process modeling 
and analysis. BILL TULSKIE is Senior Engineer in the Manufactur­ing Research Department at the IBM T. 
J. Watson Research Center. He received a BSEE from Drexel Uni­versity. He was awarded an MS in Engineering 
and the title Moore Fellow in the Management of Technology from the University of Pennsylvania. He has 
worked in research and production engineering while at Litton Sys­tems, and in marketing and systems 
engineering at IBM. His research interests include business process modeling and simulation, supply chain 
management, and product life cycles and substitution dynamics.  
			
]]
##[[DATA:data/orbz_sec/An algorithmic approach to controlling search in three-dimensional image data.txt~|
  Fig, 9a. Only One Seed provided 
to Test Algorithm Fig. 9b. Plane Shown Nith Intermediate Results III III illll Ill l IIIllI Fig. 9c. 
Contours Found by Re-entrance Test. Fig. 9d. Oblique View Of Phantom Contours.   
			
]]
##[[DATA:data/orbz_sec/Analysis of reliable broadcast in local-area networks.txt|
 Adapter User Machine Fig. 1 Local area network S Source D Destination N~ Network 
Server Fig. 2 Queueing model to network to network server i server I i  , ~ Td ~ Td '~ T d T ~ T s 
' Ts I I I z ! mth I (m-l) st transmis~n.~, transmission to network to network to network server server 
server r f I I k I nodes receive i< broadcast successfully I I  Fig. 3 Successive transmission times 
(point-to-point) k 2 nodes receive broadcast successfully  Fig. 4 Successive transmission times (broadcast) 
7.5- 100 - 90- .......................  80- 7.0- ,,,,/ / 70 60 1 N=5 --5ms v d 1 ! ~s Vd1 - ffi 
5 ms 6.5 1 1 --m~ m5m S u d Ps l~d 50. ! --a " 50 ms T d -6 ms 40, 30, 6.0- , ......... , ......... 
, ......... , ......... , ................... . ......... , , ......... , ......... , ......... , ......... 
, ......... , ......... , ......... , 5 tO 15 20 25 30 35 5 10 15 20 25 30 35 LENGTH OF TIMEOUT INTERVRL 
LENGTH OF TIHEOUT INTERVAL LEGENDs LOSS --O. Ol ....... 0.04 ..... 0.06 LEGENOt LOSS --O. Ol ...... 0.04 
..... 0.08 Fig. 5 Throughput vs. timeout (point-to-point) Fig. 6 Throughput vs. timeout (broadcast) 
162 B.O-_1 I -5~ 8.0 v s v d 1 1 Ps ~d 1 1 ------10 ms 1 7.5 " 50 ms, Td " 6 ms Vs vd / 1 1 7.5 Ls 
, Ld t .01 ~s Pd 1 --" 50 ms a 7,0 0 T s ~ I0, T d " 6 ms 7.0 6,5 T H R 0 U 6,6 + U 6.0-6 G H P P 
U U T T 5.5 2 6.0 ..°. ............................................................... .o / 5.0- / 
/ 6.5,  4.5 5.0 ¸ 4.0 IL..'L .... ~...+ ..... , ......... IJL~..IL..I* ........ I ......... S ......... 
I , ......... , ......... , ..... ~..., ......... i 5 10 15 20 25 30 35 6 10 15 20 25 LENGTH OF TIREOUT 
]NTERVflL NUflBER OF OESTINRTIONS LEGENOz N 5 ....... 16 L£GENOJ ]fl -- 1 ¢ o o 2 1, RNRLTSIS 2. 6lflULRTION 
 Fig. 7 Throughput vs. timeout (broadcast) Fig. 8 Throughput vs. number of destinations %0- o o -.-..-.__.__.._ 
o 6.5 "1 = ]=lOins VS ~d T ! = ! =5n~ Ps ~d O U 6.0. 1 = 50ms 0 H P T s = ]0, T d = 6 ms U T ...................... 
 6.5, ¢ 6.0. ..... ~..., ......... , ......... , ......... , ......... , ......... , ......... , ........ 
, 0.00 0.01 0.02 0.05 0.04 0.05 0.06 0.07 0.08 LOSS PROBRIIILITT LEGENOI ID | ---~ 2 0 a o $  4, 4 
I. Lq~NRLYSI$ FOR N - S 2, RNFIL~'SZS FOR M -10 3. SIHULATION FOR M -6 4. $1#ULATION?0fl If . 10  
 Fig. 9 Throughput vs. loss probability 163  
			
]]
##[[DATA:data/orbz_sec/Answering complex SQL queries using automatic summary tables.txt|
               
			
]]
##[[DATA:data/orbz_sec/Anima II.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytic model of Web servers in distributed environments.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach for modeling dynamic analysis using ontologies.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animating direct manipulation interfaces.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing the error bounds of multipole-based treecodes.txt|
               
			
]]
##[[DATA:data/orbz_sec/Antialiasing of interlaced video animation.txt|
                   
]]
##[[DATA:data/orbz_sec/An alternative culminating experience for master's students in computer science.txt|
                   
]]
##[[DATA:data/orbz_sec/Analysis of replicated data algorithms on processor array architectures.txt|
 772 A Appendix: Experimental Results We present some results of implementing 
the his­togram and convolution algorithms on a Connection Machine in this appendix. For details of the 
imple­mentation, see [9]. A.1 Histogram Algorithm Timing of histogram alg (in seconds) for 8-bit grey 
level images Image No. of Repl data One copy size copies alg alg Using 16K processing elements 32X 32 
16 0.005 0.062 32X 32 32 0.002 0.062 32X 32 64 0.001 0.062 64X 64 4 0.024 0.087 64X 64 8 0.009 0.087 
32xii2 8 u 0.011 0.062 32x32 16 0.007 0.062 32x32 32 0.004 0.062 64X 64 2 0.046 0.086 64X 64 4 0.042 
0.086 64X 64 8 0.015 0.086 Table 1: Comparison of the histogram algorithms on the Connection Machine 
We implemented the single copy histogramming al­gorithm and the replicated data histogramming algo­rithm 
on the Connection Machine. Table 1 compares their performances. It may be noted that the best algorithm 
to compute histograms on the Connection Machine uses the capability of the machine to store the sum of 
the contending numbers in a concurrent write operation. Each PE writes a 1 to the node that holds the 
histogram value of its gray level value, with add as the combiner for the concurrent write operation. 
Though n2 PEs could attempt to write to the same location in the worst case, collision resolution done 
in hardware is fast. The comparison given in Table 1 is still relevant for a general hypercube architecture 
with no concurrent write capability. The virtual pro­cessor capability of the Connection Machine, in 
which each physical PE simulates multiple PEs, was used in the implement ation whenever the number of 
PEs re­quired was larger than what was physically available. The number of virtual PEs each physical 
PE is simu­lating is called the virtual processor ratio or VP ratio. The timings in the table have been 
adjusted taking VP ratio into account. A.2 Convolution Algorithm Timing of convolution (in seconds) 
for random image and kernel Image Kernel Repl data alg One copy Size Size Router I Mesh Alg I Using 
16K ~rocessin~ elements 32x~2 ] ix3 i.oo3 I 0.002 I 0.005 32x32 I 5x5 0.008 I 0.005 I 0.009 64X 64 3x3 
0.014 0.006 0.005 64X 64 5x5 0.023 0.013 0.024 64X 64 7x7 0.050 0.030 0.091 I 64x64 I 11x11 II 0.098 
I 0.076 I 0.367 64X 64 15X15 0.212 0.184 1.363 64X 64 21X21 0.400 0.480 5.355 Table 2: Comparison of 
the convolution algorithms on the Connection Machine Both convolution algorithms were implemented on 
the Connection Machine. Table 2 compares their per­formances. The third column of the table gives the 
time taken by the replicated data algorithm when the copies were shifted using the general router commu­nication 
instructions. The fourth column gives the timing of the replicated data algorithm when shifting was done 
using near-neighbor communications alone. In most cases, using near-neighbor communication is quicker 
on the Connection Machine. The last col­umn gives the timing of the single copy convolution algorithm. 
The VP ratio has been factored into the timings in the last column. The algorithms would be faster by 
the VP ratio factor, which]] is 128 for the last row, had the CM array been large enough. On the whole, 
the replicated data algorithm achieves im­ pressive speedup over the single copy version for image convolution 
operations. 
			
]]
##[[DATA:data/orbz_sec/An approach to modeling multi-material objects.txt|
                   
]]
##[[DATA:data/orbz_sec/An approach to integrating and creating flexible software environments supporting the design of complex systems.txt|
. AUTHOR BIOGRAPHY KIRSTIE L. BELLMAN 
is a senior scientist in the Computer Science and Technology Subdivision of The Aerospace Corporation. 
Dr. Bellman has over twenty-five years of academic, industr!y, and con­sulting experience in the development 
of both con­ventional computer models and artificial intelligence applications. Her published research 
spans a wide range of topics in the cognitive, neurophysiological, and information-processing sciences. 
Five years ago, she started the Vehicles project. 
			
]]
##[[DATA:data/orbz_sec/An approach to the introductory computer science course for non-majors.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of the impact of memory in distributed parallel processing systems.txt|
                  	
]]
##[[DATA:data/orbz_sec/An approach to the classification of domain models in support of analogical reuse.txt|
               
			
]]
##[[DATA:data/orbz_sec/An algorithm to compute the Minkowski sum outer-face of two simple polygons.txt|
                    ]]
##[[DATA:data/orbz_sec/Analysis of pointer rotation.txt|
             
 
			
]]
##[[DATA:data/orbz_sec/An analysis and simulation of an experimental Suez Canal traffic control system.txt|
                   
]]
##[[DATA:data/orbz_sec/An algorithm for goal-driven simulation.txt|
AUTHOR BIOGRAPHIES MICHEL PAGE is an Assistant Professor at the University Pierre Mendès France 
of Grenoble. He holds a Ph.D. in Computer Science from the University Pierre Mendès France of Grenoble. 
He works in the Sherpa Project at the INRIA (National French Institute of Research in Computer Science 
and Automation) Rhône-Alpes. His research interests include numerical simulation, semi-qualitative reasoning, 
object-based knowledge representation. JEROME GENSEL is an Assistant Professor at the University Pierre 
Mendès France of Grenoble. He holds a Ph.D. in Computer Science from the University Joseph Fourier of 
Grenoble. He works in the Sherpa Project at the INRIA (National French Institute of Research in Computer 
Science and Automation) Rhône-Alpes. His research interests include constraint satisfaction problems, 
numerical simulation, object-based knowledge representation. MAHFOUD BOUDIS holds a Ph.D. in Computer 
Science from the University Joseph Fourier of Grenoble. His research interests include simulation, graph 
theory and constraint satisfaction problems. 
			
]]
##[[DATA:data/orbz_sec/An approach to performance evaluation of software architectures.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of multiterm queries in a dynamic signature file organization.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach to computer personnel evaluation.txt|
 me m Paul D. Oyer is president of Oyer Professional Computer 
Services, Inc., a firm specializing in computer-oriented education and training. He has BS and MA degrees 
in education from Indiana University, and has held management positions in the computer field with IBM 
Corporation, Westinghouse, lIT Research Institute, and the Department of Defense. He has extensive consulting 
and teaching experience in the field. He is a past chairman of the New York chapter of the ACM.  
			
]]
##[[DATA:data/orbz_sec/An algorithm for shading of regions on vector display devices.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach for evaluating the performance efficiency of Ada compilers.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of Queueing Network Models with population size constraints and delayed blocked customers.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing microblogs with affinity propagation.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach to natural language for document retrieval.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of techniques to improve protocol processing latency.txt|
               
			
]]
##[[DATA:data/orbz_sec/An advanced classroom computing environment and its applications.txt|
                			
]]
##[[DATA:data/orbz_sec/Analysis of the split mask countermeasure for embedded systems.txt|
               
			
]]
##[[DATA:data/orbz_sec/An almost regenerative simulation of video teleconferencing traffic.txt|
AUTHOR BIOGRAPHIES DANIEL P. HEYMAN 
did his undergraduate work in industrial and electrical engineering at Rens­selaer Polyt ethnic Institute 
(196 O). He received an M.I.E. degree from Syracuse University (1962) and the Ph.D. in operations research 
from the University of California-Berkeley in 1966, and then joined Bell Laboratories. He transferred 
to Bellcore at the epoch of the AT&#38;T divestiture. His research areas are nu­merical analysis of stochastic 
processes, queueing the­ory, and performance models of data communications syst ems. DAVID M. COHEN did 
his undergraduate work in mathematics at Harvard University ( 1972). He received a Ph.D. in mathematics 
from the Mas­sachusetts Institute of Technology in 1976 and joined Bell Laboratories in 1981. He transferred 
to Bellcore at divestiture. His current research interests are in simulation and software engineering. 
* ml * * * 7 * * 0 * . t Cy I -2 I I I -1 0 1 Quantiles of Standard Normal Figure 2: QQ-plot of mu2 
Estimator I I 2 * / *  I I I I 1 I1 -2 -1 0 1 2 Quantiles of Standard Normal Figure 3: QQ-plot of mu3 
Estimator  
			
]]
##[[DATA:data/orbz_sec/Analyzing security protocols with secrecy types and logic programs.txt|
 APPENDIX  Function f for the completeness proof This appendix describes the construction of a 
function f on types that plays a role in the completeness proof, as ex­plained in the main body of the 
paper. In order to prove completeness, we consider a closed pro­cess P0, a name s, and a set of names 
S. We consider an instance of the general type system, and assume that this instance proves (by Theorem 
1) that P0 preserves the se­crecy of s from S. That is, we assume that, in this instance, there exists 
an environment E0 such that E0 f P0, E0 f s:T with T/. TPublic, and S = {a | E0 f a: T and T . TPublic}. 
Without loss of generality, we may assume that E0 contains only names. We .x a proof of E0 f P0 for the 
rest of this argument. Intuitively, a well-chosen environment for a subprocess P of P0 is an environment 
that can be used to type P in a standard proof that P0 is well-typed, using the type sys­tem associated 
with the protocol checker in section 7.2. A standard proof is one in which types introduced by the rule 
(Restriction) for (.a)Q are of the form a[Tc1,...,Tcn], where Tc1,...,Tcn are the types of the variables 
bound by inputs above (.a)Q in P0 s syntax tree. A(Tc1,...,Tcn)-well-chosen environment for P is simi­lar, 
except that the parameters (Tc1,...,Tcn) indicate which types should be chosen for the variables bound 
by inputs. Note that a (Tc1,...,Tcn)-well-chosen environment for P does not always exist, for example 
when the number of pa­rameters (Tc1,...,Tcn) does not correspond to the number of variables bound by 
inputs above P in P0. De.nition 2. Let Tc1,...,Tcn be closed patterns. A (Tc1,...,Tcn)-well-chosen environment 
for an occurrence of a subprocess of P0 is de.ned as follows: A ()-well-chosen environment for P0 is 
.0 .= {a . a[] | (a: T) . E0}. If Ec is a (Tc1,...,Tcn)-well-chosen environment for M(N).P, then Ec 
isa(Tc1,...,Tcn)-well-chosen envi­ronment for P.  If Ec is a (Tc1,...,Tcn)-well-chosen environment for 
M(x).P, then Ec[x..Tcn+1]isa(Tc1,...,Tcn,Tcn+1)­well-chosen environment for P.  If Ec isa(Tc1,...,Tcn)-well-chosen 
environment for P |Q, then Ec isa(Tc1,...,Tcn)-well-chosen environment for P and Q.  If Ec is a (Tc1,...,Tcn)-well-chosen 
environment for !P, then Ec isa(Tc1,...,Tcn)-well-chosen environment for P.  If Ec is a (Tc1,...,Tcn)-well-chosen 
environment for (.a)P, then Ec[a.c1,...,Tcnc1,...,Tcn)­  . a[T]] is a (T well-chosen environment for 
P. If Ec is a (Tc1,...,Tcn)-well-chosen environment for let x = g(M1,...,Mn) in P else Q, then Ec is 
a (Tc1,...,Tcn)-well-chosen environment for Q, and if in addition there exists an equation g(M1' ,...,Mn' 
)= M ' in def(g) and a substitution s such that for all i . {1,...,n}, sMi ' = Ec(Mi), then Ec[x .. sM 
' ]isa (Tc1,...,Tcn)-well-chosen environment for P. Finally, the function f is de.ned so that if a type 
Tc ap­pears in a standard proof that P0 is well-typed using the type system associated with the protocol 
checker in section 7.2, then f(Tc) appears in the corresponding place in the proof of E0 f P0 in the 
instance of the general type system under consideration. De.nition 3. The partial function f: Tc . T 
from types of the protocol checker to types of the instance of the general type system is de.ned by induction 
on the term Tc: f(f(Tc1,...,Tcn)) = Of (f(Tc1),...,f(Tcn)). (There­fore, f(f(Tc1,...,Tcn)) is unde.ned 
if Of (f(Tc1),..., f(Tcn)) is unde.ned.)  If E0 f a: T, then f(a[]) = T.  When a is bound by a restriction 
in P0, we de.ne f(a[Tc1,...,Tcn]) as follows. Without loss of gener­ality, we may assume that a is bound 
exactly once. Let P be the process such that (.a)P is a subprocess of P0. Let Ec bea(Tc1,...,Tcn)-well-chosen 
environment for (.a)P. Let E = f. Ec. Then f(a[Tc1,...,Tcn]) =  T ' where T ' is such that E,a: T ' 
f P is a judgment used to prove E0 f P0. There is at most one such judgment, so T ' is unique. Ifa (Tc1,...,Tcn)-well-chosen 
environment for (.a)P does not exist, or if no suitable judgment E,a: T ' f P appears in the proof of 
E0 f P0, then f(a[Tc1,...,Tcn]) is unde.ned. This de.nition is recursive, and we can check that it is 
well-founded using the following ordering. Names are or­dered by a<b if a is bound above b in P0,or a 
is free and b is bound in P0. The ordering on terms is then the lex­icographic ordering of pairs containing 
as .rst component the multiset of names that appear in the term and as sec­ond component the size of 
the term. In the .rst case of the de.nition of f, the .rst component is constant and the sec­ond one 
decreases. In the third case, the .rst component decreases: when de.ning f(a[Tc1,...,Tcn]), in the recur­sive 
calls used to compute f . Ec, the name a at the top of the term has disappeared, and the only names that 
have appeared due to the computation of the well-chosen envi­ronment are free names or names bound above 
a (therefore names smaller than a). 
			
]]
##[[DATA:data/orbz_sec/Anonymous opinion exchange over untrusted social networks.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of wide-area name server traffic.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animation for performance debugging of parallel computing systems.txt|
               
			
]]
##[[DATA:data/orbz_sec/Anonymity and accountability in self-organizing electronic communities.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing multivariate output.txt|
 AUTHOR BIOGRAPHY JOHN M. CHARNES is Associate 
Professor in the management science group of the School of Busi­ness at the University of Kansas in Lawrence. 
His re­search interests are in multivariate simulation output analysis and using simulation for process 
improve­ment. He is the current newsletter editor for the IN-FORMS College on Simulation. 
			
]]
##[[DATA:data/orbz_sec/An application of color graphics to the display of surface curvature.txt~|
 Computer Graphics APPENDIX Curvature Derivation The curvature 
K of a parametric surface ~(u,v) = (X(u,v) Y(u,v) Z(u,v)) is (see APPROACH): lim 2N .AS K = -- As+o 
I~1 ~ Expanding X(u,v) in a bivariate Taylor series, F Au2 7  AX = X u +× v + 1 iXuu x uv Xvvl i 
2- L Av2 J with similar expressions for AY and AZ (subscripts u, v denote differentiation with respect 
to u and v). In vector form, AS = (AX AY AZ)  IX uu Xuv Xv!l rut = LAu + ~'vAV + l /u ,uv ,vv I z 
z LAv~ .J L UU UV V Since N is perpendicular to U and Sv, N.S U = N'S = O, and V X X f Au2 7 N-AS = 
~ I (N x Ny N z) Yuv Y AuAv I UU UV VV zUU vv Z Z Av2 ,_,I L UU UV V = ~1 (N x Ny Nz) " (S'uu S uv Svv) 
AuAv I Av 2 _J Letting A : N-Suu, B : N.Suv and C = N.Svv, we have N.~S : 1 (AAu 2 + 2BAuAv + CAv 2) 
and since I~1 : I~Au + ~vAVl, AAu 2 + 2BAuAv + CAv 2 K(Au, Av) =  l~ul~u~ ÷ 2~u ~v~U~V ÷ I~vl2Av 
2 Volume 15, Number 3 August 1981 To see how K varies wlth Au and Av, we divide by Av 2 and substitute 
t = Au/Av. Letting E = 12' G = vlSI2' F = S -S v, we have 'u'IS- U g(t) : (At 2 + 2Bt + C)/(Et 2 
+ 2Ft + G) Recasting this as an extremum problem with the implicit function H(g(t), t) = O, we see that 
 H(g(t), t) = (A -gE)t 2 + 2(B -gF)t + (C -gG) Conditions for an extremum are H(g(t), t) = O, and aH/at 
= O. The second of these yields t = (gF -B)/(A -gE), which, when substituted into the first, gives 
 g2(F2 -EG) + g(AG -2FB + EC) + B 2 -AC = 0 Under this condition then, we have extrema. In effect, we 
do not care what g looks like as long as we can find values which produce roots. Recalling that the sum 
and product of the roots of a quadratic are -b/a and c/a, we have from the above equation, AG -2FB + 
EC K = a 2(EG -F) 2  AI~I 2 -2B~u " ~v + CI~ 12 2(EG -F) 2 AC -B K - g (EG -F) 2 Since EG- F2 = 
l~uI~ I~v12- %.Sv)~= l~u× ~vI2,  Al~v 12 - 2BSu- Sv + cl~ 12 K a AC -B K  g 1\ x\i2  Using Q 
= S x S instead of the unit normal N, U V  and letting (A' B' C') = Q" (Lu Suv Svv)' we obtain the 
computationally more convenient Computer Graphics Volume 15, Number 3 August 1981 A' I~I ~ -2B'~- ~ 
. c'l\l~ U V K  a 21~I 3 A' C' B' K - g I~1 ~ Letting b = ~Kg -K a = (K M -Km)/2, the maximum and 
minimum curvatures are K M : K a -b K :K +b m a   
			
]]
##[[DATA:data/orbz_sec/An analysis of gang scheduling for multiprogrammed parallel computing environments.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of decay-usage scheduling in multiprocessors.txt|
               
			
]]
##[[DATA:data/orbz_sec/An algebraic system for process structuring and interprocess communication.txt|
                   
]]
##[[DATA:data/orbz_sec/Animating wrinkles on clothes.txt|
 ISSN 0178­2789. A FORMULATION DETAILS In order to present a solution to equation 4 we .rst 
give the ex­ ''' plicit expressions for A(L,f(x, y)) and A ' (h, L ' ,f (x ,y )) re­spectively 2 2 
.f .f A(L,f(x, y))=1++dx dy (6) .x.y  and 2 2 .f'' ' ''' .f'' A (h, L ' ,f (x ,y ))=1+h2+h2dx dy 
.x'.y' (7) To evaluate the integral in equation 7, we perform a change of integration variables as 
follows x -1 x ' = T ' (8) yy By applying this change of variables to equation 7 (refer to equa­tion 
2 for a ' ,b ' ,d ' ), we obtain ' ''' A (h, L ' ,f (x ,y )) 2 ' . =1+ h2af .x 2 1/2 (9) .. 1 +h2b 
' +d ' fdx dy .x .ya 'd' '' ' =I(h,a ,b ,d ) dx dy  Now let us perform a series expansion of equation 
9 in the trans­formation parameters and the modulation factor. As far as the trans­formation parameters 
are concerned, we choose as expansion point the identity transformation and for the modulation factor 
we expand around h =1 ' ''' ' '' A (h, L ' ,f (x ,y ))=(I(h=1,a =1,b =0,d =1) .I ' .I ' +(a -1) + 
b .a' .b' .I ' .I +(d -1)+ (h - 1) .d ' .h + ... ) dx dy (10) In the following, we discard higher order 
terms in the expansion above. For small deformations around the identity transformation and h =1, a .rst 
order expansion represents a good approximation for the value of the surface area over a deformed triangle. 
Retaining terms up to .rst order in the series expansion and by plugging expression equation 10 into 
equation 4 we obtain A(L,f (x, y)) = C0 + C1(a ' -1) + C2b ' + C3(d ' -1) + C4(h-1) where C0 = I(1, 1, 
0, 1) dx dy .I C1 = dx dy .a' .I C2 = dx dy .b ' .I C3 = dx dy .d ' .I C4 = dx dy (11) .h We call these 
expansion coef.cients wrinkling coef.cients. C1,C2,C3,C4 relate changes in the parameters a ' ,b ' ,d 
' ,h to changes of the area of the wrinkle function on the triangle. By observing that C0 = A(L,f(x, 
y)) and solving equation 11 for the modulation factor we obtain 1 ' '' h =1- (C1(a -1) + C2b + C3(d -1)) 
(12) C4 Equation 12 represents the solution to equation 4 in the .rst or­ ''' ''' der approximation 
to A ' (h, L ' ,f (x ,y )), if f (x ,y ) is not con­stant.   
			
]]
##[[DATA:data/orbz_sec/An algorithm for counting maximum weighted independent sets and its applications.txt|
               
			
]]
##[[DATA:data/orbz_sec/AnnoDomini.txt|
               
			
]]
##[[DATA:data/orbz_sec/Anisotropic geometric diffusion in surface processing.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analytic performance model of disk arrays.txt|
               
			
]]
##[[DATA:data/orbz_sec/An application of perturbation analysis to a replacement problem in maintenance theory.txt|
 AUTHOR BIOGRAPHIES MICHAEL C. FU is an 
Assistant Professor of Man­agement Science &#38; Statistics in the College of Busi­ness and Management 
at the University of Maryland at College Park. He holds S.B. and S .M. degrees in electrical engineering 
and an S.B. degree in math­ematics from MIT (1985) and a Ph.D. in applied mathematics from Harvard University 
(1989). His research interests include stochastic derivative esti­mation and stochastic optimization, 
particularly with applications towards manufacturing systems and in­ventory control. He teaches courses 
in applied proba­bility, stochastic processes, discrete-event simulation, and operations management. 
JIAN-QIANG HU is an Assistant Professor in the Department of Manufacturing Engineering at Boston University. 
He holds a B.S. degree in applied math­ematics from Fudan University, China (1985), and M .S. and Ph.D. 
degrees in applied mathematics from Harvard University (1987, 1990). His research in­terests include 
modeling, sensitivity analysis, simu­lation, optimization, and control of discrete event stochastic systems 
and queueing networks with appli­cations to manufacturing systems and communication networks. He was 
awarded the Honorable Mention by the Operations Research Society of America (ORSA) in the 1991 George 
E. Nicholson Student Paper Com­petition. LEYUAN SHI is a Research Associate in the Insti­tute for Advanced 
Computer Studies at the Univer­sity of Maryland at College Park. She received a B.S. degree from Nanjing 
Normal University, China (1982) and a M.S. degree in applied mathematics from Ts­ inghua University, 
China (1985), and M .S. and Ph.D degrees in applied mathematics from Harvard Univer­ sit y (1990, 1992). 
Her research interests include mod­ eling, analysis and control of discrete event stochas­tic systems, 
particularly with the applications on de­sign and control of computer networks, multicom­puter systems 
and communication protocols. 
			
]]
##[[DATA:data/orbz_sec/An applicative compiler for a parallel machine.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytic antialiasing with prism splines.txt|
 Figure 6: Point sampled 200X200and 50X50test images, recon­structed 
with a cubic B-spline kernel.   Figure 8: Test model analytically .ltered with tensor product B­spline 
.lters, orders one through four.  
			
]]
##[[DATA:data/orbz_sec/An analysis of trends in productivity and cost drivers over years.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach to ranking and selection for multiple performance measures.txt|
 AUTHOR BIOGRAPHIES DOUGLAS J. MORRICE is an Associate 
Professor in the MSIS Department at The University of Texas at Austin. He received his undergraduate 
degree in Operations Research at Carleton University in Ottawa, Canada. He holds an M.S. and a Ph.D. 
in Operations Research and Industrial Engineering from Cornell University. Dr. Morrice has spent the 
last two years working on various projects at the Schlumberger Austin Product Center. His research interests 
include discrete event and qualitative simulation modeling and the statistical design and analysis of 
large scale simulation experiments. Dr. Morrice is a member INFORMS. He served as the Secretary for the 
INFORMS College on Simulation (1994-1996) and was Co-Editor of the Proceedings of the 1996 Winter Simulation 
Conference. JOHN BUTLER is a PhD candidate in the College of Business Administration at the University 
of Texas at Austin. His research interests include decision theory, decision support systems, and mathematical 
modeling. Currently he is involved in a research project designed to aide in the selection of a technology 
for the disposition of US surplus weapons grade plutonium. PETER W. MULLARKEY is a Research Scientist 
in the End-to-End Simulation Department at Schlumberger Austin Product Center - Research. He received 
his undergraduate degree in Civil Engineering at Worcester Polytechnic Institute in Worcester, Massachusetts. 
He holds a Ph.D. in Civil Engineering from Carnegie-Mellon University. Dr. Mullarkey has worked with 
Schlumberger doing research and development of knowledge-based decision support systems since 1985. Additionally, 
he worked on a two year project at Tandem Computers developing a state model-based diagnosis and maintenance 
system product. 725 
			
]]
##[[DATA:data/orbz_sec/An anthropometric face model using variational techniques.txt|

 Males Females Figure 5: Automatically generated face models (3 views of each)  Figure 6: A male a 
minute 
			
]]
##[[DATA:data/orbz_sec/An algorithm for lossless smoothing of MPEG video.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of gene expression profiles.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytical modelling of a hierarchical buffer for a data sharing environment.txt|
, =L=u~ T 9 . 0 n 2000 4000 woo Sooo 100CQ SHAREDBUFFERSIZE Figure 
1: Comparison of pure policies (Validation: NBp + BS = 10K,N = 16) g L n n I 11 1 it 2000 4000 acoo 
Booo Im SHAREDBUFFERSIZE Figure 2: Comparison of U, UM and UR policies (v.lidation:NBp + l?. = 10K,N 
= 16) t 0 1 Figure 5: (validation:BP 1 4 Effect = ! 1 1 I t ! s 12 16 NUM5EROF NOOES of dependency on 
the shared buffer hit lK, BS = 2K, 5K, access pattern: 80-20) g g + + --R­ fmww SM UM PCWXSM URPOUIM9U 
[~k -+.0 ,.. .... .. m w m n o 2000 4000 Oooo SHAREDBuFFERSIZE Figure 3: Comparison of U, (Validation: 
NBP + Bs UM and = 10K,N UR = policies 2) 0 1 Figure 6: (validation:l?p I 1 1 1 1 1 I 4 s 12 18 NUMBEROF 
NODES Effect of dependency on the shared buffer hit = IK, B.s = 2K, 5k, access pattern: uniform) g ~ 
* -0 + --u­~ ... . . u POI.)XSB-SKUu PcuYss-5K UR FWJG$SB-SK s3-2K : ,U,..J u SHAREDBUFFERSIZE Figure 
4: Effect of skewed access on the shared buffer (Validation: NBP + B.s = lo~, N = 2 M PO1icJ ) hit = 
r I 1 ,! I 0.4 0.8 1.2 UPWE wno Figure 7: Effect of the ratio (Analysis: BP= 125,Bs , 1 1.6 of update 
= 2K,5K,N , , 20 probability = 16) 167  
			
]]
##[[DATA:data/orbz_sec/An algorithm for structuring programs (Extended Abstract).txt|
 124  Appendix A fortran subroutine 
(from R. C. Singleton, Algorithm 347, an efficient algorithm for sorting with minimal storage, Comm. 
ACM 12,3 (1969), p. 186): subroutine sort(a,ii,jj) c sorts array a into increasing order c from a(ii) 
to a(jj) dimension a(1),iu(16),il(16) integer a,t,tt m=l i= ii j=jj 5 if (i .ge.j) goto 70 10 k=i ij 
: (j+i)/2 t : a(ij) if (a(i) .le. t) goto 20 a(ij) : a(i) a(i) = t t=a(ij) 20 l=j if (aQ) .ge. t) goto 
40 a(ij) = aCj) a(j) = t t = a(ij) if (a(i) .le. t) goto 40 a(ij) = a(i) a(i) = t t = a(ij) goto 40 
30 a(l) = a(k) a(k) = tt 40 1= 1--1 if (a(l) .gt. t) goto 40 tt = a(l) 50 k=k+l if (a(k) .It. t) goto 
50 if (k .le. 1) goto 30 if (l--i .le. j--k) goto 60 il(m) = i iu(m) = 1 i=k re=m+1 goto 80 60 il(m) 
= k iu(m)=j j=l re=m+1 goto 80 70 re:m--1 if(m.eq. 0) return i=il(m) j=iu(m) 80 if (j--i .ge. 11) goto 
10 if (i .eq. ii) goto 5 i=i--1 90 i=i+l if (i .eq. j) goto 70 t : a(i-I-1) if (a(i) .le. t) goto 90 
k:i 100 a(k+l) = a(k) k: k--1 if (t .it. a(k)) goto 100 a(k+l) : t goto 90 end The preceding subroutine 
as structured by struct into ratfor: subroutine sort(a,ii,jj) # sorts array a into increasing order # 
from a(ii) to a(jj) dimension a(1),iu(16),il(16) integer a,t,tt m=l i=ii J--ii repeat if (i <j) go 
to 10 repeat { m= m--1 if (m==O) return i = il(m) j ---- iu(m) while (j--i>=11) 10 k=i ij = (j+i)/2 
t = a(ij) if (a(i) > t) a(ij) = a(i) a(i) = t  t : a(i]) l=j if (a~j)< t) a(ij) = a(j) a(j) : t t= a(ij) 
if (a(i)>t) a(ij) = a(i) a(i) = t  t = a(ij) repeat != 1--1 if (a(l)<=t) { tt = a(l) repeat k = k+l 
if (a(k) >----t) break } if (k > 1) break a(l) : a(k) a(k)---- tt ) } if (l--i < :j-k) il(m) : k iu(m) 
--- j j----I m : m+l } else il(m) : i iu(m) = 1 i:k m : m+l ) if (i==ii) break i: i--1 repeat { i : i+1 
if (i==j) break t = a(i+l) if (a(i)>O { k=i repeat { a(k+l) = a(k) k=k-1 if (t >=a(k)) break a(k-I-1) 
: t ) ) return end 126  
			
]]
##[[DATA:data/orbz_sec/Anticipatory instruction scheduling.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of material handling equipment for Maritime Prepositioning Ships (MPS) instream offload.txt|
 AUTHOR BIOGRAPHIES JOHN D. SUMNER Captain of the U. 
S. Marine Corps, is the project/logistics officer for the Marine­Air-Ground-Task-Force (MAGTF) decision 
Support System II at the Marine Corps Logistics Base in Albany, Georgia. He hold a B.S. degree in Business 
Administration from University of Utah in 1986, and an M.S. degree in Logistics Management from the Naval 
Postgraduate School, Monterey, California in 1991. Captain Sumner worked closely with MPF program as 
a beach operation group commander in the First Marine Expeditionary Brigade. He is interested in PC­based 
simulation modeling to augment the military commander s leadership decision making. This paper is an 
extract of his master s thesis from the Naval Postgraduate School. KEEBOM KANG is on the faculty of the 
logistics group in the Administrative Sciences Department at the Naval Postgraduate School. He received 
his Ph.D. degree in Industrial Engineering from Purdue University, his M.S. in Operations Research from 
the University of Texas at Austin, and his B.S. in Industrial Engineering from Seoul National University. 
His research interests are in the areas of stochastic modeling, probabilistic and statistical aspects 
of computer simulation, and logistics applications. He teaches various logistics courses. He is a member 
of ORSA, TIMS, IIE, SCS, Sigma Xi, Omega Rho, and ADPA.  
			
]]
##[[DATA:data/orbz_sec/An algorithmic approach to controlling search in three-dimensional image data.txt|
  Fig, 9a. Only One Seed provided 
to Test Algorithm Fig. 9b. Plane Shown Nith Intermediate Results III III illll Ill l IIIllI Fig. 9c. 
Contours Found by Re-entrance Test. Fig. 9d. Oblique View Of Phantom Contours.   
			
]]
##[[DATA:data/orbz_sec/An application of color graphics to the display of surface curvature.txt|
APPENDIX Curvature Derivation The curvature 
K of a parametric surface ~(u,v) = (X(u,v) Y(u,v) Z(u,v)) is (see APPROACH): lim 2N .AS K = -- As+o 
I~1 ~ Expanding X(u,v) in a bivariate Taylor series, F Au2 7  AX = X u +× v + 1 iXuu x uv Xvvl i 
2- L Av2 J with similar expressions for AY and AZ (subscripts u, v denote differentiation with respect 
to u and v). In vector form, AS = (AX AY AZ)  IX uu Xuv Xv!l rut = LAu + ~'vAV + l /u ,uv ,vv I z 
z LAv~ .J L UU UV V Since N is perpendicular to U and Sv, N.S U = N'S = O, and V X X f Au2 7 N-AS = 
~ I (N x Ny N z) Yuv Y AuAv I UU UV VV zUU vv Z Z Av2 ,_,I L UU UV V = ~1 (N x Ny Nz) " (S'uu S uv Svv) 
AuAv I Av 2 _J Letting A : N-Suu, B : N.Suv and C = N.Svv, we have N.~S : 1 (AAu 2 + 2BAuAv + CAv 2) 
and since I~1 : I~Au + ~vAVl, AAu 2 + 2BAuAv + CAv 2 K(Au, Av) =  l~ul~u~ ÷ 2~u ~v~U~V ÷ I~vl2Av 
2 Volume 15, Number 3 August 1981 To see how K varies wlth Au and Av, we divide by Av 2 and substitute 
t = Au/Av. Letting E = 12' G = vlSI2' F = S -S v, we have 'u'IS- U g(t) : (At 2 + 2Bt + C)/(Et 2 
+ 2Ft + G) Recasting this as an extremum problem with the implicit function H(g(t), t) = O, we see that 
 H(g(t), t) = (A -gE)t 2 + 2(B -gF)t + (C -gG) Conditions for an extremum are H(g(t), t) = O, and aH/at 
= O. The second of these yields t = (gF -B)/(A -gE), which, when substituted into the first, gives 
 g2(F2 -EG) + g(AG -2FB + EC) + B 2 -AC = 0 Under this condition then, we have extrema. In effect, we 
do not care what g looks like as long as we can find values which produce roots. Recalling that the sum 
and product of the roots of a quadratic are -b/a and c/a, we have from the above equation, AG -2FB + 
EC K = a 2(EG -F) 2  AI~I 2 -2B~u " ~v + CI~ 12 2(EG -F) 2 AC -B K - g (EG -F) 2 Since EG- F2 = 
l~uI~ I~v12- %.Sv)~= l~u× ~vI2,  Al~v 12 - 2BSu- Sv + cl~ 12 K a AC -B K  g 1\ x\i2  Using Q 
= S x S instead of the unit normal N, U V  and letting (A' B' C') = Q" (Lu Suv Svv)' we obtain the 
computationally more convenient Computer Graphics Volume 15, Number 3 August 1981 A' I~I ~ -2B'~- ~ 
. c'l\l~ U V K  a 21~I 3 A' C' B' K - g I~1 ~ Letting b = ~Kg -K a = (K M -Km)/2, the maximum and 
minimum curvatures are K M : K a -b K :K +b m a   
			
]]
##[[DATA:data/orbz_sec/An adversarial model for distributed dynamic load balancing.txt|
      1991. 
  
			
]]
##[[DATA:data/orbz_sec/An analytic approach to significance assessment in local sequence alignment with gaps.txt|
 Appendix A" Island High Score Distribution 
In this appendix we derive heuristically the Poisson distri- bution of maximal island scores. We first 
treat the gapless case [12] and then generalize the derivation to alignment with gaps. In the gapless 
case the distribution of large is- lands of length L measured from their begmmng to their peak point 
at height a is by definition given by L p(alL) = (5(a -Z s(z))) (29) Using the Fourier representation 
of the delta function and the statistical independence of the s(i) this yields 1/ p(a[L) = ~ exp(-ika)(exp(zks))Ldk 
(30) For a given peak score a this probablhty is maximal at a certain length Lo(cr). It is reasonable 
to assume that the distribution of island lengths at a given peak score a is suf- ficiently peaked around 
the length Lo(a) at which the prob- ability is maximized. Thus, the probabihty of finding an roland with 
peak score a with any length as dominated by the probability of finding an island of length Lo(a). If 
we further assume that this length is proportional to the peak score, 1 e , Lo(a) = a-lo ", we get c~--lG 
p(a) ... / exp(-zka)(exp(,ks)) dk (31) For large a, Eq (31) can be evaluated via the method of steepest 
descent as p(a) ,~ exp(-Aa) w]th A = ,k* ((~) - log[(exp(,k* ((~)s))]/a (32) The saddle point k* ((~) 
as given by the saddle point equatmn (s exp(ik* ((~)s)) = 1. (33) (exp( ik* ( a )s ) )c~ The slope ct 
of a typical island is so far unknown. It is fixed by the requirement that it maximizes the probabihty 
to find an island of the given peak score a. Thus, we mimmize Eq. (32) with respect to (~ and get together 
with Eq. (33) (exp(~k* (c~*)s)) = 1. Inserting this into Eq. (32) yields con- dltion (5). Additionally 
we get from Eq. (33) the typical slope o~* of an mlaad as 0¢* --- (s exp(As)). It is related to the relative 
entropy H of the scoring system by H = A(s exp(As)) = A~* (34) which is the crucial quantity for the 
correction of the se-quence length dependence of the statistical significance [2] For alignment with 
gaps, the high score of an island of length L from its beginning to its peak point is not just the sum 
of local scores any more. Instead, it is given by the final score h(0, L) of a global alignment of two 
sequences of length L on a triangular lattice as the one shown in Fig. 3(a) taking into account all possible 
insertions of gaps. We can still use the Fourier transformation to get = ~--~[ e-~k~(e'~h(°,L))dk. (35) 
p(alL) = (5(a -h(O, L))) l In App. C we will see, that (exp(),h(0, L))) is for large L the L'th power 
of the eigenvalue of some matrix. We thus define ~(A) by (exp[Ah(0, L)]) = ~L(x) and again assume a linear 
slope cr of the islands where the trmngular shape of Fig. 3(a) with only L/2 matches or mismatches at 
the central line r = 0 makes the definition a --(~Lo(a)/2 the most natural defimtion for c~. Eq. (35) 
then becomes p(a) ~ / exp{[-ik + 2t~ -1 log'p(ik)la}dk (36) Applying as in the gapless case the method 
of steepest de- scent and maximizing with respect to the slope of the island (~ ymlds Eq. (13). Moreover 
it gives the typical slope of an roland as t~ = _ ~(A) = (h(0, L) exp[Ah(0, L)])) (37) " ~(~) L Appendix 
B: Expression of the score dynamics in terms of the bond variables In this appendix we will derive the 
evolutmn equations (17) and (18) from the recursion equation (10) of the original global alignment algorithm 
To this end we apply Eq. (10) to the definition of n(r, t), where we assume by convention that r + t 
is even as in Fig. 4(a). We get n(r, t) = lth(r+l, t)-h(r, t+l)+~+so] = -~[h(r+l,t)+8+so- max{h(r, t-1)+so-71(r, 
t)A, h(r=l=l, t)-(i}] = l[h(r+l,t)-h(r,t-1)+~- -max{-r/(r, t)A, h(r :t: 1, t) -h(r, t-l) -so -(i}] = 
n(r, t- 1)+min{~/(r, t), n(r- 1, t- 1), nma~-n(r, t- 1)} The equation for n(r-1,t) follows completely 
analogously and with the definitmn Eq (18) this yields Eq. (17). In a similar way we can express the 
quantity (e;~h(0'N))0 in terms of the variables n(r, t). To achmve this, we first define for any "time" 
t the average score 1 w-1 h 2k h(t) =f~-W)-~k=°x [ ( ,t-1)+h(2k+l,t)] t even (38)(2~ Ew£1[h(2k, t)Wh(2k+l,t-1)] 
t odd Because of the translational mvariance of the system m the spatial (r) &#38;rection we get (exp[Ah(0, 
N)])o = (exp[Ah(N)])o. (39) Thus, we can restrict ourselves to calculating the large N behavior of the 
latter quantity. The change m the average score h(t) is given by h(t + 1) - h(t) = (40) = ~1 )-~w=~lth(2k, 
t+l)_h(2k, t_l) ] t even [,~-~ ~_,7_~lth(2k+l,t+l)-h(2k+l,t-1)] t odd. The local score differences in 
this equation can for even r + t be expressed as h(r, t + 1) - h(r, t -1) = so - j(r, t)A (41) by a calculation 
analogous to the one used at the beginning of this appendix to obtain n(r, t) Inserting this into Eq. 
(40) yields -~(t+l)_-~(t)=so A ~W_-olj(2k,*) teven (42) 2 2W [)'~w__~13(2k+l,t ) t odd. Combining Eqs. 
(39) and (42) finally yields N--1 x ~ (~(t+l)-~(t)) (eXh(°'N))0= (e~(N))0 = (e t=o )o (43) N/2 W-- 1 
--~ E E (J(2k+1,21--1)+j(2k,21)) = e),SoN/2(e t=l ~=o )0 = e~oN/2(e-~J)o ' with J as defined in Eq. (21). 
 Appendix C: An eigenvalue equation In this appendm we will reformulate the calculation of the generating 
function (exp[wJ])o as an elgenvalue problem We start from the defimtion N/2W--1 (exp[wJl)° = (H H e~frJ(2k+l'2l-1)e~rJ(2k'21))O 
(44) l=l k=O Since, the values of the variables n(r, t) must be integers between 0 and nmax at any time, 
we do not change the expectation value, if we introduce ones of the form 2W--1 1--Z II .... ,o--- Z {n~.to}~{o, 
,nm,,,,}2Wr=0 {n~.t0}e{0,,nm~,,}2W at each fixed t~me t This ymlds (exp[wJ])0--E "'" E Rw(N'{nmt}) (45) 
{~r,O} {r~e,N } w~th 2W--1 N/2 Rw(N, {n~,t}) -----(H 5~(~,o) .... 0 II Dw({nmt}' 2/-1)x r=0 /=1 ×(1-I~ 
,¢~+1,~'-I Dw({n~,t},21) 1 e :y-~'(zk'~ o \ k=0 / \ k=0 / Once a configuration n(r, t) at each t~me step 
is fixed, the expectation value can be factorized into the parts which con- taln only a single random 
variable y(r, t) 2W--1 N/2W--1 r=0 l=l k=O )~£ - ~-"~r3 (2k+1, 21-1 ) on(2k+l,2l_2),n2k+l,2l_ 2 ¢:.~" 
X X Sn( 2k,21--1),nT 2k,21--15n( 2k,21-1),n2k + l,21_ l )0 X X H (6n(2k--1'21--1)'n2'~-1,21-1 s: un( 
2k,21--1),n2k,2~_ l ~'~3(2k,21) k=0 5n( 2k-- l,21),n2k_l,21 6n( 2k,21),n21~+ l,2z )0 X1. Inserting this 
into Eq (45) we can interpret the summation over the possible configurations of the n(r, t) at each time 
step as the summation of inner indices in a matrix multipli- ll2W-1 cation. In this language the first 
term , ,~=o 8~(~,0),~,o is a vector on the (nma~ + 1) 2w dimensional vector space in- dexed by all possible 
configurations. This vector has exactly one non vanishing entry at the configuration which is cho- sen 
as the initial configuration at t = 0 Th~s non vanishing entry is one and we call this vector [¢o). The 
factor of one which we added for the sake of clarity also plays the role of a vector the entries of which 
are all one It stands for the summation over all possible final configurations at t = N and we call this 
vector (¢1{ All the other factors represent matrices They can be written as tensor products of the (nm~x 
+ 1) 2 dimensional matrix TI (w/W) which describes an elementary process as given by Eqs (17) and (18). 
We can read off ~ts elements to be (T1 (w/W))(~,~:),(~ ,.~) (w) - , , ~v~(~,t) (5:~(~- __ 1 ,~-- 1),R 
1 5n(r,t -- I),n 2 e 5~(r - 1 ,t),R1 5~(r, t ) ,n2 )0- Note that the disorder average for each of these 
matrix el- ements is only an average over the single random variable r/(r,t). The matrix elements can 
thus be rewritten m the form given in Eq. (22). Since the lattme of width 2W is at each time step decom- 
posed into W of the budding blocks described by T1 (w/W), the total system is described by the matrix 
W even @ Tw (w) -- Tw(w) --T1(w/W) (46) k=l If Tw (w) describes the time evolutmn at even time steps, 
we can according to Fig. 4(c) generate the time evolution on odd time steps by shifting all variables 
to the right, applying the dynamics of even time steps and then shifting all variables back to the left. 
With the translation matrix C defined in the main text this can be written as T~-d(w) = CTw(w)C -1 The 
structure of the latrine as depmted by Fig 4(c), finally leads to (exp[wJ])o = (¢11 (T~en (w)T~4~d (w)) 
N/2 I¢0 ) (47) = (¢ll(Tw(w)CTw(w)C-')g/21¢o) In the hmit of large N this obviously becomes Eq. (23) of 
the main text where p~ (w) is the eigenvalue of the matrix Tw(w)CTw(w)C -1 with the largest real part 
Since this matrix has no negative entries and is (restricted to the sector defined by condition (19)) 
for non-pathologmal chomes of the scoring matrix irreducible, the largest eigenvalue of this matrix is 
guaranteed to be non degenerate, real, and its eigenvector can be chosen without negative entrms by the 
Perron Frobenius theorem. Due to the lattice symmetry, the eigenvector I¢) for the largest ogenvalue 
of Tw(w)CTw(w)C -1 should be transla- tionally invariant, i.e., C21~b) = I~) should hold. We can thus 
restrict the search for the largest eigenvalue to the subspace C -- {1¢)1C~{¢) = I¢)} (48) of all translatlonally 
invariant eigenvectors On this sub- space by defimtion C = C -1 so that instead of looking for the largest 
eigenvalue p~(w) of Tw(w)CTw(w)C -l we can also look for the largest eigenvalue pw(w) of Tw(w)C on this 
subspace. Additionally Tw(w)C has to be restrmted onto the subspace of valid configurations as defined 
by con- ditmn (19). These reductions in the size and complemty of the matrices make an explicit calculation 
of pw (w) possible Appendix D: Calculating the largest eigenvalue For small W the largest eigenvalue 
pw(w) of Tw(w)C re-stricted to the subspace of valid translationally mvanant configurations as defined 
by condition (19) and Eq (48) can be calculated using computer algebra Although the matrix Tw (w) depends 
on e ~/2W the largest eigenvalue of Tw (w)C only contmn terms of the form e ~/2. Thin 1s a consequence 
of the translational invarlance of the lattice. In order to reveal the underlymg structure of the largest 
elgenvalues pw (w) for &#38;fferent W it turns out to be very useful to expand them m powers of e ~/~. 
We get W=I "pi(w) = x/~+O(e -~) W=2 p2(w) = vrp-(p-1)e~ +O((e~) 2) w=3 p~(~,) = v'~-(p-1)e~ +(v-1)v~(e-~)~ 
+O((e~)~) W=4 p4(w) = x/p-(p-1)e~ +(p-1)x/p(e~) 2 _{p_ 1) x/~e (e ~ )3 + O((e ~ )a), where the O((e~/2) 
k) terms denote terms of the given or- der with prefactors which are different for different W We can 
see, that the coefficients up to order (e~/2) w-1 remain unchanged upon increasing W and that they moreover 
con- stltute the beginning of a simple geometrm serms We can thus extrapolate this behavior to arbitrary 
W by assuming that thin pattern holds for arbitrary orders Resumming the geometric series then yields 
Eq (27).   
			
]]
##[[DATA:data/orbz_sec/An adaptive fuzzy threshold scheme for high performance shared-memory switches.txt|
               
			
]]
##[[DATA:data/orbz_sec/Ancillary effects of simulation.txt|
  AUTHOR BIOGRAPHIES MATT HICKIE is a graduate 
student in the course of master program of Industrial Engineering at Arizona State University. He is 
working for Motorola at Chandler, Arizona. His research interests include optimization and scheduling 
on semiconductor manufacturing system. JOHN W. FOWLER is an Assistant Professor of Industrial Engineering 
at Arizona State University. He holds a Ph.D. from Texas A&#38;M University. His research interests include 
manufacturing systems analysis, discrete event simulation, and applied operations research.  
			
]]
##[[DATA:data/orbz_sec/Animation on a satellite graphics system.txt|
                   
]]
##[[DATA:data/orbz_sec/An agent-based flexible routing manufacturing control simulation system.txt|
 AUTHOR BIOGRAPHIES 
GRACE Y. LIN is working in the Manufacturing Research Department of IBM T.J. Watson Research Center. 
She Received her Ph.D. degree in Industrial Engineering from Purdue University in 1993. Her re­search 
interests include Production Planning, Sched­uling, and Control, Computer Integrated Manufac­turing, 
and Supply Chain Management. She was one of the recipients of the 1994 IIE Doctoral Dissertation Award. 
Her publications have appeared in the Jour­nal of Flexible Manufacturing Systems, IIE Transac­tions, 
and some major conference proceedings. She is a member of IIE, ORSA, and TIMS. JAMES J. S OLBERG is the 
Director of the Engi­neering Research Center for Intelligent Manufactur­ing Systems and Ransburg Professor 
of Manufactur­ing and Industrial Engineering at Purdue University in West Lafayette, Indiana. He received 
his degrees from Harvard and The University of Michigan. In addition to several teaching awards, Dr. 
Solberg won the Book of the Year Award in 1977 and the David F. Baker Distinguished Research Award from 
the In­stitute of Industrial Engineers in 1982. He is member of the National Academy of Engineering. 
As direc­tor of the Engineering Research Center for Intelligent Manufacturing Systems since its formation 
in 1985, Dr. Solberg manages a cross-disciplinary program in research, education, and t ethnology transfer 
involv­ing some 60 companies, 40 professors and 200 stu­dents.  
			
]]
##[[DATA:data/orbz_sec/Analyzing the impact of events in an online music community.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytical models of combining Banyan networks.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animating soft substances with implicit surfaces.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animation of dynamic legged locomotion.txt|
 9 A ~~e~~dix: Physical Parameters 
of IV? Link Mass Moment of Link length center M asS Inertia (m) (m) (kg) (kg -m ) Biped trunk 23.1 
[.17 .17 ,30] upper leg .20 .095 1,4 [.018 .017 .0014] lower leg .63 , 2p .64 [.02 .02 .00018] Hip location 
wrt trunk center of mass: .c = 0.0, ?J = +0.072, z = 0.0 Quadruped trunk 10.0 [.54 2.35 2.39] upper 
leg .41 .2 1.5 [.043 .043 o] lower leg ,4 .2 1.0 [.0035 .0035 0] Hip location wrt trunk center of mass: 
.r = +0.39, y = +0.12, .2 = 0.0 Kangaroo trunk 3.67 .034 thigh .13 .064 1.62 .0039 shin .26 .105 .60 
.0033 foot .174 .14 .00038 .082 tail 1 .166 .079 ,24 .00058 tai12 .166 .071 .14 .00033 t ai13 .166 .076 
.069 .00016 head .13 .04, .04 .33 .00046 Hip location wrt trunk mass center: [-.11 0] Head location 
wrt trunk mass center: [.21 O] Tail location wrt trunk mass center: [.2 O] Table 3: Physical parameters 
of models used in anima­tions. Link lengths are from proximal joint to distal joint. Mass centers are 
distances from the proximal joint of a link to the mass center. Moments of inertia are about the mass 
center of the link. The diagonal of the moment of inertia tensor is given.  
			
]]
##[[DATA:data/orbz_sec/An analysis of dag-consistent distributed shared-memory algorithms.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytic solution of an integrated performance model of a computer communication network with window flow control.txt|
                  	
]]
##[[DATA:data/orbz_sec/An analysis of diffusive load-balancing.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of link level protocols for error prone links.txt|
                  	
]]
##[[DATA:data/orbz_sec/Analyzing human gait patterns for malfunction detection.txt|
                   
]]
##[[DATA:data/orbz_sec/An agent exploration in unknown undirected graphs with whiteboards.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of the full alpha-beta pruning algorithm.txt|
                    ]]
##[[DATA:data/orbz_sec/An analytic model of hierarchical mass storage systems with network-attached storage devices.txt|
                			
]]
##[[DATA:data/orbz_sec/Analysis of multilevel graph partitioning.txt|
. Bibliographical Sketch of Vipin Kumar Vipin Kumar received 
the B.E. degree in electronics &#38; communication engineering from University of Roorkee, India, in 
1977; the M.E. degree in electronics engi­neering from Philips International Institute, Eindhoven, Netherlands, 
in 1979; and the Ph.D. degree in computer science from University of Maryland, College Park, in 1982. 
He is currently a Professor of Computer Science at the University of Minnesota. His current research 
interests include scalable parallel computing and arti.cial intelligence. He is author of over 80 research 
articles on the above top­ics, and is a coauthor of a text book Introduction to Parallel Computing" (Publ. 
Benjamin Cummings/Addison Wesley, 1994). Kumar has chaired many workshops and served on the program committee 
of many conferences in parallel processing. He is Vice Chair for Applications Area for the 9th International 
Parallel Processing Symposium. Kumar serves on the editorial boards of IEEE Parallel and Distributed 
Technology, IEEE Transactions of Data and Knowledge Engineering, and the Jour­nal of Parallel and Distributed 
Computing. http://www.cs.umn.edu/ kumar. Copyright &#38;#169; 1995 by the Association for Computing Machinery, 
Inc. (ACM). Permission to make digital or hard copies of part or all of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that new copies bear this notice and the full citation on the first page. Copyrights for 
components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. 
To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific 
permission and/or a fee. Request permissions from Publications Dept, ACM Inc., via fax at +1 (212) 869-0481, 
or via email at permissions@acm.org.  
			
]]
##[[DATA:data/orbz_sec/An approach to detecting changes in the factors affecting the performance of computer systems.txt|
                   
]]
##[[DATA:data/orbz_sec/Analysis of superposition of streams into a cache buffer.txt|
               
			
]]
##[[DATA:data/orbz_sec/Another nail to the coffin of faceted controlled-vocabulary component classification and retrieval.txt|
                   
]]
##[[DATA:data/orbz_sec/An algebraic method to compute a shortest path of local flips between two tilings.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing communication latency using the Nectar communication processor.txt|
               
			
]]
##[[DATA:data/orbz_sec/An algorithm for improving graph partitions.txt|
                   
]]
##[[DATA:data/orbz_sec/An application of software science to the quantitative measurement of code quality.txt|
 ACKNOWLEDGEMENTS No part of this research would have been 
possible without the support of Dr. Gerry Howe of IBM's Industry Application Development Center in Atlanta. 
Dr. Howe was responsible for initiating the steps which led to the existance of this research. In addition, 
he provided me with a tremendous amount of guidance as well as a substantial contribution in the development 
of the research methodology. His creative support spawned many of the ideas used in this work. The author 
also wishes to thank and acknowledge Sandra Hartman of IBM's Palo Alto location. Ms. Hartman has developed 
a very proficient tool which allowed this research to jump many steps. Her knowledge about software science 
metrics proved to be an invaluable asset to the progress of this research. The author also acknowledges 
the contributions that the following people or organizations made to this research: Emory University, 
Bill Frey, Allen Gresham, Bonnie Johnson, A. R. Jones, IBM's Atlanta Application Development Center, 
Dianne Quammen, Richard Quammen, Dean Rau, Lynn Silverman and Dr. Frank Tsui.  
			
]]
##[[DATA:data/orbz_sec/An analytical comparison of optimization problem generation methodologies.txt|
  AUTHOR BIOGRAPHY RAYMOND R. HILL is an Assistant Professor of Opera­tions Research 
in the Department of Operational Sciences at the Air Force Institute of Technology. His research interests 
include modeling and simulation, applications of optimization, and military applications of modeling. 
He holds a Ph.D. from The Ohio State University. 
			
]]
##[[DATA:data/orbz_sec/Animating rotation with quaternion curves.txt|
  Appendix I--Conversions L1 Quatcrnion to matrix 
Using the restriction that w2-t-x2-Fy2-t-z2= 1 for u quaternion q = [w,(x,y,z)], the formula for the 
corresponding matrix is 1--2y2--2z 2 2xy+2wz 2xz--2wy ] M = 2xy--2wz 1--2x2--2z 2 2yz+2wx ]. [ 2xz+2wy 
2yz--2wx 1--2x2--2y 2] If the quaternion does not have unit m~gnitude, an additional 4 multiplies and 
divides, 3 adds, and a square root will normalize it. (For the matrix conversion, the square root can 
be avoided in favor of divides if desirable.) Now we can obtain the operation count for creating the 
matrix. Most terms of the entries are a product of two factors, one of which is doubled. So we proceed 
as follows. First double x, y, and z, and form their products with w, x, y, and z. That will take 3 adds 
and 9 multiplies. Then form the sum for each of the 9 entries using 1 add each, plus an extra add for 
each of the 3 diagonal elements, for a total of 12 adds. Thus 9 multiplies and 15 adds suffice to convert 
a unit quaternion to a matrix. L2 Matrix to quaternion An efficient way to determine quaternion components 
w, x, y, z from a matrix is to use linear combinations of the entries Mra,~. Notice that the diagonal 
entries are formed from the squares of the quaternion components, while off-diagonal entries are the 
sum of a symmetric and a skew-symmetric part. Thus linear combinations of the diagonal entries will isolate 
squares of components; sums and differences of opposite off-diagonal entries will isolate products among 
x, y, and z and products with w. Using off-diagonals risks dividing by a component that may be zero, 
or within ¢ (the machine precision) of zero. However we can avoid that pitfall, and easily compute all 
components as follows. w 2 ~ 1/4 (1 + Mll + M22 + M33) w2>e? TRUE FALSE w=O X 2 -- --1/2 (M22 + 2~'/33 
) x2>c? Z = (MI2 --M21 ) / 4t.V TRUE FALSE !, '2 = 1/2 (1 --M~) z ~ M m / 2:~ y2>c? TRUE FALSE z ~ M~3 
/ 2y z=l No more than one square root, three divides, and a few adds and binary scales are required 
for any conversion. L8 Euler angles to quaternion There are twelve possible axis conventions for Euler 
angles. The one used here is roll, pitch, and yaw, as used in aeronautics. A general rotation is obtained 
by first yawing around the z axis by an angle of ¢, then pitching around the y axis by 0, and finally 
rolling around the x axis by ¢. Using the way quaternion components describe a rotation, we first obtain 
a quaternion for each simple rotation. qrott = [cos@,(sin-~,O,O)] qpitch '~ [cos~,(O,sin~,O)] q~aw = 
[c°s 2~,(O,O,sin 2~)] Multlplying these together in the right order gives the desired quaternion q --qyaw 
qpitch qroll, with components = cos --¢ eos --0 cos --¢ + sin -C-sln--0sin 2 2 2 2 2 2 = si.-cos --0cos 
--¢ --cos -C-sin--0sin--¢ 2 2 2 2 2 2  y = cos sin £¢os + sin -C-cos sin--¢ 2 2 2 2 2 2  z = cos -.f-cos 
2-sin-¢ -sin -C-sin £eos £ 2 2 2 2 2 2 1.4 Euler angles to matrix Combining the results of the previous 
two conversions gives M = cos 8cos ¢ cos 0sin ¢ --sin 0 / sin ~bsin 8cos C--cos ~sin ¢ sin ~bsin 0sin 
¢+cos ¢cos 8 cos 0sin ~], cos Csin 0cos ¢q.-sin Csin ¢ cos ~sin 0sin ¢--sln ¢cos ¢ cos 0cos ~J where 
~b, 0, and ¢ are the angles of roll, pitch, and yaw, respe ctively.  1.5 Matrix to Euler angles While 
converting a matrix to a unit quaternion only involves the sign ambiguity of square roots, converting 
to Euler angles involves inverse trigonometric functions, as we con only directly determine the sin's 
and cos's of the angles. Some convention, such as principle angles, must be adopted. However interpolation 
paths will vary greatly, depending on choice of angles. Setting that problem aside, here's a way to extract 
the sin's and cos's. Looking at the previous equation, sin0 can be read off directly as --M13. Use the 
trigonometric identity cos 0 = ::t=%~"~"~0 to compute cos @ to within a sign, which is the best we can 
do. Assuming cos0 is not zero, obtain the sin's and cos's of the other angles from cosO = sine = M23/cos 
cos~b = Ma3/cos/~ sine = Ml~ /cos ~os¢ = Mll/cose If cos t? is zero, then we must avoid dividing by zero. 
It also becomes impossible to distinguish roll from yaw. Adopting the convention that the yaw angle ¢ 
is 0 allows sin ¢ = --M32 cos ¢ = M22 sine = 0 cos¢ = 1 From these values a two argument tan -1 will 
give angles between --Tr and +Tr, or 0 and 275 or some other conventional range; take your pick. (For 
a faster conversion, just compute, say, sin -1 and check the sign of the cosine term with respect to 
cos6~.) Because of the uncertainties of square roots, inverse trigonometric functions, and yaw-roll separation, 
matrix to Euler angle conversion is inherently very ill-defined. 1.6 Quaternion to Euler angles Use the 
most straight-forward approach: convert the quaternion to a matrix, then the matrix to Euler angles. 
Of course it is unnecessary to compute matrix elements that are never used. This conversion is also unavoidably 
ill-defined, as quaternions contain no more information about angles than matrices do.  
			
]]
##[[DATA:data/orbz_sec/An analysis of perspectives in interactive settings.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animation, visualization, and interaction in CS 1 assignments.txt|
               
			
]]
##[[DATA:data/orbz/An introductory course in the applications of computer technology in the health sciences.txt|
               
			
]]
##[[DATA:data/orbz/An interpreter generator using tree pattern matching.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented environment for fast simulation using compiler techniques.txt|
AUTHOR 
BIOGRAPHIES YIQING HUANG is a Ph.D candidate in the Computer Science Department and conducts research 
at the Center for Reliable and High Performance Computing at the University of Illinois at Urbana-Champaign. 
She received a B.S. degree in Computer Science from Tsinghua University, China and an M.S. degree in 
Computer Science from State University of New York at Stony Brook. RAVISHANKAR K. IYER holds a joint 
appointment as Professor in the Departments of Electrical and Com­puter Engineering, Computer Science, 
and the Coordinated Science Laboratory at the University of Illinois at Urbana-Champaign. He is also 
Co-Director of the Center for Reliable and High-Performance Computing. Professor Iyer s research interests 
are in the area of reliable comput­ing, measurement and evaluation, and automated design. Prof. Iyer 
is an IEEE Computer Society Distinguished Visitor, an Associate Fellow of the American Institute for 
Aeronautics and Astronautics (AIAA), and a Fellow of the IEEE. In 1991, he received the Senior Humboldt 
Foundation Award for excellence in research and teaching. In 1993, he received the AIAA Information Systems 
Award and Medal for fundamental and pioneering contributions towards the design, evaluation, and validation 
of dependable aerospace computing systems. 
			
]]
##[[DATA:data/orbz/An online scalable algorithm for average flow time in broadcast scheduling.txt|
 A Proof of Lemma 3.6 
 Here we prove Lemma 3.6. The proof of this lemma relies on a generalization of Hall s theorem. This 
generalization of Hall s theorem was implicitly used in [19], and later formalized in [11]. Definition 
A.1. [11][g-covering] Let G =(X . Y, E) be a bipartite graph whose two parts are X and Y , respectively. 
Let £ : E . [0, 1]. We say {£u,v} is a g-covering if L£u,v =1 and L£u,v = g. v.Yu.X The following lemma 
follows easily from either Hall s Theorem or the Max-Flow Min-Cut Theorem. Lemma A.2. [11][Fractional 
Hall s theorem] Let G = (V = X . Y, E) be a bipartite graph whose two parts are X and Y , respectively. 
For a subset S of X, let NG(S)= {v . Y | uv . E, u . S}, be the neighborhood of S. For every S . X, if 
|NG(S)|= 1 |S|, then there g exists a g-covering for X. Now we are ready to prove Lemma 3.6. Proof of 
[Lemma 3.6] We start by creating a bipartite graph G =(X . Y, E). There is one vertex up,x . X for each 
event Ep,x .A and there is a vertex vq,y . Y for each event in Eq,y .B. Let up,x . X and vq,y . Y . There 
is an edge connecting up,x and vq,y if and only if Eq,y .Bp,x. For any set Z . X, let I(Z) be the set 
of intervals corresponding to events in Z, i.e. I(Z)= { Ip,x | up,x . Z}. We let I(Z) denote the union 
of intervals in I(Z). We denote the sum of length of maximal subintervals in I(Z) by | I(Z)|. We will 
now show that G has a (( 2 )( d+1 ))-covering for X. .µ d Consider any .xed set Z . X. Notice that d 
+1 (1.10) .|Z|= | I(Z)|. d This is because the optimal solution must perform . unique broadcasts for 
each event in Z during I(Z), the optimal solution has 1 speed, and there are at most d+1 | I(Z)| integral 
time steps during I(Z) where d OPT can broadcast. From now on, for simplicity, we assume that I(Z) is 
one continuous interval; otherwise our argument can be applied to each maximal subinterval in I(Z). Let 
' I .I(Z) be such that for any two intervals Ip,x,Iq,y . ' I it is the case that Ip,x is not completely 
contained in ' Iq,y, and also I = I(Z). By de.nition, (1.11) | I ' | = | I(Z)|. ' We order all intervals 
in I in the increasing order ' of starting points. We pick intervals from I one by one and label them 
by the order they are picked; the ith selected interval is denoted by Ii. Starting with I1, we pick Ii+1 
so that Ii+1 the least overlaps with Ii; here we will say Ii+1 overlaps with Ii even when Ii+1 '' starts 
exactly where Ii ends. Let I and I be the odd even odd indexed and even indexed intervals, respectively. 
'' WLOG, assume that | I |=| I|. Since oddeven '' ' I and I are a partition of I , we know that odd 
even '' | I| + | I |=| I ' |. Thus we have oddeven 1 ' (1.12) | Iodd|= | I ' |. 2 Let NG(Z) be the 
neighborhood of Z. We now show ' that |NG(Z)|= µ| I|. Note that up,x, correspond­ odd ' ing to Ip,x 
in I , has at least µ|Ip,x| neighbors. Also odd ' note that all intervals in I are disjoint by construc­ 
odd ' tion of I Hence, by summing up all neighbors of odd. ' vertices corresponding to intervals in I 
, we have odd ' (1.13) |NG(Z)|= µ| Iodd|. From (1.10), (1.11), (1.12) and (1.13), We have d |NG(Z)|= 
( .µ )( )|Z| and G has a (( 2 )( d+1 ))­ 2 d+1 .µ d covering using Lemma A.2. Let £ be such a covering. 
F (A)= L Fp,x up,x.X = L £up,xvq,y Fp,x up,xvq,y.E [By de.nition of the covering] Fq,y L = £up,xvq,y 
. up,xvq,y.E [By Fq,y = .Fp,x] 2 d +1 = ()( ) L Fq,y ..µ d vq,y.Y [Change order of the summation and 
£ is a (( 2 )( d+1 ))-covering] .µ d 2 d +1 =()( )F (B) ..µ d [Since Y is the set of vertices corresponding 
to events in B] 2 d +1 = ()( )LA-W1+E ..µ d [Since B is a subset of all events] D B Omitted Proofs Proof 
of [Lemma 3.3] We apply Lemma 3.6 using the notation given in the lemma. Let A be the set of all  N1 
events. Consider any event Ep,x .A. Let Ip,x = [tp.(ep,x),ep,x) for some .xed ß = . = ß( 10 (I1000cl 
+ E 2) + 1) such that at least Ias(ep,x - t .(ep,x))l self­chargeable events end on Ip,x. Note that . 
exists by de.nition of N1 events. By Lemma 3.4, the optimal solution must broadcast page p during Ip,x. 
Due to this 10000 we set . = 1. Since |Ip,x|= by Lemma 3.5, we E2 have d = minEp,x.A |Ip,x|= 10000 . 
E2 Let Bp,x be the self-chargeable events ending dur­ ' ing Ip,x =[tp.(ep,x)+ a (ep,x - tp.(ep,x)),ep,x). 
Note 2 that there are at most Ias |Ip,x|l events ending during 2 ' Ip,x \ I . Therefore there exist at 
least Ias|Ip,x|l - p,xIas |Ip,x|l = las |Ip,x|J = as |Ip,x| self-chargeable events 2 24 ' ending during 
I . Hence, |Bp,x|= as | and we can p,x4 |Ip,xas set µ =. 4 Let Eq,y .Bp,x. By Lemma 3.1 and the de.nition 
 ' of tp.(ep,x) we know that at anytime t . Ip,x it is the a case that Fp,x(t) = (1 - .)Fp,x. Since our 
algorithm 2 ' chose to broadcast page q at time ep,x . I over page p,xa p, we have Fq,y = (1 - .)Fp,x. 
Therefore we can set 2c a . = (1 - .). 2c In sum, by Lemma 3.6, F (N1) = 2 ..µ d + 1 d F (S) = ( 16c 
a2s )( 1 1 - . ) d + 1 d (.OPT) = O( 1 E11 )OPT. D Proof of [Lemma 3.4] For the sake of contradiction 
assume the lemma is false. The event Ep,x is non-self­chargeable therefore the optimal solution must 
broad­cast page p at some time during (bp,x,tpß(ep,x)). Let t be the latest broadcasting time of page 
p by the op­timal solution during (bp,x,tpß(ep,x)). Let S[bp,x,t] and S(t,ep,x) be the set of requests 
for page p which arrive during [bp,x,t] and (t, ep,x), respectively. We know that F (S[bp,x,t]) < (1 
- ß)Fp,x by de.nition of tpß(ep,x) and t<tpß(ep,x). Thus F (S(t,ep,x))= F (Rp,x \ S[bp,x,t]) > ßFp,x. 
Since the optimal solution does not broad­ * cast page p during (t, ep,x), it follows that F = p,x F 
*(S(t,ep,x)) > ßFp,x = . 1 Fp,x, which is a contradiction to Ep,x being a non-self-chargeable event. 
D Proof of [Lemma 3.5] For the sake of contradiction, assume that there exists a non-self-chargeable 
event 10000 Ep,x such that |[tpß (ep,x),ep,x]| < E2 . Let S be the set of requests for page p which arrive 
on the interval [t ß(ep,x),ep,x). By de.nition of tß(ep,x) it must be the pp case that F (S) > ßFp,x. 
We now want to bound the number of requests in S. Since each request in S can 10000 accumulate .ow time 
at most |[tpß(ep,x),ep,x]| < E2 , we have that F (S) < |S|10000 , thus ßFp,x < |S|10000 . E2 E2 E2 Hence 
we have that |S| > ßFp,x. The optimal 10000 solution must accumulate at least |S| .owtime for the E2 
* requests in S, therefore F =|S| > ßFp,x = p,x 10000 1 Fp,x. This is a contradiction to Ep,x being 
non-self­ . chargeable. D  
			
]]
##[[DATA:data/orbz/An object-oriented program development environment for the first programming course.txt|
               
			
]]
##[[DATA:data/orbz/An InterBase system at BNR.txt|
               
			
]]
##[[DATA:data/orbz/An interactive computer graphics approach for dissecting a mixture of normal (or lognormal) distributions.txt|
                   
]]
##[[DATA:data/orbz/An interactive lecture approach to teaching computer science.txt|
               
			
]]
##[[DATA:data/orbz/An undergraduate course in applied data communications.txt|
                			
]]
##[[DATA:data/orbz/An offline foundation for online accountable pseudonyms.txt|
                   
]]
##[[DATA:data/orbz/An investigation  of geographic mapping techniques for internet hosts.txt|
               
			
]]
##[[DATA:data/orbz/An optimal parallel algorithm for detecting weak visibility of a simple polygon.txt|
               
			
]]
##[[DATA:data/orbz/An open operating system for a single-user machine.txt|
               
			
]]
##[[DATA:data/orbz/An overview of hierarchical control flow graph models.txt|
 AUTHOR BIOGRAPHIES DOUGLAS G. FRITZ is a graduate student at Syracuse University working 
towarck a Ph.D. in Computer Engineering. His research area is hierarchical modeling for discrete event 
simulation. He received M.S. degrees in Electrical :Engineering and Computer Science from Syracuse University 
and a B.S. degree in Electrical Engineering from The Pennsylvania State University. He was formerly with 
IBM as a development engineer for high speed switching systems. ROBERT G. SARGENT is a Professor at Syra­cuse 
University. He received his education[ at the Uni­versit y of Michigan and has published widely. Dr. 
Sargent has served his profession in numerous ways and has been awarded the TIMS College on Simu­lation 
Distinguished Service Award for long-standing exceptional service to the simulation community. His research 
interests include the methodolclgy areas of modeling and discrete event simulation, model valid­ation, 
and performance evaluation. Professor Sargent is listed in Who s Who in America.  
			
]]
##[[DATA:data/orbz/An overview of the SUMMER programming language.txt|
                			
]]
##[[DATA:data/orbz/An optimal randomized logarithmic time connectivity algorithm for the EREW PRAM (extended abstract).txt|
                			
]]
##[[DATA:data/orbz/An NP-complete number-theoretic problem.txt|
               
			
]]
##[[DATA:data/orbz/An open simulation architecture for Force XXI.txt|
 AUTHOR BIOGRAPHIES JOHN A. (DREW) HAMILTON, JR., Major, 
US Army, is currently pursuing a Ph.D. in Computer Science at Texas A&#38;M University enroute to the 
Department of Electrical Engineering and Computer Science at the U. S. Military Academy, West Point, 
New York. He was most recently Chief, Officer Training Division at the Army Computer Science School, 
Fort Gordon. Major Hamilton has a B.A. in Journalism from Texas Tech University, where he was commissioned 
in Field Artillery, an M.S. in Systems Management from the University of Southern California and an M,S. 
in Computer Science from Vanderbilt University. UDO W. POOCH, Ph. D., P.E., received his Ph.D. in Theoretical 
Physics from the University of Notre Dame and is the E-Systems Professor of Computer Science at Texas 
A&#38;M University. Dr. Pooch is the author of numerous articles and books, and most recently authored 
with Lt.Col. James A. Wall, Discrete-Event Simulation published by CRC Press. Dr. Pooch is a very active 
researcher supervising projects in network simulation, network security and fault-tolerant distributed 
environments.  
			
]]
##[[DATA:data/orbz/An object-oriented information model for a patient definition and management system.txt|
               
			
]]
##[[DATA:data/orbz/Analysis of balanced fork-join queueing networks.txt|
               
			
]]
##[[DATA:data/orbz/An introduction to simulation modeling.txt|

AUTHOR BIOGRAPHY MARTHA A. CENTENO is an assistant professor in the Department of Industrial and Systems 
Engineering at Florida International University. She received a B.S. in Chemical Engineering from ITESO 
University (Guadalajara, Jalisco, Mexico), a M.S. in Industrial Engineering from Louisiana State University, 
and a Ph. D. in Industrial Engineering from Texas A&#38;M University. Dr. Centeno s current research 
interest include the utilization of artificial intelligence and database technologies to develop comprehensive 
and smart simulation modeling environments. Dr. Centeno is a member of ASA, Alpha Pi Mu, Tau Beta Pi, 
IIE, INFORMS, and SCS.  
			
]]
##[[DATA:data/orbz/An object-oriented design and implementation of reusable graph objects with C++.txt|
               
			
]]
##[[DATA:data/orbz/An overview of supertoroidal networks.txt|
                			
]]
##[[DATA:data/orbz/An operating systems course using stand alone computers.txt|
              
			

]]
##[[DATA:data/orbz/An object-oriented approach to software process modeling and definition.txt|
               
			
]]
##[[DATA:data/orbz/An on-line simulator and database system for management of a commercial fish farm.txt|
               
			
]]
##[[DATA:data/orbz/An optimal bound for conforming quality triangulations.txt|
                   
]]
##[[DATA:data/orbz/An investigation of the career path of the EDP professional.txt|
  APPENDIX Operatin B Personnel: post processing 
clerk operator trainee operator senior operator lead operator production clerk production trainee lead 
production clerk data entry-tralnee data entry-operator data entry-lead operator data entry-supervisor 
Operations Manager: manager ol computer operations manager of DP operations production control super- 
visor Programmer/Programmer Analyst: application programmAng- trainee, programmer, senior and lead; Analysis 
and programmlng-trainee, Analyst/ programmer, senior and lead; Systems Analyst: systems analysis-trainee, 
analyst, senior and lead Systems Programmer: operating systems program- ming trainee, programmer, senior 
and lead; Data communlcatlons/telecom- munication analyst Applications Manager: systems analysls-Manager 
application progrR~m~ng-mgr. system analysls/programmlng mgr. Computer Systems ManaBer: operating systems 
prog. mgr. DP administrator DP manager Data Communication/teleComm. manager DP/MIS Director: Director 
of DP/MIS - Division and corporate Internal Consultant/Speclallst: Administrative assistant technical 
assistant corpo- services coordinator rate div. program librarian tele comm. tech. control speci-alist, 
magnetic media librarian staff consultant, librarian, k~ supervlsor/operator DB Analyst Training specialist 
Table I. A Grouping of Job Titles Used by Datamation into Position Catagories i00 Table~ Sex Composi~ion 
of Sample Se--x No. F-~male 23 ~le 85 TablelO Table ll A~e Breakdown Of Sample Educational Levels of 
Sample Age Group No. Education No. <25 9 High school graduate -5 26-30 21 Partial college m 31-35 27 
no degree 19 36-40 29 2-year degree 15 41-45 12 4-year degree 21 46-55 7 4-year degree + par- >55 3 tial 
graduate work 23 Haster's degree 16 Post master's work I Tablel~ Tablel3 Departmental Size of Sample 
Salary Range of Sample Department Size Salary Range (No. of People) ° (Range 'O00s) No. No <5 9 10-15 
2 5-10 II 16-20 9 11-15 8 21-30 51 16-30 18 31-40 29 >30 62 >40 15 Tablet~ Table i~ Core Size of Sample's 
Vendors of Computers Computers Reported by Sample Core Size No. Hake No. <64K 5 IBH 70 128-512K I8 Burroughs 
7 )512, <2~m 12 Univac 7 >2HB,~IOYlB 41 Amdahl 4 i >10.~ 9 DEC 4 Honeywell 3 Prlme/HP/TI 4 Others 3 
   
			
]]
##[[DATA:data/orbz/Analysis of concentrated ALOHA satellite links.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented view of backtracking.txt|
                    ]]
##[[DATA:data/orbz/An overview of HLTs for South African Bantu languages.txt|
Table 1. Overview of HLT components available for isiZulu, Sepedi, 
Tshivenda, and Xitsonga. Language isiZulu Sepedi Tshivenda Xitsonga      
			
]]
##[[DATA:data/orbz/An undergraduate compiler laboratory.txt|
Appendix A:  PROGRAM BLOCK ~8fray sJz@s and labels must be positive and less than 
1000 21f Ident is used, it must be a previously defined constant with a value between I and 999 3procedure 
names may not be used Saul Rosen, ed., McGraw-Hill, 1967.  15. Wirth, Niklaus, Algorithms + Data Structures 
= Programs (especially Chapter 5, pp. 280- 350), Prentice-Hall, 1967.  16. Wirth, N. and Kathleen Jensen, 
PASCAL User Manual and Report (Second Edition), Springer-Verlag, 1974.  The PL/CP Syntax STATEMENT 
 --4 I 1constant identtftec not a]lowed 21 ~ numhec ~ 999 3loop parameter expressions must satisfy usual 
constraints or loop execution will be skipped  4call by value-result 35  CONDITION EXPRESSION FACTOR 
T ER___~ LINE CONTROL DESIGNATOR Terminal Symbol s ~I reserved words ~ speclal characters W.~ : ) > p_~..~ 
I~ -(--j dtgt~s:o t t '3 ..+ ~ :: < = c, (~,+,~+++ m S+~ I o'P+h~,h) " 36  
			
]]
##[[DATA:data/orbz/An interactive dynamic model for integrating knowledge management methods and knowledge sharing technology in a traditional classroom.txt|
                   
]]
##[[DATA:data/orbz/An inversion algorithm for geometric models.txt|
 ACKNOWLEDGEMENTS Thanks are due to 
Reijo Sulonen and Markku Tam-minen, who gave valuable comments during the preparation of this paper. 
The work described in the paper has been supported by the Academy of Finland and the Helsinki Universi-ty 
of Technology Foundation.  
			
]]
##[[DATA:data/orbz/Analysis and simulation of passenger flows in an airport terminal.txt|
AUTHOR BIOGRAPHIES MICHEL R. GATERSLEBEN is Manager of the Logistics Competence Center 
at Amsterdam Airport Schiphol. He is working in the field of airport logistics and long term capacity 
planning and is involved in several projects concerning airport development. SIMON W. VAN DER WEIJ is 
a Business Engineer at Incontrol Business Engineers, a consulting firm specialized in improving businesses 
by using quantitative methods. He is involved in several projects in the field of transportation and 
logistics. He holds an M.Sc. in Mechanical Engineer­ing, Production and Operations Management at University 
of Twente. 
			
]]
##[[DATA:data/orbz/An interactive pseudo-assembler for introductory computer science.txt|
               
			
]]
##[[DATA:data/orbz/An overview of ergonomic considerations in computer systems.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented approach to algorithm visualization&#8212;easy, extensible, and dynamic.txt|
               
			
]]
##[[DATA:data/orbz/An optical simulation of shared memory.txt|
               
			
]]
##[[DATA:data/orbz/An internetwork message structure.txt|
               
			
]]
##[[DATA:data/orbz/An interactive graphical modeling tool for performance and process simulation.txt|

NOTICE OF DISCLAIMER Q+ and the COMPASS tool are prcxlucts of AT&#38;T. Bellcore dces not provide comparative 
analysis or evaluation of prcducts or vendors. Any mention of prcxlucts or vendors in this dcmment is 
done where necessary for the sake of scientific accuracy and precision, or for background information 
to a point of technology analysis, or to provide an example of a technology for illustrative purposes, 
and should not be construed as either positive or negative commentary on that product or that vendor. 
Neither the inclusion of a product or a vendor in this dcmment, nor the omission of a product or a vendor, 
should be interpreted as indicating a position or opinion of that praluct or vendor on the part of the 
authors or of Bellcore. Liability to anyone arising out of use or reliance upon any information set forth 
herein is expressly disclaimed, and no representations or warranties, expressed or implied, are made 
with respect to the accuracy or utility of any information set forth herein. AUTHOR BIOGRAPHIES Dennis 
S. Mok is a Member of Technical Staff at Bell Communications Research (Bellcore), Performance Management 
Department. He received his M. Eng. and Ph. D. in Industrial Engineering from Iowa State University. 
He was on the Computer Science faculty at Western Illinois University. His research interests are computer 
systems performance analysis, business prcxesses and operations modeling and simulation, and complex 
precess re-engineering. Dennis is a member of the editorial board of the International Joumat in Computer 
Simulation. Cynthia A. Funks-Lea is a Member of the Technical Staff at AT&#38;T Bell Laboratories, Perfommce 
Analysis Department. Her research interests include simulation, object-oriented systems, and computer 
networks. Cynthia received a BS in computer science, BS in mathematics, and an MS in computer science 
from Penn State University. She is a member of the IEEE Computer Society and the ACM. 
			
]]
##[[DATA:data/orbz/An introduction to Haskell with applications to digital signal processing.txt|
                    ]]
##[[DATA:data/orbz/An object calculus for geographic databases.txt|
                   
]]
##[[DATA:data/orbz/Analysis of buffer replacement policies for WWW proxy.txt|
               
			
]]
##[[DATA:data/orbz/Analyses of load stealing models based on differential equations.txt|
                			
]]
##[[DATA:data/orbz/An optimistic commit protocol for distributed transaction management.txt|
                			
]]
##[[DATA:data/orbz/An intelligent universal advisor.txt|
  John Doe ADVISING SHEET B.S. Computing Science 
Catalog 1995 TO BE COMPLETED COMPLETED (ENG 265 or 275 or 295) and (ENG 2** or SCM ***) Criterion I 
ENG 164, ENG 165 MTH 379 and MTH 396 and (MTH 364 or PHL 362) Criterion II MTH 172 and 173 ((BIO *** 
and BIO ***) or (CHM *** and CHM ***) or (GEL *** and GEL ***)) and (PHY 138/118 and PHY 139/119) Criterion 
Ill Criterion IV ART 160 Criterion V HIS 163, H IS 164, POL 261, POL 331 Criterion VI POL 335, ECO 230, 
PHL 261 Criterion VII KIN 215 and (I-lED 166 or KIN *** or AGR 263)  Major CS 272 and CS 278 and CS 
333 and CS 336 CS 164, CS 165, ACC 231 and CS 474 and CS 437 and CS 3** and CS 3** and CS 3** and CS 
3** and CS 3** and Mgt 380 Minor (Matl0 MTH 274 and MTH 3** and MTH 3** and MTH 172, MTH 173 MTH 3** 
Figure 1. Sample Advising Sheet 109  
			
]]
##[[DATA:data/orbz/An introductory textbook on cyber-physical systems.txt|
               
			
]]
##[[DATA:data/orbz/An introduction to simulation using ProSim for business process simulation and analysis.txt|
 He has more 
than five years of industrial experience in information systems analysis and design. His research interests 
include systems modeling, discrete event simulation, object-oriented modeling, knowledge representation 
and artificial intelligence. MADHAV ERRAGUNTLA received his M.S. in Industrial Engineering from the National 
Institute for Training in Industrial Engineering in 1989 and Ph.D. in Industrial Engineering from Texas 
A&#38;M University in 1996. Dr. Erraguntla conducted research and developed applications in planning, 
simulation, costing, knowledge based systems, optimization, neural networks and fuzzy logic. He has numerous 
journal publications and conference proceedings. He designed and developed PROJECTLINK and process design 
assistant (PDA) presented in this paper. Currently, Dr. Erraguntla is working as a Research Scientist 
at KBSI. 
			
]]
##[[DATA:data/orbz/An overview of CIM enterprise modeling methodologies.txt|
Are there laws of manufacturing? Manufacturing 
Systems. Washington D, C.: National Academy Press. Naga@ T., Y Naga@ and H. Koshimitsu. 1993. Building 
a CIM system for compound plant: Utilization of distributed processing system. Computers &#38;Industrial 
Engineering. 24(4): 561-569. Ngwenyama, O. K., and D. A. Grant. 1994. Enterprise modeling for CIM information 
systems architectures: An object oriented approach. Computers &#38; Industrial Engineering. 26(2): 279-293. 
O Sullivan, D. 1994. Manufacturing System Redesign: Creating the Integrated Manufacturing Environment, 
New Jersey: Prentice Hall. Pandya, K. V. 1995. Review of modeling techniques and tools for decision making 
in manufacturing management. In IEE Proceedings on Science, Measurement, and Technology 142(5): 371-377. 
Petrie, C. J. 1992. Introduction In Proceedings of the First International Conference on Enterprise Modeling 
Ed. Petrie, C. J., 1-17. Massachusetts: MIT Press. Ross, D. 1985. Applications and extensions of SADT. 
Computer April: 25-34. Savolainen, T., D. Beeckmann, P. Groumpos, and H. Jagdev. 1995. Positioning of 
modeling approaches, methods and tools. Computers in Indus@. 25:255­ 262. Wang W., K. Popplewell, and 
R. Bell. 1993. An integrated multi-view system description approach to approximate factory modeling. 
International Journal of Computer Integrated Manufacturing. 6(3): 165­ 174. Weston, Jr. TED . 1994. Three 
dimensions of CIM, Production and Inventory Management Journal. First Quarter 59-61. Young, R.E. and 
J. Vesterager. 1991. An approach to CIM system development whereby mantiactnring people can design and 
build their own Cl&#38;f system. International Journal of Computer Integrated Manufacturing. 4(5): 288-299. 
 AUTHOR BIOGRAPHIES GANESH PAI KATEEL is a Research associate in the Center for Computer Integrated Manufacturing 
in the School of Industrial Engineering and Management at Oklahoma State University, Stillwater, OK. 
He received the B.Tech degree in Mechanical Engineering from the Karnataka Regional Engineering College, 
India and Post Graduate Diploma in Industrial Engineering form the National Institute for Training in 
Industrial Engineering, Bombay, India. He has two years experience in the CNC machine building industry. 
He has taught both at undergraduate and graduate levels at Karnataka Regional Engineering College, India 
for four years. He was the Project OfKcer for the State of Karnatr@ National Technical Manpower Information 
System, Govt. of India from 1990 to 1994. Currently he is completing his M.S. degree in Industrial Engineering 
and Management at Oklahoma State University. During 1995-96, he taught Production Management at the College 
of Business, Oklahoma State University. MANJUNATH KAMATH is an Associate Professor in the School of Industrial 
Engineering and Management and Director of Center for Computer Integrated Manufacturing at Oklahoma State 
University, Stillwater, OK. He received the B.Tech. degree in Mechanical Engineering from the Indian 
Institute of Technology, Madras, India, in 1982, the M.E. degree in Automation from the Indian Institute 
of Science, Bangalore, India, in 1984, and the Ph.D. degree in Industrial Engineering from the University 
of Wisconsin-Madiso~ in 1989. His primary areas of interest are stochastic modeling and queueing theory, 
analytical performance modeling of manufacturing systems, object-oriented modeling and simulation of 
discrete-event systems and Petri nets. He is a member IEEE, IIE, and INFORMS. DAVID B. PRATT is an Assistant 
Professor in the School of Industrial Engineering and Management at Oklahoma State University, Stillwater, 
OK. He holds B. S., M. S., and Ph.D. degrees in Industrial Engineering from Oklahoma State University. 
He has twelve years experience in the petroleum, aerospace and pulp and paper industries. His research 
and teaching interests include manufacturing systems modeling, enterprise integration, and the strategic 
implications of CIM. He is a registered Professional Engineer in Oklahoma, a certified Fellow in Production 
and Inventory Management and an ASQC Cetiled Quality Engineer. He is a member of IIE, NSPE, AFICS, INFORMS, 
and ASQC. 
			
]]
##[[DATA:data/orbz/An undergraduate embedded software laboratory for the masses.txt|
               
			
]]
##[[DATA:data/orbz/An optimizing compiler for LISP for the Z80.txt|
               
			
]]
##[[DATA:data/orbz/An introduction to computer simulation.txt|
 AUTHOR B1OGRAPHY MIKE PIDD is a Professor 
of Management Studies in the Management School of Lancaster University in the UK. He is author of [ omputer 
sintuiation in mana,gewcnt science and of C omputer modclling @ ~i~.scrcie s; HIulatIaH (bet h published 
by John Wiley). He teaches. researches and consulfs in discrete simulfition and management science. His 
current interests include research on object oricntat ion and an upcoming book on Modclling.  
			
]]
##[[DATA:data/orbz/An object oriented simulation model for determining labor requirements at Taco Bell.txt|
 AUTHOR BIOGRAPHIES MARK GODWARD is Manager of Operations 
Engineering at Taco Bell Corporation. He received his MS in Industrial Engineering from North Carolina 
State University in 1989. His other industrial experiences include Ford Motors of Argentina, General 
Tire and Rubber Company, and Tompkins and Associates. The work presented in this paper was partially 
responsible for him being receiving the prestigious Taco Bell President s award for contributions to 
the Corporation. Together with William Swart, he received the 1994 Institute of Industrial Engineers 
Operations Research Division Award for Outstanding Application of Operations Research Techniques Producing 
Significant Results. WILLIAM SWART is Dean of New Jersey Institute of Technology s Newark College of 
Engineering. He is a former Vice President of Burger King Corporation, where he received the 1981 Franz 
Edelman award for the practice of Management Science and the Restaurant and Institutions Magazine Honorable 
mention award for Food Facilities Design. Together with Mark Godward, he received the 1994 Institute 
of Industrial Engineering Operations Research Division Award for Outstanding Application of Operations 
Research Techniques Producing Significant Results. He serves as a strategic consultant to Taco Bell Corporation. 
  
			
]]
##[[DATA:data/orbz/Anaglyphic stereoscopic perception on lossy compressed digital videos.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented modeling of the history of optimal retrievals.txt|
                   
]]
##[[DATA:data/orbz/An introductory algorithm teacher.txt|
                    ]]
##[[DATA:data/orbz/An operational system for computer resource sharing.txt|
                    ]]
##[[DATA:data/orbz/An object-oriented genetics information system.txt|
Appendix A   A Preliminary 
Object-Oriented Databaae Schema for cDNA Sequencing Figure Al is a schema fur a cDNA sequencing project 
databaw that can easily be generalimd for any DNA sequencing project database. The schema diagram is 
based on the object-oriented data model described in [Kim91]. he bold lines represent the class­subclass 
hierarchy relationships, and the thin lines represent the composite hierarchy relationships. These composite 
links can be of several types, but it is assumed that they were aU exclusive inde­pendent references 
initially. Further study may reveal that some of them should be dependent or shared, but this is not 
addressed at this time. The names of the classes are in bold-face type above each box, with the attributes 
in plain type inside each box (multi­valued attributes am plural), and methcxls associated with this 
class below them in italics. It is these methods that represent the neces­sary special operations that 
will be provided for these types of databases. It is the ability to add these special operations that 
makes the object-oriented data model so attractive. ~ol~ohwma has several major components that can be 
categorized .. .. l). I heIJNA sequencesmat are tang -- Creating ana the con­nections between them. 
2). The record of experimental methods used to obtain the sequences. 3). The special operations that 
help the biologists organize the connections between the sequences and to search for possible meaning 
of these sequences. 4). The results of the search exploration for possible mean­ing. 5). A dictionary 
of known sequences and their meanings (e.g. transcription control elements). The CM description that 
is central to the schema is the sequence~agment, which is the major type of DNA~agment object that is 
being stored in the database that tlus schema describes. The methods shown in italics in Figure Al represent 
the special operations mentioned in (3) above. We chose to model the DNA sequence itself as a string 
upon which various methcds could be used. The sequence fragments arc smaUer overlapping pieces that can 
be thought as having some ordering; thus the preceding_fragment, following_fragment, left.overlap~s, 
and right_overlap_pcs attributes. These attributes are computed using the CreateContig methcd. Also depicted 
is the type of information that needs to be kept about the experimental process of DNA sequencing, and 
is representativeof what is now kept in an indi­ vidualresearcher slaborstoxynotebook.Mostof the attributes 
for Iibrary, clone, vector, and seque~e_fragrnent objects are entered when a new sequence is to be stored 
in the database. This prelimi­naryschema wiU evolve as the system progresses. 650 Qel DNA_fragment -- 
_ Illz..bp ~=: ~ ,h&#38;L , - \ ~,m ~ pattern cDNA_fmgmmta sequence.fragment    F-g II rusoiction.nqn 
Eerie fxecedm~fmgnmnt clOm_v.3ct01 pnttern.mcqumce Ipnttem_&#38;3cnptmn I I I followm~fmgmmt w-tw_6­ 
mwJmmedin~fkgme.nt followm~me I q-H gem_9qleace &#38;st_fiOm_pmc_gene m­ potem.sequences dlst_tO_fol~m 
H ~P $equerlce_cO-t Slmllsmhes vector left_Ovedsp~ 1 restriction.map v9X0r_nanm 1 righ_Overlap_pJs amisso_acid_sequessce 
3 a) Cn A &#38;9_stmg IsHomologowTo bold clam m7 a CreakConrig / DisplCont TramlateSequence \ l\ nucteii_acid_sequenee 
- / / DNA_ming llkltCht S / DtsplqvMafch IsSintilarTo/ DisplaySitni/orin, AlignmenrOj/ Displm,Altgnmenf 
Cld paftetratss&#38;iption_control_element rest-map_site restriction enzvme -= ­ mm m res_l.acat10n8 
similarity-resutt atgOrithm_type 7input outputs vectOr_sequema I fasta_simihuity-input c fasta_zimilarity_output 
+ I regular attribute Italic rnetfwd l 1 composite hierarchy IS-PART-OF ctasdsubclass hierarchy Is+j 
(inheritance) ~ I Figure A 1, cDNA .%quencmg FroJect Obyxt-orrented Schema ­ 
			
]]
##[[DATA:data/orbz/An intensive instruction format for information systems.txt|
               
			
]]
##[[DATA:data/orbz/An interpretation of objects and object types.txt|
Appendix In this appendix we summarize several calculi, giving both grammars and rules. 
We often use assertions of the form EFZ Vi~l . . . n to indicate n hypotheses; by convention, this means 
E 1-0 when n = O. A The Obl<. Calculus The calculus Obl<. consists of the rules given in Tables 7 and 
8. It has the following syntax: Environments E::= OIE, Z:A Types A,B ::= Top I [Zi : Bt El ] Variables 
X>Y Terms a,b ::= z I [L = s(2, :A)b, l ] I a.1 \ a.1 + <(z :A)b Results v ::= [1, = <(at : A)b; e ] 
 El The F<:P Calculus The calculus F<.P consists of the rules given in Tables 7 and 9. It has the following 
syntax: Environments E ::= OIE, X: AI E, X<:A Type Variables X, Y Types A,B, C ::= X I Top \ A--+B I 
{1, : B, e m} [ p(X)A I V(X<:A)B \ 3( X<:A)B Variables X)Y Terms a,b,c, d ::= x I}(z :A)b Ia(b) I{1, 
= b, l n} Ia 1 I fold(A, b) I unfold(a) I A(X<:A)b I b(A) [ pack X<:A = C with b : B{X} lopencas X<: 
A,x:Bind:D Results ::= A(z : A)b I {li = bi 61 } v I fold(A, v) I J(X<:A)b I pack X<:A = C with b : B{X} 
Other definitions of the set of results could be adopted. The one given here is convenient for our adequacy 
theorem; it is however not particularly compelling. Fortunately our techniques are not too sensitive 
to changes in the definition of the set of results. C The Imperative Variant of Obl<, The typed imperative 
object calculus contains all the rules of Obl<. (described in Appendix A) and contains the typ­ing rules 
given in Table 10 for its additional terms. As for Obl <., we can prove a minimum-types property for 
the typed imperative calculus. (This is a convenient departure from the original calculus of [AC95a]: 
the terms described here contain more type information. ) The syntax is: Environments E::= OIE, Z:A Types 
A,B ::= TOp I [t, : B, =ln] Variables X)Y Terms a,b ::= z \ [~i = S(Z, :A)b, l ] Ia.1 Ia.1 + <(z :A)b 
I clone(a) lletc:A=ainb D The Ob$ Calculus The calculus Ob~ consists of the rules given in Table 7, 
the rules (Env X), (Type X), (Sub X) given in Table 9, and the rules of Table 11. It has the following 
syntax: Environments E ::= O\ E, X: AI E, X<:A Type Variables X, Y Types A,B ::= X I Top I Obj(X)[l,v, 
: B, ln] with v, ~ {+, ,0} Variables X>Y Terms a,b ::= z I obj(X=A)[l, =q(z, :X)b, sl n] 1 U,.1 I al&#38; 
(Y<A,y : Y)<(z : Y)b 406 Table 7: Common Typing Rules Environments Subtyping EkA Ek A<:B El- B<:C (Sub 
Refl) EkA<:A (Sub Trans) EI-A<:C Eka:A EkA<:B (Val Subsmp) Eka:B Top (Type Top) E~ET~p (Sub TOP) E hEA~T.p 
 Table 8: Additional Typing Rules for Obl < 407 Table 9: Additional Typing Rules for F< ~ Types E , X<:A, 
E b O (Type X) (Type +) E , X<:A, E k X EFB, Vi C1. ..n (Type Record) (Type Ret)Et-{1, : B, =l n} E, 
X<:AFB (Type All) (Type Exists) E + V(X<:A)B Subtyping E , X<:A, E 1-0 Et-A <:A Ek B<:B (Sub X) (Sub 
+)E , X<:A, E k X<A E # A* B<: A ~B EkB, <:B~, di~l. ,,n EkB~, Vi En+l. ..n+m (Sub Record) E+ {1, : B, 
1 n+ }<:{1, : B; e n} E ~ p(X)A E + w(Y)B E, Y<: Top, X<:Y t-A<:B (Sub Ret) E + K(X) A<:p(Y)B EkA <:A 
E) X<.A E B<:B E k A<:A E, X<:A K B<:B (Sub All) (Sub Exists)E t-V(X<:A)B<:V(X<: A )B E t-3( X<: A) B<:3(X<:A 
)B Term Typings E,x:Akb:B E+ b:A+B Eka:A(Val Fun) (Val Appl) E + ~(X : A)b A-+B E+ b(a):B Ekb, :B, Viel. 
,,n (Val Record) E&#38; {1, = b% El n} : {1, :B, = } Eba:{l, :B, =l } (Val Record Select) Ekall:BJ 
 g~ n E+ b: B{A} (Val Fold) E + fold(A, b) :A A - ( X)B{X} EFb:A (Val Unfold) E + unfold(b) : B{A} 
 A + ~( Y)B{x} E, X<: Akb:B E+ b :V(X<:A)B E+ A <:A (Val Fun2) (Val App12) E h A(X<:A)IJ : V(X<:A)B 
E!-b(A ) : B{ A } E F C<:A E 1-b{C} :B{ C } (Val Pack) E 1-pack X<:A = C with b{X} : B{ A } : 3( X<: 
A)B{X} E\c:3(X<:A)B EFD E, X<: A,x:Bkd:D (Val Open) E+(open .as X<: A,x. Bind: D): D Table 10: Additional 
Typing Rules for the Imperative Calculus 408 Table 11: Additional Typing Rules for Ob~ Variance Subtypings 
o (Sub Covariant) E K ~~~ B<~+>\O } (Sub Contravariant) E E ~~ ~B<~_>\ } EFB (Sub Invariant) E t- l?<: 
B Object Types and Subtyping E, X<: Topt-B, {X} Viel... n + , 0}, B, ~ovariant in x (Type Object) Z 
ie{,E + Obj(X)[l;vi : B~ e n] (Sub Object) For A = Obj(X)[tiv; : B;{X} G +m], A = Obj(X)[t,v: : B:{X} 
e ] E, Y<:A 1-v, B,{ Y}<:v(B~{Y} Vi c 1.. .n E t-A<:A Term Typings E)z, :A1-b,{A}:B, {A} Vi~l... n 
(Val Object) A = Obj(X)[Lv, : B,{X} ~ln] E K obj(x = A)[l, = f(z, : X)bt{X} 61 ] : A (Struct Val Select) 
For A = Obj(X)[Lv, : 13{X} 1 ], v, G $+~o~<:fi,l . . . n E!-a:A E t-a.l$ : Bj{A} (Struct Val Update) 
For A = Obj(X)[Lv, : B,{X} G n],v, ~ {-, o}, j E 1.. .n Eka:A EHA<:A E, Y<: A,y:Y, z: Y+ b: Bj{Y} E E 
al, @ (Y<:A, y :Y)r(z :Y)b :A  
			
]]
##[[DATA:data/orbz/An ordinal optimization approach to a token partition problem for stochastic timed event graphs.txt|
 AUTHOR BIOGRAPHY XIAO-LAN XIE is a research officer at the Institut National 
de Recherche en Informatique et en Automatique (INRIA). His research interests include modelling, performance 
evaluation, real-time control and design of manufacturing systems.  
			
]]
##[[DATA:data/orbz/An iterative semi-supervised approach to software fault prediction.txt|
               
			
]]
##[[DATA:data/orbz/An interruptible algorithm for perfect sampling via Markov chains.txt|
               
			
]]
##[[DATA:data/orbz/An interprocess communication facility for the model a multi-microcomputer system.txt|
                   
]]
##[[DATA:data/orbz/Analysis of dynamic congestion control protocols.txt|
               
			
]]
##[[DATA:data/orbz/Analysis of demand paging policies with swapped working sets.txt|
               
			
]]
##[[DATA:data/orbz/An interactive graphics editor for document preparation.txt|
               
			
]]
##[[DATA:data/orbz/Analysis and experience with an Information System development methodology.txt|
               
			
]]
##[[DATA:data/orbz/An interleaving technique for block coding of black-and-white facsimile data.txt|

4,­ .. -,,,:; J ...~=-l r-- -.... . _-,_  -1 P-l------ ----­  -* z._ . . .-._d L_.. ---L. II Al -Handwritten 
Text A2 -Circuit Diagram !s--.-- .-. _:*.-Lx -.! L.. -.-!.4d m.-, n,0 *,J,b.!.. ...-, *1,...,,..,. ,w@$tIw 
$..C.--v. tn.. ?.,..4 .. Ilq ppA04w #u,,aw...p.M,M,M ,-p**, V* ~_Bu*~ -,, c...., . -.,.** oAnOti. M&#38;*P..m.-tippfmw.mw. 
. . ,. *,., &#38;.mq ,. b...,,,,........c.. ,,dW-b.-. , u ,,, , +.4. ,19 ,-.. -. *d.-G ,.. 10A-.tdb -.*. 
(**m, v. ,.,, b.n*-.p.f*, ,m. ...$,8.6***, W,p--..+.l!)m ,),,,.,, ,4,, .,.94 09.. .,, ..0.-.,,, ~* * 
,.t.,ln...,Td****,.,... ....,, - *. - *. ,,-p.l..p... ,ti CA ,,*  -=T-J~;z-&#38;:-~ . ,.,. . .. * 
 ...M H -.,,,q ,!!,*, k pp.,-d.QO-. -. ., ...... . , .,,..*.,.A.4m..,a.-,. k , * -*. x n-,* -.,. --W!-m.l. 
$-.-. ti-. I-.P. -.* (----.9, .--.-.-.-.. mm # *9-..-. VI . ,.., .* ----. * -.9,, + .- m-*,..-- -. Dam 
 ,,-m , ),am $--.,,.., ,-,. -,-w., .,. -..,*-N .m.l ,... -s. . .  # 1,!9 **IO ,s c ,.am8 ,,e ,_ -lwnl 
 ,Cd * *,* ; Cw,.,-, ,.,m - u -d-, s .-m,­ q!.,. **P*. I. . ..flhfdh.d. . l. ..-.u-da9# d~ws... Few.-.u., 
u,-o--d ...10.--.--8 ndd n --rep---#m .. ,, , 0 . ,.. ,x ,,..., . . ,, * ,.q. ,d .. J... . ..*-. .*-. 
--.$.s­ ,mm  W-,: l:% 0 Ian .w-.k V----,--.,-, b---ate . .Id*ott ............. w,  t . ... n.-. ..,, 
!. ..,.,...,.,,.-.e, me-*.* -,.,. ... -,0 ),# ,.,. ., ,.. - . ?------1.-... . ... ...... $. , . .. --,,p.. 
. .nm..~- .. * m.. .,, , 1 .....!.,.-.+,.,,, .,,, ,*. ,, ,4,* >,-. ,.. ,+..-. m ,... . . . . . .. . 
.. . . ~ .~. :,. w . ., ,... .. . .. ... ,W.. ?,,..! 1..--,. a!-. ..... !., ...... a-,,.O. . ! z~~-i~~ 
 m j~}~.. - . ,!.,...,,, ,.,,..,,,.,. ,* ,-,,@......U ..,.,. . . ,.,..,., ,, a 1. ..q ,,.,. , $ ,.. 
..,. . .,, ,,, ,,,,.. ,. %. , %.,1.. , b.. ! ...-.U.. ..*.* . ...!, .1 ., ., ,,.., . . ,. ,,. du...!... 
J! . ..,. . . . =..0,., , .. .,,,, ?..,,, .......-,.,  A3 -Financial Statement A4 -Typewritten Text 
Figure 5 (Mginal Test lmrigcs Used for IIIC (Al -A4) 42 - -.~-.m . B . -*-. . --­ m aR ~.-Urn-m - . - 
. ­ ss- s :.: :. . ... -------­ > . Y,. m . . . ­, ?:; .: , ........­ i i (b) Al Section, Reconstructed 
(b) Modified IIIC Method, Al Section, . ..---.. -.----­ Triuuta.lhdd Iiprh tin d h h *(h  Triwm.b*kd 
IIwI$ wereWXI h W ­c~mmok (NCW E@@ Nudex, USA) @ Ci/mrnok (New E@wJ Nudar, USA) ad ~ Ci mmok m WII u 
the Ilpttit DAGO d -. chrtndq M 4) u the llpti DAGO ad D6L8T fN1.UrIwaCxdwkyic Sxocc Ccaler,~ d (AwurrtonGrthdqic 
SacrlccCca!er,.Aca4@qd IJI Gcneli@ A-q of Scxnca of he mm) IJ1 Gcndh, AdUny of &#38;-%ncud IbeU$sq 7Mply 
of W wum4aMtd lip W TMprfily Of{helrIwn4M4d II* N M /$lcfck, FederalRqNhlIc Of f.jcrnUlq&#38; m ~~tlf 
60 (\ fcrci, Federal Rr~iIf.lK C( ~:~~). ?%4~~~ : q (c) A4 Section, Original (c) lIIC Method, A4 Section 
 -.... ... . TriIIuuWW lipb wn u$d is ti ~ Ctimok (,% u~ ~~f, USA) ~ Ckhmok,M Udfu w llplbds  DA(XIad 
Mxr,  fAWnna Grdtdqic W,MX CCOW, Adtq d h Genckt, Acukrq d StXnUS &#38; Ibe U=} IIW pdriq 0( [k mllttmwwt!d 
!@sd m M iJ!ti{t, WCEI N~Jl!ltI Cl !j.:~~j, W! ~~d 7 (d) A4 Section, Reconstructed (d) Modified II?C, 
A4 Section Figure 7. IBC Simulation Results, F = 160 Figure 9. IIIC and Modified lBC Simulation Results 
F = 64 (~) ESTOSRate= l/looo (a) EtTor Rate= l/looo * .­ . . -­ - ,--- --­ * ---­ ~) EITOTRate = 1/100 
(b) Ems Rate = II1OO (c)Ems Rate= 1/32 (c) Error Rate = 1/32 Figun 11. Recons~uctd Image in Presence 
of Random tlwwnission Emors for WBS Teckique$ Figure 10. Reconswtd Image in Presence of Random Transmission 
EsTors fos Modified IBC Techniques, F=64   
			
]]
##[[DATA:data/orbz/An only undergraduate course in object-oriented technology.txt|
                   
]]
##[[DATA:data/orbz/Analysis of careers for Georgia youth in computer occupations, 1971-76.txt|
. 4. Non-profit is higher, but the size of 
total employ-ment does not support its significance. . It should be noted, however, that in large data 
processing organizations and also in some large corporate organizations with strong emphasis on data 
processing, the Career Ladder for key-punch operator would generally involve several grade levels for 
key punching work, based on higher levels of skills and experience with comparable pay ranges for each 
grade level. DISCUSSION OF FULMER PAPER Fred A. Gluckson National Bank of Detroit Professor Fulmer's 
paper continues a tradition with SIGCPR --an investigation of supply and demand at the entry levels 
in data processing. Last year we heard Professor Morris Pollack of CUNY and in 1971 Professor Gary 
~)pkin described junior college curricula. Also in 1971, Professor Ethel Shrout surveyed working systems 
 analysts to learn what competencies and training are actually required by their job. Similar papers 
can be found in prior proceedings. Please note that Professor Fulmer stops short of systems analysts, 
just addressing programmers and operators of keypunch machines and computers. His paper is rather wide 
ranging. In addition to quantifying demand, he touches on training requirements, personal qualifications, 
job descriptions, aptitude testing and career ladders. I would direct the interested reader to prior 
CPR re- search findings that concentrate on each of these areas. Our proceedings cover them in some depth. 
 Now for specific observations and opinions of my own. Professor Fulmer's growth trends seem rather 
mo=e con- servative than those of the Department of Labor. In 1968, the State of Georgia had 2.3% of 
the population of the United States. The Department of Labor projects 23,000 annualprogrammer openxngs, 
while this paper projects 276, or approximately 1%. I suspect this con- servative trend is more accurate 
since it is based on hard data from a local survey. However, Professor Fulmer does not mention thai'of 
his annual demand for programmers, many are not at the entry level. In my installation, for example, 
we currently have requisitions to hire several programmers. We could fill them tomorrow with trainees. 
But our deadlines are such that we have no ~Ime for training and are looking for experienced people that 
we can lure from other companies. Thus the student just out of a two-year col- lege may have trouble 
getting his first break. An observation on the data regarding growth of key-punch and computer operator 
jobs, in our large installation these jobs are actually shrinking. Where we had five computers three 
years ago, by year-end we will have two (larger) to do far more work. And our trend is to move data 
entry terminals into the user departments and make users responsible for entering and validating their 
own data. Thus our centralized key-punch group is diminish- ing. So I would view these growth figures 
with some caution. Perhaps enough smaller companies are growing to offset the large ones which are shrinking. 
 A minor point, I do not see a key verifier operator as a step up from key-punch. They are essentially 
the same job and are usually performed by the same individual. If anything, key verifier is less rewarding, 
as he or she doesn't get to make any little holes. ~ey-punch to key-punch supervisor, O.K. But to computer 
operator? To programmer? Professor Fulmer's analysis of job trends by type of in- dustry is interesting, 
something I have not seen before. Nor can I explain why construction is the lowest user of computer personnel. 
I suppose they shovel dirt ~ as opposed to paper, as in industry or government. Professor Fulmer concludes 
that computers have restruc- tured jobs, which no one can deny. Yet I disagree with his contention (b), 
that "the new ~echnology has reduced the skill level and complexity of Jobs." Would that it were so. 
 
			
]]
##[[DATA:data/orbz/An intermediate language for source and target independent code optimization.txt|
. 198 Op LINE SB11 SB21 SBMI FUNC STR PARR PARV EPR START EQL ABSI UMII 
 ADD11 SUB11 SUBI11 MULl1 DIV11 P11 NEll LT11 GT11 ADDO0 AND OR NOT CVIO CVRI Appendix Typical 
Operators for an Algebraic Language Primitive Operators Description SOURCE LINE NUMBER SINGLE SUBSCRIPTION 
OF INTEGER ARRAY DOUBLE SUBSCRIPTION OF INTEGER ARRAY MULTIPLE SUBSCRIPTION OF INTEGER ARRAY (etc., 
for arrays of other size units) FUNCTION CALL BEGINNING OF FUNCTION PARAMETER LIST FUNCTION PARAMETER 
(by reference) FUNCTION PARAMETER (by value) (etc., for by name or such) END OF FUNCTION PARAMETER LIST 
(operators similar to the above may be needed for procedure or I/O calls if different calling sequences 
are involved) STARTING POINT OF MAIN PROGRAM REPLACEMENT (:= or =) INTEGER ABSOLUTE VALUE INTEGER 
UNARY MINUS INTEGER ADDITION INTEGER SUBTRACTION INTEGER INVERSE SUBTRACT INTEGER MULTIPLICATION INTEGER 
DIVISION (-A+B) INTEGER RAISED TO INTEGER POWER INTEGER INEQUALITY COMPARISON INTEGER LESS THAN COMPARISON 
INTEGER GREATER THAN COMPARISON (comparisons of other types) (note: see macro list for EQ, GE, LE) 
(above integer operations can be duplicated for real or other, types, such as: REAL ADDITION ) BOOLEAN 
AND OPERATION BOOLEAN OR OPERATION BOOLEAN NOT OPERATION (other Booleans, as needed) CONVERT REAL TO 
INTEGER CONVERT INTEGER TO REAL (other type conversions) Special Class I Properties I CONSTANT OPERAND 
EXPECTED RESULT IS AN ADDRESS RESULT IS AN ADDRESS RESULT IS AN ADDRESS I OPERAND I ADDRESS I OPERAND 
 NO OPERAND NO OPERAND EXPECTED OPERAND EXPECTED EXPECTED EXPECTED EXPECTED OPERANDS MUST BE SAME 
TYPE UNARY UNARY UNARY UNARY UNARY 199 Appendix (continued) Typical Operators for an Algebraic Language 
 Primitive Operators (continued) 02p Description Special Class I Properties JMP JUMP I LABEL OPERAND 
EXPECTED JMPT JUMP IF FIRST OPERAND IS TRUE SECOND OPERAND IS LABEL JMPF JUMP IF FIRST OPERAND IS FALSE 
SECOND OPERAND IS LABEL LOC LOCATION (LABEL DEFINITION) I LABEL OPERAND EXPECTED INFN BEGINNING OF INTERNAL 
FUNCTION I CONSTANT OPERAND EXPECTED EXFN BEGINNING OF EXTERNAL (SEPARATELY I CONSTANT OPERAND EXPECTED 
 COMPILED) FUNCTION ENTRY FUNCTION ENTRY I LABEL OPERAND EXPECTED RET FUNCTION RETURN ENDFN PHYSICAL 
END OF FUNCTION NO OPERAND EXPECTED ERETN "ERROR" DETECTED IN FUNCTION -NO OPERAND EXPECTED RETURN TO 
SUPERVISOR PARM STORE FUNCTION PARAMETER IN MEMORY I OPERAND EXPECTED (UPON ENTRY TO FUNCTION) STOP STOP 
EXECUTION (RETURN TO SUPERVISOR) NO OPERAND EXPECTED ENDPG END OF PROGRAM NO OPERAND EXPECTED Macro 
Operators 02 Description Translated Into ADDIO ADD01 EQLIO ADD INTEGER TO REAL ADD REAL TO INTEGER REPLACE 
INTEGER BY REAL CVRI, C VRI, CRIO, ADDO0 ADDO0 EQL (etc., for other operations) mixed-type GE11 NEll 
INTEGER INTEGER INTEGER ° LESS OR EQUAL COMPARISON GREATER OR EQUAL COMPARISON INEQUALITY COMPARISON 
NOT, NOT, NOT, GT11 LT11 EQ11 (etc., for other data types and mixed types Note that only half of the 
six comparisons are primitives, thus improving chances for optimization via common subexpression or excess 
"not" removal. The choice of which three are primitives is based on best object code, and may be reversed 
for different target machines. For machines on which all six are equally efficient, one can define all 
six as primitives and use the "distribution" and "self complementing" properties of the "not" operation 
in the optimizer.) 200  
			
]]
##[[DATA:data/orbz/Analysis of add-with-carry and subtract-with-borrow generators.txt|
 AUTHOR BIOGRAPHIES 
SHU TEZUKA is an advisory researcher at the IBM Tokyo Research Laboratory, Tokyo, Japan. His research 
interests are in random number generation, global opti­mization, and stochastic simulation. He is an 
Editor for the Journal of Information Processing Society of Japan, and a councillor of the Society of 
Information Theory and its Applications. He is also a member of ACM, IEEE, SIAM, and IPSJ. PIERRE L ECUYER 
is a full professor in the de­partment of Informatique et Recherche Op&#38;ationnelle (IRO), at the University 
of Montreal. He received a Ph.D. in operations research in 1983, from the University of Montreal. From 
1983 to 1990, he was a professor in the computer science department, at Laval University, Ste- Foy, Qu6bec. 
His research interests are in Markov renewal decision processes, sensitivity y analysis and optimization 
of discrete-event stochastic systems, random number gen­eration, and discrete-event simulation in general. 
He is an Associate Editor for Management Science and for the ACM Transactions on Modeling and Computer 
Simula­tion. He is also a member of ACM, IEEE, ORSA and Scs. 
			
]]
##[[DATA:data/orbz/An undergraduate compiler laboratory.txt~|
                			
]]
##[[DATA:data/orbz/An optimal algorithm for the on-line closest-pair problem.txt|
                   
]]
##[[DATA:data/orbz/An IS1 workbench for ACM information system curriculum '81.txt|
                			
]]
##[[DATA:data/orbz/Analysis of Ada for a crucial distributed application.txt|
                			
]]
##[[DATA:data/orbz/Analysis of a simple algorithm for global data flow problems.txt|
  conununica­ 
			
]]
##[[DATA:data/orbz/An overview of the new routing algorithm for the ARPANET.txt|
               
			
]]
##[[DATA:data/orbz/An intelligent framework for mobile devices.txt|
               
			
]]
##[[DATA:data/orbz/An investigation of linguistic features and clustering algorithms for topical document clustering.txt|
               
			
]]
##[[DATA:data/orbz/An upper level computer science curriculum.txt|
                			
]]
##[[DATA:data/orbz/An optimal solution to a wire-routing problem (preliminary version).txt|
       
 176   
			
]]
##[[DATA:data/orbz/An unlevel playing field.txt|
               
			
]]
##[[DATA:data/orbz/Analysis of algorithms, a case study.txt|
APPENDIX A  PROCEDURE BET (A,N) ALGEBRAIC 
ARRAY A; INTEGER N; VALUE A,N #THIS PROCEDURE CALCULATES THE DETERMINANT OF TEE #NTH ORDER MATRIX A 
BY INTEGER PRESERVING DAUSSIAN ELIMINATION INTEGER ARRAY (I:N} REORDER INTEGER I, II,J,E, KK,SIGN=i 
 ALGEBRAIC DIVISOR DO K"I,N; ~tEORDER (K}=K;' DOEND OD K=I,N-I DO I=K,N; IF (A(REORDER(I),K}.NE.O) 
GO TO PIVOT;DOEND RETURN (0) PIVOTIIF (I.EQ.E) KK=REORDER(K) ELSE DO; KK=REORDER(I); REORDER(I)=REORDER(K); 
REORDER (K) =KK; SIGN=-SIGN ; DOEND DB I=K+I,N; II=REORDER(I). DO J=K+i, N IY(R .NE. I)A (II, J)'A(II 
t J)/DIVISOR A(I I ' J) =A(I I, J) *A(KK, K)-A (II, K) *A (KK, j)  DOEND A(II,K)-. NULL. DOEND DIVISOR-A(KR,K) 
 DO J=R,N; A(KK.J)-.NULL. ;DOEND DOEND RETURN (SIGN*A (REORDER(N) , N) ) END APPENDIX B PROCEDURE 
DET(A,N) ALGEBRAIC ARRAY A INTEGER |THIS PROCEDURE CALCULATES THE DETERMINANT OF THE N ORDER #MATRIX 
A BY EXPANDING BY MINORS INTEGER ARRAY (0:N,O:N) BIHOM ALTRAN INTEGER PASCAL ALGEBRAIC ARRAY (0:i,0:PASCAL(N,BINOM)) 
MINOR=0 #PASCAL INITIALIZES THE BINOMIAL COEFFICIENT TABLE, AND # RETURNS AS ITS VALUE N CHOSE N/2 
LESS 1 IJE KEEP TRACK OF OUR MINORS USING THE METHOD OF INDEXING DESCRIBED IN CACM ~ (1960), p. 235 (R.M. 
Brown) INTEGER LuC,ADDR,SIGN,M, ~K,OLD=0,NEW=i INTEGER ARRAY (0:N+I) I=-1 I (0 } =N DO LOC=i,N; MINOR(OLD,LOC-I)=A(I,LOC);DOEND 
DO M=i,N-I # COMPUTE M+i DOEND MINORS FROM M ORDER LOC=O; DO J=I,M; I (J)=M-J; DOEND NEXT MINOR:IF (MINOR(OLD,LOC).NE.0) 
DO; K=N-i; J=0; ADDR=LOC+BINOM(K,M+I); SIGN=I NEXT USE:IF (K.EQ.I(J+I)) DO; J=J+l; SIGN=-SIGN; DOEND 
ELSE MINOR(NEW,ADDR)=MINOR(NEW,ADDR)+SIGN~A (M+i,K+i)_ #NINOR(OLD,LOC) IF (K.GT.0) DO; K=K-i; ADDR=ADDR-BINOM 
(K,M-J); GO TO NEXT USE DOEND # DISPOSE OF U~ECESSARY MINOR AND INCREMENT INDICES MINOR(OLD,DOC)=0 DOEND 
LOC=LOC+I DO J=M,i,-i; I(J)=I(J)+l; IF (I(J).LT.I(J-I)) GO TO NEXTMINOR ELSE I(J)=M-J~ DOEND #ALL M+i 
ORDER MINORS ARE NOWCALCULATED OLD=i-OLD; NEW=I-NEW DOEND RETURN (MINOR (OLD, 0 ) ) END PROCEDURE PASCAL(N,BINOM) 
INTEGER N,BINOM ARRAY BINOM #INITIALIZES TABLE OF BINOMIAL COEFFICIENTS, AND RETURNS THE #MAXIMUM NUMBER 
OF MINORS,LESS 1 INTEGER I,J ALTRAN INTEGER FLOOR=S9IFLR BINOM(0,0)=I DO I=I,N BINOM(I,0)=i; BINOM(I-I,I)=0 
 DO J=l,I BINOM(I,J)=BINOM(I-I,J-i)+BINOM(I-i,J) DOEND DOEND RETURN {BINOM(N,FLGOR(N/2))-I) END 141 
  
			
]]
##[[DATA:data/orbz/An optimal algorithm for hyperplane depth in the plane.txt|
               
			
]]
##[[DATA:data/orbz/Analysing information flows and key mediators through temporal centrality metrics.txt|
                			
]]
##[[DATA:data/orbz/An object-based approach to protocol software implementation.txt|
               
			
]]
##[[DATA:data/orbz/An investigation of a standard simulation-knowledge interface.txt|
 An application of discrete-event simulation to on-line 
control and scheduling in flexible manufacturing. /nternationa/Journa/ of Production Research 27:9, 1603-1623. 
AUTHOR BIOGRAPHIES CAROL S. RUSSELL is a doctoral student in the Computer Science and Engineering Department 
at the University of Louisville. She is currently employed as a lecturer in mathematics at Indiana University 
Southeast, New Albany, Indiana. Adel Said Elmaghraby is an Associate Professor of Engineering Mathematics 
And Computer Science at the University of Louisville. His research areas include Simulation and Artificial 
Intelligence, Robotics and Automation. He is the founding editor of the ACM/lEEE joint Simulation Newsletter 
and chairman of the IEEE Computer Society Technical Committee on Simulation (TCSIM). James H. Graham 
is currently Henry Vogt Professor of Computer Science and Engineering at the University of Louisville. 
His research interests include robotics, artificial intelligence and distributed computing. He is the 
editor of Safety, Reliability and Human Factors in Robotic Svstems, published by Van Nostrand Reinhold 
in 1991. 
			
]]
##[[DATA:data/orbz/An introduction to Extend.txt|

 AUTHOR BIOGRAPHY DAVID KRAHL is the Technical Coordinator for Imagine That! Inc. In this position he 
is responsible for the technical support and blink development for Extend. David received a BS degree 
in Industrial Engineering in 1986 from the Rochester Institute of Technology. Since then, David has performed 
consulting, technical support, and development for a wide range of simulation products. 
			
]]
##[[DATA:data/orbz/An interactive online process for developing and producing policy and procedure documentation.txt|
                  	
]]
##[[DATA:data/orbz/Analysis of a queueing system with impatient customers and working vacations.txt|
                			
]]
##[[DATA:data/orbz/An optimal algorithm for closest pair maintenance (extended abstract).txt|
               
			
]]
##[[DATA:data/fa/Ada tasking for parallel computation.txt|
               
			
]]
##[[DATA:data/fa/A decentralized communication efficient distributed shared memory.txt|
         365   
			
]]
##[[DATA:data/fa/Adaptively sampled distance fields.txt|
            .  
			
]]
##[[DATA:data/fa/A  deductive data model for query expansion.txt|
               
			
]]
##[[DATA:data/fa/&#8220;Put-that-there&#8221;.txt|
             
			
]]
##[[DATA:data/fa/A data communications course for information systems majors.txt|
               
			
]]
##[[DATA:data/fa/Adaptive, multiresolution visualization of large data sets using a distributed memory octree.txt|
            .  
			
]]
##[[DATA:data/fa/Adaptive precision in texture mapping.txt|
  Appendix: derivation of the partitioning 
algorithm The figure below shows the possible spans that may arise in a mapped pixel. When we consider 
edge information some spans become unrealizable; these are marked X. For example, the fifth span on the 
first row must have the given partitioning; if the quadri- lateral had any points inside the shaded triangle 
the endpoints of the span would be cor- ners. Sometimes we need another point of the polygon to decide 
which side of the span to partition. This point is chosen to lie off the line(s) formed by the span, 
if possible, and is marked ~ in this diagram. ...... 2-spans J2 -> N ~.~ ~.:.:~ :...:':..:'... 4-spans 
  
			
]]
##[[DATA:data/fa/3D gadgets for business process visualization&#8212;a case study.txt|
             
 
			
]]
##[[DATA:data/fa/TESLA-based secure routing protocol for wireless sensor networks.txt|
               
			
]]
##[[DATA:data/fa/Anatomy of a real E-commerce system.txt|
               
			
]]
##[[DATA:data/fa/Adaptive protocols for parallel discrete event simulation.txt|
. AUTHOR BIOGRAPHY SAMIR 
R. DAS is an assistant professor in the Division of Computer Science at The University of Texas at San 
Antonio. He received his ME in com­ puter science and engineering from the Indian Insti­ tute of Science, 
Bangalore, in 1988 and PhD in com­ puter science from the Georgia Institute of Technol­ ogy, Atlanta, 
in 1994. His research interests include parallel and distributed systems, performance eval­ uation and 
discrete event simulation. In tlhe recent past he worked on performance aspects of Time Warp based parallel 
simulation systems. 
			
]]
##[[DATA:data/fa/&#8220;Tuning&#8221; an ASM metric.txt|
             
			
]]
##[[DATA:data/fa/A data model and architecture for hypermedia database visualization.txt|
             
 
			
]]
##[[DATA:data/fa/An interactive system for teaching input processes in simulation.txt|
               
			
]]
##[[DATA:data/fa/4th Workshop on Emerging Web Services Technology (WEWST 2009).txt|
          . 2  
			
]]
##[[DATA:data/fa/An experiment on high speed file transfer using satellite links.txt|
      
 257    
			
]]
##[[DATA:data/fa/Adaptive parallax autostereoscopic LED display.txt|
             
 
			
]]
##[[DATA:data/fa/3D digital cleansing using segmentation rays.txt|
. (a) (b) Figure 19: A cross-section of the CT data showing 
colon (a) before segmentation, and (b) after segmentation.  (a) (b) Figure 20: Volume rendered images 
showing (a) presence of .uid before segmentation, and (b) .uid removed after segmentation.  
			
]]
##[[DATA:data/fa/A case study of the static analysis of the quality of novice student programs.txt|
            82 
			
]]
##[[DATA:data/fa/A decomposition solution to the queueing network model of the centralized DBMS with static locking.txt|
               
			
]]
##[[DATA:data/fa/&#8220;One stop shopping&#8221; getting connected at Texas A&amp;M University.txt|
         52  
 
			
]]
##[[DATA:data/fa/14.9 TFLOPS three-dimensional fluid simulation for fusion science with HPF on the Earth Simulator.txt|
               
			
]]
##[[DATA:data/fa/A data-analysis pipeline for large-scale gene expression analysis.txt|
               
			
]]
##[[DATA:data/fa/&#8220;User revealment&#8221;&#8212;a comparison of initial queries and ensuing question development in online searching and in human reference interactions.txt|
             . 
			
]]
##[[DATA:data/fa/A latent semantic retrieval and clustering system for personal photos with sparse speech annotation.txt|
           .   
			
]]
##[[DATA:data/fa/3D Virtual museum for Digital TV.txt|
               
			
]]
##[[DATA:data/fa/50 GFlops molecular dynamics on the Connection Machine 5.txt|
           .   
			
]]
##[[DATA:data/fa/A bisimulation for dynamic sealing.txt|
               
			
]]
##[[DATA:data/fa/3D behavioral model design for simulation and software engineering.txt|
. AUTHOR BIOGRAPHY PAUL FISHWICK is Professor 
of Computer and Information Science and Engineering at the Univer­sity of Florida. He received the PhD 
in Computer and Information Science from the University of Pennsyl­vania in 1986. His research interests 
are in computer simulation, modeling, and animation, and he is a Fel­low of the Society for Computer 
Simulation (SCS). Dr. Fishwick will serve as General Chair for WSC00 in Orlando, Florida. He has authored 
one textbook, co-edited three books and published over 100 techni­cal papers. Permission to make digital 
or hard copies of part of all of this work or personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies bear this 
notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, 
or to redistribute to lists, requires prior specific permission and/or a fee. VRML 2000, Monterey, CA 
USA &#38;#169; ACM 2000 1-58113-211-5/00/02 $5.00
			
]]
##[[DATA:data/fa/An approach to teaching simulation to undergraduates.txt|
               
			
]]
##[[DATA:data/fa/Anthropomorphization of a space with implemented human-like features.txt|
               
			
]]
##[[DATA:data/fa/A data tracking scheme for general networks.txt|
             
 
			
]]
##[[DATA:data/fa/A &#8220;conservative&#8221; approach to parallelizing the Sharks World simulation.txt|
               
			
]]
##[[DATA:data/fa/A data front-end for layered manufacturing.txt|
             
 
			
]]
##[[DATA:data/fa/190 TFlops Astrophysical N-body Simulation on a Cluster of GPUs.txt|
               
			
]]
##[[DATA:data/fa/3D-visualization of tomographic volume data using the generalized voxel-model.txt|
         57    
			
]]
##[[DATA:data/fa/Ada+SQL&#8212;an overview.txt|
       162   
			
]]
##[[DATA:data/fa/Ants in the Pants.txt|
               
			
]]
##[[DATA:data/fa/Approximate linear programs.txt|
            .  
			
]]
##[[DATA:data/fa/&#8220;Data in your face&#8221;.txt|
             . 
			
]]
##[[DATA:data/fa/Accurate modeling of the hybrid hash join algorithm.txt|
               
			
]]
##[[DATA:data/fa/3D-model-based face replacement in video.txt|
                			
]]
##[[DATA:data/fa/A data labelling technique for high-performance protocol processing and its consequences.txt|
  A Implementation Considerations The simple version of chunks that we have discussed in this paper 
are easy to parse because of their fixed-field format. Chunks also simplify distributed protocol processing 
because they can be demultiplexed via the TYPE field and routed to the appropriate processing units. 
Individual processing units are responsible for knowing which chunk (ID, SN, ST) tuple to use. Although 
simple to process, the chunks discussed in this paper do not use bandwidth efficiently. Chunk header 
size may be reduced if we are willing to perform additional pro­cessing andfor take advantage of the 
characteristics of specific underlying networks. The chunk syntax transformations that we discuss in 
this section are invertible, because they allow recovery of the original chunk syntax. Protocols can 
be de­fined to use the simplest form of chunks and chunk syntax transfonnations can be used to increase 
the bandwidth effi­ciency of chunk headers without changing the basic operation of the protocol. In fact, 
chunks headers can have different formats in different parts of the network if desired. one way to reduce 
chunk header size is to avoid including chunk header fields that seldom change. For example, instead 
of carrying an explicit SIZE field, chunk size information can be shared by specification or by signaling. 
With the specification approach, the value of the SIZE field of each chunk TYPE is part of a protocol 
specification. An alternative is to use a signaling system similar to that used for a virtual circui~ 
when a connection is formed, the value of the SIZE field of each chunk TYPE can be carried in the signaling 
message. Another form of signaling system is that used for TCP header compression [JACO 90]; a similar 
system could be adopted for chunks. With any of these approaches, the chunk header need not contain a 
SIZE field. The C.ST bit also could be sent as a signaling message, because it is used only when a connection 
closes. Some chunk header ID fields can be eliminated with the use of implicit ID s. An implicit ID takes 
advantage of the fact that the SN fields of a chunk change in lock-step. For example, consider the C.SN 
(connection SN) and T.SN (TPDU SN) fields of a TPDU. The value of (C.SN -T.SN) is identical for each 
chunk of a TPDU, and this difference can be used in place of an explicit T.ID (TPDU ID) field. Figure 
7 shows an example of how an implicit ID is derived. C.ID AA AA AA AA C.SN 35 3637 38 394041 42 T.SN 
50123450 T.ID = C.SN -T.SN 301363636363636i............. . . ~42 T.ST 10000010 DATA TPDU DATA Figure 
7: How an implicit T.ID is derived. Another way to reduce chunk header size is to minimize the number 
of different frames used by different protocol functions. Because each different frame requires a separate 
(ID, SN, ST) tuple, the fewer different frames, the smaller the chunk header. Also, each time any frame 
boundary occurs, a new chunk header is needed. Consequently, aligning frame boundaries also reduces the 
chunk header overhead. Packets are utilized more efficiently if multiple chunks can be carried in a packet. 
Previously we discussed packets that carry multiple chunks from a single connection, and this idea can 
be extended to packets that carry chunks from multiple connections. Data, signaling information, and 
acknowledg­ments can be combined in any combination. Notice that this allows an error detection system 
that utilizes chunks to achieve the efficiency associated with the piggybacking of acknowledgments without 
requiring the explicit design of piggybacking into the error control protocol. Thus, chunks provide more 
modularity in protocol design by allowing some efficiency considerations to be separated from other aspects 
of protocol design. In some cases, the chunks headers within a packet maybe related, if so, some chunk 
fields may be implicit rather than explicit. Forexample, because thechunk following the last TPDU DATA 
chunk is always a TPDU ED chunk, the ED chunk does not require a chunk header because its TYPE is known, 
and its C.ID and T.ID fields can be derived from the DATA chunk header. In general, we can use positional 
in­formation and Huffman encoding to reduce the chunk header overhead within a packet. On a network that 
has low loss and maintains packet or­der, we need not send SN S in each chunk header. SN S can be regenerated 
at the receiver with a counter that is incre­mented each time a data element passes. However, because 
loss and misordenng may occur, the counter at the receiver may sometimes lose synchronization with the 
transmitter. To recover synchronization, the transmitter must send SN infor­mation to the receiver occasionally, 
such as at the beginning of each PDU. During the time that the receiver is out of synchronization, the 
error detection system will detect the incorrect sequence numbers and allow any incorrect chunks to be 
discarded. Chunks are a dynamic way of mapping PDU information to packets. If we make the PDU small enough 
to fit into a packet, then the same chunks will appear in each packet. If this is true, then a protocol 
can specify a static packet format rather than the chunk format and eliminate the complexity of dynamically 
fitting chunks into packets. Thus, the design of conventional packet header formats can be considered 
a special case of chunks. B Comparison of Chunks with Other Protocols The syntax of chunks is similar 
to the syntax of other proto­cols, although chunks have a cleaner, more general design. Chunk headers 
provide explicit framing and type informa­tion for all PDU types in a communication system. Existing 
protocols provide implicit or explicit framing information for one or more PDU types. The equivalent 
of the chunk SIZE field is implicit for all existing protocols. Carrying some framing infortnation (ID, 
SN, ST) implicitly is common for protocols designed to operate on non-misordering channels. The type 
5 ATM Adaptation Layer (AAL) [LYON 91] provides a single bit of higher-layer framing information in the 
ATM cell header that is equivalent to the T.ST bit in chunks. The error detection code field is found 
by its position in the frame. No explicit ID, SN, or TYPE fields are needed because because ATM links 
do not misorder. Because no SN is used, an SN of zero cannot be used to indicate the beginning of a frame. 
A cell is considered to contain the beginning of a frame if the previous cell was the end of a frame. 
LEN information is explicit. Thetype4 AALprotocol uses an C.ID (MID), a4-bit C.SN, and framing information 
denoting the beginning, continua­tion, or end of message (BOM, COM, EOM) [DEPR 91]. EOM is equivalent 
to X.ST, and with BOM, the X.ID and X.SN can be derived from the C.SN. No C.ST is used. LEN information 
is explicit. The HDLC link-layer protoco114 provides three levels of framing. The basic HDLC frame is 
delimited by flags, and the error detection code is found by its position in the framq thus TYPE, T.ID, 
T.SN, and T.ST are implicit. HDLC uses a C.ID (address field), C.SN (SN field), and C.ST is indicated 
by a HDLC disconnect. The P/F bit can be used as an X.ST bit, but the X.ID and X.SN are implicit and 
derived from the C.SN and X.ST bit. LEN also is implicit. The URP protocol [FRAS 89] provides three levels 
of framing. URP uses a C.SN, but the C.ID is implicit because URP connections are mapped one-to-one onto 
network con­nections, and the C.ST is indicated by connection tear-down. URP delimits messages with a 
BOT marker (similar to X. ST) and delimits blocks (TPDU S) with a BOT marker or BOTM marker (similar 
to T.ST). The error detection code is found by its position in the framq thus TYPE, T.ID, and T.SN are 
implicit. The X.ID and X.SN are implicit and derived from the C.SN and X.ST bit. LEN also is implicit. 
Some protocols are designed to work with misordeting channels, and provide explicit framing information. 
IP [POST 81] uses provides T.ID (identification field), T.SN (fragment offset field), and T.ST (logical 
inverse of the more fragments bit) fields. The VMTP protocol [CHER 86] pro­vides error detection per 
packet, so T.ID, T.SN, T. ST, and TYPE information is implicit. VMTP also provides an X.ID (transaction 
identifier), a X.SN (segOffset), and X.ST bit (End-of-Message). LEN is implicit. Axon [STER 90] provides 
several levels of framing, Each level of framing has an SN (index) and ST bit (limit). How­ever, not 
all levels of framing have an ID, which means that some frames are assumed to be hierarchically nested. 
Chunks allow the use of completely independent frames at all levels. Axon headers also contain some explicit 
type information, but some PDU pieces, such as the error detection checksum, have their functionality 
indicated by position within the PDU, rather than explicit type information. LEN is implicit. The Axon 
framing structure provides enough information for placement of disordered data into application memory 
space. The only data processing that occurs is the compu­tation of an error detection checksum for each 
packet. The chunks framing structure is designed not only for data place­ment, but also for data processing 
functions that are indepen­dent of data framing, such as error detection and encryption15. Some protocols 
can accept disordering for some framing levels, but require that data be reordered for other framing 
levels. The DeIta-T protocol [WATS 83] has a C.ID and C.SN, with the C.SN large enough to allow reordering 
of l tMaY ~~er liti-layer protocols we SimikiI to HDLC (SDLC, Ccp, LAPB, LAPD, etc.). 15me abili~ to 
processdisordered data depends not ordy on what fi~ing information is available, but rdso on the use 
of functions that can accept disordered data [FELD 92]. disordered data. Within the data stream, Delta-T 
provides symbols that mark the beginning and end of a higher-level frame (the B and E symbols). The E 
symbol is equivalent to the X. ST, and the X.ID and X.SN can be derived from the 1? symbol and C.SN. 
The XTP protocol [XTP 90] is similar with its use of BTAG and ETAG fields. TYPE, T.ID, T.SN, and T.ST 
information is implicit for these protocols. Generally, framing information is provided in two ways: 
header fields, or flags/symbols in the data stream. The ad­vantage of using header fields is that we 
need not parse the data streatyt for flags. The advantage of flags is that multiple frames can be delimited 
within a single packet. Chunks pro­vide the best of both worlds because multiple chunks, each of which 
delimits a frame, can be placed in a single packet. Once the chunk headers have been found, we do not 
have to parse chunk data fields for flags. Fragmentation Algorithm Assume that we have a chunk that 
we wish to fragment into two chunks, chunks and chunk.b. The algorithm below can be repeated until each 
chunk carries only a single unit of data. Ifi chunk.len >1 Then: chunk_a.type i--chunk.type chunk_a.size 
i-chunk.size chunkalen +-newlen chunks.c.id h chunk.c.id chunkat.id + chunk.t.id chunk-a.x.id G chunk.x.id 
chunk-a.c.sn b chunk.c.sn chunkat.sn -chunk.t.sn chunk_a.x.sn * chunk.x.sn chunks.c.st + O chunkat.st 
e O chunks.x.st + O FOH O~ i < new-len chunks.data[i] +-chunk.data[i] chunk-b.type -chunk.type chunk-b.size 
e chunk.size chunk-b.len +-chunk.len -new_len chunk_b.c.id e chunk.c.id chunk-b.t.id e--chunk.t.id chunk_b.x.id 
e chunk.x.id chunk-b.c.sn e chunk.c.sn + newlen chunk_b.t.sn +--chunk.t.sn + new_len chunk-b.x.sn e chunk.x.sn 
+ newlen chunk-b.c.st &#38; chunk.c.st chunk-b.t.st ~ chunk.t.st chunk.b.x.st -chunk.x.st Fo~ new_len 
s i < chunk.len chunk-b.data[i] +-chunk. data[i -newlen]  D Reassembly Algorithm Assume that we have 
two chunks, chunk_a and chunk.b, that we wish to reassemble into chunk-c. The algorithm below can be 
repeated as long as eligible chunks exist. It , (chunks.type = chunk_b.type) A (chunks.size = chunk_b.size) 
A (chunks.c.id = chunk_b.c.id) A (chunks.t.id = chunk_b.t.id) A (chunks.x.id = chunk_b.x.id) A (chunks.c.sn 
+ chunks.len = chunk-b.c.sn) A (chunks.t.sn + chunks.len = chunk-b.t.sn) A (chunks.x.sn + chunks.len 
= chunk-b.x.sn) Then: chunk.c.type +-chunks.type chunk-c.size e chunk_a.size chunk_c.len +--chunk-a.len 
+ chunk.b.len chunk-c.c.id G chtmka.c.id chunk-c.t.id -chunka,t,id chunk-c.x.id k chunkd.x.id chunk-c.c.sn 
b chunks.c.sn chunk-c.t.sn ~ chunk-a.t.sn chunk-c.x.sn e chunks.x.sn chunk-c.c.st ~ chunk_b.c.st chunk-c.t.st 
+ chunk-b.t,st chunk-c.x.st +-chunk_b.x.st FOE O ~ i < chunks.len chunk_c.data[i] -chunks.data[i] Fo~ 
chunks.len ~ i < chunk-b.len chunk-. c.data[i] -chunk-b. data[i -chunks.len] 
			
]]
##[[DATA:data/fa/A DBMS for large design automation databases.txt|
               
			
]]
##[[DATA:data/fa/Active network vision and reality.txt|
               
			
]]
##[[DATA:data/fa/3D reconstruction of planetary nebulae using hybrid models.txt|
             
 
			
]]
##[[DATA:data/fa/16.4-Tflops direct numerical simulation of turbulence by a Fourier spectral method on the Earth Simulator.txt|
Figure 4: Intense-vorticity isosurfaces showing the region where |.| 
>.¯+ 4s; . is the vorticity, and .¯and s are the mean and standard deviation of |.|, respectively. The 
size of the display domain is (59842 × 1496)., periodic in the vertical and horizontal directions. . 
is the Kolmogorov length scale and R. = 732 (see Table 3). Figure 5: A closer view of the inner square 
region of Fig. 4; the size of the display domain is (29922 × 1496).. Figure 6: The same isosurfaces 
as in Fig. 4; a closer view of the inner-square region of Fig. 5. The size of the display domain is (14962 
× 1496).. Figure 7: The same isosurfaces as in Fig. 4; a closer view of the inner-square region of Fig. 
6. The size of the display domain is (7482 × 1496).. 
			
]]
##[[DATA:data/fa/&#8220;Alfonse, give me a call!&#8221;.txt|
           .   
			
]]
##[[DATA:data/fa/Algebraic constructions for algorithms (Extended Abstract).txt|
               
			
]]
##[[DATA:data/fa/Alfonse, Your Java Is Ready.txt|
             . 
			
]]
##[[DATA:data/fa/Database.txt|
                   
]]
##[[DATA:data/fa/An implementation-independent approach to teaching recursion.txt|
               
			
]]
##[[DATA:data/fa/A comparison of three methods of face recognition for home photos.txt|
               
			
]]
##[[DATA:data/fa/3-D graphic display of discrete spatial data by prism maps.txt|
               			
]]
##[[DATA:data/fa/A compression algorithm for DNA sequences and its applications in genome comparison.txt|
                			
]]
##[[DATA:data/fa/Accurate skin deformation model of forearm using MRI.txt|
               
			
]]
##[[DATA:data/fa/An overview of post information warfare data recovery.txt|
        . 254  
			
]]
##[[DATA:data/fa/An introduction to the simulation data language.txt|
             . 
			
]]
##[[DATA:data/fa/A case study of file system workload in a large-scale distributed environment.txt|
        . 277  
			
]]
##[[DATA:data/fa/A linkage analyzer for process management.txt|
         . 221 
			
]]
##[[DATA:data/fa/Adaptive storage control for page frame supply in large scale computer systems.txt|
               
			
]]
##[[DATA:data/fa/A comparative study of the NAS MG benchmark across parallel languages and architectures.txt|
. A 
Compiler Speci.cations The following is a summary of the compilation process used in these experiments. 
The compiler, version number, and command-line arguments used are given for each language and platform. 
In addition, the communication mechanism used at runtime is noted. F90+MPI GNU g77 0.5.25 O3 MPI (MPICH 
1.2) HPF PGI pghpf 3.1-2 O3 Mautopar Moverlap=size:1 Mmpi MPI (MPICH 1.2) ZPL U. Wash. zc GNU gcc 1.16a 
2.95.2 O3 MPI (MPICH 1.2) IBM SP compilers F90+MPI IBM mpxlf 2.4 O3 MPI (IBM) HPF PGI pghpf 2.4-4 
 O3 Mautopar Moverlap=size:1 Mmpi MPI (IBM) ZPL U. Wash. zc IBM mpcc 1.16a 2.4 O3 MPI (IBM) Cray T3E 
compilers F90+MPI Cray f90 3.3.0.0 O3 MPI (Cray) CAF Cray f90 3.3.0.0 O3 X 1 Z nprocs E-registers HPF 
PGI pghpf 3.0-1 O3 Mautopar Moverlap=size:1 Msmp SHMEM ZPL U. Wash. zc Cray cc 1.16a 6.3.0.0 O3 SHMEM 
 Sun Enterprise 5500 compilers F90+MPI WorkShop f90 5.0 fast MPI (Sun) SAC U. Kiel sac2c SUNW cc 0.90alpha 
5.0 O3 v1 noLIR noTSI maxlur 3 mt fast shared memory ZPL U. Wash. zc SUNW cc 1.16a 5.0 fast MPI (Sun) 
 SGI Origin compilers F90+MPI MIPSpro 7 f90 7.3.1.1m O3 MPI (SGI) HPF PGI pghpf 2.4-4 O3 Mautopar Moverlap=size:1 
Mmpi5 MPI (SGI) ZPL U. Wash. zc MIPSpro cc 1.16a 7.3.1.1m O3 MPI (SGI)  B Experimental Timings The 
following tables contain the best observed times for each con.guration and were used to compute the speedup 
graphs of Section 5. Linux cluster (ethernet) Class B processors 1 2 4 8 16 32 64 128 F90+MPI 362.60 
194.51 110.41 52.51 30.39 17.55 8.29 6.21 ZPL 309.43 175.12 97.83 55.14 35.24 21.30 11.73 11.88 HPF 
. 896.02 964.65 618.68 362.18 223.62 146.13 115.47 Linux cluster (ethernet) Class C processors 1 2 
4 8 16 32 64 128 F90+MPI . . 828.18 390.26 215.02 121.04 56.51 34.66 ZPL . . 725.29 384.99 214.52 
117.45 62.82 44.49 HPF . . . . . . . . 5Although Msmp would be more appropriate for the Origin, 
it was not supported with our installation. Linux cluster (myrinet) Class B processors 1 2 4 8 16 32 
64 128 F90+MPI 359.33 181.84 99.13 44.02 23.59 13.21 5.82 3.34 ZPL 308.51 176.92 108.82 42.57 21.96 11.05 
6.10 3.35 HPF . 616.38 516.15 314.54 177.57 104.10 62.95 47.15 Linux cluster (myrinet) Class C processors 
1 2 4 8 16 32 64 128 F90+MPI . . 775.83 356.45 189.27 104.95 45.93 24.99 ZPL . . 827.56 338.99 
172.15 86.87 44.53 23.27 HPF . . . . . . . . IBM SP Class B processors 1 2 4 8 16 32 64 96 
F90+MPI . 83.48 48.86 23.19 12.55 7.83 3.80 . ZPL . 82.27 45.12 28.75 14.41 7.71 4.94 3.98 HPF 
. . . . . . 42.17 31.10 IBM SP Class C processors 1 2 4 8 16 32 64 96 F90+MPI . . . . 96.35 
54.65 25.40 . ZPL . . . . 104.01 52.08 29.96 21.95 HPF . . . . . . . . Cray T3E Class 
B processors 1 2 4 8 16 32 64 128 256 CAF . 117.38 58.86 28.98 14.98 7.87 4.22 2.31 1.15 F90+MPI . 
 127.22 68.94 31.47 17.52 10.49 4.77 2.92 1.96 ZPL . 127.79 59.08 30.39 15.55 7.88 4.51 2.63 1.63 HPF 
 . . . . . . 80.16 . 56.35 Cray T3E Class C processors 1 2 4 8 16 32 64 128 256 CAF . . 
. . 118.42 59.89 30.23 15.91 7.91 F90+MPI . . . . 128.59 70.89 32.14 18.12 10.92 ZPL . . . 
 . 112.63 57.85 31.24 15.30 8.24 HPF . . . . . . . . . SGI Origin Class B processors 1 2 
4 8 16 32 64 128 256 F90+MPI 202.13 130.04 61.88 32.84 16.93 8.46 3.98 2.65 264.17 ZPL 244.88 147.27 
72.37 39.06 19.37 9.66 5.46 3.10 310.15 HPF 556.13 488.93 341.50 183.94 94.67 52.80 29.33 24.96 . SGI 
Origin Class C processors 1 2 4 8 16 32 64 128 256 F90+MPI . 1534.95 853.55 380.58 135.18 64.36 33.62 
22.51 340.35 ZPL . 2004.99 1026.91 441.74 160.35 75.09 41.31 26.47 445.16 HPF . . . 1949.62 1006.18 
 . . . . Sun Enterprise Class A processors 1 2 4 8 14 F90+MPI 73.49 39.36 19.87 11.34 . ZPL 61.29 
35.37 17.59 12.60 12.15 SAC 92.56 49.27 27.07 17.27 15.18 Sun Enterprise Class B processors 1 2 4 8 
14 F90+MPI 341.77 172.33 103.78 59.13 . ZPL 277.53 162.00 80.02 57.87 55.83 SAC 434.02 230.80 126.08 
79.49 68.76  
			
]]
##[[DATA:data/fa/3D widgets for exploratory scientific visualization.txt|
             
			
]]
##[[DATA:data/fa/A Bayesian batch means methodology for analysis of simulation output.txt|
 
[EEE PETER W. GLYNN Peter W. Glynn received his Ph.D. in Operations Research from Stanford University 
in 1982, and is currently an Assistant Professor of Industrial Engineering at the University of Wisconsin-Madison. 
He is a member of the Operations Research Society of America, the Institute of Mathematical Statistics, 
and the Statistical Society of Canada. Professor Peter W. Glynn Dept. of Industrial Engineering University 
of Wisconsin-Madison 1513 University Avenue, Rm 385 Madison, WI 53706  
			
]]
##[[DATA:data/fa/Adaptive set intersections, unions, and differences.txt|
               
			
]]
##[[DATA:data/fa/4DIS.txt|
                			
]]
##[[DATA:data/fa/50,000 users on an Oracle8 universal server database.txt|
           530 
			
]]
##[[DATA:data/fa/A cell probe lower bound for dynamic nearest-neighbor searching.txt|
               
			
]]
##[[DATA:data/fa/Algorithms for compile-time memory optimization.txt|
                			
]]
##[[DATA:data/fa/A composite modelling approach to software performance measurement.txt|
        . 276  
			
]]
##[[DATA:data/fa/3-dimensional pliable surfaces.txt|
           .   
			
]]
##[[DATA:data/fa/A correspondence matching technique of dense checkerboard pattern for one-shot geometry acquisition.txt|
Figure 6: Reconstructing the geometry of discontinuous surfaces: a) capture scenario, 
b) camera image, and c) reconstructed geom­etry.  
			
]]
##[[DATA:data/fa/A fast Las Vegas algorithm for triangulating a simple polygon.txt|
. I I I I (b) I I i I (b) i I I (ol I I(a) I ---'-'I (b) 
I I (a) I I (d) I (d) (b) (b) (b) (b) Figure 1. Five line segments and their vertical visibility decomposition. 
I ~ I I 61 I I ~1 I I _ I  f 114""-.--8T"'-.. ! I 31K"- i °~l I I I I I I I Figure 2. A simple curve 
through the line segments of Figure 1. The endpoints of the origi- nal segments are (1,37), (6,9), (13,16), 
(19,22), and (30,31). In a polygon the curves would be polygonal chains. 3:3 32 18 28 29 3 q¢~/~ 8 19~ 
23 22 Figure 3. Representative family trees for the curve shown in Figure 2. The tree on the left is 
the inner family tree for the region whose corners are 7, 8, 15, and 14. The tree on the right is the 
inner family tree for the region of type (c) in Figure 1. 22 
			
]]
##[[DATA:data/fa/A new solution to the critical section problem.txt|
         -88 - 
			
]]
##[[DATA:data/fa/A &#8220;curriculum-cycle&#8221; environment for teaching programming.txt|
 dents using OOT as part of a computer summer camp at our uuiversit y. 
			
]]
##[[DATA:data/fa/Adding some spice to CS1 curricula.txt|
  s The reduced enrolments in 1996 are proportionate 
to an overall decline in the number of university registrants. 208 
			
]]
##[[DATA:data/fa/A parallel branch-and-bound algorithm for MIN-based multiprocessors.txt|
         . 223 
			
]]
##[[DATA:data/fa/A database driven server for an Internet based plant layout presentation system.txt|
               
			
]]
##[[DATA:data/fa/A debugging calculus for mobile ambients.txt|
               
			
]]
##[[DATA:data/fa/Adapation in a ubiquitous computing management architecture.txt|
        567    
			
]]
##[[DATA:data/fa/A first course on files.txt|
             
 
			
]]
##[[DATA:data/fa/A multilevel approach to undergraduate software engineering education.txt|
               
			
]]
##[[DATA:data/fa/&#8220;Alfonse, you have a message!&#8221;.txt|
               
			
]]
##[[DATA:data/fa/Adding rule-based reasoning to a demonstrational interface builder.txt|
               
			
]]
##[[DATA:data/fa/An operating systems programming laboratory course.txt|
               
			
]]
##[[DATA:data/fa/A comparison of classifiers and document representations for the routing problem.txt|
            .  
			
]]
##[[DATA:data/fa/Adaptive selectivity estimation using query feedback.txt|
 
 Appendix Specifications of Update Workloads In our experiments, an update query is simulated by its 
effect on the value distribution of the attribute of interest. An update query is specified by five parameters: 
(i, fV, D, [rein, rnaz], problNs), where i means this update takes place immediately before the ith 
query in the query stream. N is the number of tuples updated (either inserted or deleted). Each tuple 
s attribute value is randomly generted from range [rein, maz] according to a distribution D. A tuple 
is inserted with probability problNs or deleted with probability y 1 problNs. Three different update 
workloads are tested, each of which is interleaved with another 40 random selection queries. The three 
update workloads are specified in the following, with i7(z, y) denotes the uniform distribution among 
range [z, y], iV(~, a) the normal distribution with mean p and standard deviation u. LOAD1: (11, 4500, 
U( 50, 250), [ 50, 250], 1.0) LOAD2: (11, 2250, U( 150, 550), [ 150, 550], 0.75), (17, 2250, U(-150, 
550), [-150, 550], 0.75), (23, 2250, U(-150, 550), [-150, 550], 0.75), (29, 2250, U(-150, 550), [-150, 
550], 0.75). LOAD3: (11, 3000, N( 63, 50), [ 150,25],0.9), (17,1500, N(112,40), [25,200],0.1), (23, 2250, 
N(290, 60), [200, 375], 1.0), (29, 2250, N(455, 50), [375, 550], 0.4). (a) approximating distribution 
curves 35 30 ~25 * . :20 g,5 : 10 5 0 -100 0 100 200 300 400 Figure (a) approximating distribution curves 
70 60 ,: .... ... .,. 50 ­$ ,. z ,? Ob o 200 400 600 800 arlibute values Figure 3: (a) approximating 
d!strbution curves atbibute values Figure [a) atmroximatina,,, distribution curvas 60 50 - (b) selectivity 
e$timstion errors [c o 10 20304050 queries 100, , I I   ~ :k 500 o 10 20304050 queries 2: Normal 
Distribution (b) selecwty aatimstion errors 2030 4050 queries IL10 150 T ~ ~ 100 ? G .: 50­g PY 1000o 
1020304050 Chi-Square Distribution fb) selactivitv stimation errors 1P o 1020304050 queries 4: the F 
Distribution (b) selectivity estimation errors 20, . .. .. [L o 1020304050 queries Figure 5: a hi-modal 
Distribution (a) approximating distribution curves 3 ~ z * al 3~~ % m I z~ i 4000 ­ .. E 2 c 3000 -.,. 
... ... . . .. ~ 2000 ­ . ... 1000;. J o~ 1950 1955 1960 1965 1970 1975 attribute values (monthfyear) 
 Figure 6: Adaptation in LowQL (a) approximating distribution curves 3000 g ,-1. 0 2500-k al $J = 032000 
-; 0. ~ u! ~ ~ 1500 -. g .. .. E 40 3 .. :. ~ . ~ 1!46 1950 1952 1954 1956 1958 1960 attribute values 
(monthfyear) Figure 7: Adaptation in MedQL (a) approximating distribution cuwes 900 800 -. 700­ 500 
... . 400-8 . 300 ... . . . 200­ ;~1 1949 1950 1951 1952 1953 attribute values (month/year) Figure 8: 
Adaptation in HighQL (b) selectivity estimation errors queries (Low queries Query Locality) (b) selectivity 
estimation errors * (Medial queries ., f 35 Query Locality) (b) selectivity estimation ,, 40 errors 45 
, 50 queries (High Query Locality) 172 (1) afkr (a) Animation of DWibution Curves 9 queries, O update 
(2) aner 13 warms, 1 ur3date :m (3) after 20 queries, 1 update (4) aiter 35 queries, 1 update ~ ~ Figure 
9: (a) Animation of Distribution Curves (1) aner 9 qwmes, 0 update (2)attQr 13querles, ~ (3) atter 19 
queries, 2 updates (4) after 35 queries, 63 Adaptation l update 4 updates 1 in Update 30 q @ o Y [L0 
5 150, LOAD1 (b) Selectivity ,Wx 10 15 queries Estimation Errors ,x &#38;*+ %:;3.%: :.%..Xx 20 25 30 
S5 queries I ) I ~ (1) after Figure 10: Adaptation (a) Animation of Distribution Curves 9 queries, O 
update (2) after 13 queries, 1 update 60, 1 in 50, Update LOAD2 (b) Selectivity Estimation Errors ~~ 
(3) after 24 queries, 3 updates ~~ (4) after 35 queries, 4 update$ queries Figure 11: Adaptation in Update 
LOAD3  
			
]]
##[[DATA:data/fa/3D geometric simulation of MEMS fabrication processes.txt|
               
			
]]
##[[DATA:data/fa/3D Galatea.txt|
               
			
]]
##[[DATA:data/fa/Adding inheritance to Ada.txt|
               
			
]]
##[[DATA:data/fa/3D agent-based virtual communities.txt|
          .  
			
]]
##[[DATA:data/fa/An animation of a fixed-radius all-nearest-neighbors algorithm.txt|
          387  
			
]]
##[[DATA:data/fa/4-8 factorization of quadrilateral subdivision.txt|
          304  
			
]]
##[[DATA:data/fa/A decomposition method for the analysis and design of finite state protocols.txt|
          176  
			
]]
##[[DATA:data/fa/A new infeasible interior-point algorithm for linear programming.txt|
       , 1989. 
			
]]
##[[DATA:data/fa/A JAD experience (abstract).txt|
               
			
]]
##[[DATA:data/fa/A data management system for a small computer.txt|
               
			
]]
##[[DATA:data/fa/A core calculus of dependency.txt|

 A Translations into DCC The translations of the various source calculi into DCC are given in Tables 
7-12 below. To make the translations more readable, most of the cases of sums and products are left out. 
We also use the DCC combinator and abbreviation  dot : TK(TK (t)) + Tati dot =hr: T,(T~(t)).bindy=xinbindz=yin(~,u~ 
z) (seqbindf =eine ) = (seqv=e inbindf =v ine ) where v is a fresh variable. Most of the translations 
also re-quire a coercion combinator for interpreting subsumption, but these combinators-and a few others-need 
to be defined specially for each system. These definitions are found in each translation. Table 7: Translation 
of the Call-by-name Functional SLam Calculus into DCC (excerpts). coerw, 1s2 : s; --f s; = k~:T~(unit~).bindy=xin(~~y) 
 COerce(,it,k),(unit,~)  = kc: T,(s~~uf).bindy=nin~lc (~z:~~.coerce~,,,,(y(coerce,~,,.~,z))) =oe~ce(.s2+U, 
,w),(s,+U2,~) = hx: T,(s; xuT).bindy=xin~~~~ (coerce,Y,,s2(proj1 y),coerce,,,,,(proj2y)) coerce(.~,,,,,K),(.~,xu,,~) 
 = hr:T,((s~+u~)~).bindy=.~in~~~ (seqz=yin casezcoeYCe(,~,+u,,IC),(SZ+UZ,K ) of injI(w). lift (injl (coerce,T,,,T, 
w)) 1inj2(w).lift (inj2 (coerce,,,,, w))) w4 [Unit] rk(),:(unit,K)* r* I- llK(lift()):TK(unitJ Tl-e:sl 
r* t- e* : S; SliS2 kbl rkees2 * r* t- (coerce,y,,,T, e*) : s; r*,f:s*  r,f :ske:s be*:s* [JW rk(pf:s.e):s 
* r*l-(pf:s*.e*):s* be*:~; v-4 rk(h:sl.e)K:(~l * r* k (qK (LX : s;. e*)) : T,(s; -+ s;) r,x: sl I-e : 
~2 r*,x:s; -+sz,K) l-t-e: (s, --+s~,K) rFel :sl r* k e* : TK(s; --t s;) r* k e; :s; LAPPI rk(eel):s20K 
* r*t-dot(bindf=e*in(qr(fe;))):(s2*K)* jisfresh rt-ei:Si r* I-e: : ST [Pair] rk(el,e2)K:(sl Xs2,K) * 
r* +(r(,(e;,e$)): G(sT Xsb) rte:(Sl Xs2,K) r* l-e* : T,(s; xs;) [WI rk(projie):si*K * I-'* (bindx= e* 
in(TIK (projix))) :(SiOK)* k dot xis fresh TFe:si r* t e* :s; [WI rt(injie)h-:(sl fs2,K) * (qK(lift (injie*))) 
+$)I) r* I- : T,((s; r* k e* : T,( (s; + s;)~) r*,x:sfke;:s* r*t-dot( bindy=e* T+~:(s,+s~,K) r,x:siFei:s 
in (TIK( seqv=yin y fresh   [Case] =+ casev of injI(x).e; 1inj2(x). ez))) : (S*K)* rE(caseeofinjI(x).el 
Iinj2(x).e2):s*K rt-e:s r* f e* :s* [Protect] rt-(protect,e):s*K * r*I-ddot(qre*):(s*K)* Table 8: Translation 
of the Slicing Calculus into DCC (excerpts). W-1 r,x:s,rfkx:s+r*,x:s*,(r')*k~:~* [Unit] rt On : (unit,{n}) 
=+ r*I-r({,)(lift0) :T{,)(unit~) [km1 r,x:sI k e: g r t- (Ix:s~.~),: (s, -+s2,{n}) * r* t- (q{,,) r*,X:Sfke*:s; 
(Lx: sT.e*)) : T{,,)(si -+ ss) Tke: (s, +s~,K) rFel:sl r* t-e* : TK(s; -+ s;) r* t-e; :s; VPPI rt(eel):s20~ 
* r* I- dot (bindf= e* in (Q (fer))) : (s2oK)* fis fresh Table 9: Translation of the Binding-time Calculus 
into DCC (excerpts). r,x:s,r~x:sJr*,x:s*,(r )*~.:s* WI [Unit] rt ()p: (unit,@ *r* I- (qp (lift 0)) : 
Tj(unitl) r-,x: s1 k e : ~2 r*,x:s;t-e*:~;km1 rk(hr:sl.e)p:(s~ -+s2,P) * r* I- (Q (IX :s;.e*)) :Tp(s; 
-+ sz) rte: (~1 +s2,/3) r t- el : s1 j r* k e* : Tg(s; -+ s;) r* ~ T ; f is fresh L%wl rk(eel):s2 
Table 10: Translation true = (if e thene, elsfz; = = proj, = c0ercet.p = c0erceL.H= c~~erceHcmd.Lcmd 
= r*l-(bindf=e*in(fe;)):s; of the Smith-Volpano Calculus into DCC. (inj 1 0) (inj;! 0) (caseeof injl(x).el 
 1inj*(n).ez),n is fresh theprojection statetothe x oftbe variable hf..f , e = L, H, (L cmd),or (H cmd) 
hf.hs:S"f,(rH)XS"L(rL).~H (,fS) hf'.h~:SVff(r~)xSV~(T~).lift (,f's,proj2s)  W4 rH;r~tX:~=+(hO.proj,O):sv(rH,rL,z) 
ifxErT [ TrueH] rH;rL k true :H * (ho.qH true) :sv(rH,rL,H) [FalseHj rH;rL t false:H + (ho.T)H,fdse) 
:sv(rH,rL,H) [True-L] rH;rLI-true: L* (hatrue) :sv(rH,rL,q [FalseL] r,&#38;rL.t false : L + (ho.,fahe) 
: s"(rH,rL,L) P@Hl rH;rLk skip:H cmd+(ha,proj,O):sv(r,,r,,H cmd) [Sk&#38;L] rH;rLbskip:Lcmd+(ho.lift 
CJ):SV(TH,TL,LC~~) WI rH; rL t e : .w .w ISI rH;rLbe:21 * e* : sv(rH,rL,SO) (COerCeSople*) : s"(rH,rL,SI) 
[Assigns] r&#38;rLke: H rH =(~l,...r&#38;) rH;rL!F((xi:=e):Hcmd j e*:sv(rH,rL,H) (h~.(proj,(proj, @,...,(e* 
(~),...,)):Sv(r~,r~,Hcmd) [AssignL] rH;rLte:L rL=h,...,4 rH;rLl-(q:=e):Lcmd * e : sv(rH,rL,L) (ho.lift 
((proj1Q),(proj,(proj*(T),...,(e*cT),...,))):sv(rH,rL,Lcmd) rH;rLkCI:Hcmd rHH;rLb-c2:Hcmd j CT:SV(rH,rL,Hcmd) 
c;:SV(rH,rL,Hcmd) PeNI rH;rL k (cI;c2): H cmd (h0.c;(cl Q,proj2O)):SV(rH,rL,Hcmd) rH;rL+cC1:Lcmd rH;rLkC2:Lcmd 
j Ci :S"(rH,rL,L cmd) C;:s"(rH,rL,L cmd) rH;rLk(Cl;C2):Lcmd (ho.seqal =(Ci6) in(c~a~)):S"(TH,TL,Lcmd) 
WI r&#38;rLke: H rH;rL k Ci :H cmd rH;rLtifethenclelsec;?:H cmd * e*:SV(rH,rL,H) (lcr.bindv= (e* O) c; 
:SV(l-H,r-L,HCrnd) v is fresh inifvthen(Ci cr)else(c;o)):SV(rH,rL,Hcmd) WI rH;rLte:L rH;rLtci:Hcmd rH;rLt-ifethenclelsec2:Lcmd 
e*:sv(rH,rL,L) of:sv(rH,rL,Lcmd) * (ho.if (e* CJ) then{ci o)else (cz o)) :SV(r~,rL,Lcmd) [While] rH;rLte:L 
rH;rLtc:Lcmd j lYH;rLFwhileedOc:Lcmd e*:s"(rH,rL,L) C* :s"(rH,rL,L cmd) (~,?f..ho.if(e*a)thenseqd=(c*(T)in(fd)else(lifto)):SV(r~,rL,Lcmd) 
 Table 11: Translation of the Call-by-value Functional SLam Calculus into vDCC (excerpts). ifs=(sl+.v~,K)and(s:!or)=s~ 
c"erce(,,it,r).(unit,~) fi = p,!f.hg:s*+(s*)~.g(~,(hx:s~.seqbindh=(f'g)in(hx))) = k:T,(unit).bindy=nin(~y) 
c~'erce(.,z+u,.r)~(.~,~uz,n') (hz :si.seqv (y (c~erce,~,.,,~ z)) = hr : T,(s; + (Ui)l).bindy=.XinIld 
= in lift (coerce,,,,2 v)) seqV=e; inseqr=(,f'~)inlift(dot(Tj~r)):(.Q.~); Prl r,n:s,I+ I-(liftx):(s*)~k-x:s* 
r*,x:s*,(r')* [Unit] rt-(),:(unit,K)*r*t-(lift(Ij,())):(T,(unit))~ Pbl rte:.q s, 5 r I- e: s2 92 * r*te*:(s;)I 
r* t- seqw= e* inlift(c0erce,v,,,s2 w) : (.$)I w fresh [Reel r, .f : s I- e : s S = ($1 --f .Q,K) r t- 
(p..f : s : 3.e) (S1.K) = s* * r*,f: S* t e* : (s*)~ r*kji.x(k,f :~*.e*) :(s*)~ [Lam1 r,x: 3, t- e : 
.q r~(hr:.Vl,e)K:(sl -+S2,K) * r*,n: Si t-e* : ($)I r* k lift(?jK(hY:.7i.e*)):(TK(si -+ (S;)I))I PPPI 
rte:(s, --Fs~,K) rte, rI_ (eel) :S~OK :s, a r* k e" : (Tx(Si --f (s;)~))~ r* I- seqbind,f =e*in r* k 
ei : (s;)~ ,f',v,r fresh rte:s r* t-e* : (s*)~ r-t-(protect,e) * r*Fseqm=e*inlift(dot(Ijrm)):(s*K); 
mfresh :SIK Table 12: Translation of the Call-tracking Calculus into vDCC (excerpts). ifs= (~1-% ~2) 
 fir = p,f.hg:~*+(T~(s*))~.g(hr:s~.seqbindh=(f'g)in(h~)) r,x:s,r~x:s,L~r*,n:s*,(r)*~lift(~~x):(T (~*))~ 
rt-() :unit,L* r* k lift (ljr. 0) :(T~(unit))~ : S* I- e : (TK(~*))L Fe4 rt-: s.e) * r*~~((hf :.~*.e*):(T,(.~*))l 
r,.f : s t e : S,K s = (SI -r, .q) r*,f' (p.!f' : s r,x:S, I-e :s~,K r*,n: Si I- e* : (T,(.$))L k4 r-F- 
(hr :.q.e), : (s, q s2),L * I? k (lift(IjL (k:si.seqr=e*in lift (dot (qt,) r))))) : (TL(si -+ (Ti,),,(s;))l))l 
rfresh r* F e* :(T&#38;(si --f (T,(s;))~))~ r* t ei : (T,,(si))l rke:(Sl&#38;S2),Kl r!-el:Slr~2 j r*t-seqbindf'=e*in 
,f ,y,v fresh MPPI  rt (eel):S2,KuKl UK2 seqbindy=eiin seqbindv= (.t'~) inlift(%uK,uK2 ~):(TMJ~,u~~(s;))~ 
   
			
]]
##[[DATA:data/fa/A note on the performance of genetic algorithms on zero-one knapsack problems.txt|
          195  
			
]]
##[[DATA:data/fa/A data-parallel algorithm for three-dimensional Delaunay triangulation and its implementation.txt|
               
			
]]
##[[DATA:data/fa/Adding imageability features to information displays.txt|
               
			
]]
##[[DATA:data/oraby/A logical view of composition and refinement.txt|
               
			
]]
##[[DATA:data/oraby/Alternative employment structures in information systems.txt|
            .  
			
]]
##[[DATA:data/oraby/AI (panel session).txt|
          209  
			
]]
##[[DATA:data/oraby/A parallel iterative linear solver for solving irregular grid semiconductor device matrices.txt|
               
			
]]
##[[DATA:data/oraby/A distributed UNIX system based on a virtual circuit switch.txt|
               
			
]]
##[[DATA:data/oraby/A framework for designing an animated simulation system based on model-animator-scheduler paradigm.txt|
 AUTHOR BIOGRAPHIES JAMES T. LIN is an Associate Professor in the Department 
of Industrial Engineering at National Tsing-Hua University (NTHU), Taiwan R.O.C. He received his Ph.D. 
degree in Industrial Engineering at Lehigh University in 1986. His current research interests include 
simulation modeling methodology, performance evaluation of manufacturing systems, and modeling of Automated 
Guided Vehicle System. He is a member of IIE, SCS, and IEEE. KUANG-CHAU YEH is a Ph.D. student at the 
Industrial Engineering Department at National Tsing-Hua University (NTHU), Taiwan R.O.C. He received 
his M.S. degree in Industrial Engineering from NTHU in 1989. His research interests include the application 
of AI and simulation. LIANG-CHYAU SHEU is a Ph.D. student at the Industrial Engineering Department at 
National Tsing-Hua University (NTHU), Taiwan R.O.C. He received B.S. and M.S. degrees in Industrial Engineering 
from NTHU in 1988 and 1990. His research interests are focused on feature-based design, and simulation 
modeling.  
			
]]
##[[DATA:data/oraby/A generalized air-cache design for efficiently broadcasting on multiple physical channels.txt|
               
			
]]
##[[DATA:data/oraby/A mini-course on concurrency.txt|
          96   
			
]]
##[[DATA:data/oraby/Alpha-algorithms for incremental planarity testing (preliminary version).txt|
 Figure 1: x Figure 2: 2 x Figure 3: el Figure 4: / / / 0-\ \ \ \ \ I  
			
]]
##[[DATA:data/oraby/Advanced methods for simulation output analysis.txt|
 AUTHOR BIOGRAPHY CHRISTOS ALEXOPOULOS 
is an Associate Professor in the School of Industrial and Systems En­gineering at the Georgia Institute 
of Technology. He received his Ph.D. in Operations Research from the University of North Carolina at 
Chapel Hill. His re­search interests are in the areas of applied probabil­ityy, statistics, and optimization 
of stochastic systems. His recent work involves problems related to the opti­mal design of telecommunications 
and transportation systems. Dr. Alexopoulos is a member of ORSA and 
			
]]
##[[DATA:data/oraby/Almost optimal set covers in finite VC-dimension.txt|
        . 302  
			
]]
##[[DATA:data/oraby/A model for input and output of multilingual text in a windowing environment.txt|
            91 
			
]]
##[[DATA:data/oraby/A parallel algorithm for linear programming in fixed dimension.txt|
               
			
]]
##[[DATA:data/oraby/A faster algorithm for constructing minimal perfect hash functions.txt|
               
			
]]
##[[DATA:data/oraby/A fully-dynamic data structure for external substring search.txt|
         . 702 
			
]]
##[[DATA:data/oraby/A microprogram simulator and compiler for an enhanced version of Tanenbaum's MIC-1 machine.txt|
               
			
]]
##[[DATA:data/oraby/Aggregation of stations in queueing network models of multiprogrammed computers.txt|
               
			
]]
##[[DATA:data/oraby/A patent problem for abstract programming languages; machine-independent computations.txt|
               
			
]]
##[[DATA:data/oraby/A graph-based fuzzy linguistic metadata schema for describing spatial relationships.txt|
             
 
			
]]
##[[DATA:data/oraby/A one-year introductory course for computer science undergraduate program.txt|
               
			
]]
##[[DATA:data/oraby/A new decomposition technique for solving Markov decision processes.txt|
               
			
]]
##[[DATA:data/oraby/A library-based approach to portable, parallel, object-oriented programming198383.txt|
               
			
]]
##[[DATA:data/oraby/ADESSA &#8212; an Ada expert system style advisor.txt|
            .  
			
]]
##[[DATA:data/oraby/Adaptive performance prediction for distributed data-intensive applications.txt|
                
			]]
##[[DATA:data/oraby/A microprogramming design laboratory.txt|
             . 
			
]]
##[[DATA:data/oraby/A new approach for surface intersection.txt|
            
  
			
]]
##[[DATA:data/oraby/An accelerated interior point method whose running time depends only on A (extended abstract).txt|
               
			
]]
##[[DATA:data/oraby/A multi-level solution algorithm for steady-state Markov chains.txt|
 198 400  25000~ 350 22500 SOR 
---­pfL ... .... 30020000 17500 250 15000 200 12500 15010000 7500 100 5000 50 2500 ....... . ..., 
 . ....................................... 0 ++_+._+ . -.-9.- ++.+.. . 4 o 4000 8000 12000 16000 Number 
of States-25000~ 4000 6000 8000 1000G Number of States  Figure 4: Birth Death problem with fixed diameter. 
Computation times. 3000 275o 2500 GS -w SOR -w-­225o /: ML -R-­ 100000 2000 GS* 1750 SOR -=--­10000 
 ML ---­1500 1250 ,,./., ~.. 1000 #1000 750 ,,... ....-- -100 500 :/; ~ A ,.,, ,, 250 //:; - x 
 - = ,,,. 10 MB: %., 0 ---.dc::z.-. ..- .+. ...-.d....., ..,*. f %...... -250 [ J ... ...........w 
,,.s --a ..=,, ........*..=....-.. = o 2000 4000 6000 8000 10000 1 Number of States . ....--* - .-.*-......-. 
--­  1)== I0.1 300 0.001 0.01 0.1 1 10 100 1000 Ratio of (death Rate [ birth Rate) 250 GS -+-- SOR 
-w-1000 ;, 200 100 150 / / ... -* - 100 ...-. ....­10 .,....-= / .,.,x -,..x., / ~... 50 ,....­. 
...=­ / .,.=.­1 W.- 0  0 2000 4000 6000 8000 10000 I.-.*------------------=.-......+* Numbel-of States 
 1 0.1 I 0.001 0.01 0.1 1 10 100 1000 Ratio of (death Rate I birth Rate) Figure 3: Birth-Death chain. 
Top : Number of Iterations; Center : Computation tim~; Bottom : Time Ratio. Figure 5: Birth-Death chain, 
effect of varying rates. Above : Computation time; Below : Time Ratio. u Figure6: Tandem Queueing Network 
4500 4000 3500 GS * SOR -*-­~ ... .... / 3000 / 2500 2000 1500 1000 500 Figure 7: Tandem queue, variation 
of pop. Computation times. 1000 100 10 ~~ 10 100 1000 0.001 0.01 0.1 1 Ratio of mul / mu2, mul set to 
1.0 l/p2 Figure 8: Tandem queue problem, variation of p Computation time. Figure 9: Molloy s Problem 
IIIII 100000 10000 1000 K F 100 k GS O P s 10 ML l 1  0.1 I IIII 2030 40 5060 Population Figure 
10: Results for Molloy s problem (:@::::@ ---0 p,, (.-.-- O-> _ _ -0 E ?. ....... i.oj ,,, ___----@ 
/,;...;, ___; : 0,0 IQ KI .........­ 0, 1,1   ..1 0 III II I II ,! @@---- =-4 ?>=; --@ I-...4 
, !1 I o 0----o Figure 11: Markov state space for tandem blocking queue 200  
			
]]
##[[DATA:data/oraby/A general construction scheme for unit quaternion curves with simple high order derivatives.txt|
 APPENDIX In this appendix, we provide the 
pseudo codes for the construction of quaternion curves presented in Section 5. ezier Quaternion Curve 
B´ // q0,,qn: control points Ppe nnn-ii double ! i,nt= jii1 -tt quaternion Bezier q0,q1,qnt Q n -1 return 
(q0 i1 exp log qi-1qi!i,nt; end Hermite Quaternion Curve // qa,qb: the start and end orientations // 
wa,wb: the start and end angular velocities 3 23 3 double ! 1 t=1 -1 -t, !2 t=3t-2t, !3 t=t quaternion 
Hermite qa,qb,wa,wbt q0 =qa; w1 =wa/3; -1 -1 w2 =log exp w1 qaqbexp w3; w3 =wb/3; return (q0 exp w1! 
1 texp w2! 2 texp w3! 3 t); end B-spline Quaternion Curve // ti: knot sequence double Bi,kt= B-spline 
basis of order k double Bei,kt= Pi+k Bj,kt ji quaternion B-spline q0,q1,qnt l=maxfijti+k-1 :tg; if (l0) 
then e B0 k(t) fl=0; q=qg 0 else q=ql; for (i=l+1; i:n&#38;&#38; tit; i++) -1 q=qexp log qi-1qiBei,kt; 
return (q); end  Uniform B-spline Quaternion Curve // ti =i-2: uniform knots // 0 :t:n // uniform-B-spline 
0 =q0 // uniform-B-spline n=qn // uniform-B-spline i.qi quaternion uniform-B-spline q0,q1,qnt -1 q-1 
=q0q1 q0; //phantom -1 qn+1 =qnqn-1qn;// control points l=bt-1c; q=ql; for (i=l+1; it+2; i++) -1 q=qexp 
log qi-1qiBei,kt; return (q); end  
			
]]
##[[DATA:data/oraby/Allocation and compaction - a mathematical model for memory management.txt|
               
			
]]
##[[DATA:data/oraby/A fast and economic scan-to-line-conversion algorithm.txt|
       129 
   
			
]]
##[[DATA:data/oraby/Affordability of computer graphics for planning networks in DOD program management.txt|
   CONFIGURATION PARAMETER COMPARISON The 
following generalized graphicalparameters are meant to show the relative effects of each configurationupon 
a single parameter. 
			
]]
##[[DATA:data/oraby/A framework for social networks new relationships recommendation from the use of folksonomies.txt|
            .  
			
]]
##[[DATA:data/oraby/A decision tree-based approach to dynamic pointcut evaluation.txt|
                
			]]
##[[DATA:data/oraby/A model for studying ambiguity in SGML element declarations.txt|
      .  676 
 
			
]]
##[[DATA:data/oraby/A framework to support an object-oriented view of existing engineering databases.txt|
               
			
]]
##[[DATA:data/oraby/A device-independent network graphics system.txt|
               
			
]]
##[[DATA:data/oraby/A new page table for 64-bit address spaces.txt|
 ing the number of cache accesses 
during TLB miss ~al194] Madhusudhan Talluri and Mark D. Hill. Surpassing the handling and page table 
size for different page tables TLB performance of Superpages with Less Operating Sys­ (Table 2). Note, 
however, that the results presented tem Support. Jn Proc of the Sixth International Conference in Section 
6.3 do not use these formulae but instead on Architectural Support for Programming Languages and present 
results of simulations. We assume 4KB base Operazing Systems, pages 171-182, October 1994. pages, 8-byte 
mapping information per PTE, 64-bit nal1951 Madhusudhan Talluri. Use of Superpages and Subblocking virtual 
addresses, and 64-bit pointers. in the Address Translation Hierarchy. Ph.D. thesis, Univer­sity of Wisconsin-Madison 
Computer Sciences, August 1995. Technical Report #1277. The formulae for average number of cache lines 
~hak86] Shreekant S. Thakkar and Alan E. Knowles. A High-Per-accessed when searching hashed and clustered 
page formance Memory Management Scheme. IEEE Computer, tables assumes random, uniform distribution of 
vir­pages 8-22, May 1986. tual addresses [Knut68]. In practice, spatial locality ~hom74] K. Thompson 
and D. M. Ritchie. The UNJX Time-Shar-causes non-random insertion-and look~p patterns. ing System. Communications 
of the ACM, 17(7):365-375, Page Table TWe Term Definition/Explanation I Number of virtual address regions 
of size P base pages that have one or more All Nactive(P) valid mappings in the page table TLE miss ratio 
for accesses to translations to the first-level linear page table Linear (all variations) + Average 
number of cache lines accessed per TLB miss to first-level liierrr page table Number of levels in page 
table tree Number of base pages mapped by a node at level i of the page table tree Number of PTEs or 
PTPs in a node at level i of the page table tree Hashed la Load factor on hash table= Nactiue(l)/#buckets 
Load factor on hash table= iVactive(s)/#buckets Clustered (all variations) + Subblock factor Fraction 
of page blocks (Native) that use superpage or partial-subblock clus­tered PTEs Average number of Page 
Table Type cache lines accessed Page Table Size (in bytes) Notes per TLB miss Multi-level Linear l+r*m 
~ 4KB xNactive @bi) pbi = 29i J= l,~~evel$ A hash table (24 byte PTEs) stores trans- Linear with Hashed 
l+r*m (4KB + 24) x Nactive (512) lations to the first-level linear page table Forward-mapped nlevels 
n, x 8 x Nactive @bi) i J z z= 1, nlevels pbi = 2 = Hashed 1+ C2J2 24x Nactive (1) Each PTB is 24 bytes 
Clustered l+crJ2 (8s + 16) x Nactive (s) (24 x Nactive (s) xfss) + ;:::-$b:l:?age I+&#38; ( (8s + 16) 
x Nactive (s) x (1 -fss) ) Table 2: Formulae   
			
]]
##[[DATA:data/oraby/A lower bound for integer multiplication with read-once branching programs.txt|
               
			
]]
##[[DATA:data/oraby/A model for estimating trace-sample miss ratios.txt|
               
			
]]
##[[DATA:data/oraby/A loosely-coupled integration of a text retrieval system and an object-oriented database system.txt|
        .  232 
			
]]
##[[DATA:data/oraby/A maintenance system architecture for data network services.txt|
           3-8 
			
]]
##[[DATA:data/oraby/A generic approach to the static analysis of concurrent programs with procedures.txt|
               
			
]]
##[[DATA:data/oraby/A new approach to analyzing gene expression time series data.txt|
A EM Algorithm 
for Class Assign­ment In this appendix we present the details of the EM algorithm that is used in Section 
3. We start with the complete log likelihood given by: where j is the class index and ni is the number 
of ob­served values for gene i. Z(jli) is an (unobserved) binary indicator variable that assigns each 
gene to exactly one class. In the E step we compute the expected values for Z(j/i): P($) = E(Z(jli)lYi) 
= p~e-(Y~-S,(~J+r~,,,))~(Y,-S,(~,+~ .,))/u~e-?7T~r;~~l., ~kpke-(Y7-S,(~L,+r r))T(Y,-sI(11L+Y,,k))/~2,-~r~,r, 
r~,~  In the A4 step we first find the MAP estimate for yi,j by setting: yi,j = ((T2r; + $s~)- s~(yz 
 S&#38;L&#38;j)  Next, we maximize 02, p and I w.r.t. the class assignment probabilities computed in 
the E step: o2 ci cj PCMY,  Sz(Pj + ri,jFw Si(Pj + %,j))  c, 7%  pj is computed by setting: ,L$ = 
(cP(3li)s:s,)- (cP(jli)s,T(Y, h,j)) 2 i  Then we set r j to:   B Computing Error Rates Here we describe 
in detail the method we used to compute the error rates of the four different missing values algorithms 
discussed in Section 5.1. Denote by Yi(t) the (hidden) ex­ pression values for gene i at time t, and 
by Yz) the esti­mated values. Denote by m the number of missing (hidden) data points and by n the number 
of genes that were used for the test. Denote by 11 the variance of the log ratios of expres­sion values. 
Then the error of an estimation for m missing data points is defined as: 1 nm [K(h) ml2  err, = mn =d 
V i=l kl  If err, is above 1 then the error is (on average) bigger than the replication variance, and 
vice versa. The variance v was computed using the raw expression data of the unsynchro­nized cells from 
two different time points.  exp[-(Yi Si(Pj + ri,j))T(E - Si(Pj + Ti,j))12f121 X &#38; :Pi-~YQ~l?i,jl) 
(4) 3   
			
]]
##[[DATA:data/oraby/A database management capability for Ada.txt|
 0 |m m |m ..Q Q. C t~ .Q  C~ < O D. v C E C 0 Q) ,4ram 0 I,B L(~3 E Q) I,D 
,m E 0 c 0 ow t~ 0 L,. 0 Q) Q. E 0 J f m o In E O C .uO O Q. O Q. E O J  .Q 1 ° ~ e ~~ ~ i5 e m 1:: 
~ g 0 ~ 0 0 ~mo 0r~ L_ 0 i..... E 0 0 J W Q m mI~ fO I I ~ I I I Z I I W m I 0 E 0 C 0 0 0 0 8 0 0 
 .Q 0 0m E 0  o ~~~ ~~ C 0 0~ 0 0 0 J 0 E 0 o ~~ o ~== oo ~~~o~o~o~~ i~= ~ ~ ~ ~ X E 0 C 0 
 mm m o o 0 Ira. E 0 0 J  E ~t~ 0 .o 0 ~~Oo ~- ~~j~ 0 Q ~ t t t ~ t Q. E 0 J Daplex Data Model 
PERSON SSN NAME AGE STUDENT iNSTRUCTOR I COURSE ADVISOR TITLE GPA ~ SALARY ROOM CREDITS I COURSES-TAUGHT 
~ I ENROLLMENTS DEPT DEPT ~ DEPARTMENTNAME 1 FLOOR 4 Important Semantic Concepts -Referential integrity 
-Subtype hierarchy  Powerful Data Manipulation Constructs  -Non-procedural data selection -Procedural 
iteration semantics Computer Corporation of America g. ~ ~ ee e ae e ® .~ .~ E 0 C ._o 0 0  ~~.~~,,, 
~&#38; QJ Q. E 0  0 ®~ o~ _oe/ I I -Im.,,.~ m m a cn ~ 0 o E ~o m~ 4 0 c ~ II._~ ~o~ .~ .o a3 
a Q=o Q. 0 Q. E 0 J cJ f r~ e a. I IU im 0 c ~ ~E -- 0 o C ~T I E E m E m C tU 0 C 0 ou 000 C,O 41o 
000 000 ~o=o® C 0.D Li, m O 41o C m C m m L_ 0 0 m L_ E 0 o J 87 ¢0 'C, E 0 ~0E C 0 c~ 0 im 0 o ~~ 
8 J o E 0 f C L_ E 0 c-O 0~ L_ 0 _~~~la 0 o i-_ E 0 J 0 89  o 0 ,m L E ~.~ ~.~ ~ 0 C 0 L_ 0 L_ 0 0 
L_ 4.o £ 0 J ,,ii-I tm uuOunm ,,m,~ '--: 0 ,,~ "-= i E 0 e,,,, 0 o lb. 0 Q,, I= 0 J E 0 X - ~ - m;~ 
g " 0 e C 0 fl i._ 0 0 L_ E 0 J   
			]]
##[[DATA:data/oraby/A model and an implementation of a logic programming environment.txt|
        . 198  
			
]]
##[[DATA:data/oraby/A framework for simple sorting algorithms on parallel disk systems (extended abstract).txt|
               
			
]]
##[[DATA:data/oraby/Advanced compiler optimizations for sparse computations.txt|
               
			
]]
##[[DATA:data/oraby/A framework for testing security mechanisms for program-based attacks.txt|
                			
]]
##[[DATA:data/oraby/A multimodal guide for the augmented campus.txt|
               
			
]]
##[[DATA:data/oraby/A hierarchical structure for concurrency control in a distributed database system.txt|
             
 
			
]]
##[[DATA:data/oraby/A developmental system for microcomputer based intelligent graphics terminals.txt|
            .  
			
]]
##[[DATA:data/oraby/A distributed monitoring mechanism for wireless sensor networks.txt|
               
			
]]
##[[DATA:data/oraby/A framework for analyzing exception flow in software architectures.txt|
               
			
]]
##[[DATA:data/oraby/A failure analysis of the limitation of suffixing in an online environment.txt|
 Appendix  Ranking using the IDF weighting 
measure M (log 2 Freq.~ x IDF~ rankj k=l tog 2 M ~'~ where M = the number of terms in the document j 
Freq. = the frequency of term k in document j IDFk~ = the inverse document frequency weight of term k 
 IDF k = log 2 ---~---+I NumDk where N = the number of documents in the document collection NumD k = 
number of documents in the collection that contain one or more instances of term k Ranking using the 
inverse noise measure M (log 2 Freq~ x noiseO rankj k=Ix'~ 10g2 M where M = the number of terms in 
the document j Freq..~ = the frequency of term k in document j noise k = the inverse noise weight of 
term k N Freq~ TFreqk noise k = inverse of ~ ~ log 2 i=1 tt, req~ Fn~.i~ where N = the number of documents 
in the document collection Fr~. the frequency of term k in document i TFrfflk the total frequency of 
term k in the document collection 108 
			
]]
##[[DATA:data/oraby/A low cost device for the real-time on-line entry of handprinted characters.txt|
               
			
]]
##[[DATA:data/oraby/A nested transaction mechanism for LOCUS.txt|
            .  
			
]]
##[[DATA:data/oraby/A parallel Data Base Machine for query translation in a distributed database system.txt|
          1980 
			
]]
##[[DATA:data/oraby/A homogeneous formulation for lines in 3 space.txt|
This yields four equations all of which can be shown to have the common solution 
 Similarly, the plane parallel to line 1 which contains line 2 has  The perpendicular distance of each 
of these planes to the origin is 241 
			
]]
##[[DATA:data/oraby/A discrete-time queueing system under frame-bound priority.txt|
               
			
]]
##[[DATA:data/oraby/A hybrid method for concurrent updates on disconnected databases in mobile computing environments.txt|
          565  
			
]]
##[[DATA:data/oraby/A dynamic task scheduling method for multiprocessor system.txt|
. 1 time period I I * Time 
 FIgurc1. The Round Robin exccutiortpattern. Tf 1 q 2 T73 1 ­ F@mc 2. An execution pattern gcrtcmtcd 
by Afgorithm 1. 20  15 ­ 10 ­ s- I Numberof PE s 1Ii I s 10 1s 2?32s 20 FQrrrc3. Spccdup behavior of 
different communication dcfss~. Efficiency 19 1!?.5 0.4 0: ComnlunicationDdv = 1/20 TQ 18 t 17.5 Number 
of PE s II I1 - . 1, 5 10 152025 20 &#38;O TQ 1/1s TQ 1/1; TQ 1/5 TQ 1TQ Figure 4. T%e efficiency 
of different communication delays. FIgurc 8. The apccdup behavior of a 32-PE a@m with diffezent context 
switch time. sTu?  4 Spe w 30 25 GmmOnicUioOWhy 1I 1 1/20TQ 1/15 TQ 1/10TQ ]/$ TQ 1 TQ 2.8 20 Pigurc 
5. The apcedup behavior of a 4-PE ayatcmwithdifferentcontext switchtime. 15 S dup 7.8 7.  7.s la i 
.4 5 7.2  7.2 IL t I Numtp of PE s [ 1 I1 C0mmu7:wtionD*18y , * 7.1 I 5 10 15m 25 30 1/20TQ 1/]3TQ 
1/10TQ l/5 TQ 1TQ .: OTQ for each Con~xt Switch md Reorgmization 0:1 410TQ for each Context Switch mid 
Reorganization O:1 Q for esch Context .%itcb or Reorganization   I@urc 6. TIE apccdup behavior of an 
8-PE ayatemwith different contextswitchtime. Pigure9. Tltc spccdupbehaviorof matrixmultiplkationprogram. 
12 11.s 11 10.s I I1 C4mmunhtion D&#38;y 1 ­ &#38;OTQ 1/1STQ 1/10TQ 1/6 TQ 1 TQ P&#38;we 7. The apcedup 
behavior of . 16-PI? ayctem with different contact twitch time. Speedup ), 13~ Speedup Limit 12- 11 
- 10- 0 - 8 - 7 1­ 6 - 5 - 4 3 ~umber of PE s 2; ; 16* .:0 TQ for Contest Switch and Reorganization 
O: l/10 TQ for Context Switch and Reorganization D: 1 TQ for Context %vitch and Reorganization Fire 10. 
IRe -up behavior of . prime number gcaemting p-m. Speedup  13 I 12­ 11­ 10­ 9­ 8­ 7 6­ 5­ 4­ 3 ~ 4 
8 .:0 TQ for Context Switch and Reorganization O: l/10 TQfor Context Switch md Reorganization o: 1TQ 
for Context Switch and Reorganization FIgurc 11. l%cspccdup bcluviorIXthe IWuccn pzogzam.   
			
]]
##[[DATA:data/oraby/A language and system for symbolic algebra on a digital computer.txt|
 See esp. Table I and Page 940. 
   
			
]]
##[[DATA:data/oraby/A high-performance host interface for ATM networks.txt|
               
			
]]
##[[DATA:data/oraby/A kernel for geometric features.txt|
               
			
]]
##[[DATA:data/oraby/A new 3D adaptive finite element scheme with 1-irregular hexahedral element meshes.txt|
            .  
			
]]
##[[DATA:data/oraby/Algorithms for edge coloring bipartite graphs.txt|
       -192 -  
			
]]
##[[DATA:data/oraby/Advanced placement in computer science.txt|
 APPENDIX I A. For information about new Development Committee 
materials contact Dr. Phil Miller Computer Science Department Carnegie-Mellon University Pittsburgh, 
PA B. For information about the examinations contact Dr. David Rine Computer Science Department Western 
Illinois University Macomb, IL C. For general Advanced Placement information contact Dr. Carl Haag, 
Director Advanced Placement Educational Testing Service Princeton, NJ 122  APPENDIX II AP COURSE OUTLINE 
-Summer, 1983  DAY LECTURE TOPIC READING ASSIGNMENT June 20 Intro. to Pascal, Simple I/0, Chapters: 
1,2,3, (C&#38;C) (Mort) Expressions, Assignment Statements, Intro. to Procedure June 21 Procedures (continued), 
Chapters: 3,4,5, (C&#38;C) (Tues) scope, Argument~Parameters, Case and For statements. June 22 Top-Down 
Design, Boolean Ex-Chapters: 5,6,7 (C&#38;C) (Wed) pressions, IF statement, Re- peat and While Statements. 
 June 23 Function Subprograms, Intro-Chapters: 8,9 (C&#38;C) (Thur) duction to Recursion, Ordinal Types 
 June 24 { **Exam #I** { Chapters: 8.1,8.2,8.3 (Fri) { Numerical Analysis { (T&#38;B) June 27 { Ordinal 
Types (continued), { Chapters: 9,12'(C&#38;C) (Mon) { Arrays Jufie 28" Records I Chap£er: 11 (c&#38;c) 
(Tues) { June 29 Sorting &#38; Searching with Chapters: 4.3,10.4, (Wed) arrays 10.5.3,10.6 10 -IO.2(T&#38;B) 
 June 30 Files, Sets ~ Chapters: 13,14 (C&#38;C) (Thur) July I ** Exam #2 ** I Chapter: 15 ' (Fri) Pointers 
{ July 5 Pointers (continued) Chapter: 15 (Tues) July 6 Trees, Binary Trees and Chapters: 11.1-11.413 
(Wed) their applications thru p. 618 (T&#38;B) July 7 Trees &#38; Binary Trees Chapters: same as (Thur) 
(continued) above July 8 **'Final Exam ** (Fri) 123 
			
]]
##[[DATA:data/oraby/A parallel algorithm for nonlinear Volterra integro-differential equations.txt|
            88 
			
]]
##[[DATA:data/oraby/A distributed 3D graphics library.txt|
               
			
]]
##[[DATA:data/oraby/Alternatives for on-line help systems.txt|
               
			
]]
##[[DATA:data/oraby/A framework for studying the coordination process in software engineering.txt|
        . 857  
			
]]
##[[DATA:data/oraby/A generic type system for the Pi-calculus.txt|
 Appendix A Type Reconstruction The type 
reconstruction algorithm PT given below takes a process expression as input and outputs a pair of a type 
environment (extended with expressions like ~J's and C~$s ) and a set of constraints on variables in 
the type environment. Each constraint is of the form either ok(F) or ~ _< F. The obtained pair gives 
a principal typing of the input in the sense that all the possible type environments, under which the 
process expression is well typed, are obtained from the type environment in the pair, by replacing free 
variables in the constraint so that the constraint is satisfied. PT(P) = (F,C): PT(O) = (0, 0) PT(x!t[~I 
 P0) = let (r0,c0) = PT(Po) i. (~'[(~)..]. (. 15.), Co u {~ < r0}) (where a and ors are fresh) PT(x?t[~]. 
Po) = let (Fo,C0) = PT(Po) in (x?t[(~)a,~(9}]. (a~(#)),C0 U (c~ < F0}) (where c~ is fresh) PT(P~ [P2) 
= let (F1,C1) = PT(P1) (F2, C2) = PT(P2) in (rl iF2, Cl U C2) PT(P~ +'.. + P,) = let (F1,Ci) = PT(P1) 
 (F,~, C,) = PT(P,~) in (F1 +"- + F,,,, C1U-.. UC,~) PT(*Po) = let (F0, Co) = PT(Po) in (*Fo, Co) PT( 
(uY~) Po) = let (r0, Co) = PT(Po)  in (rot{~}, Co u {ok(ro.l.{~))}) B Proofs of Theorems B.1 Proof 
of Subject Reduction Theorem (Theo-rem 3.6.1) Lemma B.I.I: (r~s z)Ts2 ----(r~'s2)~'sl = r~'slus2. Proof: 
By induction on the structure of F. [] Lenlma B.1.2 [inversion]: Suppose F ~ P. 1. If P = P1 [ P2, then 
there exist F1 and F2 such that Fi~Pi for i= 1,2 and F < Fi[F2. 2. If P ---- P1 q- "" + Pn, then there 
exist F1,... ,Fn such thatri~Pi fori=l,...,nandP _< Fl+...+rn. 3. If P = x!t [.~]. Po, then there exist 
Fo and I~ such that  r0 t> P0 and r < ~!t[(,~)r.]. (r0 iv,). ?t 4. If P -x. [~]. Po, then there exists 
F0 such that F0c> P0 and r _<~?'[(9)r0+~]. (r0t~). 5. If P = (v~) P0, then there exists r0 such that 
F0 ~, P0 Case: P = (uS0 P1 I P2 Q = (v~) (P1 I P2) and r < F0J'(~} with ok(FJ,(~}). are not free in Pz 
 6. If P = *P0, then there exists F0 such that Fo ~ P0 and r < .r0.  Proof: Immediate from the fact 
that a type derivation of Ft> P must end with an application of the rule corresponding to the form of 
P, followed by zero or more applications of the rule T-SuB. S ~ Lemma B.1.3: If r ~ r', then FT(~} --+ 
P'j'(~} where S' is the least set that satisfies the following conditions: 1. x~tl't2 ~ S implies x i 
tl't2 ¢ S' and {tl,t2} C S~; 2. t ~ S implies t ~ S'; and 3. ytx,t2 ~ S and y ~ {.~} imply ytx,t2 ~ 
St.  Proof: By induction on the derivation of F ~ r' with a case analysis on the last rule used. We 
show only the main base case below; the other cases are easy. Case TER-CoM: r .... + y!t~ [71]. F1 +... 
I ' + v?'~[~2] r~ +... r'=r,[r~ s=(y',,'~} Ti<~2 We have two subcases according to whether y ~ {~} 
or not. We will show the subcase where y = x~; the other subcase is easy.. . SinceFJ'{ }~ .... +ti.Fx~( 
}~ +... [ ...+t2.F2~'(~}+-.., ~t ~s easy to show that rT(~} ('.~:2..~} rll-(~} I r21"(~} finishing the 
subcase. 0 Lemma B.1.4: If WF(r.~s) and WF(rts), then WF(F). Proof: Suppose WF(F) does not hold. Then, 
there exist x, ~-1, T2, tl, t2, F~, F2, and F3 such that r--~* ... +x!t,[~,].r, +... I'-- + =?'=[~=].r2 
+... Ira and T1 ~ T2. By using Lemma B.1.3 repeatedly, either rl"s --¢ .. + =!~'[~1]. (r,ts) +... .. 
+ =?'~[~]. (rats) +... Irsts or r.l.s >" ... + =!" [*1]. (rl.l.s) +... I "'" + =?~[~=]. (r=,l,s) +... 
I r~a,s, contradicting the assumption WF(FJ, s) and wF(rts). [] Lemma B.1.5 [substitution]: If F ~ P, 
then [y/x]F[v/=]P. Proof: By straightforward induction on the derivation of F~P. Lemma B.1.6: If r ~ 
P and P ~. Q, then r ~ Q. Proof: By structural induction on the derivation of P ~ Q with a case analysis 
of the last rule used. We show a few interesting cases below; the other cases are easy. By Lemma B.1.2, 
there exist F1, F~, and r2 such that Fi t> Pi for i E {1,2} and r <_ F~IF2 and r~ < r~j,(~} with ok(F~$(~}). 
By the rule T-PAR, r~ I Fz t> P~ ] P2. Without loss of generality, we can assume ~ are not free in P2 
so that F2T{~} = r2 and Null(r2$(~}). Then, (F1 [F2)~'(~} = Fi~'(~} I F2 and, by the third condition 
in Definition 3.4.3, o~((r~ I r~)4(~). Thus, r~t(~) I r2 ~ (~) (P~ I P~) by the rule T-NEw. Finally, 
it is easy to show F _< F~J'($} I F2, and so, by the rule T-SuB, F ~ Q. Case: P = *Po Q = *PolPo By 
Lemma B.1.2, we have F0 ~ P0 and F < *F0. Then, by the rule T-PAR, F0 ]*F0~P0 ]*P0. Since *F0 < F0 I,F0, 
by using the rule T-SuB, r ~ Q. [] Proof of Theorem 3.6.1: By induction on the deriva- tion of P ~ 
Q with a case analysis on the last rule used. We show only main cases below. Case R-CoM: P .... + x!t[z]. 
P0 +"" I "" + =?~'[.~].Qo +"" Q = PoI[U~9]Qo l = x t,e By Lemma B.1.2 and the subtyping rules, there 
exist F~, F2, and Fa such that r < ... + x!t[(~)r3]. (r~ Ir3) +... I ." + =?~' [(~)r2.~(~]. (r~-(~}) 
r, ~ Po r2 ~ Qo. Then, since WF(r), it mustbe the case that (~)r3 <_ (9)r~$(~, that is, rs < [~/~1r25(~}. 
We can show t,t e r (~--:~ r~ I [s/~]r~ by the following calculation: t t I F {= ' >1 F~ I r~ I r2T(~} 
< rl I [~/.~]r2,t(~} I r2"r(~} = F1 < rl I[U.~]r2 (SuB-DwmE and SuB-SuBsT) By Lemma B.I.S, [~/~9]r2 ~ 
[~/~]qo. Finally, by the rule T-PAR, r, I [~/~lr~ ~ so I [~/~]Oo, finishing the case. Case R-PAR: P = 
P0 I R Po ~ Q0 q = Q01 R By Lemma B.1.2, there exist F1 and F2 such that r _< rl]r2 Fl~P0 F2~R To use 
the induction hypothesis, we show WF(F1) by contradiction. Suppose WF(F1) does not hold. Then, WF(FilF2) 
does not hold, either; it means WF(F) does not hold. Thus, WF(F1). By the induction hypothesis, there 
exists F~ such that rl ~ F~ and r~ ~ Q0. By the rules TER-SKIP, TER- PAR, and TER-SuB, F l#) F~iF2. By 
the rule T-PAR, F~ IF2 ~ Qo I R, finishing the case. By Lemma B.I.1, we have Case R-NEwl: P = (vh~)P0 
Povt'*) Q0 y e (.~} Q = (Y~) Q0 I = ~ t'tl rs.l.~,~,(~,co)(~i~..s-~)(,~+~..,,)(...+u. H.Q+"" IR) By 
Lemma B.1.2, there exists F0 such that F0t>P0 F < PoJ'(~} ok(F0$(~}). To use the induction hypothesis, 
we will show WF(F0). Since WF(r0$(~)and WF(F0J'(~}) from the assumptions, we have WF(F0) by Lemma B.1.4. 
By the induction hypothesis, there exists F~ such that t t ~ F0 {~S-+ } F~ and F~ t> Q0. By Lemma B.1.3, 
F0j'(~} (~) F~y(~} and FoJ,(~) (LL~ } F~$(~}. Then, ok(F~.l.(~}) and, by the rule T-NEw, F~(~) t> (u~) 
Q0, finishing the case. [] B.2 Proof of Theorem 4.1 Lemma B.2.7: Let < be any proper subtyping relation 
and ok be ok~. If F r, P and ok(F), then p~(P) holds. Proof: Suppose that F~ P and ok(F) hold but p~ 
(P) does not hold. By the definition of p~, there exist Q~ and Q2 such that P ~ (~--)(... + ~!~[~].Q1 
+... I '"+~?e[~].Qu+'" IQa) with II~ll ~ II~ll. By Theorem 3.6.3, it must be the case that r~u...+~!t[~].Q~+... 
I ...+x?t'[~].Q~+-- I Qa ok~(ri${~,}) for each i ~ {1,...,k} Fi-1 = FiT(¢&#38; for each i ~ {1,...,k} 
F<Fo F _< F0 and ok~(F) imply ok~(F0). By the typing rules, F~ must be of the form... + x!t [0"]. A~ 
+ ...... [ + x!* [~-']. Ax~ + .. [~xa with [1~'[1 = [1~1[ ¢ [lff~[] = IIT'[[. This con-tradicts with 
the facts okl(Po) and ok~(Fi$(~)) for each e (i,...,~}. Lemma B.2.8: Let < be any proper subtyping relation 
and ok be ok~. If F ~ P and ok(F), then p2(P) holds. []Proof: Similar to the proof of Lemma B.2.7. Lemma 
B.2.9: Let < be the least proper subtyping re- lation, and let ok be oka. If F t~ P and ok(F), then pa(P) 
holds. Proof: The proof proceeds by induction on t. Suppose F t> P, ok(F), and P ----~* P' = (~1..~) 
('" .+y?t[~].Q+... i R). (The case where P ----~* P' = (~1..,~) ("' + y!t[~].Q + .. JR) is similar.) 
Without loss of generality, we can assume that y is free in P'. Otherwise, by Theorem 3.6.3, we have 
r, ~,... + v? ~[~]. Q +... I R Pi-1 = F~?(~ A for i = 1,...,n ok(F~$(¢&#38;) for i = 1,...,n F<F0 y E 
{:~j} for some j and ok(rs$~)). By Theorem 3.6.1 and the definition of ok, there exists such that A ~, 
P' and F ----~* A. By Theorem 3.6.3, there exists T, Fx, and F2 such that A < ...+y?eN.rl+... I r~ .- 
+ y?¢[r].rl +"" Ir2t'u P' Because ok(F) holds, it must be the case that F' ~ F" for some L such that 
(i) L = (x tl't2} or (ii) L = (t') and t" -~ t'. So, by the typing rules, one of the following conditions 
must hold (c.f. Lemma 3.6.5): 1. P' _~ (~4Lm)('" + w?t"[~].Q1 + "" IQ2) with w e (,z,..., ¢,,,}. 2. 
P' ~ (~1..,~) ('" + w! t''[£l.Q1 +'" [Q2) with w e {a~,..., ~-~). 3. p' .~ (~m) ('''+~!~[~]. Q,+'" I 
""+~?~[~]" Q~+  "" I Q~). In the first and second cases, P' ----+ follows by induction hypothesis. In 
the third case, P' ~ follows immediately. [] Lemma B.2.10: Let < be any proper subtyping relation and 
ok be ok4. If F r, P and ok(F), then p4(P) holds. Proof: Suppose that F t> P and ok4(F) hold. Suppose 
---~---~* (~) (... + also that P ----+*~ (ff~)P' and P' /'t x?[~].Q1 + "" I Q2). Without loss of generality 
(c.f. the proof of Lemma B.2.9), we can assume that x is free in P. So, we have p >* > .. . /'~ ~* (~)(~)(. 
+~? tt n [9].Q1 +.. I Q~). ~t ! ,t By Theorem 3.6.1, there exists F' such that F -------+* ) ---+* . 
7 tll - r' andr'~(~)(~)(..+x. [y].Qi+'" IQ2). SyCorol- lary 3.6.4, it must be the case that F' _< --. 
+ x? t'' [r]. F~ + .., Ir !2. This contradicts with the assumption ok4(F). The case for output is similar. 
[] Proof of Theorem 4.1: This follows immediately from Lemmas B.2.7-B.2.10 and Theorem 3.6.2.    
			
]]
##[[DATA:data/oraby/A language for queries on structure and contents of textual databases.txt|
               
			
]]
##[[DATA:data/oraby/A near-linear algorithm for the planar 2-center problem.txt|
               
			
]]
##[[DATA:data/oraby/A FORMAC program for the solution of linear boundary and initial value problems.txt|
           
   
			
]]
##[[DATA:data/oraby/A data-driven workflow language for grids based on array programming principles.txt|
                
			]]
##[[DATA:data/oraby/A domain structure for distributed computer systems.txt|
               
			
]]
##[[DATA:data/oraby/Additive versus exponentiated gradient updates for linear prediction.txt|
                
			]]
##[[DATA:data/oraby/A PC-controlled data acquisition system for transabdominal recording of cardiac activity in the human fetus.txt|
               
			
]]
##[[DATA:data/oraby/A framework for expressing and combining preferences.txt|
 Appendix A: Modular Combining Form Proofs Proposition 6.1 (Restatement 
of Proposition 2.13) Let {rtl, rt2, rt3, rtd} be a compatible set of record types. Let Ct, C2, and Ca 
be modular preference combining forms based on (rQ, rtz), (rta, rta), and (merge(rt,, rtz), merge(rt3, 
rtd)) respectively. Then the combining form Co based on (rt~, rt~, rts, eta) de-fined by C0(p~, p~, Ps, 
Pa) = Cz( Ct (p~, pz), Cz(pa, Pa) ) is a modular combining form. Proof.. First note that it is clear 
that Co is based on (rtt,rt2,rts, rtd). .Let r be a record of type merge(rtl,rt2,rts,rtd). Assume that 
pi and p~ are equivalent with respect to Ir~t,(r) for i = 1,2,3,4 with the goal of showing that Co(p~,p2,pz,pd)(r) 
= / I I c0(p~, p~, p~, p~)(r). First we show that C~(p,,p~) and C,(pt,p~) are equivalent with respect 
to Irmerg~(rtxxt~)(r). Let rtDTrrnerge(rtt,vt~)(r ). Let r" Dr'. Then ~r,t,(r") t> 7r, t,(C) I:> 7rrt,(vme,ge(rt,,rt,)(r)) 
= ..,,(r). Thus, p~(..,,(r")) = p;(~.t,(r")) since p, and p~ are equivalent with respect to Irrt,(r). 
Thus, Pt and p~ are equivalent with respect to C. Similarly, P2 and p~ are equivalent with respect to 
C. Since, C1 is modular, it follows that C1 (pl, p2)(r') = C1 (p~ , p~)(r'). ! I This proves that C~(p~,p2) 
and CI(Pt,P2) are equiv-alent with respect to ~rmerge(rtx,rt2)(r). Similarly, C2(ps, p4) and C2(p~,p~) 
are equivalent with respect to ~'m~ge(~t~,¢t,) (r). Since Ca is a modular combining form based on (merge(rQ, 
rt2), merge(rta, eta)), it follows that Ca(C1 (pt, pz), C~(ps, pa))(r) = Cs( C~ (p~, p~), C2(p~, p~) 
)(r). This proves that l I I I co(p~, p~, p~, p4)(r) = Co(p~, p~, p~, p~)(r) as desired. [] Next we 
show that every combining form defined using the combine operator is modular. This is formalized in Theorem 
2.14. Theorem 6.2 (Restatement of Theorem 2.14) If f is a value function based on (rtl,...,rtn), then 
 (rt~,...,rt,). Proof: Let pl ..... p,~ and p~,...,p~ be preference functions such that dora(p,) = rt, 
= dom(p~) for all i < n. Let r be a record of type RT = merge(rQ,..., rtn~. Let f be a value function 
based on (rtl,...,rtn). Assume that p, and p~ are equivalent with respect to rt, for all i <_ n. The 
goal is to show that combine(f)(p~ , . . . , p~ )(r) = combine(f)(p~ , . . . , p~)(r ). Let no be an 
arbitrary name of a field in ScoreBoard( rt/ ). Scores(p,, 7r,ti(r)).no = p~(RecordOf,.t,('rr,t,(r), 
no)) = p~(necordOf,,,(~,,,(r), no)) since RecordOf ,t, ( ~r,t,( r), no)) ~> r,,,(r) = Sco~s(p~,..dr)).no 
 Since the choice of no was an arbitrary name in ScoreBoard(rt,), it follows that Scores(p,, r,,,(r)) 
= Scores(p~, ~r,,,(r)) for all, _< n. We can compute as follows: co~bine(f)(p~,...,p~)(r) = f(Scores(p,,..,,(r)),..., 
Scores(p~,..tAr)), r) = f(Scores(p~,rrt,(r)),..., Scores(p~,Trrt,(r)), r) = combine(f)(p~,...,p~)(r) 
 as desired. [] Now that we know that every combining form combine(f) is modular, the next question to 
address is are there any other modular combining forms other than the ones definable by combine. It turns 
out the answer is no. This means that every modular combining form can be expressed using the combine 
operator. This is formalized in Theorem 3.1. Theorem 6.3 (Restatement of Theorem 3.1) Let C be a modular 
combing form based on (rtl, . . . , rtn). Then there is a value function f based on (rtl, . .., rtn) 
such that C = combine(f). Proof: It is helpful to have a function NameOf that takes a record of type 
rt for any type rt with field names nl,...,nk and produces a name of a field in ScoreBoard(rt) as follows: 
NameOf(ro) = n~!...!n~ where n~ = ni if r0.n, ~ * and n~ = star! if r0.n, = *. It is clear that if r0 
t> r, then Reco,dOf ~t,(r, NameOf(ro)) = to. First defined a set valued function S: ScoreBoard(rti ) 
x ... x ScoreBoard(rtn) x merae(rtl,..., rtn) --+ 9(score). Recall that :P represents the power set operation 
so that ?~(score) is the set of all subsets of score. The definition of S is as follows: Define so E 
S(sbl,...,sbn,r) iff there exist preference functions Pl,...,P,~ such that C(pl,...,pn)(r) = So and Vi 
< n(dom(p,) = rt,&#38;Scores(p,, rrrt,(r)) = sb,). It is clear that C(p~,...,p,)(r) e S( Scores(p , 
, ¢r,t, (r)),..., Scores(p,, ¢r,t.(r)), r). Assume that So and s~ are elements ofS(sbl,..., sbn, r). 
Hence, it follows that so = C(pl,...,p,~)(r), s~ = C(pl , . . . , p~ )(r), and Vi < n( Scores(p,, rr~t,( 
r) ) = sbi = Scores(pi, ~rrt,(r)). Let ri t> ~'rt.(r). p,(r~) = p,(RecordO/,,,(~dr), N~eOf(r~)) = Scores(pi,rrt,(r)).NameOf(r,) 
= Scores(p~,~,,,(r)).NameO/(r,) since Scores(p,, ~,,,(r)) =   Sco,es(p;, ~,,,(~)) = p;(RecordOf,,,(~r,,,(r), 
NameO.f(r,)) = p;(r,) Hence, it follows that pi and p~ are equivalent with respect to 7r~t,(r) for all 
i < n. Since C is a modular combining form, it follows ~at s0 = C(pl,... ,p,)(,) = C(pl, ...,p',)(,) 
= s~. This proves that S(sbl,...,sb~,r) has at most one element. If S(sbl,..., sbn, r) is empty, then 
define /( sbl, . . . , sb,~, r) = .L; otherwise, define f(sbl,...,sbn,r) to be the unique member of 
S( sbl , . . . , sb, , r ). Since C(pl,...,p,~)(r) e S(Scores(p,,rrt,(r)),..., Scores(p,,~rrt,(r)), r), 
it follows that C(p~,...,pn)(r) = .f(Sco~s(p,, ~,d~)),..., S¢ore~(p~, ~,~,(r)), ~). By Definition 2.8, 
it follows that c(p~, . . . ,p~)(r) = comb,,e(/)(p, , . . . , p~)(~) as desired. []  
			
]]
##[[DATA:data/oraby/A hidden-surface algorithm with anti-aliasing.txt|
           I0  
			
]]
##[[DATA:data/oraby/A mathematical approach to language design.txt|
             
 
			
]]
##[[DATA:data/oraby/A new model for integrated nested task and data parallel programming.txt|
            .  
			
]]
##[[DATA:data/oraby/A less dynamic memory allocation scheme for algol-like languages.txt|
          289  
			
]]
##[[DATA:data/oraby/An accelerated program in computer science.txt|
               
			
]]
##[[DATA:data/oraby/Algorithms to detect chained-inference faults in information distribution systems.txt|
            .  
			
]]
##[[DATA:data/oraby/A multiresolution control method using view directional feature.txt|
               
			
]]
##[[DATA:data/oraby/A framework for the recursive definition of data structures.txt|
Untitled-1 1 In[223]:= ex2= Sys[ fib= (0_ (fib:9))+ ({0, 
1j_ (fib:8)), fibo = {0, 1j_ (((fibo:-9) :8)+ (fibo:8)) = 0 0 (fib:9)+ {0, 1}0 (fib: 8) Out[223]= {fib 
}fibo = {0, 1}0 ((fibo :8)+ ((fibo: -9):8)) In[224]:= Progression[ex2] Out[224]= {fib -1, fibo -1} In[225]:= 
CompileSys[ex2] XModule[ fib= Table[0, 10}l}, Do[fiblil= If[i 1, 0, XGet[fib, -1dilld If[i2, XGet[ 0, 
1},il, XGet[fib, -2d ill, i, 10}l; XPrint[solution of , Unevaluated[fibl, is: , fibl;XModule[ fibo= 
Table[0, 10}l}, Do[fibolil= If[i 2, XGet[ 0, 1},il, XGet[fibo, -2d ild XGet[fibo, -1d ill, i, 10}l; XPrint[solution 
of , Unevaluated[fibol, is: , fibol;XPrint[system solvedlll solution of fib is: 0, 1, 1, 2, 3, 5, 8, 
13, 21, 34} solution of fibo is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34} system solved  In[226]:= ex4= Sys[u 
= ({6, 7j_ (u:-8 :10] Out[226]= {u = {6, 7} 0 (u: -8) :10} In[227]:= Progression[ex4] Out[227]= {u -0} 
In[228]:= Evalue[ex4] Fct u-evalCut[evalJoin[ 6, 7} , evalCut[evalVar[u, ARGl, -8ll,10l Out[228]//TableForm= 
 u -{D, D, D, D, D, D, D, D, D, D} u -{6, 7, D, D, D, D, D, D, D, D} u -{6, 7, D, D, D, D, D, D, D, D} 
 In[229]:= ex7= Sys[ riota = «« riota:-4) -1) -4] ((riota -4) + (-1)) Out[229]= (riota = : 0 4 } In[230]:= 
Progression[ex7] Out[230]= {riota --1} In[231]:= Evalue[ex7] Fct riota-evalJoin[evalPlus[evalCut[evalVar[riota, 
ARG], -4], r-1}], r4}] Out[231]//TableForm= riota -{D, D, D, D, D} riota -{D, D, D, D,4} riota -{D, 
D, D,3, 4} riota -{D, D,2, 3,4} riota -{D,1, 2,3, 4} riota -{0, 1, 2, 3, 4} riota -{0, 1, 2, 3, 4}  
Figure7:ExampleofaMathematiasession.Thetehnispresentedinthispaperhavebeenextendedtohandlesystemsof equations.Forinstane,ex2isasystemthatdefnestwovetors:fibandfibo.AnexpressionA:­porrespondstoA+pin 
thispaperand{a,b}orrespondsto[Ia;bI].TheexpressionProgression[ex2]omputestheprogressionsofdefnitionsin 
systemex2(followingthespeifationgiveninfg.6).Theseprogressionsareallpositive,whihmeansthatthetwovetors 
areprefx­omputable.TheexpressionCompileSys[ex2]givesanimperativepseudo­odewhihomputesthesolution.The 
evaluationon­the­fyofthispseudo­odereturnstheexpetedsolution.Theprogressionofex4isnegativewhihmeansthat 
thisprogramannotbesolvedbyaleft­to­rightomputation.Arapidinspetionoftheequationshowsthatthedimension 
ofuis10.However,thefxedpointevaluationtriggeredbyEvalue[ex4]showsthatthisprogramisnottotallydefnedon 
{1,10}.Thesuessiveiterationsof' ex4areshoweduntilafxpointisreahed.A"."inthevetornotationmeansan undefnedelement..Programex7defnesthevetorriotamentionedinsetion6.Theomputedprogressionisnegative, 
whihmeansthatthesolutionannotbeomputedbyomputingtheelementsintheorderoftheinreasingindies.However, thefxedpointevaluationshowsthatriotaismaximalon{1,,5}. 
 
			
]]
##[[DATA:data/oraby/A hardware stochastic interpolator for raster displays.txt|
               
			
]]
##[[DATA:data/oraby/A logspace algorithm for tree canonization (extended abstract).txt|
               
			
]]
##[[DATA:data/oraby/A high performance multi-structured file system design.txt|
             
 
			
]]
##[[DATA:data/oraby/A minimum area VLSI network for O(logn) time sorting.txt|
           70  
			
]]
##[[DATA:data/oraby/A geometric constraint library for 3D graphical applications.txt|
               
			
]]
##[[DATA:data/oraby/A pattern compiler.txt|
               
			
]]
##[[DATA:data/oraby/A measurement-based admission control algorithm for integrated services packet networks.txt|
               
			
]]
##[[DATA:data/oraby/A model for multi-grained parallelism (extended abstract).txt|
 puters. We exhibit problems that execute more quickly (in time 
O(W)) on the Mesh SuperHet than an either of its components (in time Q(p)). However, we have also shown 
that the serial front end can be disabled without more than a constant-factor loss in the running time 
T for those prob­ lems that use the front end for fewer than O(T/pl / ) steps. We have derived lower 
bounds ou the time to sort and compute the FFT on the Mesh SuperHet and derived asymp­totically matching 
upper bounds. We have shown that a full 335 
			
]]
##[[DATA:data/oraby/A high-level programming and command language.txt|
        219    
			
]]
##[[DATA:data/oraby/A load leveling support methodology for networking.txt|
 Winter Simulation Conference + 
253  
			
]]
##[[DATA:data/oraby/A full-text retrieval system with a dynamic abstract generation function.txt|
               
			
]]
##[[DATA:data/oraby/AMT&#8212;the Ada maintenance toolchest.txt|
. Bibliography Dr. Anneliese von Mayrhauser is an Associate 
Professor at Illinois Institute of Technology. She received her PhD in 1979 from Duke University. She 
also holds a Dipl. Inf. degree from the Technische Universitaet Karlsruhe, West Germany. Her research 
interests include tools for software development and maintenance, regression testing and software reliability 
models. She is a member of the Board of Governors of the IEEE Computer Society and Chair of the Technical 
Committee on Software Engineering of the IEEE Computer Society. 299 
			
]]
##[[DATA:data/oraby/A fuzzy information retrieval and management system and its applications.txt|
               
			
]]
##[[DATA:data/oraby/Algebra and models.txt|
               
			
]]
##[[DATA:data/oraby/A high-level approach to synthesis of high-performance codes for quantum chemistry.txt|
               
			
]]
##[[DATA:data/oraby/A graphics toolkit based on differential constraints.txt|
               
			
]]
##[[DATA:data/oraby/A parallel randomized approximation scheme for shortest paths.txt|
               
			
]]
##[[DATA:data/oraby/A flexible model for retrieval of SGML documents.txt|
               
			
]]
##[[DATA:data/oraby/A framework for reusability using graph-based models.txt|
               
			
]]
##[[DATA:data/oraby/A multi-expert system for the automatic detection of protein domains from sequence information.txt|
            
  
			
]]
##[[DATA:data/oraby/A lower bound for sorting networks based on the shuffle permutation.txt|
               
			
]]
##[[DATA:data/oraby/A grouping genetic algorithm for coloring the edges of graphs.txt|
               
			
]]
##[[DATA:data/oraby/A hand biomechanics workstation.txt|
               
			
]]
##[[DATA:data/oraby/A lazy evaluator.txt|
           103 
			
]]
##[[DATA:data/oraby/A hyperbolic tree based interface for exploring massive files.txt|
               
			
]]
##[[DATA:data/oraby/A graphical programming environment in Ada.txt|
               
			
]]
##[[DATA:data/oraby/A hybrid genetic algorithm for an NP-complete problem with an expensive evaluation function.txt|
               
			
]]
##[[DATA:data/oraby/A new technique to compute polygonal schema for 2-manifolds with application to null-homotopy detection.txt|
          284  
			
]]
##[[DATA:data/oraby/A new approach to teaching a first course in compiler construction.txt|
          166  
			
]]
##[[DATA:data/oraby/A methodology for fast PC hard disk state restoration.txt|
         1110  
			
]]
##[[DATA:data/oraby/A data model and query language for EXODUS.txt|
                
			]]
##[[DATA:data/oraby/A document retrieval model based on term frequency ranks.txt|
            
  
			
]]
##[[DATA:data/oraby/Algorithms for solid noise synthesis.txt|
               
			
]]
##[[DATA:data/oraby/A method for monolingual thesauri merging.txt|
               
			
]]
##[[DATA:data/oraby/A framework for implementing hypothetical queries.txt|
               
			
]]
##[[DATA:data/oraby/A flow-guided streamline seeding strategy.txt|
 Color 
Plate 1: Seeds placed using templates for the various critical points. Left: dynamic vortices dataset. 
Right: 5 critical points dataset. These datasets are the same as those shown in Figure 2. Color Plate 
2: Regions of in.uence for each critical point are shown as yellow disks. The dataset is the same as 
the one shown in Figure 1. 
			
]]
##[[DATA:data/oraby/A library of reusable model components for visual simulation of the NCSTRL system.txt|
 AUTHOR 
BIOGRAPHIES OSMAN BALCI is an Associate Professor of Computer Science at Virginia Tech. He received B.S. 
and M.S. degrees from Bogazici University in 1975 and 1977, and M.S. and Ph.D. degrees from Syracuse 
University in 1978 and 1981. Dr. Balci is the Editor-in-Chief of two interna­tional journals: Annals 
of Software Engineering and World Wide Web; Verification, Validation and Accreditation Area Editor of 
ACM Transactions on Modeling and Computer Simulation; Simulation and Modeling Category Editor of ACM 
Computing Reviews; and serves on five other editorial boards. He is a Director at Large of the Society 
for Com­puter Simulation (SCS). He will be a member of the WSC Board of Directors representing SCS in 
Jan. 1999. Dr. Balci has been a PI or Co-PI on research grants and contracts pri­marily sponsored by 
the U.S. Navy with a total funding of $1.3 million. (http://manta.cs.vt.edu/balci) CENGIZ ULUSARAÇ is 
a Computer Science graduate student at Virginia Tech. He received a B.S. degree in Com­puter Engineering 
from Istanbul Technical University. (http://csgrad.cs.vt.edu/~cengiz) POORAV SHAH is a Computer Science 
graduate student at Virginia Tech. He received a B.E. degree in Computer Engineering from the University 
of Bombay, India. (http:// csgrad.cs.vt.edu/~poorav) EDWARD A. FOX is a Professor of Computer Science, 
Associate Director for Research at the Computing Center, and Director of the Digital Library Research 
Laboratory at Virginia Tech. He received M.S. and Ph.D. degrees in Com­puter Science from Cornell University, 
and a B.S. degree from M.I.T. Dr. Fox has served as ACM Publications Board member, Editor-in-Chief of 
ACM Press Database Products, ACM SIGIR Vice Chair and Chair, Founder and Chairman of the Steering Committee 
for the ACM Multimedia series of conferences, and Program Chair for ACM Digital Library 96. He has (co-)authored 
numerous publications in the areas of digital libraries, information storage and retrieval, hypertext/hypermedia/multimedia, 
computational linguistics, CD-ROM and optical disc technology, and elec­tronic publishing. (http://fox.cs.vt.edu/foxinfo.html) 
			
]]
##[[DATA:data/oraby/A parallel Gauss-Seidel algorithm for sparse power system matrices.txt|
               
			
]]
##[[DATA:data/oraby/A development methodology for distributed Ada application.txt|
               
			
]]
##[[DATA:data/oraby/A flexible port traffic planning model.txt|
 AUTHOR BIOGRAPHIES RANDALL R. GIBSON 
is the President of Automation Associates, Inc., in Solana Beach, California -an independent engineering 
firm specializing in systems design, analysis, and simulation modeling. He holds bachelors and masters 
degrees from the University of California in Applied Physics/Information Sciences, and Electrical Engineering 
and Computer Science respectively. He is Member of the Institute of Industrial Engineers and the Society 
for Computer Simulation. BETH C. CARPENTER is a Senior Simulation Analyst with Automation Associates, 
Inc., in Solana Beach, California, where she is responsible for design and management of simulation projects. 
She holds a B.S. in Mechanical Engineering from Purdue University and a M.S. in Engineering /Simulation 
from Texas A&#38;M. SCOTT P. SEEBURGER is a Principal Transportation Engineer with Frederic R. Harris, 
Inc., in Fort Lauderdale, Florida, and is responsible for managing transportation engineering and planning 
projects. He holds B.S. and MS. degrees in Civil Engineering from the University of California, Berkeley, 
and Purdue University, and is a member of the American Society of Civil Engineers and the Institute of 
Transportation Engineers.    
			
]]
##[[DATA:data/oraby/A method of interactive visualization of CAD surface models on a color video display.txt|
               
			
]]
##[[DATA:data/oraby/A method of automatic proof for the specification and verification of protocols.txt|
               
			
]]
##[[DATA:data/oraby/A lighweight causal logging scheme for recoverable distributed shared memory.txt|
               
			
]]
##[[DATA:data/oraby/Adaptive two-level thread management for fast MPI execution on shared memory machines.txt|
                
			]]
##[[DATA:data/oraby/A level-set method for flow visualization.txt|
  Figure 9: Both images show the LIC volume of the .ow around the back of the car. 
Only by means of an additional, manually positioned clipping plane the relevant structures can be extracted 
(see color plate).   
			
]]
##[[DATA:data/oraby/A deterministic poly(log log N)-time N-processor algorithm for linear programming in fixed dimension.txt|
            
  
			
]]
##[[DATA:data/oraby/Algebraic structure theory of stochastic machines.txt|
        -243-  
			
]]
##[[DATA:data/oraby/A nearly linear time algorithm for the half integral disjoint paths packing.txt|
               
			
]]
##[[DATA:data/oraby/A novel method for the evaluation of Boolean query effectiveness across a wide operational range.txt|
               
			
]]
##[[DATA:data/oraby/Aligning sequences via an evolutionary tree.txt|
           ­  
			
]]
##[[DATA:data/oraby/A massively parallel adaptive finite element method with dynamic load balancing.txt|
      .. 
11   
			
]]
##[[DATA:data/oraby/A new perspective on rule support for object-oriented databases.txt|
             
 
			
]]
##[[DATA:data/oraby/Algorithms for diametral pairs and convex hulls that are optimal, randomized, and incremental.txt|
          . 
  
			
]]
##[[DATA:data/oraby/A dynamic extent control operator for partial continuations.txt|
. Appendix: Embedding splitter in stan­dard Scheme In [Sitaram 
&#38; Felleisen 90] was explained how to pro­gram control/run in Scheme. We like this idea since it helps 
to popularize the concept of partial continua­tions. The embedding that follows haa been designed to 
mimic a native implementation. A call to call/cc must be thought of just as a copy of the stack-pointer. 
Push and pop operations are simu­lated with cons and cdr. Other allocaticms in the heap are named with 
a make- prefix. We make explicit the data that are necessary and do not use implicit closures to keep 
them, (clef lne stack-of-marker ()) (define (splitter f) (let ((marker () ) (v ()) (topmarker ()) ) 
(set! v (call/cc (lambda (kk) (set ! marker (cons kk ())) (set ! stack-of-marker (cons marker stack-of 
-marker) ) (let ((v (f (make-abort marker) (make-call/pc rnarlcer) ) ) ) (set-car ! (car stack-of-marker) 
() ) v)))) (if (not (null? (caar stack-of-marker))) II Someone did (kk thunk) (begin ; ; markers downto 
marker are obsolete. (obsolete-stack ! marker) . Compute thunk with continuation kk. t;et! v (v)) (set-car 
! (car stack-of-marker) () ))) (set ! topmarlrer (car stack-of-marker)) (set! stack-of-marker (cdr stack-of-marker) 
) (cond ;; The continuation is return ((null? (cdr topmarker)) V) end of a partiai continuation. t~lse 
((cdr topmarker) v)) ) ) ) (define (make-abort marker) (lambda (thunk) (if (null? (car marker)) (wrong 
obsolete splitter ) ;; Return to the marker. ((car marker) thunk) ) ) )  (define (make-call/pc marker) 
(lambda (g) (if (null? (car marker)) (wrong out of extent ) (call/cc (lambda (kj) (g (make-pckj marker)) 
))))) (define (make-pc kj marker) (let ((slice (marker-prefix stack-of-marker marker ))) (lambda (v) 
 183 (call/cc (lambda (kc) (set! stack-of-marker (append slice (cons (cons Xt kc) stack-of-marker ) ) 
) (kj v)))))) (define (marker-prefix 1 m) (if (eq? (earl) m) () (cons (cons #t (cdar 1)) (marker-prefix 
(cdr 1) m) ))) (define (obsolete-stack! marker) (if (eq? (car stack-of-marker) marker) marker (begin 
(set-car! (car stack-of-marker) () ) (set! stack-of-marker (cdr stack-of-marker) ) (obsolete-stack! marker) 
) ) ) 
			
]]
##[[DATA:data/oraby/A Fortran 77 interpreter for mutation analysis.txt|
               
			
]]
##[[DATA:data/oraby/A framework for numeric analysis of array operations.txt|
               
			
]]
##[[DATA:data/oraby/A methodology for teaching an integrated computer science curriculum.txt|
               
			
]]
##[[DATA:data/oraby/A model to assess the benefit value of knowledge management in an IT service provider environment.txt|
               
			
]]
##[[DATA:data/oraby/A laminae approach to constructing geometric feature volumes.txt|
 191  ......... I I iiiiii i 
iiiii ill ~l i I Aspect.d tii T Aspect..4 (a) The 'Slider-mount' component (b) Recognised features with 
aspect d. Selected features are hi.clhliahted in riclht Danel of the GUI. (c) Snapshot of two depression 
features identified with aspect --d. _=~nd (d) Feature decomposition. The left panel shows the decomposition 
of the central 'plateau' protuberance into various alternative shapes labeled as Pd. The right panel 
displays the depression features. Figure 13: Results of test Component-3 -the 'Slider-mount'. This component 
illustrates the capability of the algorithm in handling small- scale manufacturing features such as undercuts. 
193   
			
]]
##[[DATA:data/oraby/A new look at fault tolerant network routing.txt|
               
			
]]
##[[DATA:data/oraby/A framework for predicting droughts in developing countries using sensor networks and mobile phones.txt|
               
			
]]
##[[DATA:data/oraby/A parallel dynamic-mesh Lagrangian method for simulation of flows with dynamic interfaces.txt|
               
			
]]
##[[DATA:data/oraby/A modeling study of the TPC-C benchmark.txt|
 0.002 [ \ district 1 1[ J dishict2 1 ) ................. 
Costict10 .,.1 ., : al ; % E-! .2 .1 ~ &#38; 0.0015 0.001 0.0005 Figure 1: TPC-C Reproduced with Business 
permission Enviornment. from the TPC Figure 0 0 2000 4000 6000 stock tuP1e nUM?Je3? 4: Stock Relation 
PMF: 8000 10,000 1 00 tuples F==l [ w I lOOK J 10 1==1 m W*l(J I I-YE--h 3K J 1 0.s 0.6 0.4 0.2 Figure 
2: TPC-C Reproduced Entity/Relationship with permission from the Diagram. TPC 0 o Figure 0.2 0.4 fraction 
5: Stock I 0.6 of relation Relation I 0.s CDF 0 20000 40000 stock tuple 60000 number 80000 k 10000 0.012 
0.011 0.01 0.009 0.008 0.007 0.006 0.005 0.004 0.003 0.002 0.001 0 J o 60( 1200 customer 1 n, 10 ber 
2400 J 3000 Figure 3: Stock Relation PMF Figure 6: Customer Relation PMF 30 1 325 300 0.0 275 0.6 250 
225 0.4 200 175 0.2 150 125 0 0 0.2 0.4 fraction of 0.6 relat~c,n 0.8 1 100 I o 100 nlega 200 Dyces 300 
J 400 Figure 7: Customer Relation CDF Figure 10: Price Performance 1 6600 6000 o.e 0.6 Opt Lnlized opt 
Lm, optun, customer customer stock zed stock 1 t em zed item   ----­---­ 5400 4800 4200 3600 I 3000 
0.4 -I 2400 800 0.2 200 600 Perfect scaleup with replication no repllcat=on ----­ 0 0 100 200 megabytes 
300 4t 0 0 0 5 10 number 15 of 20 nodes 25 Figure 8: Significant Miss Rates Figure 11: Scaleup of TPC-C 
222 220 7000 6500 6000 21s 5500 216 214 212 5000 4500 4000 3500 210 208 206 3000 2500 2000 1500 204 1000 
202 200 0 Figure 9: 100 200 megabytes Maximum 300 Throughput 400 500 0 Figure 12: 5 10 number Sensitivity 
15 of to 20 nodes Percent 25 Remote 31 
			
]]
##[[DATA:data/oraby/A linear lower bound on index size for text retrieval.txt|
               
			
]]
##[[DATA:data/oraby/A multiple presentation document management system.txt|
               
			
]]
##[[DATA:data/oraby/A fast algorithm for connecting grid points to the boundary with nonintersecting straight lines.txt|
                			
]]
##[[DATA:data/oraby/A fast parallel algorithm for determining all roots of a polynomial with real roots.txt|
1 Ck --1 
s1 sx 2 Ck --2 s2 s 2 s~ 3 Ck --3 s3 S 3 S 2 S 1 4 Sk_ 1 Sk_ 2 Sk_ 3 Sk_ 4 . . k CO Sk Figure 1: The 
Newton identity. ~r °.°° .................... ° ................................. ......... Figure 
2: The contour of integration. / Figure 3: Possible shapes of the plots of fi and fi+l  f,-----/" 772"/-" 
349 
			
]]
##[[DATA:data/oraby/A logical framework for software proof reuse.txt|
             
 
			
]]
##[[DATA:data/oraby/Algebraic support for complex objects with arrays, identity, and inheritance.txt|
       
 167   
			
]]
##[[DATA:data/oraby/A manufacturing capacity planning experiment through functional workload decomposition.txt|
  RR',T" 
I '~TERM,HAL ~ 1 :~ TERM,NAL I Sbck (BACKENO) Xz/b ~l/b ~.I/0 Xi/b CBMAICOLAN Sfnt Sfnt , b-BATCH SIZE 
n-NUMBER OF WORK STATIONS Xb n~t ~ INFORMATION FLOW ,." ~*-~.. (-.MATER=L ,LOW ) PFE " b"~rE I FIGURE 
I. A OISTRIBUTED FRONTENO/BACKENO FIGURE 3. AN OPERATIONAL MODEL OF THE DISTRIBUTED PICS ARCHITECTURE. 
FRONTEND/SACKEND PIGS SYSTEM. Figure 4. CFU Service Time Versus Batch Size 10o I O0 8O >(Non-(lached) 
Pronte t,l L i / / J 70 I , .... CPU Times (seconds) 60 ( =_: ,:::?=~oFt~:ow) n - NUMBER OF OPERATIONS/WORK 
STATIONS ~'l - ARRIVAL RATE OF CIRCUIT PACKS X b- ARRIVAL RATE OF BATCH JOOS per Interaction 50 / , , 
. Centra ized , , kb ~  P " Pb + PI 7 i I n'~,i ~ Ib Xb Fb + /n Fi 20 ,o :,'::: =/ r ""/;" 4 ..... 
.=-(.":.a- C:z.,:L~2) :0 ~.c kc r..i ~-(wacae-]) r~uck~nd ; 0 ~" I I I I I I I I I FIGURE 2. AN OPERATIONAL 
MODEL OF THE CENTRALIZED PICS SYSTEM. O 5 1O 15 20 25 30 35 40 Batch Size (per frontend-bsekend interaction) 
including communication overhead on the backend system 45 0.40 0.35 0.30 (Scaled) Offered CPU Load 0"25 
0.20 0.15 0.I0 0.05 0.0 Figure 5. Offered CPU Load Versus Batch Size =..... . ...... .,(Non-(.'ached) 
.2 Fro~ ends ! ~Centra~ized S~ste m , ........ (Cachq t) 2 Fr ntend,, ' "'.I ! I I I-.... ._ ---., 
 ........ 2. ~on-I !ached) hF~on ads ~1~on-t ~acnea} X~acKet . '"l. ".....,,,,,: "::::::::. ......... 
~(qacbe~d) fi F~qnt~nd~ ' "~e.cut-a) D~C~ cud 5 I0 15 20 25 30 35 40 45 Batch Size (per frontend*backend 
interaction) transaction arrival rate = 55/hour, number of operatm.s = 12 8O0 70O 6OO CircuitP ack.~ 
00 per Hour 4O0 3O0 200 100 0 Figure 7. System Capacity with Response Time Constraint Dis ribt ted Ca 
he( / y~ :hed) :17 ,qut~ ale: ; re :port te t! lea at Oq ~% eni mllz !d ( :PU ut i 'aft V , i ; , 
I I I I I I I t I I I J 2 3 4 5 6 7 8 g I0 II 12 13 14 15 16 17 Number of Frontends batch size ~ 20, 
number of operations = 12  Figure 6. Overall System Capacity With Batch Size 20 Figure 8. Overall System 
C~t-Effectlvene~ 8OO 7OO BOO 5OO Circuit Packs per Hour 4OO ;// Dis ribt ted : Ca, bed Circuit Packs 
per Hour per Unit Co~t 4 3 / /--\ [ / L .X--' / I / I \ "~ ,Dis rib ted 'Ca< ~ed 30O 200 II; i Dis rlbt 
Led No:-Ca :hed) Gel tral zed / ~, is1:~.l~er r b~ 'No] -C~ hed) 100 *] iqui' alex L re Lpon ~ tl I aes 
at 9, I% ',enl rali~ -'d q fPU utili iati n 0 2345 6 7 8 g I0 II 12 13 14 15 16 17 1 2 4 5 6 7 8 9 I0 
11 12 13 14 15 16 17 Number of Frontends number of operations = 12 Number of Frontends batch size = 20, 
number of operations = 12 150  
			
]]
##[[DATA:data/oraby/A hypertext module for teaching user interface design.txt|
 6. ACKNOWLEDGEMENTS Many thanks to Lance Haldeman for helping in the development, 
and to Cliff Wagner, Peggy Hunter, Marilynne Stout, and the students who reviewed UID Tutorial. Asymetrix 
and Toolbook are registered trademarks of Asymetrix Corporation. 7. APPENDIX Sample screens horn UID 
Tutorial Sample screens from UID Tutorial be robust in the tiresence of er;ors, and chat the designer 
has thought through how Che program should work from the U.Ser S point of view. The former falls into 
the category of error handling, while the latter involves providing help -in our case, on llne help. 
This chapcer takes a brief look at ~he implica~lons of these two subjects on user interface design. A 
complete discussion is beyond this tutorial , b ~ the topics are pare of the software A*A Engineering 
curriculum, so the gentle reader can refer to the bibliography A for sources. The Swan computer Lab here 
on campus has its own menu displayed at boot UP. This menu allows easy access to most of the software 
packages available to the Swan Lab. Note the borders drawn around the various areas for grouping. . 111
			
]]
##[[DATA:data/oraby/A peer-to-peer architecture for multi-path data transfer optimization using local decisions.txt|
               
			
]]
##[[DATA:data/oraby/A file organization for cluster-based retrieval.txt|
               
			
]]
##[[DATA:data/oraby/A locality-sensitive hash for real vectors.txt|
A Appendix Proof of lemma 2.1. Let yi be the .rst point on line xy moving 
from y to x which is the entry point to a new cell; i.e., such that there is some cell cy' for which 
yi . cy' but yii . cy' for ii any previous point yon this line. Note that we may i have y= y. Notice 
that yi must be on the boundary of the new cell, so that there is some cell ci containing both y and 
i y. Thus, if yi ~ x, then we are done, since x is in some i cell cx ~ c. From here on, we ll assume 
that yi ~ x. Let x0 = x, and, similar to our choice of yi, let x1 be the next point on the line moving 
from x to y which is the entry point to a new cell. We can continue to de.ne a sequence x1,x2,... with 
each successive point being the next along xy toward y which is the entry point to a new cell. Let xk 
be the .rst in this sequence such that xk ~ yi. Since x ~ yi, we have k> 0. As above (for yi), there 
must be a cell ck containing both xk-1 and xk. By our ii choice of xk, we know that ck ~ c. Thus x= xk 
and yi are the desired pair of barely neighboring points. D Figure 8 shows an example case to illustrate 
the above proof. Proof of lemma 2.2. We begin with the . direction. Suppose x, y don t cross c. If either 
point is not in the boundary of c, then clearly they cannot be barely neighbors. Instead, let s assume 
that the corner sets Cx,Cy . corners(c) with x . convex(Cx),y . convex(Cy), both contain a common point 
z . Cx n Cy. If there were a cell ci containing x but not z, then the polytope cnci would be de.ned by 
corners excluding z, yet this shape would include x. This contradicts the necessity of z in Cx, so there 
cannot be any such cell. This same argument applies to all cells containing y. iii Therefore, any pair 
of cells c,ccontaining x, y must also share the point z, so that ci ~ cii, and x, y cannot be barely 
neighbors. Next we show the . direction. We will refer to any k-dimensional set of the form convex(F 
), for any F . corners(c), as a k-face of c. Thus a point is a 0-face, an edge is a 1-face, etc. We claim 
that, for every k-face f of c, there is another cell ci such that c ~ ci and c n ci = f. First we ll 
complete the proof using this claim, and then justify it. Suppose that x, y cross cell c. Let fx,fy denote 
the minimal k-faces of c which contain x and y, respectively. Now choose cells cx,cy so that x . cx,y 
. cy and cx n c = fx, cy n c = fy, using the claim. If cx ~ cy, then there is some point z . cx n cy. 
By the convexity of the cells, cx and cy contain the line segments xz and yz respectively. This means 
that there can be no slicing hyperplane which intersects the triangle formed by x, y, z, which in turn 
implies that z . c (see .gure 9). By our minimal choices of the k-faces, we have that z . fx and z . 
fy. But this contradicts the fact that x, y cross c! Hence there can exist no common point z between 
cx,cy; and cx ~ cy so that x, y are barely neighbors. Now let s justify the claim that there is a cell 
ci with i c n c= f for every k-face f of cell c. Suppose f is a k-face of cell c. Then f is the intersection 
of d - k hyperplanes with c, where each hyperplane is a slice of the partition that determines some d 
- 1-face of c. Let ci be any cell on the opposite i side of all of these hyperplanes, and with c ~ c. 
If i x . c n c, then x must be a point in each of these d - k hyperplanes, so that x . f. It is also 
clear that f . c n ci; so we may conclude that f = c n ci, which was our goal. D Proof of property 2.6. 
V is isometric in £2 Let s check that V is an iso­metric partition that every pair of cells is isometric. 
Similar to our previous argument, we ll begin by show­ing that every image, under T , of a lattice-cornered 
hy­percube is isometric to the image of [0, 1]d . Let u denote the unit hypercube [0, 1]d and u = T (u). 
Similarly, let c denote an o.set hypercube c = u + z, z . Zd, and c = T (c). We would like to .nd an 
isometry from c . u . Let Az be the shift Az(x)= x-z, so that Az(c)= u. Then clearly A z := T .Az .T 
-1 maps c to u. Notice that (TAzT -1)(x)= T (T -1(x) - z)= x - T z, so that A z is indeed an isometry. 
Next we d like to check that any two simplices T (Sp1 ),T (Sp2 ) are isometric as well. Suppose p :[d] 
. [d] is a permutation, and let Up denote the mapping given by yi = xp(i) when y = Up(x). At this point 
we note that T can be written in the form T = aI + ßJ, where I is the identity matrix, J is the all-one 
matrix, vv a = d + 1, and ß = (1 - d + 1)/d. Then UpT TUp = UT (aI + ßJ)Up p = aI + ß(UpT JUp)= aI + 
ßJ = T. Using the fact that Up is unitary (so UT = U-1), we pp can see that TUpT -1 = Up. So if Up : 
Sp1 . Sp2 , then we still have Up : T (Sp1 ) . T (Sp2 ), also isometrically. As a .nal note, observe 
that any two isometries A = T . A . T -1 and B = T . B . T -1 may be composed, and preserve the conjugate 
relationship A . B = T . (A . B) . T -1 . This justi.es that a series of the above tranformations translations 
and permutations  su.ces to produce an isometry between any two cells of V, and this partition can be 
studied by considering a single canonical cell. The canonical cell is vertex-transitive in £2 Next we 
ll choose a particular canonical cell to study, and justify the name of this partition by showing that 
it has the type of polytope regularity known as vertex transitivity. Recall that a polytope p is vertex 
transitive i., for every pair of vertices v1,v2, there is an isometry . : p . p with .(v1)= v2. Our canonical 
cell in V is T (Sid), with corners pi := T (fi). To show that this cell is vertex-transitive, it will 
su.ce to construct mappings mi,j : T (Sid) . T (Sid), for any i, j .{0, 1,...,d}, such that mi,j is an 
isometry and mi,j(pi)= pj . We proceed by constructing a (non-isometric) map V : Sid . Sid which acts 
as a shift operator on the corners of this simplex. If we de.ne the matrix 1 -1 I W := , 1 -10 and let 
V (x) := Wx + f1, then V (fi)= fi+1 for i<d; V (fd)= f0. Since V is an a.ne transformation, V (convex(f0,f1,...,fd)) 
= convex(V (f0,f1,...,fd)), verifying that V : Sid . Sid. To operate in the new partition, we extend 
V via V := TVT -1 . Clearly, V maps the canonical cell to itself, and shifts the corners pi . pi+1 (mod 
d + 1). Hence any desired mapping pi . pj can be acheived by the correct number of iterations of V ; 
that is, we are close to seeing that mi,j = V k, where k = j - i (mod d + 1). The last step is to con.rm 
that V is an isometry. This is the case i. W = TWT -1 is itself isometric. vv Let µ := (1 - 1/d + 1)/d, 
so that T = d + 1(I - v µJ); and T -1 = v 1 (I + d +1µJ). Then W =(I - d+1 v µJ)W (I + d +1µJ), and from 
here one may tediously simplify the corresponding formulae for Uwi,wj) (where wi is the ith column of 
W ) to con.rm that W T W = I. This su.ces to demonstrate that T (Sid) is indeed a vertex-transitive simplex. 
D Figure 8: Example from the proof of lemma 2.1. Here, x ~ y and xi ~ yi are barely neighbors Figure 
9: For the proof of lemma 2.2: If xz and yz are both intact i.e., do not intersect a slicing hyperplane 
then all of .xyz must exist in a single cell.  
			
]]
##[[DATA:data/oraby/A decoupled scheduling approach for the GrADS program development environment.txt|
                
			]]
##[[DATA:data/oraby/Algorithms for rational function arithmetic operations.txt|
               
			
]]
##[[DATA:data/oraby/A fast and accurate iterative solution of a multi-class threshold-based queueing system with hysteresis.txt|
          206  
			
]]
##[[DATA:data/oraby/A faster deterministic maximum flow algorithm.txt|
               
			
]]
##[[DATA:data/oraby/A graph-aided inference browser for developing knowledge-based systems.txt|
               
			
]]
##[[DATA:data/oraby/A new privacy model for hiding group interests while accessing the Web.txt|
               
			
]]
##[[DATA:data/oraby/A heuristic multiprocessor scheduling algorithm for creating near-optimal schedules using task system graphs.txt|
          718  
			
]]
##[[DATA:data/oraby/A more efficient approximation scheme for tree alignment.txt|
               
			
]]
##[[DATA:data/oraby/Adaptive zero knowledge and computational equivocation (extended abstract).txt|
                
			]]
##[[DATA:data/oraby/Advanced visualization technology for terascale particle accelerator simulations.txt|
               
			
]]
##[[DATA:data/oraby/A mean-value performance analysis of a new multiprocessor architecture.txt|
 L  Appendix A The conditional probabilities 
that a requested data block is on the same row, same column, or neither, as the requesting processor, 
given that the data block is unmodified or modified, are as follows: 1 Pool, = probability own column 
given that it is unmodified = -~- N-1 Pfis = probability foreign column geven that it is unmodified = 
--~ N-1 Pcotx = probability own column given it is modified = N2.-1 Protx = probability own row given 
it is modified ¢N(N-1)~¢I.~ N-1 =.~., .~'. = Nk 1 p/** = probability not same row or column given it 
is modified N(N-1) -(N-l) 2 = (~) (-~-) N2_1 The above probabilities are used in the following tables 
for Pi,N, is and Pi d,ktx : PkJdlx j = 0 )=f i=r i=c i=r i =c k =A 1 -PcolX PcolX 0 P/ix k =D ProtX 1 
-P,olX P11x 0 k=AD 0 0 0 0 j=/ Pk~ atS j =0 i=r i=c i=r i=c k=A 1 0 0 0 k =D Py]s 0 0 0 k =AD 0 PcotS 
0 ~ls 176   
			
]]
##[[DATA:data/oraby/A graphics-based programming-support system.txt|
            49 
			
]]
##[[DATA:data/oraby/A generative model of working set dynamics.txt|
             
 
			
]]
##[[DATA:data/oraby/A genetic algorithm for packing in three dimensions.txt|
 Table I: Three Dimensional Pscking 
withoutGeneticAlgorithm Ncxf 3W Frcl m TVU. # Pkg.f Heisht I t%i HeightI Fdl Rsodom 50 271 34.7% 261 
36.0% Raodom 500 2879 30.6 2443 36.1 Conoived 99 72 50.0 88 40.9 Conoived 320 21 47.6 19 52.6  Level 
75 24 50.0 1 27 44.4 Table U: Three Dmeadoaal Packing with Genetic Algorithm Cmswvcr Next F:t F- Fit 
> Random # Pkg 50 Method 0rder3 Hckht \ Fdl 180 52z% Height206 mt 45.6% Cycle 207 45.4 206 45.6 Pm 171 
54.9 192 48.9 I Rortdl I 189 49.7 I 191 49.2 Random 503 ordefl 2253 39.1% 2171 40.5% Cycle 2273 38.7 
21243 39.8 PMX 2134 413 2194 37.4 Randl 2167 4!3.6 2143 40.3 Conmved 99 0rder2 51 70.6% 70 51.4% Cycle 
52 69L? 68 52.9 PMX 52 692 64 56.2 Randl 53 67.9 72 50.0 Contrived 320 0rder2 18 55.6% 18 55.6% Cycle 
18 55.6 18 5S.6 Pm 18 5S.6 17 58.8 Randl 19 52.6 17 58.8 Isel 75 m 20 60.0% 22 54.5% Cycle 20 60.0 23 
52.2 PMX 18 66.7 22 54.5 Randl 21 57.1 21 57.1 Table IIL Ef7ect of Reprocessing on Ntxt Fit (without 
Genetic Algorithm) b Rotetedend F%econedby Tvoe # Pkas Wldti I Le.@I ~eighl I U id~ I ~~ ! Height Random 
50 33.2% 41.2% 40.1% { 36.0% 48.9% 56.9% Random 54X3 35.7 45.2 50.4 43.4 502 M.o Contrived 99 51.4 57.1 
58.1 57.1 58.1 &#38;Jo I I Conrnved I 320 I 66.7 71.4 71.4 I 71.4 71.4 71.4 II Level 75 44.4 6:0 60.0 
I 50.0 66.7 70.6 J  Table IV: Effectof Repreceeeiagon PM Fit (withoutGeneticAlgorithm) %sxted by Rotated&#38; 
Preaord by Tvue #Pk Width lt.ertgthl I-Wght W~drh ! Len Random 50 33.8% 41.6% 46.5% 38.7% 41.6% 53.4% 
Random mu 37.4 42.5 57.3 42 I 50.4 62.8 contrived 99 45.0 51.4 49.3 61.0 63.2 70.6 Conrnved 320 58.8 
62.5 62.5 76.9 76.9 76.9 Level 75 48.0 54.5 54.S 50.0 60.0 66.7 Table V: Genetic Algorithm .%ededtith 
BeetReprecesaedPacking Croetnv.x 1 NeatFit Fit Fit Twe = Rembm 50 Random Sm contrived 99 Rendl 53 67.9 
48 75.0 contrived 3m Clder2 14 71.4% I 13 76.9% CYCk? ! 14 71.4 ! 13 76.9 P&#38; 13 76.9 13 76.9 RMdl 
13 76.9 13 76.9 Level 75 C)rTkr2 16 75.0% 17 70.6% Cycle 16 75.0 17 70.6 Pm I 16 75.0 I 17 70.6 Randl 
16 75.0 17 70.6 1. Figure 1: Layout tor Contrived 320 Data Set mEn (a) (b) Figure 2: Layout tor Contrived 
99 Data Set    E%!l H (a) (b) Figure 3: Layout for Level 75 Data Set 1029 2300 1 I 2600 ­ ~ aoo - 
~ E ~ : 0 ~ 2400­ :2600­ c s: c = : n = 2400- ZaJo­ 2200­ 0 20000 40000 80000 Rmemblrmtlons 80000 100000 
2000 0 20000 , 40000 60000 Rocomblnatlons 80000 100 Figure 4: Relative Convergence Rate Figure 5: Diversity 
of the Gene Pool 1340 4 $­ 1 Iwo+ 0 20000 40000 60000 80000 100000 0 10000 ~ 40000 50000 R.comblnmtlon8 
Rocomblnmtlon$ Figure 6: Seeded and Unseeded Genetic Algorithms Figure 7: Convergence Rate of Seeded 
Genetic Algorithm 1030 
			
]]
##[[DATA:data/oraby/A methodology and an evaluation of the SGI Origin2000.txt|
               
			
]]
##[[DATA:data/oraby/A domain centered curriculum.txt|
  Our experiences with a computer scienm curriculum centerd armmdthe aviation 
domain that emphasizesteam 
			
]]
##[[DATA:data/oraby/A functional model of instructional programs.txt|
               
			
]]
##[[DATA:data/oraby/A log file design for analyzing secondary storage occupancy.txt|
12. OS/VS2 System Programming Library: Debugging ~n~?-~, GC~8-O709. 
 132 r" ~J ~~ ~ 0.~ ~, .-~ ~,~ ~4 4J () r. C~ ¢" n) ..=i .IJ el) 0 £: r..  0 0 C ~0 .IJ L) 0 0 ¢0 
~ ffl .o . 0 {J .~ ,'~ ~,.~ .,.~  '~.~ ~ 0 ~ e" ~ "121 ~ e. , 0 ...4 ~J 2 ~o~ 0 U L) U C JO r.~ 
r.~ ~ 0 .1 L) ~t c~ I o I <I I ° I o o o I ° I Q o {3 o 0 o o 0 < < < o0 (N ~o 0 cO O~ 0 (:D ,.-I 
.--I 0 U 0 ~' O0 U 0 u~ ~o '.0 I .o~ ~o., o.~, C o.d ,,.,-~3,, " "~,.,,. 0., 3~ ~J C 8 '10 I1) 
0 C ~  ~ ~ "-~ ~. oe, lJ ~ O) ~ -r~ 4J {) E U~ 0,.-i X _ cO ~ . I~ U U U U C U U U U eL 0 ,-'~ 0 r.. 
U ~ 01 o I ~I I I ol ol 01. ol I Ol o 01 o -4 (~ tO --~ O~ O~ 04 r~ 03 oo ~ ~ ..~ . 0 .-4 04 tO 133 
 .-~ 1.4 m D O) m,.-t O [) .~ e-, ~ ~J .5-~ .,.4 ~-~ rj ~ .-40 e'~ .,4 .~1 0 ql o l.J 4-1 O (I; 0 =2~o~A 
~""~ 0&#38; t)® [)~ [)~ r-.,~ 0 ~) o Z I 0 ~ ~ ~o~ "~ r.t, O O ~I l ~ n~ >1 r.~ n ", u I ~3 u [*.I [.~ 
I ~s I O kO ~4 r~ O .-4 kO _~ 4J t) C ~j .IJ (D e., o k~4 4J ,'~ e.. o 0 ~ 0 u~ 0 o e-. ~0 "0 0 
I--4 ~o 0 0 r. 4J.c: 0 ,-I -'~ 0 o C--4 ~ E) ~ ~ 0 En >u,.4 U~ 00~,~ ,-4 0 >,4~ ~.Uo 8~ In S .,4 
4J m t) m N e, ..tJ t-', e., 0~ ~n (n 8 ~n b 8 ~'= o b...] ! r0, O .~ 0 Z 0 0 cn I r,l ~L D.~ 
r.q ~, 5, ~, ~ ~ ol o I o I o o o I o I C:, 01 ~ o O ~ ~ O .~ 0 0 0 ~ o~ ,~ 0O (",4 4-÷ 134 C 
0 0 ~g ~.~ e., m .,-.t o g" ,I; Zo ~ j~ I t% 04J o.~ ~ I in r~ -'J ~J 0 0"0 ~N O ~J ~ o= ~..~ . ,:" 
~.~o5~ 4J eO 0 [n..c ~.~ 4J -~ 1.0 I/)..~ .,-I ''-.-4 ..IJ c' In ~ o ~ o Ul 4..I ~.~,  U4 : 0 O r~. 
09 )~ D (~ 3 0 () ~J 59 r~-~ 4~ .C I/1 0 2g 0 "~ ~I = o >' >,, >, ~-) C C C g  JJ o~ 0 O~n °l--4 (%l 
I ('~ '~ .--fJ IN ° ml .-~ (W ffl 0 ~ .) ~g ,-I "Z r..J. < r.-, L~ r.., I < .~. ,--1~I < .-t -,-i .iJ 
.l.J 0 U) ,'rj O~J nJ C3 ~ ~ ~ ~. 0 C ,.-I (I) 0 c, C 0 t--, ~ 0 ~-~ Or" '8 o ~" ~o o~o= ~ t~ 0 0 
~ ~ '~ ~.o.~ ~?, ~ ~'~ 'I 0-,~ 0~ ~.~ oo ~'~ ~.4'~ ~ ~.5 O 0 0 -O ~ ~ o ~o~ ~ O r. o.,-t ~ox: ~.,= 
~ ," .... o,'.,=..~ ~ ~ ~'~o t~ t~ I".. ~D .O Z ~U < t I ~ o t o¢w < O O0 f'~ %0 0 ~' CO O4 tO r.~ 00 
 135   
			
]]
##[[DATA:data/oraby/Algorithms, concurrent processors, and computer science education.txt|
            .  
			
]]
##[[DATA:data/oraby/A digital fountain approach to reliable distribution of bulk data.txt|
               
			
]]
##[[DATA:data/oraby/A fast volume rendering algorithm for time-varying fields using a time-space partitioning (TSP) tree.txt|
 Steady Shock Wave (error = 0, 0.01, 0.05, 0.08 from left to right)  Steady Delta Wing (error 
= 0,0.005,0.02,0.03 from left to right)  Steady Shear Flow (error = 0,0.7,0.9,0.95 from left to right) 
  Time-Varying Shock Wave (error = 0, 0.01, time step = 14)  Color Plate: Image Comparisons of Steady 
and Time-Varying Volume Rendering using the TSP Trees  
			
]]
##[[DATA:data/oraby/A neural network for speedy trials.txt|
       .  472  
			
]]
##[[DATA:data/oraby/An abstract interpretation-based framework for software watermarking.txt|
           .   
			
]]
##[[DATA:data/oraby/A large-scale system for annotating and querying quotations in news feeds.txt|
 http://www.evri.com/developer/rest# API-GetSentimentInformation  
			
]]
##[[DATA:data/oraby/A heuristic algorithm for partition strategy in distributed query processing.txt|
               
			
]]
##[[DATA:data/oraby/A discrete model of thin shells.txt|
               
			
]]
##[[DATA:data/oraby/A formal model for the discrete representation of spatial objects.txt|
       . !51   
			
]]
##[[DATA:data/oraby/A general approach for run-time specialization and its application to C.txt|
A 
Correctness In this section, the correctness proof which relate the stores being produced expressions 
produced by interpretation lemmas are simple, they are omitted. of our approach by a run-time of actions 
and is presented. specialize and by evaluation The proof of by standard of a run-time the main theorem 
relies on four lemmas interpretation. It also relates specialized specialize. Because the proofs of these 
 Lemma 1 states that the evaluation of a command written in the initial language does not affect (or 
depend on) the program being specialized stored at location $. Lemma 1 (Vci c Corn ) (Vcr E Store) (Vcrhs 
c C om ks) c[c~]u[~ ++ c+ ] = (c[c ]a)[~ 1+ c ~ ]. Lemma 2 stipulates that for any command written in 
the extended language, whether or not it is evaluated with a store defined at location ~ does not affect 
the other values contained in the store. Lemma 2 (Vc ~ C om)(Vu 6 Store) C[c]cr = C[c]t7 The following 
two lemmas address a correctness issue regarding the expression included in assignments and conditionals. 
More precisely, for a given action-analyzed expression and a store, a specialized expression can be produced 
by interpreting the actions using &#38; . Another alternative is to evaluate the run-time specialize 
produced by &#38;$n for this action-analyzed expression. Lemmas 3 and 4 state that these different evaluation 
strategies produce the same specialized expression and the same store modulo the value of the store at 
location $. The following lemma uses function Hole to collect holes in rhs-terms (expressions and commands). 
Theorem 1 (Vc 6 Corn ) (Vcr c Stor-e) Let (c ks, c) = C~en[c ] Then, a = C[c]cJ[~ b+ C k ] + (a ($), 
cJ) = C [c ]6 P roofi the proof is by structural induction on c If c = Eval(c ) then, C;=% [c ] = (Nop, 
C ) CT = C~c ]a[~ ++ Nop] By Lemma 1, CT = (C[c ]cr)[~ ++ Nop] + (a (~), ~) = (Nop, C[ci]~) = C [c ]@ 
 If co = Id(c ) then, C;=% [c ] = (c , Nop) u = CINop]a[$ ~ c ] = a[$ ++ c ] * (a ($),; ) = (C%,5) 
= C [C ]6 If c = Rebassign(z, e ) then, C~.m [c=] = (Assign(z, e h ), CO) where (er~s, c.)= t~,n[e ] 
 a = CICOla[!i ++ Assign($,e hs)l By lemma 3, (o ($),; ) = (Assign(z, S [e ]@), &#38;) * (a ($),; ) 
= C [c ]ti e If c = Rebseq(c~, c;) then, C~en [c ] =( Seq(c~k , c$~s), Seq(cl, c2)) where [~~~~~~~ ~ 
~n~~ gen { a =C. [Seq(cl, c2)]a[~~Seq(c~~ ,cjL )] =C[c2](C[cl]a[$ ++ Seq(c~~s, cjkS)]) Because only 
cl(resp. C2) can substitute non-terminals and holes introduced in c~hs (resp. c~ks), . 6 = c[clja[~Hc;~ 
] u = 6 [$ ++ Seq(6($),6 (~))] where 6 = c]c2]ti[~t-+cj~ ] { (c$(\))F) = C [c:]d By induction, (ti 
(!j), t?) = ca[c;]~ { =+ (CT (s),; ) = C [c ]&#38;  [f c = Redseq(c~, c;) then, C~,n [c ] = (c~~s, Seq(cj, 
c,)) where (cj~s, CZ) = C~.m[c~] 0 = CUSeq(c~, cz)]a[$ + Cjh ] = C[c2](C[c~]a[\ ++ c~hs]) By lemma 1, 
u = C[c2](C[cj]cr)[$ E+ Cjhs] By induction, (a (!j), ~ ) = Ca[C~](C[C~]a) By lemma 2, (a ($),; ) = C 
[cj](C[c~]~) + (a (~),; ) = C [c ]m. e If c = Rebcond(e , c~, c;) then, C g~~[c~~,= (Cond(e hs, Clhs, 
Cjh ), Seq(co, Seq(c~, c,))) (e , co) = $~.nue ] where (c~h , c,) = C;en [c;] { (Cjh , c,) = C:en [c;] 
r = C[seq(co, Seq(cl, C2))]O[$ w Cond(e ks, c~hs, c~hs)]  u = CISeq(cl, cz)]8 where 6 = C[co]cr[$j ~ 
Cond(e kS, c~ks, cjhs)] By construction, e h , c~hs and c~h do not share holes and lemma 4 gives, b(~) 
= Cond(t [e ]@, c~fis, Cjhs) and ; = 6 + 6 = u[$ R Cond(tY[e ]@, c~hs, c~hs)] > # = CISeq(cl, c2)]c 
T[3++ Cond(C [e ]6, c]hs, cjh ) o = CUc2](C[cl]c7[~ ~ Cond(&#38;~[e ]@, c~hs, cjhs)])  As in the case 
of Rebseq, we have, # = C[cl]u[$ H c;~ ] a = 6 [~ ++ Cond(E [e ]6,6 ($), 6 (fj))] where { b = cuc,]c$ 
[~ ++ C;h ] = C [c; ]ii By induction, (6 ($),0) = c~[c;]j (~ ($)j~) { * (a (!j), a) = Ca[c ]a  * If 
c = Redcond(e , c;, c;) then, C~en [c ] = (Nterm(s), Cond(e , Seq(Rule(s, c~ks), cl), Seq(Rule(s, c~h 
), cz))  (cp, c,) = C;en[c;] where (Cjh , c,) = C;en [c;]  { a = CICond(ez, Seq(Rule(s, c~h ), cl), 
Seq(Rule(s, Cjhs), Cz))]a[$ ++ Nterm(s)] a = if &#38;[eZ]a[$ ++ Nterm(s)] then C[cl](CIRuIe(s, c~~ )]a[~ 
~ Nterm(s)]) else C[cZ](CIFtule(s, Cjh )]a[$ ~ Nterm(s)])  61 = C[c,]a[fj t--+ Cihs] 0- = if J5[e ]@ 
then &#38; else 62 where 62 = C[c,]o[g l-+ Cp ] { (61($ ),{,) = c~[c;]; By induction, (6,($ ),6,) = 
c~[c;]d { ~ (a (~),; ) = if S[e ]@ then C [c~]&#38; else C [cj]6 = C [c ]@  
			
]]
##[[DATA:data/oraby/Algorithms for minimizing weighted flow time.txt|
           
   
			
]]
##[[DATA:data/oraby/Advice on structuring compilers and proving them correct.txt|
               
			
]]
##[[DATA:data/oraby/Advanced simulation, battle managers, and visualization.txt|
AUTHOR BIOGRAPHIES JOSEPH J. MOLITORIS 
is a research analyst at the Center for Naval Analyses with research interests in modeling, simulation, 
computers, communications, and information technology. His academic training was in theoretical nuclear 
physics. THOMAS D. TAYLOR is Director of Technology Applications and Development at CNA. His background 
includes direction of the Naval Technology Office and the Submarine Technology Program at DARPA. He was 
trained in chemical engineering. 
			
]]
##[[DATA:data/oraby/ALMTF++.txt|
               
			
]]
##[[DATA:data/oraby/A generic operator over discrete time intervals.txt|
               
			
]]
##[[DATA:data/oraby/A new NC-algorithm for finding a perfect matching in bipartite planar and small genus graphs (extended abstract).txt|
               
			
]]
##[[DATA:data/oraby/A foundations course for a developing computer science program.txt|
               
			
]]
##[[DATA:data/oraby/A parallel linear algebra server for Matlab-like environments.txt|
             
 
			
]]
##[[DATA:data/oraby/A no-busy-wait balanced tree parallel algorithmic paradigm.txt|
               
			
]]
##[[DATA:data/oraby/Adventures in PASCAL&#8212;the academy approach.txt|
               
			
]]
##[[DATA:data/oraby/A graph generation software package.txt|
            
  
			
]]
##[[DATA:data/oraby/A novel framework of register allocation for software pipelining.txt|
Appendix A Example from Rau Et 
Al s Paper In this appendix, we look at the example loop given in Rau Et Al s paper [28]. The loop is 
shown in Table 12. fori=l tondo s=s+a[i] a[i] = .9* s* a[i] enddo n Table 12: Example from Rau et al 
s paper. Its low level representation, like 3-address code, is shown in Table 13. ur33 = VT33 + VT32 
% vr33 is address of a[i] % zm34 = loadrn(or33) % vr34 = a[i]% V?-35 = ur35 + v r34 %vr35=s% vr36 = wr35 
+ vr35 vr37 = VT36 + rw34 % vr37 = new a~] % store(rw37, m(vr33)) branch ifisn Table 13: Low level intermediate 
represent ation. We will focus on the low level representation and generate code for it. The data dependence 
gr,aph of the low level presentation is shown in Figure 5. The delay for Add and Store is 1, the delay 
for Multiply is 2 and delay for Load is 13. There is only one directed cycle in the dependence graph, 
which is a self-loop from node a to a. The B-ratio of it is 1. Therefore we can generate a schedule with 
period of 1. However since Rau et al used 2 as their period, we will also use 2 as our period for generating 
the schedule and the register allocation. The OSBA formulation of the low level representation is in 
35. Figure 5: Data dependence graph of the intermediate repre­sent ation. minba+bb+bc+bd+be subject to 
a ba+ta tb>l ba+ta tf~4 ba+ta ta>4 bb+tb tc>2 bt, +tb-te>2 bc+tc td>2 bd+td te>2 (35) be+t. tf>2 tb ta>13 
tf ta> l ta t. > l t. tb~ls t. tb>ls td t. >l t. td> 2 tf te>2 Solving (s5) we obtain the following 
schedule and buffer allocation: t.=l, tb=o, t.=13, td=14, t.= 16, tf =18; (36) ba=; ,bb=9, bC=; ,bd=2, 
b.= 2. (37) With the technique (28) in Section 4, we obtain the fol­lowing buffer allocation: R.=lO>Rt, 
=8, Rc=l, Rd=l, Re= 1. (38) Since the life ranges of the variables in the repeating pat­tern all overlap, 
our second step of coloring algorithm is not necessary now. So there is a total of 21 register allocated, 
while Rau et al used 28 registers in [28].  
			
]]
##[[DATA:data/oraby/A geometric algorithm for selecting optimal set of cutters for multi-part milling.txt|
          139  
			
]]
##[[DATA:data/oraby/A local computer network simulation.txt|
               
			
]]
##[[DATA:data/oraby/A methodology for protocol design and specification based on an extended state transition model.txt|
 specification". ISO/ DP8073. Trane rt-User  TSAP Local Buffer 
" Transport-Entity ~ule Module mapping TCA AND TCA-ok T-C-resp AND T-C-resp-ok T-C-conf TCA Mapping 
I Module NOte: Channel  Note: Each transition is labelled as follows input interaction AND ~redicate 
 Interaction output iNteractlon Network-Service Provider  Figure 2 -State Diagrams for S.70 Error 
Free Figure I - Model Of Trans~o~-t Service Provider Connection Establishment Procedure Phase Service 
Protocol Elements Primitives  S.70 Class 1 IClass .0  Connection T-CONNECT request T-C-req TCR(A),TBR(B2) 
CR(A),ERR(B2) CR(A),ERR(B2) Establishment indication T-C-ind TCR(A) CR(A) CR(A) response T-C-resp TCA(C),TBR(B2) 
CC(C),ERR(B2) tCC(C),ERR(E2) confirm T-C-conf TCA(C) CC(C) CC(C) Data T.-DATA request T-DT-req TDT(A),TBR(B2) 
DT(A),ERR(B2) DT(A),ERR(B2),AK(BI), Transfer RJ(BI,B3) indication T-DT-ind TDT(A) DT(A) DT(A) I .... 
 Connection T-DISCONNECT request T-D-req TCC(BI),TBR(B2), DR(BI),ERR(B2), DR(BI:A),ERR(B2), N-D-req(A) 
N-D-req(A) OC(al) Release indication T-D-ind TCC(BI),N-D-DR(BI),N-D-DR(BI,A) ind(A,3) ind (A,3) Note: 
The references in parenthesis correspond to the steps in section 4.3 Figure 3 - Derivation of Protocol 
Elements from Service Primitives 40 I i mr~ N~ ~ ~ P~ I J flow, e.g I interactio~ and S state~: N:-I 
 I =x~omity with the ~-oe.ocol in ~ate ~ J 1 Define r~ tran~iti~ ~ to sltuati=m ~,ere ~ i ~ De Lx~ceued 
in stete suDeet J. These are rejection situatlcxm. I  ~mo~ml slb~ti=~ ~ a ~ of I~:m. I end of Z interacti~ 
 I | Define transitlone ~..£xx~/ng to occurrence of each I of the N interactlo~ in each of the ~ stat~.intro- 
 l 1.( ~ TS~.T-C-reg ( FR~4 cal lirg-idle ( pRmm_~ T-C-reg-~k TO ~ait-for-TC~ ( S~GIN mRping.TCR;... 
~:  5.( ~ NU~ T-C-req-~ TO SAME (* ~ar~ter error') ~IN TS~.T-D-ind (T-C-req-error):... ~,~; (*suo~mtion*) 
FR~ Cwait-fi=c~, calling-data-trar~fer, calle~-ta]e, ~ait-for-TC-r.~,~ae, called--4~ta-trar~ fer ] TO 
Idle (* initial state, no~ in Figure 2*) ~IN ~aRplng.~-D-~g (lo~1-er~r-ty~e) : ... T~P .T-D-ind ( local-error-type 
) ;  //////////////////////////////////////////////////////////////////  2.( ~ ~.~ ( ~ celle~-J~le 
( PK)Wr, m~ T~R-~ TO ~ait-~om4~=-re~L~nse ( ~ TSAP.T-C-Ind (cck-lnectic~-req~est); ... ~2~);  6.( Ra:~IU~ 
~[E TCR-~ TO SAME ( ~ ~.TOC (_-~_u,--):... E~D; (* s.70, 5.5.6.1 *) ( FR:M [calllng-idle, wait-for-TQ%, 
call/rig-data-transfer, ( walt-~or-TC-ru~, calle~]ate-trans f~'] ( TOS~E ( SSSIN ~ging.TSR;... ~',~; 
 ///////////////////////////////////////////////////////////////// 3. ( ~ TSAP.T-C-resp ( ~ ~alt-for-TC-~ 
 ( PR3~q~ T-C-remp-~k TO called-data-transfer ( E~SXN maRging.'r'C~: ... ~,;  7.( ~ HOT T-C-resp-~ TO 
called-idle sRping.~:c (cause): ... TSAP.T-D-ind (T-C-resp-errcc); (*suggestion*) FK~M [calling-14Lie, 
%~t-f~, calling-0ata-trans~r, called-idle, called-date-trans£~] TO idle E~GI~ maRping.N-4)-req (lc~:al-er:~r-type);... 
TSAP.T-D-i~ (l~cal~ype) :  //I/I/I/I////////////////////////////H//////////////////////////  4.( ~ 
~i~.~c.~ ( FR~4 ~ait- for-T~ ( ~ ~ TO callir~ta-transfez ( 88~N TSAP.T-C-~x~f;... ~; 8.( ~ ~Ur TOR-~k 
TO calling-iale (*,my re=7 ~ ~*) ( l~srs %~saP.T-D-ira (L~ametez-~Ba~b...~a); ( FRCM NOr wait-for-~ TO 
 ( ~ w~=;~. ~m;... ( (* ac~ate err~ r~ovary *) IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII 
9.( ~ ,~oFtrg.TCC (ca~) ( FROM ~t-for-ToA TO calllng-iale (*may retry cr clear*) ( -~n-IN T~P.T-D-ind 
(cauu);... ~): 11. ( ~ ~ ~mlt-~o~ ~o SN4E ( ~ZN m~pin~.~e~;... ( (*a~-.ivate err~ r~overy*) ( E~; IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII 
10.( w~ ~.*m~ ( ~AN'IS'~.TETOS~,~ ( ~GINo.. ( (*ex~Ine reject ~ause a~ 6a~ ~:ti~n*) ( E~:  IIII/111/1111/1111111/11111/I/11111111111/11111111111111111111111 
12. ( ~ TSAP.T-D-req ( PR~H %mit-~or-~C-re~i=(mse ~0 called-idle ( ~ ~.TCC (cauae);... ~; (*rejectic~ 
of T-C-ind*)  13. ( F~CI4 H~? v~it-for-TC-resp~me TO idle  ( ~I~ mapping.N-~-reg (norml-clear);...~): 
(*p'~u~ d~u~e*) ////////////////////////////////////////////////////////////////// 14. ( a~ .aRping.~-P-i~ 
(cause) ( FR~4 ~/~ATE TO idle ( ~ TSAP.~-P-L~ (eause);...~); IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII 
Note: Numbers to the left indicate the ~ in ~ refk~nt was progTesud in accor~nce wi~h Figure 4 in~ associated 
set of tradition. Figure 5 - Partial Specifica~ for S. 70 Ccx~ecti~ EstahLishm~t and Rnlea~ Phuu  41 
  
			
]]
##[[DATA:data/oraby/A new method for analysing feedback-based protocols with applications to engineering Web traffic over the Internet.txt|
               
			
]]
##[[DATA:data/oraby/A general approximation technique for constrained forest problems.txt|
Appendix Input: 
An undirected graph G = (V, E), edge costs C,j ~ O, and a root vertex r Output: A tree F which includes 
vertex r 1 F+% 2 C+{{v}:vev} 3 For each v c V 4 Unmark w 5 d(v) + o 6 W({v}) + o 7 Ifv=r 8 A({v}) -0 
9 else 10 A({v}) + 1 11 While 3C c C : J(C) = 1 12 Find edge e = (i, j) with t c CP E C, j 6 C q E C, 
CP # Cq that minimizes 61 = fi~~~~~$~ 13 Find ~ c C with ~(~) = 1 that minimizes 62 = z ,ec n-, W(c) 
14 6 = min(61, &#38;) 15 For all C c C 16 w(c) + w(c) + 6. A(c) 17 Forallug C,~C 18 d(?J) + d(v)+ 6 A(c, 
) 19 If6=6z 20 A(c) +­ o 21 Mark all unlabeled vertices of ~ with label ~ 22 else 23 F+ FIJ {e} 24 C-cu{c, 
ucj} {c t} -{c ,} 25 W(CF u Cq) = W(cp) + ~(cq) 26 Ifr Gcp Ucq 27 A(CP u c,) = o 28 else 29 J(CP Ucq) 
= 1 30 F is derived from F by removing as many edges as possible but so that the following two properties 
hold: (1) every nnlabelled vertex is connected to r; (2) if vertex v with label C is connected to r, 
then so is every vertex with label C ~ C. Figure 2: The algorithm for the Prize-Collecting Steiner 
Tree Problem 
			
]]
##[[DATA:data/oraby/A new approach to sequence comparison.txt|
            
  
			
]]
##[[DATA:data/oraby/A new 'building block' for performance evaluation of queueing networks with finite buffers.txt|
               
			
]]
##[[DATA:data/oraby/A parallel scan conversion algorithm with anti-aliasing for a general-purpose ultracomputer.txt|
           .   
			
]]
##[[DATA:data/oraby/A modern Curriculum for an ancient culture.txt|
 t~ 
--r-..~ 0.~ "o ~ ~ o i o 8.5 o o o  "5 o Y "F-8~ Lu 4J 0 ~W o ~E o ff~ JJ u aJ q-~ Q. <u o5 4--r- 
£- I 241 
			
]]
##[[DATA:data/oraby/Algebraic interpretation of geometric tolerances for evaluating geometric uncertainties in solid modeling.txt|
               
			
]]
##[[DATA:data/oraby/Algorithms for partial fraction decomposition and rational function integration.txt|
               
			
]]
##[[DATA:data/oraby/A meta-model for usable secure requirements engineering.txt|
               
			
]]
##[[DATA:data/oraby/A microcomputer implementation of an ER query interface.txt|
         .  61 
			
]]
##[[DATA:data/oraby/A generic account of continuation-passing styles.txt|
               
			
]]
##[[DATA:data/oraby/A multitasking switchboard approach to user interface management.txt|
               
			
]]
##[[DATA:data/oraby/A fist full of dollars.txt|
 
Table 1 -Lavidge and Steiner s - Hierarchy of Effects Model with Descriptions Awareness Making the target 
audience aware that the product or service exists. Establishing name recognition. Knowledge Giving the 
target audience greater information about the product or service. Liking Establishing a good impression 
or disposition for the target audience towards the product or service. Preference Getting the target 
audience to prefer the product or service above others through quality, value, performance, cost...etc.. 
Conviction Convincing the target audience that they need the product or service. Purchase Making the 
sale. Table 2 Ellsworth and Ellsworth s Levels of Web Marketing Engagement Level 1 - Getting Presetting 
simple postings of information and data People to Visit the to net users. Page Level 2 - Activity Providing 
buttons, search tools and link that create spontaneous interest. (lingering) Level 3 - interactivity 
Offering web based forums where the visitor can leau: remarks, send electronic mail, purchase (communicating) 
product or request more information. Table 3 Web Marketing Tactics Hierarchy of Effects Tactics . .reatltlg 
Hits/Traf&#38; Levels of Engagement Register with Search Engines Awareness - Cross Links with Other Sites 
y Visit the Page Novelty Knowledge Indexing and Meta-tags Traditional Advertising Channels Contetlt Liking 
Product lnformation Company lnformation / Activity Culture Preference Style Look and Feel Conviction 
 Purchase Purchase Links Surveys Change Feedback Entertainment 25
			
]]
##[[DATA:data/oraby/A linear-time randomized algorithm for the bounded Voronoi diagram of a simple polygon.txt|
               
			
]]
##[[DATA:data/oraby/A perceptually based physical error metric for realistic image synthesis.txt|
               
			
]]
##[[DATA:data/oraby/A methodology for the design of reliable communication networks in distributed processing systems.txt|
           ~   
			
]]
##[[DATA:data/oraby/A laboratory for teaching the development of real-time software systems.txt|
               
			
]]
##[[DATA:data/oraby/A parallel hashed Oct-Tree N-body algorithm.txt|
               
			
]]
##[[DATA:data/oraby/A page allocation strategy for multiprogramming systems.txt|
               
			
]]
##[[DATA:data/oraby/A hypergraph-partitioning approach for coarse-grain decomposition.txt|
               
			
]]
##[[DATA:data/oraby/A multi-similarity algebra.txt|
               
			
]]
##[[DATA:data/oraby/Algorithmic aspects of type inference with subtypes.txt|
               
			
]]
##[[DATA:data/oraby/A logical approach to teach digital computer design at logic and systems level.txt|
0 i ~°~ ~~ ~i ~ I-4 N ~q ! O0 ! U | I JL U D N ~ ~D II Oq~ O c~ ~J ~v4 IJ g ~J U Cl 
GJ O O .r4 ~J cO M t4~t r~ ~0 ~J C~ GJ ~4 ~D 20 POWER LOAD START OUTPUT INTERRUPT IAS11 I< < ....... 
l <I SAS l l < < ICS16 ........ < { .. ACCUMULATOR LIGHTS I00 ............ 0 I<< OAS I i ....... <l OUTPUT 
CONTENT I00 . . . . . . . . LIGHTS [] Figure 2. The Console 21     
			
]]
##[[DATA:data/oraby/A NonStop kernel.txt|
               
			
]]
##[[DATA:data/oraby/Algorithms for creating indexes for very large tables without quiescing updates.txt|
. Log records may 
be discarded if image copies of the data have been taken and the log records are not needed for restart 
recovery, normal undo or media recovery using such unage copies.  
			
]]
##[[DATA:data/oraby/A network protocol analyzer with tutorial.txt|
. BIOGRAPHIES Susan A. Mengel received her 
Ph.D. in Computer Sci- ence from Texas A&#38;M University in 1990. She joined the Computer Systems Engineering 
Department at the University of Arkansas in Fayetteville in 1991 as an Assistant Professor and became 
an Adjunct Assistant Professor in the EIectrical Engineering Department in 1993. She is currently developing 
multimedia tutorials to help students learn networking and robotic concepts. She also has interests in 
object-oriented software en- gineering and intelligent systems. She is a member of IEEE, ACM, International 
Neural Network Society, and ASEE. She is active in Engineering Education being the Newsletter Editor 
of the ASEE Educational Research and Methods Division. Salman All received" his MSE from the UAF Computer 
Systems Engineering Department in 1995. He has writ- ten a technical report on high-speed network protocols 
in addition to authoring PROTAN and the protocol an- alyzer tutorial. 119 "  
			
]]
##[[DATA:data/oraby/A pedagogical processor model.txt|
               
			
]]
##[[DATA:data/oraby/Almost optimal permutation routing on hypercubes.txt|
               
			
]]
##[[DATA:data/oraby/A linear-time algorithm for computing the memory access sequence in data-parallel programs.txt|
          111  
			
]]
##[[DATA:data/oraby/A high performance parallel algorithm for 1-D FFT.txt|
               
			
]]
##[[DATA:data/oraby/A Metafile for efficient sequential and random display of graphics.txt|
           43  
			
]]
##[[DATA:data/oraby/A dynamic grouping technique for ink and audio notes.txt|
   APPENDIX We briefly describe an object-oriented 
implementation of the algorithm as follows. The classes ClusterInk and ClusterAudio are derived from 
a base class ClusterMaker. For each medium, the system keeps track of a list of primitive elements where 
each element has an index. From this, the associated distance matrix, in which the entry a[i][j] is the 
distance from the i-th element to the j-th element, is computed by ComputeDistanceMatrix(). Since the 
distance depends on the type of medium, this is a virtual function. Taking the distance matrix, MakeCluster() 
performs the hierarchical agglomerative clustering as described above and caches the result in a tree. 
When a primitive element is targeted for grouping, the groups in the levels directly above it in the 
cached tree are accessed by GetTargetCluster(). class ClusterInk : ClusterMaker; class ClusterAudio : 
ClusterMaker; class ClusterMaker { virtual ComputeDistanceMatrix( Matrix *distMatrix); MakeCluster(Matrix 
distMatrix); GetTargetCluster( int targetIndex, int targetHeight, LeafIndexList *clusterList); }; 
  
			
]]
##[[DATA:data/oraby/A deterministic sub-linear time sparse fourier algorithm via non-adaptive compressed sensing methods.txt|
 A Proof of 
Theorem 2 We begin by proving two lemmas. Lemma A.1. IDENTIFICATION: Lines 7 through 19 of Algorithm 
1 are guaranteed to recover all valid .0,...,.B-1 (i.e., all . with |A (.)|=| A (.B)| -there may be >B 
such entries) more then 2K times. Hence, 3 despite line 22, an entry for all such .b, 0 = b<B, will s 
be added to R in line 26. Proof. Because of the construction of S0 (i.e., proof of Lemma 3.1) we know 
that for each b . [0,B) 2K there exist more then subsets S .S0 such that 3 S n{.bl | b ' . [0,B ')} = 
{.b}. Choose any b . [0,B). Denote the q-primes that isolate .b from all of .0,...,.b-1,.b+1,...,.Bl-1 
by 2K ' qj1 ,qj2 ,...,qjKl , <K = K. 3 We next show that, for each k ' . [1,K '], we get <.S , A > as 
one of the B ' + 1 largest 0,jkl ,.b mod qjkl magnitude <.S0,j, A >-measurements identi.ed in kl ,· line 
10. Choose any k ' . [1,K ']. We know that N-1 v N < v < |A (.B)|- 2 |A (.bl )| EE 22 bl=Bl N =|A (.b)|- 
A(.bl ) bl.[Bl,N),.bl =.b = <.S , A >. 0,jkl ,.b mod qjkl We also know that the (B ' + 1)st largest 
measurement L2-magnitude must be < . Hence, we are guaranteed 2 to execute lines 12-15 with an r0,· = 
.b mod qjkl . Choose any l . [1,m] and set O to be .bl b ' . [B ' ,N),.bl = .bmodqjkl ,.bl = .bmodqjkl 
pl . Using Lemma 3.2 we can see that line 13 inspects all the necessary residues of .b mod plqjkl . To 
see that tmin will be chosen correctly we note .rst that <.S , A > - <.S , A > 0,jkl ,.bmodqj0,jkl ,.bmodplqj 
kl kl N v N = A (.bl ) = 2 |A (.bl )|. .bl .O .bl .O Furthermore, setting r0,· = .b mod qjkl and O' to 
be .bl b ' . [B ' ,N),.bl = .b mod qjkl ,.bl =(r0,·+tqjkl ) mod qjkl pl for t with (r0,· + tqjkl )= .b 
mod qjkl pl , we have N-1 v N v N E 2 |A (.bl )| < v < |A (.B)|- 2 |A (.bl )| 2 bl=Bl .bl .O N =|A (.b)|- 
A (.bl ) . .bl .Ol Finally we can see that N |A (.b)|- A (.bl ) = <.S , A > 0,jkl ,.bmodqj.bl .Ol kl 
 - <.S , A >. 0,jkl ,(r0,·) +tqj=.bmodplqj kl kl Hence, lines 13 and 14 will indeed select the correct 
residue for .b modulo pl. Therefore, line 16 will ' 2K correctly reconstruct .b at least K> times. 3 
 Lemma A.2. ESTIMATION: Every (., A.) stored in s  R in line 26 is such that |A (.) - A.|2 <E. s Proof. 
Suppose that (., A .) is stored in R . This only happens if A (.) has been estimated by N <.S , A > 
= A( .) 0,j,. mod qj . =. mod qj for more then 2K qj -primes. The only way that any such 3 estimate 
can have |A (.)- <.S , A > |= 2 0,j,. mod qj is if . collides with one of .0,...,.Bl-1 modulo qj (this 
is due to the de.nition of B ' in Equation 4.7). By the proof of Lemma 3.1 we know this can happen at 
most K B ' llogBl N J < times. Hence, more then half of the 3 '' 2K estimates, A , must be such that 
|A (.) - A.| < . 3 .2 It follows that taking medians as per lines 24 and 25 will result in the desired 
E-accurate estimate for A (.). We are now ready to prove Theorem 2. Theorem 2 Let R opt be a B-optimal 
Fourier repre­ sentation for our input signal A. Then, the B term s representation R returned from 
Algorithm 1 is such 2 + 6B·|A(.B)|2 A - R 22 that = A - Ropt . Fur­ 2 C thermore, Algorithm 1 s Identi.cation 
and Estimation (lines 7 -30) run time is O(B '2 log4 N). The number of measurements used is O(B '2 log6 
N). Proof. Choose any b . [0,B). Using Lemmas A.1 s and A.2 we can see that only way some .b ./R is if 
B s there exists some associated b ' . [B, N) so that .bl . R and  |A (.B)| + E =| A (.bl )| + E> |A.bl 
|=  |A.b | > |A (.b)|- E =| A (.B)|- E. In this case we get 2E> |A (.b)|-| A (.bl )|= 0 so that (1.8) 
|A (.bl )|2 +4EE + |A (.B)| =| A (.bl )|2+ 4EE + |A (.bl )| > |A (.b)|2 . Now using Lemma A.2 we can 
see that NN A -R 2 = |A (.)|2 + |A (.)-A .|2 < Rs R s (.,·)./(., A.). N |A (.)|2 + B · E2 . R s (.,·)./ 
Furthermore, we have N B · E2 + |A (.)|2 = B · E2+ R s (.,·)./ NN |A (.b)|2 + |A (.bl )|2 . R s R s 
b.[0,B),.b./bl.[B,N),.bl ./ Using observation 1.8 above we can see that this last expression is bounded 
above by N B · (5E2 +4E|A (.B)|)+ |A (.bl )|2+ R s bl.[B,N),.bl . N |A (.bl )|2 = R s bl.[B,N),.bl ./ 
2 A - R opt 2 + B · (5E2 +4E|A (.B)|). Substituting for E (see Equation 4.6) gives us our result. We 
next focus on run time. Algorithm 1 s Iden­ti.cation (i.e., lines 7 through 19) run time is domi­nated 
by the O(KB ' m) executions of line 13. And, each execution of line 13 takes time O(pm). Hence, given 
that m = O(log N), pm = O(log N · log log N), and K = O(B ' logBl N), we can see that Identi.cation requires 
O(B '2 · logBl N · log2 N · log log N )-time. Continuing, Algorithm 1 s Estimation (i.e., lines 20 through 
30) run time is ultimately determined by line 22 s if-statement. Although line 22 is exe­cuted O(KB ')= 
O(B '2 logBl N) times, it can only evaluate to true O(B ') times. Hence, each line 24/25 O(B ' logBl 
N log B ')-time median operation will be evaluated at most O(B ') times. The resulting Esti­mation runtime 
is therefore O(B '2 logBl N log B '). To bound the number of measurements we recall that: (i) the number 
of measurements is <m · K · pmqK ,(ii) m = O(log N), (iii) pm = O(log N · log log N), (iv) K = O(B ' 
log N), and(v) qK = O(K log K). Hence, the number of measurements is O s K2 log K log2 N log log N l 
. Substituting for K gives us the desired bound.   
			
]]
##[[DATA:data/oraby/Almost-constant-time clustering of arbitrary corpus subsets4.txt|

cutoff linear root-ratio ratio info sim search cutoff linear root-ratio ratio info sim search 5 .42 38 
37 37 33 5 -lo% -11% -1170 2170   10 .39 :32 :32 :31 :30 -lWO -lWO -20% -24% 20 .32 .27 .27 .27 .25 
; -15% -15% 18% -23% ,  Table 3: Average precision, at three cutoff values, of a linear-time clustering 
method and four faat clustering methods, for ISI = 250. The first table shows the actual precision, while 
the second shows the (percentage) relative decrease in performance of each method from the baseline linear-time 
method. The final column (labeled sire search ) presents the performance of simple ranking without sekcting 
the best cluster. cutoff linear roo~ratio ratio info sim search cutoff h near root-ratio ratio info 
sim search 5 .41 37 37 39 33 5 -11% 11% -5% -20% 10 .38 :31 :31 :33 :30 10 -18% 17% -12% -21% 20 
.33 .27 .27 .28 .26 20 -18% -19% -Iwo -23%  J Table 4: Average precision, at three cutoff values, 
of a linear-time clustering method and four fast clustering methods, for [S{ = 500. The first table shows 
the actual precision, while the second shows the (percentage) relative decrease in performance of each 
method from the baseline linear-time method. The final column (labeled sire search ) presents the performance 
of simple ranking without selecting the best cluster. 35 30 25 20 E 15 10 ,, , ,, !3 -1oo 200 300 400 
EOo 600 700 em 900 1000 1s1 Figure 3: Average time venausIS[ for the baseline linear method and the 
four ccmatantAme methods for M = 20. 65 35 30 linear rod faib ---­ infcnd%% :::: 25 ...............................------------------------------------­- 
-.-. . ... _--__ ---­ --. --. . . ..... 15 10 5 I 200 300400500600700 Soosoolmo 1s1 Figwre 4: Average 
time versus ISI for the baseline linear method and the four constant-time methods for M= 200.  
			
]]
##[[DATA:data/oraby/A model of data distribution based on texture analysis.txt|
               
			
]]
##[[DATA:data/oraby/An adaptive framework for dynamic access to bandwith at high speeds.txt|
  L 0 
Figure 200 4W Unw 3. The Queue-Length Example A. - @xl Sca Process for Figure I + -o 200 5. The Queue-Length 
Example C. 4CU bra m Process II for -# ml I I 0 w lW tulle Figure 4. The Queue-Length Example B. 15J 
process 4 m for Figure 1 [ 0 m 400 mm 6. The Queue-Length Example D. m Process m for 136  
			
]]
##[[DATA:data/oraby/A dual tandem queueing system with a finite intermediate buffer and cross traffic.txt|
           
   
			
]]
##[[DATA:data/oraby/A minimal duplex connection capability in the top three layers of the OSI reference model.txt|
             . 
			
]]
##[[DATA:data/oraby/A framework for component based model acquisition and presentation using Java 3D.txt|
             
 
			
]]
##[[DATA:data/oraby/A fractional model of the border gateway protocol (BGP).txt|
               
			
]]
##[[DATA:data/oraby/A multi-microprocessor computer system architecture.txt|
           .   
			
]]
##[[DATA:data/oraby/A needed narrowing strategy.txt|
               
			
]]
##[[DATA:data/oraby/A new distributed mutual exclusion algorithm for two groups.txt|
               
			
]]
##[[DATA:data/oraby/A log file design for analyzing secondary storage occupancy.txt~|
 
 132 r" ~J ~~ ~ 0.~ ~, .-~ ~,~ ~4 4J () r. C~ ¢" n) ..=i .IJ el) 0 £: r..  0 0 C ~0 .IJ L) 0 0 ¢0 
~ ffl .o . 0 {J .~ ,'~ ~,.~ .,.~  '~.~ ~ 0 ~ e" ~ "121 ~ e. , 0 ...4 ~J 2 ~o~ 0 U L) U C JO r.~ 
r.~ ~ 0 .1 L) ~t c~ I o I <I I ° I o o o I ° I Q o {3 o 0 o o 0 < < < o0 (N ~o 0 cO O~ 0 (:D ,.-I 
.--I 0 U 0 ~' O0 U 0 u~ ~o '.0 I .o~ ~o., o.~, C o.d ,,.,-~3,, " "~,.,,. 0., 3~ ~J C 8 '10 I1) 
0 C ~  ~ ~ "-~ ~. oe, lJ ~ O) ~ -r~ 4J {) E U~ 0,.-i X _ cO ~ . I~ U U U U C U U U U eL 0 ,-'~ 0 r.. 
U ~ 01 o I ~I I I ol ol 01. ol I Ol o 01 o -4 (~ tO --~ O~ O~ 04 r~ 03 oo ~ ~ ..~ . 0 .-4 04 tO 133 
 .-~ 1.4 m D O) m,.-t O [) .~ e-, ~ ~J .5-~ .,.4 ~-~ rj ~ .-40 e'~ .,4 .~1 0 ql o l.J 4-1 O (I; 0 =2~o~A 
~""~ 0&#38; t)® [)~ [)~ r-.,~ 0 ~) o Z I 0 ~ ~ ~o~ "~ r.t, O O ~I l ~ n~ >1 r.~ n ", u I ~3 u [*.I [.~ 
I ~s I O kO ~4 r~ O .-4 kO _~ 4J t) C ~j .IJ (D e., o k~4 4J ,'~ e.. o 0 ~ 0 u~ 0 o e-. ~0 "0 0 
I--4 ~o 0 0 r. 4J.c: 0 ,-I -'~ 0 o C--4 ~ E) ~ ~ 0 En >u,.4 U~ 00~,~ ,-4 0 >,4~ ~.Uo 8~ In S .,4 
4J m t) m N e, ..tJ t-', e., 0~ ~n (n 8 ~n b 8 ~'= o b...] ! r0, O .~ 0 Z 0 0 cn I r,l ~L D.~ 
r.q ~, 5, ~, ~ ~ ol o I o I o o o I o I C:, 01 ~ o O ~ ~ O .~ 0 0 0 ~ o~ ,~ 0O (",4 4-÷ 134 C 
0 0 ~g ~.~ e., m .,-.t o g" ,I; Zo ~ j~ I t% 04J o.~ ~ I in r~ -'J ~J 0 0"0 ~N O ~J ~ o= ~..~ . ,:" 
~.~o5~ 4J eO 0 [n..c ~.~ 4J -~ 1.0 I/)..~ .,-I ''-.-4 ..IJ c' In ~ o ~ o Ul 4..I ~.~,  U4 : 0 O r~. 
09 )~ D (~ 3 0 () ~J 59 r~-~ 4~ .C I/1 0 2g 0 "~ ~I = o >' >,, >, ~-) C C C g  JJ o~ 0 O~n °l--4 (%l 
I ('~ '~ .--fJ IN ° ml .-~ (W ffl 0 ~ .) ~g ,-I "Z r..J. < r.-, L~ r.., I < .~. ,--1~I < .-t -,-i .iJ 
.l.J 0 U) ,'rj O~J nJ C3 ~ ~ ~ ~. 0 C ,.-I (I) 0 c, C 0 t--, ~ 0 ~-~ Or" '8 o ~" ~o o~o= ~ t~ 0 0 
~ ~ '~ ~.o.~ ~?, ~ ~'~ 'I 0-,~ 0~ ~.~ oo ~'~ ~.4'~ ~ ~.5 O 0 0 -O ~ ~ o ~o~ ~ O r. o.,-t ~ox: ~.,= 
~ ," .... o,'.,=..~ ~ ~ ~'~o t~ t~ I".. ~D .O Z ~U < t I ~ o t o¢w < O O0 f'~ %0 0 ~' CO O4 tO r.~ 00 
 135   
			
]]
##[[DATA:data/oraby/A morphological study of the form of nature.txt|
 The equipment used in this research are as follows: E &#38; S Picture System II and Melcom 700 
for line drawings AED 512 and Micro -11/23 for shaded images The language was FORTRAN A background 
picture and a picture of a shell or a group of spiral plants are made separately  
			
]]
##[[DATA:data/oraby/A framework for assisted exploration with collaboration.txt|
. (a) (b) 
Figure 6: Two modes of group terrain-traversal. (a) Constrained to the guide manifold using surface normal 
for heads-up.  (b) Using gravity for heads-up. Viewer on right respects the heads-up constraint of Figure 
4(a).  (a) (b) Figure 7: A topologically complex guide manifold. (a) Collaborators cluster around leader 
constrained to surface. (b) Collaborators hover with .xed orientation to leader, who remains in guide 
surface. (a) (b) Figure 8: Nonconvex structure that confounds examiner browsing mode. (a) Moving to 
the left gate, gaze is on left gate. (b) As we move to the right gate, the navigation constraints effortlessly 
shift the gaze.  
			
]]
##[[DATA:data/oraby/A functional correspondence between evaluators and abstract machines.txt|
               
			
]]
##[[DATA:data/oraby/A model of computation for MapReduce.txt|
               
			
]]
##[[DATA:data/oraby/A formal view integration method.txt|
         
 407 
			
]]
##[[DATA:data/oraby/A name service for evolving heterogeneous systems.txt|
               
			
]]
##[[DATA:data/oraby/A new CRT-RSA algorithm resistant to powerful fault attacks.txt|
               
			
]]
##[[DATA:data/oraby/A hierarchy for nondeterministic time complexity.txt|
               
			
]]
##[[DATA:data/oraby/A general rapid transit simulation model with both automatic and manual train control.txt|
               
			
]]
##[[DATA:data/oraby/Aging through cascaded caches.txt|
             
 
			
]]
##[[DATA:data/oraby/A logic for information flow in object-oriented programs.txt|
               
			
]]
##[[DATA:data/oraby/A generalized class of polynomials that are hard to factor.txt|
. 194 
A Generalized Class of Polynomials That Are Hard to Factor 
			
]]
##[[DATA:data/oraby/Allocating bandwidth for bursty connections.txt|
               
			
]]
##[[DATA:data/oraby/A Java-based simulation manager for optimization and response surface methodology in multiple-response parallel simulation.txt|
 AUTHOR 
BIOGRAPHIES WILLIAM E. BILES is the Edward R. Clark Chair of Computer Aided Engineering in the Department 
of Industrial Engineering of the University of Louisville. He received the B.S. degree in Chemical Engineering 
from Auburn University, the M.S. in Industrial Engineering from the University of Alabama in Huntsville, 
and the Ph.D. in Industrial Engineering and Operations Research from Virginia Polytechnic Institute and 
State University. Dr. Biles is currently engaged in teaching and research in the areas of simulation 
methodology, rapid prototyping in product design, and automated manufacturing. He has authored more than 
100 journal articles and conference papers, two books, and 15 chapters in books and handbooks. He is 
a registered Professional Engineer in Indiana and Kentucky, and a member if INFORMS, SME and NSPE and 
a Fellow of IIE. Dr. Biles recently spent four months on sabbatical leave at Tilburg University in the 
Netherlands, where he engaged in joint research with Dr. Jack P. C. Kleijnen on Web-based simulation. 
 JACK P. C. KLEIJNEN is Professor of Simulation and Information Systems in the Department of Information 
Systems of Tilburg University (Katholieke Universiteit Brabant) in the Netherlands, where he is also 
associated with the Center for Economic Research (CentER). He received his Ph.D. in Management Science 
from Tilburg University. His research interests are in simulation, mathematical statistics, information 
systems, and logistics. Dr. Kleijnen has published six books and more than 130 articles. He has lectured 
at numerous conferences throughout the U.S.A., Europe, Israel and Turkey; served as a consultant for 
numerous industrial and government organizations; and is a member of several editorial boards. He has 
spent several years with different universities and companies in the U.S.A. Dr. Kleijnen has been awarded 
a number of fellowships, both nationally and internationally. 
			
]]
##[[DATA:data/oraby/Algorithmic complexity in coding theory and the minimum distance problem.txt|
               
			
]]
##[[DATA:data/oraby/A new algorithm approach to the general Lov&#225;sz local lemma with applications to scheduling and satisfiability problems (extended abstract).txt|
               
			
]]
##[[DATA:data/oraby/A new tool for SGML with applications for the World Wide Web.txt|
      .  759   
			
]]
##[[DATA:data/oraby/Algebraic reasoning of position uncertainties of parts in an assembly.txt|
               
			
]]
##[[DATA:data/oraby/A new general triangulation method for planar contours.txt|
 Figure 10.    
			
]]
##[[DATA:data/oraby/A denotational semantics for Timed Linda.txt|
               
			
]]
##[[DATA:data/oraby/A linear time algorithm for placing &#966;-nodes.txt|
               
			
]]
##[[DATA:data/oraby/Adaptive replication control based on consensus.txt|
                
			]]
##[[DATA:data/oraby/Advanced illumination techniques for GPU-based volume raycasting.txt|
               
			
]]
##[[DATA:data/oraby/A generic simulation package for organising outpatient clinics.txt|
 AUTHOR BIOGRAPHIES RAY J. PAUL holds the first U.K. 
Chair in Simulation Modelling at Brunei University. He previously taught Information Systems and Operational 
Research at the London School of Economics. He received a B. SC. in Mathematics, and a M. SC. and a Ph.D. 
in Operational Research from Hull University. He has published widely in book and paper form (two books, 
over 80 papers in journals, books and conference proceedings), mainly in the areas of the simulation 
modelling process and in software environments fcx simulation meddling. He has acted as a consultant 
for a variety of United Kingdom government departments, software companies, and commercial companies 
in the tobacco and oil industries. His research interests are in methods of automating the process of 
discrete event simulation modelling, and the general applicability of such methods and their extensions 
to the wider arena of inf-ation systems. Recent research results have been in automatic code generation, 
colour graphics modelling interfaces, dynamically driven icon representations of simulation models, machine 
learning applied to output analysis, object oriented approaches, and information systems paradigms. He 
is the Directm of the Centre of Applied Simulation Modelling, which consists of four faculty and a dozen 
research students. He has recently instituted the first M. SC. in Mrnulatkm Modelling, a one year course 
starting in Octokr each year at Brunei University. He is currently the Head of the Department of Computer 
Science and Information Systems at St. John s, Brunei University, West London, United Kingdom. JASNA 
KULJIS is a Senior Lecturer in Computing at the Roehampton Institute. She has a B.SC.in Mathematics horn 
Zagreb University, an M.S. in Information Science from Pittsburgh University and a Ph.D. in Information 
Systems from the London School of Economics. She is currently researching into human-computer interfaces 
K) modelling systems, having previously spent over a decade as a researcher, consultant and teacher at 
the University of Zagreb Computer Centre. She has published widely in many aspecls of computing, and 
has undertaken consultancy fcr a variety of government agencies and Outpatient Clinics companies in 
Croatia as well as for the Department of Health in the United Kingdom. 
			
]]
##[[DATA:data/oraby/A flexible Chinese character input scheme.txt|
               
			
]]
##[[DATA:data/oraby/A metric model for aspects' coupling.txt|
            
  
			
]]
##[[DATA:data/oraby/A functional theory of local names.txt|
           59  
			
]]
##[[DATA:data/oraby/A message handling system for public networks.txt|
               
			
]]
##[[DATA:data/oraby/A demand-driven narrowing calculus with overlapping definitional trees.txt|
               
			
]]
##[[DATA:data/oraby/A parallel multi-operation scheduling problem with machine order constraints.txt|
  AUTHOR'S BIOGRAPHY Weizhen Y, lao received her Ph.D. 
in computer science from Princeton L'niversity in 1990. She then joined the faculty of the College of 
William and Mary and is now Associate Professor in the Department of Com- puter Science. Her research 
interests are in design and analysis of algorithms and combinatorial optinfization. She has published 
papers in the areas of bin packing, job scheduling, network routing, and graph partitioning and mapping. 
477   
			
]]
##[[DATA:data/oraby/A new algorithm for protein folding in the HP model.txt|
               
			
]]
##[[DATA:data/oraby/Always one more bug.txt|
               
			
]]
##[[DATA:data/oraby/Algorithms for the design and analysis of woven textiles.txt|
         . 160 
			
]]
##[[DATA:data/oraby/A parallel java grande benchmark suite.txt|
             
 
			
]]
##[[DATA:data/oraby/Advanced use of Simula.txt|
               
			
]]
##[[DATA:data/oraby/A new scheduling algorithm for parallel sparse LU factorization with static pivoting.txt|
               
			
]]
##[[DATA:data/oraby/A flexible simulation framework for evaluating multi-level, heuristic-based production control strategies.txt|
           569 
			
]]
##[[DATA:data/oraby/A global synchronization network for a non-deterministic simulation architecture.txt|
  AUTHOR BIOGRAPHIES MARC BUMBLE is a graduate student 
in the Computer Sci­ence and Engineering department at the Pennsylvania State University in University 
Park, PA. He received his B.S. and M.S. degrees in Electrical Engineering from the Univer­sity of Pennsylvania 
in Philadelphia. His current research investigates architectures for accelerating non-deterministic simulation, 
including the application of recon.gurable logic. LEE CORAOR is an Associate Professor of Computer Sci­ence 
and Engineering at the Pennsylvania State University in University Park, PA. He received his Ph.D. in 
Electri­cal Engineering from the University of Iowa. Dr. Coraor has worked on the design, implementation 
and performance evaluation of decoupled architectures and is currently in­vestigating FPGA architectures 
and applications. 
			
]]
##[[DATA:data/oraby/A paradigm for user services support of distributed computing.txt|
               
			
]]
##[[DATA:data/oraby/A fixpoint calculus for local and global program flows.txt|
               
			
]]
##[[DATA:data/oraby/A fast algorithm for generalized network location problems.txt|
               
			
]]
##[[DATA:data/oraby/A fast relighting engine for interactive cinematic lighting design.txt|
.  = * BTFD (L.H,N.H) . BTG(L.N,E.N) CFD.BTFD 
(L.H,N.H) . BTG(L.N,E.N) CCT  + = * CD BLD(L.N) CD.BLD(L.N) +  * = CS BLS(N.H,s) CS.BLS(N.H,s) + 
  * = BHLN(L.N,k) CLN.BHLN(L.N,k) CLN + = CEN CEN *  Projected Texture Image Of Projection *  Shadowmap 
Image of Shadows = Final Image Figure 4: This image shows the stages of the multi-pass rendering algorithm. 
The number of points rendered per row are: row 1 = 17,302 points, row 2 = 129,604 points, row 3 = 39,006 
points, row 4 = 10,246 points, row 5 = 10,246 points, row 6 (projective texture) = 131,072 points, row 
7 (shadow map) = 131,072. Figure 5: This is an example of lighting designed using our system. It took 
2 hours to create, contains 60 lights (mostly to simulate inter­re.ection effects), and de.nes an early 
morning mood.  
			
]]
##[[DATA:data/oraby/A future for professional communicators in software engineering.txt|
               
			
]]
##[[DATA:data/oraby/A forward and backward linkage agricultural production simulation model.txt|
. AUTHOR BIOGRAPHIES FE ZINNIA ALBAY is a graduate student and 
research assistant at the Department of Agricultural Economics and Rural Sociology, College of Agricultural 
Sciences, The Pennsylvania State University. CONRADO M. GEMPESAW II is a professor and department chair 
at the Department of Food and Resource Economics, College of Agricultural Sciences, University of Delaware. 
His areas of research include agricultural finance and production economics. J. RICHARD BACON is an Associate 
Scientist at the Department of Food and Resource Economics, College of Agricultural Sciences, University 
of Delaware. LEVSIRI MUNASINGHE is an Associate at the Advanced Offke Serv&#38;s, Global Systems and 
Technology of Merrill Lynch, New Jersey. 
			
]]
##[[DATA:data/oraby/A mobile agent infrastructure for the mobility support.txt|
        
 545  
			
]]
##[[DATA:data/oraby/A good Hoare axiom system for an ALGOL-like language.txt|
               
			
]]
##[[DATA:data/oraby/A distributed graphics system for large tiled displays.txt|
               
			
]]
##[[DATA:data/oraby/A new search algorithm for discrete stochastic optimization.txt|

AUTHOR BIOGRAPHIES MAHMOUD HASAN ALREFAEI is pursuing a joint Ph.D. degree in Mathematics and Industrial 
En­gineering at the University of Wisconsin Madison. He received his B.S. and M.S. degrees in Mathematics 
from Yarmouk University in Jordan. His interests in­clude discrete stochastic optimization and simulated 
annealing. He is presently a member of INFORMS and AMS. SIGRfiN ANDRADOTTIR is an Associate Pro­fessor 
of Industrial and Systems Engineering at the Georgia Institute of Technology, on leave from the University 
of Wisconsin Madison where she has held a faculty position since 1990. She received a B.S. in Mathematics 
from the University of Iceland in 1986, an M.S. in Statistics from Stanford Univer­sity in 1989, and 
a Ph.D. in Operations Research from Stanford University in 1990. Her research inter­ests include stochastic 
optimization, simulation and stochastic processes. She presently serves as Asso­ciate Editor for HE Transactions 
and Stochastic Mod­ els. She is a member of INFORMS. 
			
]]
##[[DATA:data/oraby/A hop by hop rate-based congestion control scheme.txt|
        . 123  
			
]]
##[[DATA:data/oraby/A graphical computer simulator for systems programming courses.txt|
            .  
			
]]
##[[DATA:data/oraby/A fast simulation approach for tandem queueing systems.txt|
           546 
			
]]
##[[DATA:data/oraby/A dynamic long range budget model to assist navy planners.txt|
 Figure 5 
CAPTAIN RICHARD WILLIAM BARKER graduated from the Air Force Academy and was commissioned in 1978. He 
spent three years in Strategic Air Command in the intelligence data proceeding business. During his operational 
assignments, he completed an MBA program at Creighton University. After graduation from the Air Force 
Institute of Technology with a MS in Operations Research, he was assigned to the Air Force Operational 
Test and Evaluation Center, Kirtland Air Force Base, New Mexico. He is currently serving as an Avionics 
Manager. and Electronics Logistics Analysis Address: Phone: 8201Colfax Avenue NE Albuquerque, NM 87111 
(505) 821-2316 CAPTAIN KENNETH C. KONWlN received his B.S. degree in Civil Engineering and commission 
from the United States Air Force Academy in 1974. He is a Senior Pilot with over 1700 hours flying time. 
During his operational assignments, Captain Konwin completed an MA in Management and Human Relations 
from Webster College. Since graduation from the Air Force Institute of Technology with a MS in Operations 
Research in 1982, he has become a member of Alpha Iota Delta, an honorary fraternity of the American 
Institute of Decision Sciences. He is currently serving as a mathematics instructor at the United States 
Air Force Academy, Colorado. Address: 5035 Horseshoe Bend Colorado Springs, CO 80917 Phone: (303) 597-4371 
 
			
]]
##[[DATA:data/oraby/A mechanism for persistently naming topological entities in history-based parametric solid models.txt|
               
			
]]
##[[DATA:data/oraby/A likelihood based framework for assessing network evolution models tested on real network data.txt|
             
 
			
]]
##[[DATA:data/oraby/A generalized graphic preprocessor for two-dimensional finite element analysis.txt|
         . 329 
			
]]
##[[DATA:data/oraby/A new method for improving communications between user groups and systems specialists and its impact on systems development efforts.txt|
          .    
			
]]
##[[DATA:data/oraby/A general framework for the optimization of object-oriented queries.txt|
               
			
]]
##[[DATA:data/oraby/A linear-time algorithm for triangulating simple polygons.txt|
 
  _ __ -- 1'7 ..... Figure 1. An 11-gon. The dashed line shows the point at which the polygon is split 
in Figure 4. [y (v4),y (vs)] [y (V7),Y (VS)] left a c c e s s ~ ight access  [y (v2),y (vs)] [y (v4),y 
(vs)] [y (V7),y (Vs)] [y (V7),y (Vg)l Figure 2. Vertex tree for vl ..... Vlo of the 11-gon of Figure 
1, showing y-extrema. An internal node la- belled with a single value for y-extrema points only to a 
leaf.  [Y(V°)~ (vS)l Figure 3. The initial region for running the algorithm on the 11-gon of Figure 
1, showing y-extrema and the lone level-1 boundary tree. The boundary tree shows y-extrema, hook edges, 
and access points to the finger search tree of Figure 2 (represented by a triangle). 387 [y(v~(vs)] 
 J [y(v4),y(vs)] I_ vOVl  [y(vT)'y(vs)I VoVlo Figure 4. The result of splitting the region of Figure 
3 at Vlo. Single edges represent trivial boundary trees. --oo oo X 1 X2 X0 ~Xl X2 X6 X0 Xl0 X8 X6 X8 
Figure 5. Let xi~cutpoint(viv(i+l)modll,y(vlo)). (Note that X9 Xi0.) This figure shows the family trees 
of the 11-gon of Figure 1 at y-y (v 10) in terms of the xi that are defined.  [ y (V lo) [ y (V l ) 
] [Y (V lo)Iy (v s) ] [Y(Vg)'y(v9)] [y (VT),I (v lo) ] [ y~v 1o)l ~y (V7),~ty (V$) ]~ [y(v2)'y(v2)I L 
 V01,~ 1 VOYIO 388  
			
]]
##[[DATA:data/oraby/A learning algorithm applied to document redescription.txt|
               
			
]]
##[[DATA:data/oraby/A mechanism for automatically and dynamically changing software components.txt|
           97  
			
]]
##[[DATA:data/oraby/A model for n-dimensional boundary topology.txt|
               
			
]]
##[[DATA:data/oraby/A distributed, object-oriented communication network simulation testbed.txt|
AUTHOR BIOGRAPHY M. SCOTT CORSON is a Faculty Research 
As­sistant in the NSF Systems Research Center at the University of Maryland, College Park. He is also 
a Ph.D. candidate in Electrical Engineering and will join the faculty at the University of Hlinois-Chicago 
in the Fall. His research focuses on distributed algo­rithms for multiple access and routing in mobile 
radio networks. While at the Center, he has directed the testbed s development in support of network 
research efforts underway in the Communications and Signal Processing Laboratory.  
			
]]
##[[DATA:data/oraby/A lower bound on the size of shellsort networks.txt|
           63  
			
]]
##[[DATA:data/oraby/A new image morphing technique for smooth vista transitions in panoramic image-based virtual environment.txt|
               
			
]]
##[[DATA:data/oraby/A hard-constraint time-stepping approach for rigid multibody dynamics with joints, contact, and friction.txt|
 Ellipse Simulation 16 14 12 10 8 Figure 3: 
Frame 1 of the simulation. 6 4 2 0 -8-6-4-2 02 4 6 8 Figure 1: Ten frames of an ellipse on a tabletop 
simulation.  Figure 4: Frame 2 of the simulation. Constraint infeasibility unstabilized 0.35 0.3 0.25 
0.2 0.15 0.1 0.05 0 0 2 4 6 8 101214161820  Time Constraint infeasibility stabilized Figure 5: Frame 
3 of the simulation. 0.06 0.05 0.04 0.03 0.02 0.01 0 0 2 4 6 8 101214161820 Time Figure 2: Ellipse simulation: 
Comparison of the constraint infeasibility between the unstabilized method and the stabilized method. 
  meters meters Figure 6: Frame 4 of the simulation. Computing time spent solving the QP 20 15 10 5 
0  seconds 0 1020304050607080 simulated time 650 600 550 500 450 400 350 300 0 1020304050607080 simulated 
time Figure 7: Performance statistics and number of con­tacts for the Brazil nut simulation 21 disks 
simulation, unstabilized constraint infeasibility 0.25 0.2 0.15 0.1 0.05 0 21 disks simulation, stabilized 
constraint infeasibility 0.1 0.08 0.06 0.04 0.02 0  Figure 9: Four frames of a Brazil nut simulation 
Figure 8: Disks simulation: Comparison of the with inelastic collisions constraint infeasibility between 
the unstabilized method and the stabilized method. meters meters  
			
]]
##[[DATA:data/oraby/A framework for program verification in the context of linked structures and pointer variables.txt|
               
			
]]
##[[DATA:data/oraby/A doubly logarithmic communication algorithm for the completely connected optical communication parallel computer.txt|
               
			
]]
##[[DATA:data/oraby/An 0(n log n) sorting network.txt|
               
			
]]
##[[DATA:data/oraby/A deterministic algorithm for the three-dimensional diameter problem.txt|
               
			
]]
##[[DATA:data/oraby/A new placement algorithm for the optimization of fault tolerant circuits on reconfigurable devices.txt|
               
			
]]
##[[DATA:data/oraby/A labeling algorithm for just-in-time scheduling in TDMA networks.txt|
               
			
]]
##[[DATA:data/oraby/A demonstrational technique for developing interfaces with dynamically created objects.txt|
               
			
]]
##[[DATA:data/oraby/A hierarchical model of data locality.txt|
               
			
]]
##[[DATA:data/oraby/A global illumination solution for general reflectance distributions.txt|
 Appendix A: More on spherical 
harmonics In real form, the normalized spherical harmonics are defined by Ivl,mPf,m(cos e) Cos(rnd) ifm>O 
K,m(o, @)= IVl,clP/.ll(cos e)/ti ifm=O (15) { N~,m Pl,lml(cos @)sin(lml@) ifrn <0 where the normalizing 
constants, IVl,~,, are given by (16) trrL=fw% and the Pl, n, (z) factors are associated Legendre polynomials. 
The latter can be evahrated with the recurrence relations P mm(x) = (1 2m)/=Pm_l,m-l(x) P l+l.m(z) = 
z(2rrl + l)pwt. m(x) PI,,,,(X) = z (~) 1 l. m(~) (*) PI Z, WL(Z) beginning with F o,o(z) = 1 [15]. Applying 
these in conjunction with recurrence relations for generating sin(~), sin(2@), . . . . sin(rn~) and COS(0), 
cos(2q5), . . . . cos(rqb), it is possi­ble to evaluate spherical harmonic expansions using approximately 
10 floating point operations per coefficient and no trigonometric function evaluations whatsoever. Evaluation 
of the spherical harmonic functions is required for two pu~ses: shooting from an intensity dktnbution 
and creating the initial BRDF approximations. The former is a straightforward application of Equation 
12 while the latter is more complicated and is performed once per distinct BRDF. To approximate an isotropic 
BRDF for all incident angles, we first compute forj=O, l,... qwhere O=O~ sO; ~ . . ~,0~ = n/2. Then the 
functions EJI,~ can be approximated by cubic mterpoiating splines through the the points (ON,b~,,n ), 
(O?, b~,m ),. . . . (o:, b~,m ). For each distinct BRDF, p, we select q as well as a specific set of 
spherical harmonic coefficients to achieve the desired accuracy of approximation over all incident angles. 
The value of q affects the accuracy of the interpolation but does not otherwise influence the intensity 
distributions. In contrast, the number of coefficients used in the BRDF approximation directly determines 
the sorage required for the intensity distributions. It is therefore important to keep this number reasonably 
small. If the BRDF that we wish to approximate is only defined on the upper hemisphere, as with an opaque 
material, we extend the func­tion to the lower hemisphere before computing the approximation. We do this 
in such a way that the complete BRDF satisfies (40 .0,4) = p(fY ,7r t?,qi), (18) This introduces a vertical 
symmetry which has the advantage of eliminating all spherical harmonics for which 1+ m k even. Italso 
maintains C 1continuity between the upper and lower hemispheres when the function is zero at the equator, 
a corrdhion that is guaran­teed if the cos O factor is included as described in section 5.1.  
			
]]
##[[DATA:data/oraby/A non-deterministic deductive database language.txt|
               
			
]]
##[[DATA:data/oraby/A hybrid approach to software reuse.txt|
           218 
			
]]
##[[DATA:data/oraby/A generalized system for university mathematics instruction.txt|
               
			
]]
##[[DATA:data/oraby/A gradient approach for smartly allocating computing budget for discrete event simulation.txt|
 AUTHOR BIOGRAPHIES CHUN-HUNG CHEN is an Assistant Professor of Systems Engineering 
at the University of Penmylvania, Philadelphia, PA. He received his Ph.D. (degree in Simulation and Decision 
from Harvard University in 1994. His research interests cover a wide range of areas in Monte Carlo simulation, 
optimal control, :stochastic decision processes, ordinal optimization, perturbation analysis, and their 
applications to manufacturing sys­tems. Dr. Chen won the 1994 Harvard IJniversity Eliahu I. Jury Award 
for the best thesis in the field of control. He is also one of the recipients of the 1992 MasPar Parallel 
Computer Challenge Award. HSIAO-CHANG CHEN is a Ph.D. candidate at the Systems Engineering Department, 
University of Penn­sylvania. He received a double B.S. degree in Mathemat­ics and Computer Science from 
the Eastern Michigan University in 1992, and he received an M.S. degree in Systems Science and Mathematics 
from Washington University, St. Louis in 1994. He is working on devel­oping efficient approaches for 
discrete-event simulation. LIYI DAI is an assistant professor in the Department of Systems Science and 
Mathematics at Washington University, MO. He received the M.S. degree from the Institute of Systems Science, 
Academia Sinica, Beijing, China, in 1986, and the Ph.D. degree from Harvard University in 1993. His research 
interests include discrete event dynamic systems, simulation, stochastic optimization, communication 
systems, and singular systems. He has coauthored over 30 papers in various journals and is the author 
of Singular Control Systems (Berlin: Springer-Verlag, 1989). Dr. Dai is listed in Who s Who among Asian 
Americans and is a recipient of the NSF CAREER award. 
			
]]
##[[DATA:data/oraby/A mark-and-sweep collector C++.txt|
               
			
]]
##[[DATA:data/oraby/A matroid approach to finding edge connectivity and packing arborescences.txt|
               
			
]]
##[[DATA:data/oraby/An accurate method for voxelizing polygon meshes.txt|
. 9 ,. ;. 126 ,7..-.  
			
]]
##[[DATA:data/oraby/A hierarchical basis for reordering transformations.txt|
          282  
			
]]
##[[DATA:data/oraby/A parallel adaptive fast multipole method.txt|
               
			
]]
##[[DATA:data/oraby/A first course in discrete structures with applications to computer science.txt|
               
			
]]
##[[DATA:data/oraby/A new REDUCE model for algebraic simplification.txt|
           52  
			
]]
##[[DATA:data/oraby/A deterrent to linear system inferential attacks using a mediator.txt|
               
			
]]
##[[DATA:data/oraby/Amortizing 3D graphics optimization across multiple frames.txt|
Table 1: Optimization Timing Measurements pl,-optlmld [Rx pre-optirnized optimized Lhatllcterls(lcs 
 hl<m calls to Cill IS to culls to cd Is to poly-time to ob]ect Ill < Ilo[lw Set Set tl me Set set t]me 
mtlo gons opti m]ze I)Cplll color Normal Color Normal bunny 3 13 389 389 I683 0.00500 36 389 0.00144 
0,02964 3.47 cow I x 3263 3263 12330 0.04557 1 12255 0.01626 041885 2.80 01d demo1[)oltl , 7 609 609 
2462 0.00744 82 609 0.00213 0.04448 3.50 to,llll , 12 196 f 9($ 792 000240 38 254 0.00080 001691 3,00 
ne\\ delm> U][llll I Q .55 55 220 0.00067 7 55 0.00016 000417 4,19 10 levels dwp 10 I () 20 20 80 0.00027 
1 20 0.00008 0.00187 3.38 20 Ievcls deep 2() 20 40 40 160 0.00064 1 40 0.0Q013 000371 4.92 30 levels 
deep .10 30 60 60 240 0.00093 1 60 0.00019 000536 4.89 10 levels wide I 10 20 20 80 0.00027 I 20 0.00008 
0.00183 3.38 20 Iuds Wldc I ?() 40 40 160 0.00054 1 40 0.00012 0.00361 4.50 30 levels WI(1C 1 30 60 60 
240 000085 1 60 0.00019 0.00545 447 8 t llli bln:u> x 256 512 51~ 2048 0.00978 1 512 0.00198 004649 494 
10 full bln;u) 10 1024 2048 2048 8192 003285 1 2048 0.00834 0.20341 3.94 i ~ fll]l blwy 12 4096 8192 
8192 32768 0.16171 1 8192 0.04178 084584 3.87 200 node Colol I 200 200 200 800 0.00370 200 1 0.00096 
0,02164 3.85 300 ]IcldeColw I 300 300 300 1200 0.00563 300 1 0.00133 0.03298 4.23 200 node 1101Illli 
I 200 200 200 800 0.00385 I 200 0.00082 0.022 I 9 4.70 300 node norn]al 1 300 300 300 1200 0.00596 1 
300 0.00120 0.03381 4.97 \t:l Iic 3? 3X5 3490 3490 14596 0.06366 1842 2269 0.01696 0.00728 3,75 amUsenwlt 
pal L j? WI11121LXI 3X5 3490 3490 14596 0.06366 varl -vari-0.02232 040113 2,85 ctmlb~lll~llt pmi able 
able opt. time is the Optimization Time, OT ratio is the T]me To Render Unoptimized (TTRU) / Time To 
Render Optimized(TTRO) # levels deep i, a 1 node wide, # levels deep tree # levels wide ii ;i I n(xie 
deep. # levels wide tree # t LIII binary is u # Ie\el deep. full binary tree # node color I\ J I level 
deep. # level wide tree, with every polygon set to a different color # node normal I\ a I level deep. 
# level wide tree, with every polygon rotated to produce a different normal 19 November 14-17, 1995 
UIST 95 
			
]]
##[[DATA:data/oraby/A flexible, high performance interactive graphics system.txt|
                			
]]
##[[DATA:data/oraby/A local search approximation algorithm for k-means clustering.txt|
               
			
]]
##[[DATA:data/oraby/A discrete-continuous algorithm for molecular energy minimization.txt|
               
			
]]
##[[DATA:data/oraby/A distributed shared virtual memory for Ada 83 and Ada 9X applications.txt|
 Implementing an associative memory to offer 
a Lmda- Iike approach for communication. Thu is to offer the programmer another communication mechanism. 
 Yvon Kermarrec got a PhD degree in computer sci­ence from IRISA at Rennes University in 1988. The ti-Developing 
our toolset of software components for d~ tle of Km dissertation is An approach for d~tributed sys­ tributed 
applications. The idea is to build a dw tem simulation : software components in Ada . He joined tributed 
application tiom basic components. the Ada-Ed group at New York University as a visMng re-Implementing 
a RPC (remote procedure call) mech­ searcher. He worked with Ed Schonberg and Robert Dewar anism and 
thus investigating communication between on the NYU Ada Compiler. In 1990, he joined the faculty Ada 
9X d~tributed applications. at Ecole Nationale Sup6rieure des T614communications in 250  Paris as assistant 
professor. He has just arrived at Ecole Na­tionale Sup6rieure des T614communications in Brest, France. 
He teaches Ada, software engineering and dwtributed algo­rithms. His research interests are : distributed 
systems, Ada and programming languages. Laurent Pautet received the Dlp16me d Ing6nieur from the Ecole 
Nationale Sup6rieure des T616communications (ENST), Paris, Prance in 1989. He is currently pursuing a 
PhD degree in computer science at the ENST in Paris. He joined Daasault Electronique, Paris, France as 
a research en­gineer in Dec. 1990. His research interests include Ada run­time systems, dwtributed and 
parallel systems and hard real­time systems. His PhD degree deals with Ada distributed real time kernels. 
 
			
]]
##[[DATA:data/oraby/A dual copy method for transaction separation with multiversion control for read-only transactions.txt|
               
			
]]
##[[DATA:data/oraby/A performance comparison of quadtree-based access methods for thematic maps.txt|
               
			
]]
##[[DATA:data/oraby/Alleviation of tree saturation in multistage interconnection networks.txt|
               
			
]]
##[[DATA:data/oraby/A framework for medical information science.txt|

 Appendix: Extract from Call for Participation Medical Information Science (Medical Informatics) has 
grown from visionary concepts to practical realities. With the widespread diffusion of computer technology, 
improvements in computer sci- ence, and growth of a market for medical computing applications, there 
is a need to reestablish what is meant by Medical Information Science. Without a framework for the discipline, 
it will be impossi- ble to define an agenda for research or identify educational needs. The objective 
of this one day, limited attendance workshop is to work toward a framework for Medical Information Science. 
Three major issues will be considered: What is Medical Information Science? Does it differ from the biomedical 
sciences and computer science, or is it a speciality area in each? Is the computer simply a tool which 
facilitates the accomplishment of the scientific objectives, or does it fundamentally alter the discipline? 
Can the field be stratified into a hierarchy which goes from research through the application of accepted 
knowledge? What are the principal research issues? Given a struc- ture for Medical Information Science, 
what are the major avenues for disseminating existing knowledge (i.e., avoiding the reinvention of the 
wheel), and developing new knowledge (i.e., research)? What research issues are purely in the area of 
the biomedical science, computer science, and medical information science? What are the key educational 
needs? What knowledge is required of Medical Information Science profession- als, medical students, computer 
professionals in the medical field, clinical practitioners, clinical researchers, and other health care 
professionals? How are these needs being met, and what alternate strategies should be explored? Clearly, 
the.scope of the meeting is too broad to suggest reso- lution in a one day workshop. Nevertheless, it 
should be pos- sible to establish a framework for a continued dialogue. 
			
]]
##[[DATA:data/oraby/Advanced information technology support for life sciences research.txt|
6. ADDRESS INFORMATION 1 Indiana 
University, Bloomington, IN &#38; Höchstleistungsrechenzentrum Universität Stuttgart 2 Indiana University, 
Bloomington, IN 3 Indiana University Purdue University Indianapolis, Indianapolis, IN  
			
]]
##[[DATA:data/oraby/A framework for supporting data integration using the materialized and virtual approaches.txt|
               
			
]]
##[[DATA:data/oraby/An Ada-based software engineering course.txt|
        . 23.6 
			
]]
##[[DATA:data/oraby/A near optimal algorithm for edge separators (preliminary version).txt|
             
 
			
]]
##[[DATA:data/oraby/A method for teaching programming.txt|
 AIA: [ A <== B+C+D+E 
] O. (E) V I. A <:: B 2. A <== A+C  3. A <== A+D  4. A <== A+E  5. (X)  V A2A: [ N3 <:: N2+NI 
] O. (E) ...... >J V = I. N2:0 ...... i<> V 2. NI <== NI+I  3. N2 <== N2-I  4. I  ; V 5. N3 
<== NI  6. (X)  V A2B: [ Co,N3 <== N2+NI ] O. (E) ..... >; V : I N2:0 ...... I<> V 2. N2 <== 
N2-I  NI <== NI+I  3.  < V  4. <-- NI:10  I>: V  5. Co <== I  6. NI <== 0  I V 7.  8. N3 <== 
NI  (X)  9.  V A2C: [ Co,N3 <== N2+N ] O. (E) V I . A <:: N2 2. B <== NI Co <:: 0 3.  I..... 
>I V = 4. A:O ......  ;<> 5. A <== A-I  6. B <== B+I  < V 7. <---B:IO  ;>: V 8. Co <== I  9. 
B <== 0  10. V  11. N3 <:: B  ', V  12. (X)  AIB: [ Co,A <== B+C+D+E ] O. (E) V I A <:: B 2 
[Co,A <== A+C] 3 [ k,A <== A+D] 4 [k,Co <== Co+k] 5 [ k,A <== A+E] 6 [k,Co <== Co+k] V 7. (X) 255 
			
]]
##[[DATA:data/oraby/A graphical user interface for executing formal specifications.txt|
               
			
]]
##[[DATA:data/oraby/Algorithms for loading parallel grid files.txt|
           
   
			
]]
##[[DATA:data/oraby/A new technique for satellite broadcast channel communication.txt|
       .  2-4  
			
]]
##[[DATA:data/oraby/A methodology for development of simulation based production schedule generation systems.txt|
          624  
			
]]
##[[DATA:data/oraby/A graphics editor for labanotation.txt|
               
			
]]
##[[DATA:data/oraby/Algorithms for identifying Boolean networks and related biological networks based on matrix multiplication and fingerprint function.txt|
               
			
]]
##[[DATA:data/oraby/A multi-layer client-server queueing network model with synchronous and asynchronous messages.txt|
               
			
]]
##[[DATA:data/oraby/A feed back retrial queueing system with two types of arrivals.txt|
            
  
			
]]
##[[DATA:data/oraby/A file system supporting cooperation between programs.txt|
               
			
]]
##[[DATA:data/oraby/A new constructive root bound for algebraic expressions.txt|
             
 
			
]]
##[[DATA:data/oraby/A heuristic-based approach for detecting SQL-injection vulnerabilities in web applications.txt|
               
			
]]
##[[DATA:data/oraby/A multi-dimensional classification model for scientific workflow characteristics.txt|
               
			
]]
##[[DATA:data/oraby/A formal model of the Ada Ravenscar tasking profile; delay until.txt|
               
			
]]
##[[DATA:data/oraby/A lighting model aiming at drive simulators.txt|
  Appendix A Gradient of Road Surfaces for Drain- ing The outer edge 
of a curved road is higher than the inner edge for reasons of driving safety. The center of a straight 
road is higher than the shoulders for draining. The gradient of the transverse section of a straight 
road is given in Table 3 and is the Japanese standard, having a parabola or a hyperbola shape. B 2D Filter 
Taking as an example the optical image formation system as shown in Fig. '7, let's assume that the angle 
from the incident light to the optical axis of the lens is small, the distance be- tween the lens and 
the focal plane is d, and the ratio of rays diffracted to the direction (c~,,8) is f(c~,/~). The effect 
of an optical filter can be rendered by employing a linear filtering using function f(a, fl) for an image 
without an optical filter. The procedure of 2D filtering is as following: 1. An image without an optical 
filter, E0(x, y), is created. 2. A linear filtering using function f(x, y) is employed.  El(oc, y) 
= / / Eo(xo,Yo).f( x-x° , Y ~Y°)dxodyo ~" (la) The filter is employed only to pixels with a high in- 
tensity. For plural optical filters corresponding linear filterings are employed in order. 3. In order 
to calibrate output images for a display moni- tor, 3, correction is employed. Table 3: The gradient 
of the transverse section of a road for draining. material gradient asphaltconcrete less than 1.5 others 
less than 2.0 %  
			
]]
##[[DATA:data/oraby/A Parallel Implementation of Electron-Phonon Scattering in Nanoelectronic Devices up to 95k Cores.txt|
               
			
]]
##[[DATA:data/oraby/Algorithmic strategies in combinatorial chemistry.txt|
 A Appendix: pseudo-code for dynamic programming algorithm for the inverse 
Wiener index problem In the pseudo-code description of the algorithm that fol- lows, we assume that the 
matrix M has been initialized to a value "undefined" but for M0,0,1 = 1. tree (W,L,N) ifN3-N<6WV(N-1) 
~>WVL<N-1VL> N(N 1)/2 then - return 0 if MW, L,N ~£ undefined then return MW, L,N if N = 1 then return 
0 forN1 := N/2 to N- l do N2:=N-N1 forL1 :=NI-ltoL-N2 do L2 := L- L1 -N2; for WI := L1 to W -L1N2 -L2NI 
-N1N2 do W2 := W -l~ -L12~:2 - L2N1 -N1N2 if tree(W1, L1, N1) = 1 A tree(VV½, L2, N2) = 1 then MW, L,N 
:: 1 return 1 forL1 :--NI-ltoL-N1 do L2 :-- L -L1 -J¥1 for W1 := L1 to W -L1N2 -L2N1 -N1N2 do W2 := W 
-W1 -L1N2 -L2N1 -NIN2 if tree(W1, L1, N1) = 1 A tree(W:, L2, N2) = 1 then I~IW, L,N :: 1 return 1 MW, 
L,N := 0 return 0    
			
]]
##[[DATA:data/oraby/A Markov chain approximation for the analysis of banyan networks.txt|
        . 67 
 
			
]]
##[[DATA:data/oraby/A high fidelity ATM traffic and network simulator.txt|
AUTHOR 
BIC)GRAPHIES BRIAN UNGER is a Professor of Computer Science at the University of Calgary and is President 
of WumNet Inc. He leads the TeleSim Project. (http://www.ffa.ucalgary .ca/wnet/index. html) ALAN COVINGTON 
is a member of the technical staff at Jade Simulations. He has worked for over ten years in the areas 
of parallel programming and simulation. FABIAN GOMES is a Ph.D. student in the Computer Science Department 
at the University of Calgary. His thesis is on state-saving in optimistic simulation. XIAO ZHON GE is 
a Research Associate of Brian Unger in Computer Science at the University of Calgary. He has worked extensively 
in parallel software development. PAWEL GBURZYNSKI is an Associate Professor clf Computer Science at 
the University of Alberta. His math interests include broadband network protocols, including ATM, traffic 
control policies and simulation. THEODORE ONO-TESFAYE is a Ph.D. student in Computer Science at the 
University of Alberta. He is looking at issues related to fast ATM connection setup. SRINIVASAN RAMASW.4MY 
is a Ph.D. student in Computer Science at the University of Alberta. He is investigating dynamic bandwidth 
allocation to be used in conjunction with call admission control in ATM. CAREY WILLIAMSON is an Assistant 
Professor of Computational Scienee at the University (Qf Saskatchewan. His researeh interests include 
ATM traffic modeling and traffic control policies.   
			
]]
##[[DATA:data/oraby/Algorithms and complexity analysis for some flow problems.txt|
               
			
]]
##[[DATA:data/oraby/A lightweight methodology to improve web accessibility.txt|
            .  
			
]]
##[[DATA:data/oraby/A high performance Erlang system.txt|
               
			
]]
##[[DATA:data/oraby/A lens and aperture camera model for synthetic image generation.txt|
               
			
]]
##[[DATA:data/oraby/A genetic algorithm for fragment allocation in a distributed database system.txt|
         . 250 
			
]]
##[[DATA:data/oraby/Algorithms for visibility computation on digital terrain models.txt|
               
			
]]
##[[DATA:data/oraby/A generalized model for a relational temporal database.txt|
               
			
]]
##[[DATA:data/oraby/A more practical PRAM model.txt|
               
			
]]
##[[DATA:data/oraby/A minimal TTL processor for architecture exploration.txt|
         340   
			
]]
##[[DATA:data/oraby/Algorithms for symmetrical polynomials.txt|
        272.   
			
]]
##[[DATA:data/oraby/A mobile user location update and paging mechanism under delay constraints.txt|
               
			
]]
##[[DATA:data/oraby/A Monte Carlo based simulation network model for a chronic progressive disease.txt|
AUTHOR BIOGRAPHIES 
JOSEPH K. CANNER received his M.H.S. in 1991 from John Hopkins University and is currently a Ph.D. candidate 
in Population Dynamics at John Hopkins University. He also serves as a computer and statistical consultant 
for the Worthen center for eye care research at Georgetown University Medical Center. YEN-PIN CHIANG 
is a research instructor in the Department of Ophthalmology at Georgetown University Medical Center. 
He received his M.A. in Political Science in 1988 and currently is a Ph.D. candidate in public policy 
at the University of Rochester. His fields of interest are U.S. disability policy, outcome research and 
cost-effectiveness analysis in health care technology and delivery. JONA I HAN C. JAVITT is an Associate 
Professor of Ophthalmology and Director of Glaucoma and Laser Service in the Department of Ophthalmology 
at Georgetown University Medical Center. He is also Director of the Worthen Center for Eye Care Research 
at Georgetown University Medical Center. He received his M.D. from Cornell University Medical School 
in 1982 and M.P.H. in Health Policy and Management from Harvard University in 1984. His current interests 
include health care technology assessment and outcome research utilizing Medicare database.  
			
]]
##[[DATA:data/oraby/A new radiosity approach by procedural refinements for realistic image sythesis.txt|
         IOO   
			
]]
##[[DATA:data/oraby/A parameterized model transformations approach for automating middleware QoS configurations in distributed real-time and embedded systems.txt|
               
			
]]
##[[DATA:data/oraby/A performance analysis of the gamma database machine.txt|
               
			
]]
##[[DATA:data/oraby/A framework and methodology for knowledge management system implementation.txt|
           .   
			
]]
##[[DATA:data/oraby/A multi-level scalable startup for parallel applications.txt|
           .   
			
]]
##[[DATA:data/oraby/A dynamic locality optimization algorithm for linear algebra codes.txt|
               
			
]]
##[[DATA:data/oraby/A multi-purpose dataflow simulator.txt|
               
			
]]
##[[DATA:data/oraby/Algorithmic lower bounds for problems parameterized by clique-width.txt|
               
			
]]
##[[DATA:data/oraby/A negotiation protocol for batch task assignments in dynamic load distribution.txt|
               
			
]]
##[[DATA:data/oraby/A formal structured method for requirement specification construction.txt|
               
			
]]
##[[DATA:data/oraby/A microprocessor display controller for combining refresh and storage tube graphics.txt|
               
			
]]
##[[DATA:data/oraby/A logic programming model of the game of sprouts.txt|
               
			
]]
##[[DATA:data/oraby/An active service framework and its application to real-time multimedia transcoding.txt|
               
			
]]
##[[DATA:data/oraby/A performance analysis of view materialization strategies.txt|
 Append 
A The method presented m [Blak86] for deter-mmmg how to refresh the view when both dele-tions and msertlons 
occur 1s slightly different than the one shown here, and 1s m fact not always correct Using the scheme 
of [Blak86], the ex-pression below would be used to refresh the view V, = ~r~(u~(R~xR~ u A,xA2 u A,xR, 
u R,xA2 -D,xD2-D,xR2-RlxDz)) Using this expression can cause improper update of the duplicate counts 
For example, suppose tu-ples t , m R, and t 2 in Rz Jomed together to pro-duce a result tuple m V, If 
a transaction deleted both t, and t,, then the result of Jommg t, to t2 would be deleted from Vo three 
times, not Just one as it should This happens since t 1 1s m both R1 and D,, and t, 1s in both R2 and 
D2 The formula- tion given m this paper (using R, =R1-D, and Rz =Rz-Dz> does not have this problem Append 
B Given that there are n total records on m blocks, a formula givmg the expected number of blocks that 
ml1 be accessed to modify k records 1s as follows [Yao77] Let c be the number of ways that b items can 
be selected from a items (a;rb) If the number of records per block 1s p =n/m, then the formula glvmg 
the expected number of block accesses 1s c-P/ I$ An approxnnation to the above that is very close if 
the blocking factor is large (e g n/m>lO) 1s m(l-(i-l/m)k) [ Card751 The notation y (n,m,k) 1s used to 
represent the Yao function 
			
]]
##[[DATA:data/oraby/A layout strategy for VLSI which is provably good (Extended Abstract).txt|
               
			
]]
##[[DATA:data/oraby/A framework for shared applications with a replicated architecture.txt|
            .  
			
]]
##[[DATA:data/oraby/A multi-disciplinary approach for digital systems design curricula.txt|
               
			
]]
##[[DATA:data/oraby/A hybrid of neural net and branch and bound techniques for seismic horizon tracking.txt|
 AcwaAclww.kmLu3A 01993 ACM O-S9791-56&#38;~176.Sl~ s? 547 S08473440407374341~ 
27524220317614311088~ 44221 cop 8486m MOsm4s0400 3503002s0200 1s0 102 TRACE S47SO0 450 400 3s0 300 2s0 
200 1s0 100 sol 0.400 0s00 k 0.600 o.7m 0.800 Figure 5. Six Interpreted Horizom of Real Data Ustng 
Autoplcker SP COP TRACE S47508473440407374341308 848w03sosm4s0400 S47500 4s0 3 I , f 27524220217614311 
M868 44221 3S03W2S02W 1s0 102 400 350 300 2s0 200 1s0 100 sol 0.800 Figure 6. Stx Horizons of Real 
Data Recognlxed by New Process 177 SP CDP TRACE O.coo HIHIBh 0.500 150100130 1 50 lm -1 50 100 1s0 1s0 
m2s03003504004505m 200230300350400430 2m230W03304004w!m !im 3503006307W 350eoo3507m 3m3m3307w 7503000M 
7s03m 350 7!io 300350 013 m ela 1,000 H3AAUT( 1.500 2.000 2.600 3LM0 3s00 4.000 4.500 4.776 ~ 7. SyntMic 
Sebmk Data and Horizon, TRACE O.000 O6O1OO16O2OO26O 3oo So4m4s0600660600 660700760 m660913 0500 1.000 
1.500 2.WO 2s00 3.m 3.s00 4.000 4.300 4.776 Figum8. Thn?e Hor&#38;omofSyatbetk 178 Data Reco@mdby New~ 
 
			
]]
##[[DATA:data/oraby/A laboratory for building computers.txt|
               
			
]]
##[[DATA:data/oraby/A parametric surface blending method for complex engineering objects.txt|
               
			
]]
##[[DATA:data/oraby/A model for comparing the space usage of lazy evaluators.txt|
               
			
]]
##[[DATA:data/oraby/A multi-purpose toll collection plaza model.txt|
          797  
			
]]
##[[DATA:data/oraby/A multimedia server for remote training.txt|
               
			
]]
##[[DATA:data/oraby/A navigation model for exploring scientific workflow provenance graphs.txt|
               
			
]]
##[[DATA:data/oraby/A hybrid algorithm for the point to multipoint routing problem.txt|
         268   
			
]]
##[[DATA:data/oraby/A dynamic cluster maintenance system for information retrieval.txt|
   ACKNO~.EDGEMENTS We gratefully acknowledge 
the contributions of M. Sina Kutluay and M. Haluk Ural of the Middle East Technical University in various 
experiments.  
			
]]
##[[DATA:data/oraby/A genetic approach to color image compression.txt|
 Figure 1: Main Steps of GA Main genetic algorithm 
{ evaluate objective function; while not termination-condition do { create a new generation; } output 
best among current generation; } Procedure to create new generation { while new generation size < Population 
size do { select parent strings (from previous generation); apply crossover operator; apply mutation 
operator; evaluate objective function, add offsprings to new generation as determined by acceptance 
} Figure 2: Chromosome Synchronization. for (next = 1; next < n; next = next + 1) { 1. find a k, next 
< k < n such that dk has least mean square error with Cnext [this error is similar to Equation (1), 
Section 2 - omitted here for clarity] 2. swap dnext with dk in Cj. Table 1: Com " of LBG and GAVQ LBG 
" GAVQ change in % 32 64 128 32 64 128 32 64 128 beach 18.97 15.11 11.30 17.78 13.54 9.09 6.27 10.39 
19.56 :aps 23.24 18.92 13.67 22.34 17.09 11.40 3.87 9.67 16.61 doorknob 19.18 15.81 12.22 17.84 14.19 
9.76 6.99 10.25 20.13 face 26.91 21.51 15.93 25.68 19.18 12.68 4.57 10.83 20.40 farm 28.62 24.23 18.64 
27.33 22.13 15.58 4.51 8.67 16.42 house 32.53 28.11 22.70 31.24 26.31 19.17 3.97 6.40 15.55 lighthouse 
29.74 24.85 17.62 27.92 22.10 14.70 6.12 11.07 16.57 ~arrots 28.01 22.74 16.46 26.59 20.53 13.63 5.07 
9.72 17.19 i flane 24.47 20.14 14.52 22.22 16.50 10.51 9.19 18.07 27.62 window 30.11 25.19 18.72 28.58 
23.15 15.54 5.08 8.113 16.99  
			
]]
##[[DATA:data/oraby/A parallel application interface.txt|
        . $93  
			
]]
##[[DATA:data/oraby/(Almost) optimal coordination mechanisms for unrelated machine scheduling.txt|
. Appendix A Proof of Theorem 
3.2 Proof. In order not to deal with the issue of breaking ties (which plays a major role in the general 
lower bound), we would make all jobs of di.erent size. We construct the following instance. There are 
m- 1types j =2 (m-1)! of jobs. For j=1 to m- 1, there are njobs (j-1)! of type j.Job kfor 1 = k= nj of 
type jhas processing 2(j-1)! time (1 + ekj)= (1+ ekj) on machine j and nj (m-1)! 2jj! (1 + ekj)= (1+ 
ekj) on machine j+1 and nj (m-1)! in.nite (or large enough) on all other machines. We choose 0 <ekj <efor 
some small enough ej+1 where ekj <ek+1,j for all kand j and enj ,j <e1,j+1. The optimal solution may 
use the following assign­ment. Assign all nj jobs of type j on machine j.This assignment results in completion 
time of at most 2(1+e) for each machine (except the m th one which remains empty). Consider the following 
assignment. Half of the jobs of type jare assigned to machine jand half to machine j+1 (we later specify 
which half). Then Machine j+1 for j=1to m-2 would have a load of slightly more than (nj/2)(2j/nj)= j 
of jobs of type j and slightly more than (nj/2)(2/nj)= 1 of jobs of type j+ 1. Machine 1 has a load of 
slightly more than 1 (type 1 jobs) and machine m a load of slightly more than m- 1(type m- 1jobs). Note 
that all jobs on each machine have approxi­mately thesamesize. Sincewe set ekj <ek',j+1 for all jand 
k,kf this implies that jobs of type jare processed before jobs of type j+ 1 (on machine j+1). Finally, 
we have to specify which set of jobs are actually assigned to each machine. This assignment de.nes the 
order of jobs on each machine. Assume for amomentthat ekj would have been 0. This would de.ne a set of 
completion times for all jobs of type j on machines j and j + 1. Assign the jobs of type j to the two 
machines (j and j+ 1) in non-decreasing order of the ID kaccording to the non-decreasing order of completion 
time of that jobs. We claim that this assignment is a Nash Equilibrium. Moreover the price of anarchy 
is about m/2. Immorlica et.al. [17] observed that the set of pure Nash equilibria of the ShortestFirst 
policy is equivalent to the output of the shortest-.rst greedy algorithm of Ibarra and Kim [16]. Therefore, 
the above lower   m bound implies the lower bound of for the shortest­ 2 .rst greedy algorithm. B 
Pure Nash equilibria for Special Cases In this section, we investigate the existence of pure Nash equilibria 
for general ordering policies and for some special cases. In particular, we prove the following theorems. 
Theorem B.1. The corresponding game of any order­ing policy is a potential game for B||Cmax.Thus, it 
has pure Nash equilibria for B||Cmax.Also, if the global ordering for all machines is the same, then 
pure Nash equilibria exist for the corresponding game of the R||Cmax. However, for R||Cmax, there are 
ordering poli­cies without any pure Nash equilibria even for two ma­chines. Proof. Let w(i,j) be the 
position or rank of job i in the global ordering of machine j, i.e., job i is at the w(i,j)s position 
in the global ordering of machine j.Given a schedule S of jobs on all machines, let mi be the machine 
of job i and Ti be the starting time of job i.In order to de.ne the potential function for S, we add 
a dummy job dj of length 8 to the end of each machine j.The rank of the dummy job dj on machine j is 
n+ 1, i.e., w(dj ,j)= n +1, and mdj = j. After adding these dummy jobs, we .nd the potential function 
for schedule S as follows: sort the jobs in the non-decreasing order of their starting time, and if there 
are ties between the starting times, sort them in the non-decreasing order of their ranks w(i,mi). Since 
we added a dummy job for each machine, the length of the vector of the potential function is n+ m. Let 
the vector of jobs in this order be (1,2,...,n+ m). Therefore, by de.nition, T1 = T2 = ...= Tn+m and 
if Tl = Tl+1,then w(l,ml) = w(l+1,ml+1). The potential function for this schedule S is (w(1,m1),w(2,m2),...,w(n+ 
m,mn+m)). If job k f plays his best response and goes to machine minstead k of machine mk, the starting 
time of job k decreases (since for B||Cmax when a job improves its completion time, it improves its starting 
time as well). As a result, job k occupies an earlier position in the corresponding vector of the new 
schedule. Job k cannot be the last job f on machine m, since each machine has a dummy job k who is the 
last. Let job kf be the job after k on machine f mafter k moves (note that kf might be a dummy job). 
k The rank of job k is less than the rank of job kf on f machine mk. This proves that the potential function 
decreases lexicographically. Therefore, the game is a potential game. It is not hard to prove that if 
the global ordering for all machines is the same, then pure Nash equilibria exist for the corresponding 
game of the R||Cmax and the game is a potential game. If the global ordering on all machines is (1,2,...,n) 
and the completion time of job i in schedule S is Ci(S), then the potential function in this case for 
schedule S is (C1(S),C2(S),...,Cn(S)). Finally, for R||Cmax, there are examples even for two machines 
for which the corresponding game does not have any pure Nash equilibrium. Consider an example with two 
machines 1 and 2, and three jobs A,B,C. The global ordering for machine 1 is (A,B,C) and the global ordering 
for machine 2 is (C,A,B). The processing time of jobs on machines are pA1 = 12, pB1 = 16, pC1 =2, pA2 
= 10, pB2 = 10, pC2 = 16. It is not hard to check that no set of strategies of players is a pure Nash 
equilibrium in this game. The above theorem shows that an arbitrary set of ordering policies may not 
have pure Nash equilibria even for two machines. We showed that the corresponding game of the ine.ciency-based 
policy may not possess pure Nash equilibria. The following theorem shows that the ine.ciency-based policy 
always have pure Nash equilibria for two machines. Theorem B.2. The ine.ciency-based mechanism al­ways 
possess pure Nash equilibria for two machines. Proof. The proof is by induction. The base of induction 
is for one job for which the proof is trivial. Consider the most ine.cient job on both machines and call 
it A.We do not let A go on the machine for which it is less e.cient, say machine 1. The induction is 
on the number of pairs of jobs and machines (i,j) such that job i can be scheduled on machine j. For 
the instance for which job A cannot be scheduled on machine 1, we .nd a pure Nash equilibrium S by induction. 
For the induction step, we would like to change this equilibrium S to an equilibrium for the original 
instance. The only possibility is that job Ain S wants toswitch tomachine 1. Ifwelet A move to machine 
1, no other job from machine 2 wants to move to machine 1. We claim that jobs from machine 1 do not want 
to switch to machine 2 either. Note that job A is larger on machine 1 than on machine 2 and hence machine 
1 ends in schedule S (without job A) before job A starts on machine 2, otherwise A would not like to 
move from machine 2. Hence no jobs from machine 1 want to move to machine 2 (although job A left machine 
2), since they would .nish later if they move.   
			
]]
##[[DATA:data/oraby/A differential compiler for computer animation.txt|
               
			
]]
##[[DATA:data/oraby/A method for generating random cutting-tool requirement matrices for manufacturing systems simulation.txt|
. AUTHOR BIOGRAPHIES DHMWARAJ 
VEERAMANI is a Ph.D. candidate in the School of Industrial Engineering at Purdue University. He holds 
a Bachelor s degree in Mechani­cal Engineering from the Indian Institute of Technol­ogy, Madras, Indi~ 
and a Master s degree in Industrial Engineering from Purdue University. His research interests include 
the design, analysis, and control of manufacturing systems, concurrent engineering, and applications 
of operations research to manufacturing. He is a member of SME, ORSA, TIMS, and IIE. His membership in 
honor societies includes Tau Beta Pi, Alpha Pi Mu, Omega Rho, and Phi Kappa Phi. He will be joining the 
University of Wisconsin at Madison in January 1992 as Assistant Professor of Industrial Engineering. 
JAMES R WILSON is a Professor in the Department of Industrial Engineering at North Carolina State University. 
His current research interests are focused on the design and analysis of simulation experiments, inchdng 
modeling and generation of probabilistic input processes, output analysis, variance reduction techniques, 
and simulation optimization. He also has an active interest in applications of operations research techniques 
to all areas of industrial engineer­ing. He currently serves as Associate Edhor of ZIE Transactions, 
Departmental Editor of Management Science for Simulation, and Associate Program Chair­man of the 1991 
Winter Simulation Conference. MOSHE M. BARASH is Ransburg Professor of Manufacturing and Professor of 
Industrial Engineer­ing at Purdue University. He received the B.SC. and DipLIng. degrees in electrical 
engineering at the Technion, Israel Institute of Technology, Haifa, and the Ph.D. degree in mechanical 
engineering at the University of Manchester, England. He had design and research experience in industry, 
and his academic experience includes positions at the University of Manchester Institute of Science and 
Technology and Purdue University. Dr. Barash has published numerous research and technical papers in 
design, manufacturing processes, process modeling and automatic planning, manufacturing systems and other 
topics.  
			
]]
##[[DATA:data/oraby/Algorithms for provisioning virtual private networks in the hose model.txt|
            
  
			
]]
##[[DATA:data/oraby/A new offsetting algorithm based on tracing technique.txt|
            .  
			
]]
##[[DATA:data/oraby/A framework for building non-functional software architectures.txt|
             
 
			
]]
##[[DATA:data/oraby/A multiprogramming system for process control.txt|
.  .I  pointer ,-j y SMALL- CELL LIST (2 words/cell)  value 
 pointer = f y LARGE-CELL LIST page name in ASCI (520 words/cell) time of last use of page 517 words 
of program or data 1906BI FIG. 1--Dynamic storage list structures. 28 A P executing task code: activated 
task code: uq--.V EVNT (~; 2, u, x) PROC: .WAT (~) JMP NONE (calculate f(x)) WAT (u) EVNT (u; 1, f(x)) 
JMP NONE 1 JMP PROC FIG. 2--Simple inter-process communication A B SEND INTO MAILBOX: RECEIVE FROM MAILBOX: 
  S.~° :EVNT ('M'; -2, DUMMY, MSGE) JMP ' . WAT ('ME') I JM, s JMP R FIG. 3--Activation of mailbox 
29 y N+I N x 1 sender Xl execution of x2 activated joe x 2 mailbox' s program x N argument x 1 x N Y 
list x 2 receiver activated x N execution of x 1 x 2 mailbox' sx 2 program x N x N FIG. 4--Mailbox task 
states. CODE FOR THE MAILBOX TASK (conditional and assignment statements in ALGOL): MI: WAT(M); if integer 
[argl] then begin comment-receiver activated mailbox; arg 1~ arg 1 -1 ; (DELETE arg2) end else begin 
comment -sender activated mailbox; y~--- arg 1 ; comment argl=message; arg2~--arg2+l ; comment arg2=count; 
n~--- arg 2 (INSERT AFTER argn: NEW CELL, VALUE y); (DELETE argl) ; end; EVNT ('ME'; 0) ; comment--declares 
that the mailbox is ready; NOP JMP M1 ; FIG. 5--Mailbox facility in DS system 50 
			
]]
##[[DATA:data/oraby/AlphaSort.txt|
               
			
]]
##[[DATA:data/oraby/A management system for monitoring and assessing the group-oriented database project.txt|
               
			
]]
##[[DATA:data/oraby/A modular approach to program visualization in computer science instruction.txt|
               
			
]]
##[[DATA:data/oraby/A highly available scalable ITV system.txt|
               
			
]]
##[[DATA:data/oraby/A hierarchical illumination algorithm for surfaces with glossy reflection.txt|
 Appendix: Error Analysis Recall the error expression derived in Section 2.3: 
In implementation, we have divided into separate compo­nents for each subfactor of . We thus have: e 
82mmm F secji cose i cos F F ji Fji f S cos gmk Fjr ir m i m cosm S k S secjFik F j mijri FF h jjii cos 
cosF i 1cosim r In implementation, the re.nement procedure of Section 3.2 takes an additional argument, 
Ceps, against which the two estimates of error in reciprocal cosine are tested. We are left with the 
computation of , , andn i cos n rFm A i A jk sec i 0 sec r . The variance (and associated error) in these 
cosine terms over given patches , , is determined by the set of possible , lying between the patches 
(we dispense with notation in this section). Consider patches , and (Figure 4): we enclose these patches 
S i S j A i A j c i c j r i r j S i S j in spheres , with centers , , and radii , , respectively. For 
the moment we will assume that the interiors of and do not intersect, and thus there exists a tangent 
cone lying between the spheres. Note that this cone is a right circular cone centered on the line joining 
and . Consider the nappe containing : it may be regarded as a cone of direction vectors centered about 
the vector . We will call this vector cone . If and are any two c i x cmm jri c i cS ji S j c i x n i 
c j CAp iij x mp ij A k pS ji C i C ri C i points on or in , , then the vector lies within . thus bounds 
the set of possible . We may characterize by the angle de.ned by its axis, , and boundary cone and angle 
may be similarly de.ned over and . If either pair of spheres intersect, we set the corresponding. We 
may easily compute maxima and minima for and given andC r , and may then compute error in estimation 
as sec i secemax r x min C i h2 . The cones and centered about and induce a similar C i Cn rm n i n r 
cone of variation about(Figure 5). Application of basic spherical trigonometry yields [2]:  m m n arcsinminesine 
m i 2hisine m r 2h10h Given m m , determination of maxecos n i i F n mm h , minecos Fm h , and thus 
immediately follows. Having computed these estimates and maxima, and incorporat­ing the estimates for 
form factor computation, we may bound and estimate error in transport as: cos F O28 F m F m m d 2 j cossec 
i max F ir F m mcos d F j i d maxmcosFmax j i maxmsecm mcosmaxmsecF i i max i msec max msec rir r 
 It is this error measure that we employ in our implementation.  
			
]]
##[[DATA:data/oraby/A model of OASIS role-based access control and its support for active security.txt|
               
			
]]
##[[DATA:data/oraby/A framework for understanding file format conversions.txt|
             
 
			
]]
