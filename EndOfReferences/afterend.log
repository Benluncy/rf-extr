##[[DATA:data/orbz_sec/Animating facial expressions.txt|
             
 
			
]]
##[[DATA:data/orbz_sec/Another approach to service courses.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animating human athletics.txt|
               
			
]]
##[[DATA:data/orbz_sec/Antecedents and consequences of job satifaction among information center employees.txt|
                   
]]
##[[DATA:data/orbz_sec/Analysis of SRPT scheduling.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of long queries in a large scale search log.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of electronics assembly operations.txt|
 AUTHOR BIOGRAPHIES KURT G. SPRINGFIELD is a member of the technical staff for TASC, 
Inc. in Huntsville, AL. He holds a B.S. in Mechanical Engineering from the University of Tennessee and 
an M.S. in Industrial and Systems Engineering from the University of Alabama in Huntsville. He is a member 
of SCS, RAHMORS, and ASQ. He is a registered professional engineer. JOHN D. HALL is a senior engineer 
for APT Research, Inc. in Huntsville, AL. He holds a B.S. in Aerospace Engineering from the U.S. Military 
Academy, a M.S. in Industrial Engineering from California Polytechnic State University, and a Ph.D. in 
Industrial Engineering from Mississippi State University. Dr. Hall specializes in conducting product 
and process improvement projects for the aerospace and defense industries. He is a member of IIE, INFORMS, 
and ASQ. Dr. Hall is an ASQ Certified Quality Engineer, Quality Manager, and Reliability Engineer. GREGORY 
W. BELL is the Longbow Missile Production Program Manager for Northrop Grumman Land Combat Systems - 
Huntsville. He started with Westinghouse in 1984 after graduating from Loyola College with a B.S. in 
Engineering Science. He has held various manufacturing positions within Westinghouse and Northrop Grumman. 
He moved to Huntsville in 1992 and served as the Lead Production Engineer for the Longbow Missile until 
his promotion to Operations Manager in 1996. Mr. Bell also held positions in test equipment design, test 
engineering, factory supervision, and production systems development and control during his fifteen years 
in manufacturing. 
			
]]
##[[DATA:data/orbz_sec/Antialiased ray tracing by adaptive progressive refinement.txt|
 Samples per Pixel Histogram for Lamp 
Image (512x512) 120~ 100 - 80 --Number of 60 - Pixels (x 103) 40 -i 20 - 02 5 t0 15 20 25 Figure 1. 
The k-D subdivision of the image plane. The bold path Samples per Pixel leads to the next node to be 
subdivided. Samples per Pixel Histogram for Teapot Image (512x512) Algorithm Performance: Lamp Image 
 120 Cpu time (seconds) 100 Resolution Generate I Evaluate Reconstruct Rays per Pixel 64 250.5 2900 
286.1 5.002930 80 Number 128 753.9 9800 906.6 3.905520 of Pixels 60 256 2117.9 33900 2883.7 3.012775 
(N 103) 40 512 7075.3 103620 9505.7 1.880589 20 0 --1 5 10 15 20 25 Algorithm Performance: Teapot Image 
 Samples per Pixel Cpu time (seconds) Resolution Generate Evaluate Reconstruct Rays per Pixel 64 125.1 
710 169.2 2.607670 128 456.8 2680 605.6 2.347838 256 1777.9 9594 2276.7 2.139068 512 6466.6 34217 8629.7 
1.970165  
			
]]
##[[DATA:data/orbz_sec/Animation support in a user interface toolkit.txt|
             
 
			
]]
##[[DATA:data/orbz_sec/Analyzing and re-engineering business processes using simulation.txt|
AUTHOR BIOGRAPHIES R. BHASKAR is 
a scientist in the field of artiticiat intel­ligence. He has been at IBM since 1982. He can be reached 
by email at bhaskar@watson. ibm.com. HO S00 LEE is a Research Staff Member in the Manu­ facturing Research 
Department at the IBM T. J. Watson Research Center. He received his Ph.D. in artificial intel­ligence 
from Northwestern University in 1985. His research interests include knowledge-based systems, search 
algorithms for scheduling and constraint satisfac­tion problems, and business process re-engineering. 
ANTHONY LEVAS is an Advisory Programmer in the Manufacturing Research Department at the IBM T. J. Watson 
Research Center, He received his M.S. degree in computer science from the University of Connecticut at 
Storrs in 1983. He has worked in the areas of speech per­ception and speech synthesis, robot task planning 
and simulation, sensor based smategies, and knowledge based modeling and simulation. His current research 
focus is in business process modeling and simulation. RAJA PkTRAKIAN is a Research Staff Member in the 
Manufacturing Research Department at the IBM T. J. Watson Research Center. He received his Ph.D. degree 
in industrial engineering and operations research from the University of California at Berkeley in 1991, 
His research interests me in business process modeling and simulation, supply chain management, job shop 
schedul­ing, production planning, and optimization. FLORA TSAI is a Senior Associate Programmer in the 
Manufacturing Research Department at the IBM T. J. Watson Research Center. She received a B.S. degree 
in Electrical Engineering from MIT in 1991, and a M.S. degree in Computer Science from Columbia University 
in 1992, She has previously worked on job shop schedul­ing, rule classification for database mining, 
and statistical analysis of randomly-generated data. Currently, she is working on business process modeling 
and analysis. BILL TULSKIE is Senior Engineer in the Manufactur­ing Research Department at the IBM T. 
J. Watson Research Center. He received a BSEE from Drexel Uni­versity. He was awarded an MS in Engineering 
and the title Moore Fellow in the Management of Technology from the University of Pennsylvania. He has 
worked in research and production engineering while at Litton Sys­tems, and in marketing and systems 
engineering at IBM. His research interests include business process modeling and simulation, supply chain 
management, and product life cycles and substitution dynamics.  
			
]]
##[[DATA:data/orbz_sec/Analysis of reliable broadcast in local-area networks.txt|
 Adapter User Machine Fig. 1 Local area network S Source D Destination N~ Network 
Server Fig. 2 Queueing model to network to network server i server I i  , ~ Td ~ Td '~ T d T ~ T s 
' Ts I I I z ! mth I (m-l) st transmis~n.~, transmission to network to network to network server server 
server r f I I k I nodes receive i< broadcast successfully I I  Fig. 3 Successive transmission times 
(point-to-point) k 2 nodes receive broadcast successfully  Fig. 4 Successive transmission times (broadcast) 
7.5- 100 - 90- .......................  80- 7.0- ,,,,/ / 70 60 1 N=5 --5ms v d 1 ! ~s Vd1 - ffi 
5 ms 6.5 1 1 --m~ m5m S u d Ps l~d 50. ! --a " 50 ms T d -6 ms 40, 30, 6.0- , ......... , ......... 
, ......... , ......... , ................... . ......... , , ......... , ......... , ......... , ......... 
, ......... , ......... , ......... , 5 tO 15 20 25 30 35 5 10 15 20 25 30 35 LENGTH OF TIMEOUT INTERVRL 
LENGTH OF TIHEOUT INTERVAL LEGENDs LOSS --O. Ol ....... 0.04 ..... 0.06 LEGENOt LOSS --O. Ol ...... 0.04 
..... 0.08 Fig. 5 Throughput vs. timeout (point-to-point) Fig. 6 Throughput vs. timeout (broadcast) 
162 B.O-_1 I -5~ 8.0 v s v d 1 1 Ps ~d 1 1 ------10 ms 1 7.5 " 50 ms, Td " 6 ms Vs vd / 1 1 7.5 Ls 
, Ld t .01 ~s Pd 1 --" 50 ms a 7,0 0 T s ~ I0, T d " 6 ms 7.0 6,5 T H R 0 U 6,6 + U 6.0-6 G H P P 
U U T T 5.5 2 6.0 ..°. ............................................................... .o / 5.0- / 
/ 6.5,  4.5 5.0 ¸ 4.0 IL..'L .... ~...+ ..... , ......... IJL~..IL..I* ........ I ......... S ......... 
I , ......... , ......... , ..... ~..., ......... i 5 10 15 20 25 30 35 6 10 15 20 25 LENGTH OF TIREOUT 
]NTERVflL NUflBER OF OESTINRTIONS LEGENOz N 5 ....... 16 L£GENOJ ]fl -- 1 ¢ o o 2 1, RNRLTSIS 2. 6lflULRTION 
 Fig. 7 Throughput vs. timeout (broadcast) Fig. 8 Throughput vs. number of destinations %0- o o -.-..-.__.__.._ 
o 6.5 "1 = ]=lOins VS ~d T ! = ! =5n~ Ps ~d O U 6.0. 1 = 50ms 0 H P T s = ]0, T d = 6 ms U T ...................... 
 6.5, ¢ 6.0. ..... ~..., ......... , ......... , ......... , ......... , ......... , ......... , ........ 
, 0.00 0.01 0.02 0.05 0.04 0.05 0.06 0.07 0.08 LOSS PROBRIIILITT LEGENOI ID | ---~ 2 0 a o $  4, 4 
I. Lq~NRLYSI$ FOR N - S 2, RNFIL~'SZS FOR M -10 3. SIHULATION FOR M -6 4. $1#ULATION?0fl If . 10  
 Fig. 9 Throughput vs. loss probability 163  
			
]]
##[[DATA:data/orbz_sec/Answering complex SQL queries using automatic summary tables.txt|
               
			
]]
##[[DATA:data/orbz_sec/Anima II.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytic model of Web servers in distributed environments.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach for modeling dynamic analysis using ontologies.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animating direct manipulation interfaces.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing the error bounds of multipole-based treecodes.txt|
               
			
]]
##[[DATA:data/orbz_sec/Antialiasing of interlaced video animation.txt|
                   
]]
##[[DATA:data/orbz_sec/An alternative culminating experience for master's students in computer science.txt|
                   
]]
##[[DATA:data/orbz_sec/Analysis of replicated data algorithms on processor array architectures.txt|
 772 A Appendix: Experimental Results We present some results of implementing 
the his­togram and convolution algorithms on a Connection Machine in this appendix. For details of the 
imple­mentation, see [9]. A.1 Histogram Algorithm Timing of histogram alg (in seconds) for 8-bit grey 
level images Image No. of Repl data One copy size copies alg alg Using 16K processing elements 32X 32 
16 0.005 0.062 32X 32 32 0.002 0.062 32X 32 64 0.001 0.062 64X 64 4 0.024 0.087 64X 64 8 0.009 0.087 
32xii2 8 u 0.011 0.062 32x32 16 0.007 0.062 32x32 32 0.004 0.062 64X 64 2 0.046 0.086 64X 64 4 0.042 
0.086 64X 64 8 0.015 0.086 Table 1: Comparison of the histogram algorithms on the Connection Machine 
We implemented the single copy histogramming al­gorithm and the replicated data histogramming algo­rithm 
on the Connection Machine. Table 1 compares their performances. It may be noted that the best algorithm 
to compute histograms on the Connection Machine uses the capability of the machine to store the sum of 
the contending numbers in a concurrent write operation. Each PE writes a 1 to the node that holds the 
histogram value of its gray level value, with add as the combiner for the concurrent write operation. 
Though n2 PEs could attempt to write to the same location in the worst case, collision resolution done 
in hardware is fast. The comparison given in Table 1 is still relevant for a general hypercube architecture 
with no concurrent write capability. The virtual pro­cessor capability of the Connection Machine, in 
which each physical PE simulates multiple PEs, was used in the implement ation whenever the number of 
PEs re­quired was larger than what was physically available. The number of virtual PEs each physical 
PE is simu­lating is called the virtual processor ratio or VP ratio. The timings in the table have been 
adjusted taking VP ratio into account. A.2 Convolution Algorithm Timing of convolution (in seconds) 
for random image and kernel Image Kernel Repl data alg One copy Size Size Router I Mesh Alg I Using 
16K ~rocessin~ elements 32x~2 ] ix3 i.oo3 I 0.002 I 0.005 32x32 I 5x5 0.008 I 0.005 I 0.009 64X 64 3x3 
0.014 0.006 0.005 64X 64 5x5 0.023 0.013 0.024 64X 64 7x7 0.050 0.030 0.091 I 64x64 I 11x11 II 0.098 
I 0.076 I 0.367 64X 64 15X15 0.212 0.184 1.363 64X 64 21X21 0.400 0.480 5.355 Table 2: Comparison of 
the convolution algorithms on the Connection Machine Both convolution algorithms were implemented on 
the Connection Machine. Table 2 compares their per­formances. The third column of the table gives the 
time taken by the replicated data algorithm when the copies were shifted using the general router commu­nication 
instructions. The fourth column gives the timing of the replicated data algorithm when shifting was done 
using near-neighbor communications alone. In most cases, using near-neighbor communication is quicker 
on the Connection Machine. The last col­umn gives the timing of the single copy convolution algorithm. 
The VP ratio has been factored into the timings in the last column. The algorithms would be faster by 
the VP ratio factor, which]] is 128 for the last row, had the CM array been large enough. On the whole, 
the replicated data algorithm achieves im­ pressive speedup over the single copy version for image convolution 
operations. 
			
]]
##[[DATA:data/orbz_sec/An approach to modeling multi-material objects.txt|
                   
]]
##[[DATA:data/orbz_sec/An approach to integrating and creating flexible software environments supporting the design of complex systems.txt|
. AUTHOR BIOGRAPHY KIRSTIE L. BELLMAN 
is a senior scientist in the Computer Science and Technology Subdivision of The Aerospace Corporation. 
Dr. Bellman has over twenty-five years of academic, industr!y, and con­sulting experience in the development 
of both con­ventional computer models and artificial intelligence applications. Her published research 
spans a wide range of topics in the cognitive, neurophysiological, and information-processing sciences. 
Five years ago, she started the Vehicles project. 
			
]]
##[[DATA:data/orbz_sec/An approach to the introductory computer science course for non-majors.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of the impact of memory in distributed parallel processing systems.txt|
                  	
]]
##[[DATA:data/orbz_sec/An approach to the classification of domain models in support of analogical reuse.txt|
               
			
]]
##[[DATA:data/orbz_sec/An algorithm to compute the Minkowski sum outer-face of two simple polygons.txt|
                    ]]
##[[DATA:data/orbz_sec/Analysis of pointer rotation.txt|
             
 
			
]]
##[[DATA:data/orbz_sec/An analysis and simulation of an experimental Suez Canal traffic control system.txt|
                   
]]
##[[DATA:data/orbz_sec/An algorithm for goal-driven simulation.txt|
AUTHOR BIOGRAPHIES MICHEL PAGE is an Assistant Professor at the University Pierre Mendès France 
of Grenoble. He holds a Ph.D. in Computer Science from the University Pierre Mendès France of Grenoble. 
He works in the Sherpa Project at the INRIA (National French Institute of Research in Computer Science 
and Automation) Rhône-Alpes. His research interests include numerical simulation, semi-qualitative reasoning, 
object-based knowledge representation. JEROME GENSEL is an Assistant Professor at the University Pierre 
Mendès France of Grenoble. He holds a Ph.D. in Computer Science from the University Joseph Fourier of 
Grenoble. He works in the Sherpa Project at the INRIA (National French Institute of Research in Computer 
Science and Automation) Rhône-Alpes. His research interests include constraint satisfaction problems, 
numerical simulation, object-based knowledge representation. MAHFOUD BOUDIS holds a Ph.D. in Computer 
Science from the University Joseph Fourier of Grenoble. His research interests include simulation, graph 
theory and constraint satisfaction problems. 
			
]]
##[[DATA:data/orbz_sec/An approach to performance evaluation of software architectures.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of multiterm queries in a dynamic signature file organization.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach to computer personnel evaluation.txt|
 me m Paul D. Oyer is president of Oyer Professional Computer 
Services, Inc., a firm specializing in computer-oriented education and training. He has BS and MA degrees 
in education from Indiana University, and has held management positions in the computer field with IBM 
Corporation, Westinghouse, lIT Research Institute, and the Department of Defense. He has extensive consulting 
and teaching experience in the field. He is a past chairman of the New York chapter of the ACM.  
			
]]
##[[DATA:data/orbz_sec/An algorithm for shading of regions on vector display devices.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach for evaluating the performance efficiency of Ada compilers.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of Queueing Network Models with population size constraints and delayed blocked customers.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing microblogs with affinity propagation.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach to natural language for document retrieval.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of techniques to improve protocol processing latency.txt|
               
			
]]
##[[DATA:data/orbz_sec/An advanced classroom computing environment and its applications.txt|
                			
]]
##[[DATA:data/orbz_sec/Analysis of the split mask countermeasure for embedded systems.txt|
               
			
]]
##[[DATA:data/orbz_sec/An almost regenerative simulation of video teleconferencing traffic.txt|
AUTHOR BIOGRAPHIES DANIEL P. HEYMAN 
did his undergraduate work in industrial and electrical engineering at Rens­selaer Polyt ethnic Institute 
(196 O). He received an M.I.E. degree from Syracuse University (1962) and the Ph.D. in operations research 
from the University of California-Berkeley in 1966, and then joined Bell Laboratories. He transferred 
to Bellcore at the epoch of the AT&#38;T divestiture. His research areas are nu­merical analysis of stochastic 
processes, queueing the­ory, and performance models of data communications syst ems. DAVID M. COHEN did 
his undergraduate work in mathematics at Harvard University ( 1972). He received a Ph.D. in mathematics 
from the Mas­sachusetts Institute of Technology in 1976 and joined Bell Laboratories in 1981. He transferred 
to Bellcore at divestiture. His current research interests are in simulation and software engineering. 
* ml * * * 7 * * 0 * . t Cy I -2 I I I -1 0 1 Quantiles of Standard Normal Figure 2: QQ-plot of mu2 
Estimator I I 2 * / *  I I I I 1 I1 -2 -1 0 1 2 Quantiles of Standard Normal Figure 3: QQ-plot of mu3 
Estimator  
			
]]
##[[DATA:data/orbz_sec/Analyzing security protocols with secrecy types and logic programs.txt|
 APPENDIX  Function f for the completeness proof This appendix describes the construction of a 
function f on types that plays a role in the completeness proof, as ex­plained in the main body of the 
paper. In order to prove completeness, we consider a closed pro­cess P0, a name s, and a set of names 
S. We consider an instance of the general type system, and assume that this instance proves (by Theorem 
1) that P0 preserves the se­crecy of s from S. That is, we assume that, in this instance, there exists 
an environment E0 such that E0 f P0, E0 f s:T with T/. TPublic, and S = {a | E0 f a: T and T . TPublic}. 
Without loss of generality, we may assume that E0 contains only names. We .x a proof of E0 f P0 for the 
rest of this argument. Intuitively, a well-chosen environment for a subprocess P of P0 is an environment 
that can be used to type P in a standard proof that P0 is well-typed, using the type sys­tem associated 
with the protocol checker in section 7.2. A standard proof is one in which types introduced by the rule 
(Restriction) for (.a)Q are of the form a[Tc1,...,Tcn], where Tc1,...,Tcn are the types of the variables 
bound by inputs above (.a)Q in P0 s syntax tree. A(Tc1,...,Tcn)-well-chosen environment for P is simi­lar, 
except that the parameters (Tc1,...,Tcn) indicate which types should be chosen for the variables bound 
by inputs. Note that a (Tc1,...,Tcn)-well-chosen environment for P does not always exist, for example 
when the number of pa­rameters (Tc1,...,Tcn) does not correspond to the number of variables bound by 
inputs above P in P0. De.nition 2. Let Tc1,...,Tcn be closed patterns. A (Tc1,...,Tcn)-well-chosen environment 
for an occurrence of a subprocess of P0 is de.ned as follows: A ()-well-chosen environment for P0 is 
.0 .= {a . a[] | (a: T) . E0}. If Ec is a (Tc1,...,Tcn)-well-chosen environment for M(N).P, then Ec 
isa(Tc1,...,Tcn)-well-chosen envi­ronment for P.  If Ec is a (Tc1,...,Tcn)-well-chosen environment for 
M(x).P, then Ec[x..Tcn+1]isa(Tc1,...,Tcn,Tcn+1)­well-chosen environment for P.  If Ec isa(Tc1,...,Tcn)-well-chosen 
environment for P |Q, then Ec isa(Tc1,...,Tcn)-well-chosen environment for P and Q.  If Ec is a (Tc1,...,Tcn)-well-chosen 
environment for !P, then Ec isa(Tc1,...,Tcn)-well-chosen environment for P.  If Ec is a (Tc1,...,Tcn)-well-chosen 
environment for (.a)P, then Ec[a.c1,...,Tcnc1,...,Tcn)­  . a[T]] is a (T well-chosen environment for 
P. If Ec is a (Tc1,...,Tcn)-well-chosen environment for let x = g(M1,...,Mn) in P else Q, then Ec is 
a (Tc1,...,Tcn)-well-chosen environment for Q, and if in addition there exists an equation g(M1' ,...,Mn' 
)= M ' in def(g) and a substitution s such that for all i . {1,...,n}, sMi ' = Ec(Mi), then Ec[x .. sM 
' ]isa (Tc1,...,Tcn)-well-chosen environment for P. Finally, the function f is de.ned so that if a type 
Tc ap­pears in a standard proof that P0 is well-typed using the type system associated with the protocol 
checker in section 7.2, then f(Tc) appears in the corresponding place in the proof of E0 f P0 in the 
instance of the general type system under consideration. De.nition 3. The partial function f: Tc . T 
from types of the protocol checker to types of the instance of the general type system is de.ned by induction 
on the term Tc: f(f(Tc1,...,Tcn)) = Of (f(Tc1),...,f(Tcn)). (There­fore, f(f(Tc1,...,Tcn)) is unde.ned 
if Of (f(Tc1),..., f(Tcn)) is unde.ned.)  If E0 f a: T, then f(a[]) = T.  When a is bound by a restriction 
in P0, we de.ne f(a[Tc1,...,Tcn]) as follows. Without loss of gener­ality, we may assume that a is bound 
exactly once. Let P be the process such that (.a)P is a subprocess of P0. Let Ec bea(Tc1,...,Tcn)-well-chosen 
environment for (.a)P. Let E = f. Ec. Then f(a[Tc1,...,Tcn]) =  T ' where T ' is such that E,a: T ' 
f P is a judgment used to prove E0 f P0. There is at most one such judgment, so T ' is unique. Ifa (Tc1,...,Tcn)-well-chosen 
environment for (.a)P does not exist, or if no suitable judgment E,a: T ' f P appears in the proof of 
E0 f P0, then f(a[Tc1,...,Tcn]) is unde.ned. This de.nition is recursive, and we can check that it is 
well-founded using the following ordering. Names are or­dered by a<b if a is bound above b in P0,or a 
is free and b is bound in P0. The ordering on terms is then the lex­icographic ordering of pairs containing 
as .rst component the multiset of names that appear in the term and as sec­ond component the size of 
the term. In the .rst case of the de.nition of f, the .rst component is constant and the sec­ond one 
decreases. In the third case, the .rst component decreases: when de.ning f(a[Tc1,...,Tcn]), in the recur­sive 
calls used to compute f . Ec, the name a at the top of the term has disappeared, and the only names that 
have appeared due to the computation of the well-chosen envi­ronment are free names or names bound above 
a (therefore names smaller than a). 
			
]]
##[[DATA:data/orbz_sec/Anonymous opinion exchange over untrusted social networks.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of wide-area name server traffic.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animation for performance debugging of parallel computing systems.txt|
               
			
]]
##[[DATA:data/orbz_sec/Anonymity and accountability in self-organizing electronic communities.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing multivariate output.txt|
 AUTHOR BIOGRAPHY JOHN M. CHARNES is Associate 
Professor in the management science group of the School of Busi­ness at the University of Kansas in Lawrence. 
His re­search interests are in multivariate simulation output analysis and using simulation for process 
improve­ment. He is the current newsletter editor for the IN-FORMS College on Simulation. 
			
]]
##[[DATA:data/orbz_sec/An analysis of gang scheduling for multiprogrammed parallel computing environments.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of decay-usage scheduling in multiprocessors.txt|
               
			
]]
##[[DATA:data/orbz_sec/An algebraic system for process structuring and interprocess communication.txt|
                   
]]
##[[DATA:data/orbz_sec/Animating wrinkles on clothes.txt|
 ISSN 0178­2789. A FORMULATION DETAILS In order to present a solution to equation 4 we .rst 
give the ex­ ''' plicit expressions for A(L,f(x, y)) and A ' (h, L ' ,f (x ,y )) re­spectively 2 2 
.f .f A(L,f(x, y))=1++dx dy (6) .x.y  and 2 2 .f'' ' ''' .f'' A (h, L ' ,f (x ,y ))=1+h2+h2dx dy 
.x'.y' (7) To evaluate the integral in equation 7, we perform a change of integration variables as 
follows x -1 x ' = T ' (8) yy By applying this change of variables to equation 7 (refer to equa­tion 
2 for a ' ,b ' ,d ' ), we obtain ' ''' A (h, L ' ,f (x ,y )) 2 ' . =1+ h2af .x 2 1/2 (9) .. 1 +h2b 
' +d ' fdx dy .x .ya 'd' '' ' =I(h,a ,b ,d ) dx dy  Now let us perform a series expansion of equation 
9 in the trans­formation parameters and the modulation factor. As far as the trans­formation parameters 
are concerned, we choose as expansion point the identity transformation and for the modulation factor 
we expand around h =1 ' ''' ' '' A (h, L ' ,f (x ,y ))=(I(h=1,a =1,b =0,d =1) .I ' .I ' +(a -1) + 
b .a' .b' .I ' .I +(d -1)+ (h - 1) .d ' .h + ... ) dx dy (10) In the following, we discard higher order 
terms in the expansion above. For small deformations around the identity transformation and h =1, a .rst 
order expansion represents a good approximation for the value of the surface area over a deformed triangle. 
Retaining terms up to .rst order in the series expansion and by plugging expression equation 10 into 
equation 4 we obtain A(L,f (x, y)) = C0 + C1(a ' -1) + C2b ' + C3(d ' -1) + C4(h-1) where C0 = I(1, 1, 
0, 1) dx dy .I C1 = dx dy .a' .I C2 = dx dy .b ' .I C3 = dx dy .d ' .I C4 = dx dy (11) .h We call these 
expansion coef.cients wrinkling coef.cients. C1,C2,C3,C4 relate changes in the parameters a ' ,b ' ,d 
' ,h to changes of the area of the wrinkle function on the triangle. By observing that C0 = A(L,f(x, 
y)) and solving equation 11 for the modulation factor we obtain 1 ' '' h =1- (C1(a -1) + C2b + C3(d -1)) 
(12) C4 Equation 12 represents the solution to equation 4 in the .rst or­ ''' ''' der approximation 
to A ' (h, L ' ,f (x ,y )), if f (x ,y ) is not con­stant.   
			
]]
##[[DATA:data/orbz_sec/An algorithm for counting maximum weighted independent sets and its applications.txt|
               
			
]]
##[[DATA:data/orbz_sec/AnnoDomini.txt|
               
			
]]
##[[DATA:data/orbz_sec/Anisotropic geometric diffusion in surface processing.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analytic performance model of disk arrays.txt|
               
			
]]
##[[DATA:data/orbz_sec/An application of perturbation analysis to a replacement problem in maintenance theory.txt|
 AUTHOR BIOGRAPHIES MICHAEL C. FU is an 
Assistant Professor of Man­agement Science &#38; Statistics in the College of Busi­ness and Management 
at the University of Maryland at College Park. He holds S.B. and S .M. degrees in electrical engineering 
and an S.B. degree in math­ematics from MIT (1985) and a Ph.D. in applied mathematics from Harvard University 
(1989). His research interests include stochastic derivative esti­mation and stochastic optimization, 
particularly with applications towards manufacturing systems and in­ventory control. He teaches courses 
in applied proba­bility, stochastic processes, discrete-event simulation, and operations management. 
JIAN-QIANG HU is an Assistant Professor in the Department of Manufacturing Engineering at Boston University. 
He holds a B.S. degree in applied math­ematics from Fudan University, China (1985), and M .S. and Ph.D. 
degrees in applied mathematics from Harvard University (1987, 1990). His research in­terests include 
modeling, sensitivity analysis, simu­lation, optimization, and control of discrete event stochastic systems 
and queueing networks with appli­cations to manufacturing systems and communication networks. He was 
awarded the Honorable Mention by the Operations Research Society of America (ORSA) in the 1991 George 
E. Nicholson Student Paper Com­petition. LEYUAN SHI is a Research Associate in the Insti­tute for Advanced 
Computer Studies at the Univer­sity of Maryland at College Park. She received a B.S. degree from Nanjing 
Normal University, China (1982) and a M.S. degree in applied mathematics from Ts­ inghua University, 
China (1985), and M .S. and Ph.D degrees in applied mathematics from Harvard Univer­ sit y (1990, 1992). 
Her research interests include mod­ eling, analysis and control of discrete event stochas­tic systems, 
particularly with the applications on de­sign and control of computer networks, multicom­puter systems 
and communication protocols. 
			
]]
##[[DATA:data/orbz_sec/An applicative compiler for a parallel machine.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytic antialiasing with prism splines.txt|
 Figure 6: Point sampled 200X200and 50X50test images, recon­structed 
with a cubic B-spline kernel.   Figure 8: Test model analytically .ltered with tensor product B­spline 
.lters, orders one through four.  
			
]]
##[[DATA:data/orbz_sec/An analysis of trends in productivity and cost drivers over years.txt|
               
			
]]
##[[DATA:data/orbz_sec/An approach to ranking and selection for multiple performance measures.txt|
 AUTHOR BIOGRAPHIES DOUGLAS J. MORRICE is an Associate 
Professor in the MSIS Department at The University of Texas at Austin. He received his undergraduate 
degree in Operations Research at Carleton University in Ottawa, Canada. He holds an M.S. and a Ph.D. 
in Operations Research and Industrial Engineering from Cornell University. Dr. Morrice has spent the 
last two years working on various projects at the Schlumberger Austin Product Center. His research interests 
include discrete event and qualitative simulation modeling and the statistical design and analysis of 
large scale simulation experiments. Dr. Morrice is a member INFORMS. He served as the Secretary for the 
INFORMS College on Simulation (1994-1996) and was Co-Editor of the Proceedings of the 1996 Winter Simulation 
Conference. JOHN BUTLER is a PhD candidate in the College of Business Administration at the University 
of Texas at Austin. His research interests include decision theory, decision support systems, and mathematical 
modeling. Currently he is involved in a research project designed to aide in the selection of a technology 
for the disposition of US surplus weapons grade plutonium. PETER W. MULLARKEY is a Research Scientist 
in the End-to-End Simulation Department at Schlumberger Austin Product Center - Research. He received 
his undergraduate degree in Civil Engineering at Worcester Polytechnic Institute in Worcester, Massachusetts. 
He holds a Ph.D. in Civil Engineering from Carnegie-Mellon University. Dr. Mullarkey has worked with 
Schlumberger doing research and development of knowledge-based decision support systems since 1985. Additionally, 
he worked on a two year project at Tandem Computers developing a state model-based diagnosis and maintenance 
system product. 725 
			
]]
##[[DATA:data/orbz_sec/An anthropometric face model using variational techniques.txt|

 Males Females Figure 5: Automatically generated face models (3 views of each)  Figure 6: A male a 
minute 
			
]]
##[[DATA:data/orbz_sec/An algorithm for lossless smoothing of MPEG video.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of gene expression profiles.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytical modelling of a hierarchical buffer for a data sharing environment.txt|
, =L=u~ T 9 . 0 n 2000 4000 woo Sooo 100CQ SHAREDBUFFERSIZE Figure 
1: Comparison of pure policies (Validation: NBp + BS = 10K,N = 16) g L n n I 11 1 it 2000 4000 acoo 
Booo Im SHAREDBUFFERSIZE Figure 2: Comparison of U, UM and UR policies (v.lidation:NBp + l?. = 10K,N 
= 16) t 0 1 Figure 5: (validation:BP 1 4 Effect = ! 1 1 I t ! s 12 16 NUM5EROF NOOES of dependency on 
the shared buffer hit lK, BS = 2K, 5K, access pattern: 80-20) g g + + --R­ fmww SM UM PCWXSM URPOUIM9U 
[~k -+.0 ,.. .... .. m w m n o 2000 4000 Oooo SHAREDBuFFERSIZE Figure 3: Comparison of U, (Validation: 
NBP + Bs UM and = 10K,N UR = policies 2) 0 1 Figure 6: (validation:l?p I 1 1 1 1 1 I 4 s 12 18 NUMBEROF 
NODES Effect of dependency on the shared buffer hit = IK, B.s = 2K, 5k, access pattern: uniform) g ~ 
* -0 + --u­~ ... . . u POI.)XSB-SKUu PcuYss-5K UR FWJG$SB-SK s3-2K : ,U,..J u SHAREDBUFFERSIZE Figure 
4: Effect of skewed access on the shared buffer (Validation: NBP + B.s = lo~, N = 2 M PO1icJ ) hit = 
r I 1 ,! I 0.4 0.8 1.2 UPWE wno Figure 7: Effect of the ratio (Analysis: BP= 125,Bs , 1 1.6 of update 
= 2K,5K,N , , 20 probability = 16) 167  
			
]]
##[[DATA:data/orbz_sec/An algorithm for structuring programs (Extended Abstract).txt|
 124  Appendix A fortran subroutine 
(from R. C. Singleton, Algorithm 347, an efficient algorithm for sorting with minimal storage, Comm. 
ACM 12,3 (1969), p. 186): subroutine sort(a,ii,jj) c sorts array a into increasing order c from a(ii) 
to a(jj) dimension a(1),iu(16),il(16) integer a,t,tt m=l i= ii j=jj 5 if (i .ge.j) goto 70 10 k=i ij 
: (j+i)/2 t : a(ij) if (a(i) .le. t) goto 20 a(ij) : a(i) a(i) = t t=a(ij) 20 l=j if (aQ) .ge. t) goto 
40 a(ij) = aCj) a(j) = t t = a(ij) if (a(i) .le. t) goto 40 a(ij) = a(i) a(i) = t t = a(ij) goto 40 
30 a(l) = a(k) a(k) = tt 40 1= 1--1 if (a(l) .gt. t) goto 40 tt = a(l) 50 k=k+l if (a(k) .It. t) goto 
50 if (k .le. 1) goto 30 if (l--i .le. j--k) goto 60 il(m) = i iu(m) = 1 i=k re=m+1 goto 80 60 il(m) 
= k iu(m)=j j=l re=m+1 goto 80 70 re:m--1 if(m.eq. 0) return i=il(m) j=iu(m) 80 if (j--i .ge. 11) goto 
10 if (i .eq. ii) goto 5 i=i--1 90 i=i+l if (i .eq. j) goto 70 t : a(i-I-1) if (a(i) .le. t) goto 90 
k:i 100 a(k+l) = a(k) k: k--1 if (t .it. a(k)) goto 100 a(k+l) : t goto 90 end The preceding subroutine 
as structured by struct into ratfor: subroutine sort(a,ii,jj) # sorts array a into increasing order # 
from a(ii) to a(jj) dimension a(1),iu(16),il(16) integer a,t,tt m=l i=ii J--ii repeat if (i <j) go 
to 10 repeat { m= m--1 if (m==O) return i = il(m) j ---- iu(m) while (j--i>=11) 10 k=i ij = (j+i)/2 
t = a(ij) if (a(i) > t) a(ij) = a(i) a(i) = t  t : a(i]) l=j if (a~j)< t) a(ij) = a(j) a(j) : t t= a(ij) 
if (a(i)>t) a(ij) = a(i) a(i) = t  t = a(ij) repeat != 1--1 if (a(l)<=t) { tt = a(l) repeat k = k+l 
if (a(k) >----t) break } if (k > 1) break a(l) : a(k) a(k)---- tt ) } if (l--i < :j-k) il(m) : k iu(m) 
--- j j----I m : m+l } else il(m) : i iu(m) = 1 i:k m : m+l ) if (i==ii) break i: i--1 repeat { i : i+1 
if (i==j) break t = a(i+l) if (a(i)>O { k=i repeat { a(k+l) = a(k) k=k-1 if (t >=a(k)) break a(k-I-1) 
: t ) ) return end 126  
			
]]
##[[DATA:data/orbz_sec/Anticipatory instruction scheduling.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analysis of material handling equipment for Maritime Prepositioning Ships (MPS) instream offload.txt|
 AUTHOR BIOGRAPHIES JOHN D. SUMNER Captain of the U. 
S. Marine Corps, is the project/logistics officer for the Marine­Air-Ground-Task-Force (MAGTF) decision 
Support System II at the Marine Corps Logistics Base in Albany, Georgia. He hold a B.S. degree in Business 
Administration from University of Utah in 1986, and an M.S. degree in Logistics Management from the Naval 
Postgraduate School, Monterey, California in 1991. Captain Sumner worked closely with MPF program as 
a beach operation group commander in the First Marine Expeditionary Brigade. He is interested in PC­based 
simulation modeling to augment the military commander s leadership decision making. This paper is an 
extract of his master s thesis from the Naval Postgraduate School. KEEBOM KANG is on the faculty of the 
logistics group in the Administrative Sciences Department at the Naval Postgraduate School. He received 
his Ph.D. degree in Industrial Engineering from Purdue University, his M.S. in Operations Research from 
the University of Texas at Austin, and his B.S. in Industrial Engineering from Seoul National University. 
His research interests are in the areas of stochastic modeling, probabilistic and statistical aspects 
of computer simulation, and logistics applications. He teaches various logistics courses. He is a member 
of ORSA, TIMS, IIE, SCS, Sigma Xi, Omega Rho, and ADPA.  
			
]]
##[[DATA:data/orbz_sec/An algorithmic approach to controlling search in three-dimensional image data.txt|
  Fig, 9a. Only One Seed provided 
to Test Algorithm Fig. 9b. Plane Shown Nith Intermediate Results III III illll Ill l IIIllI Fig. 9c. 
Contours Found by Re-entrance Test. Fig. 9d. Oblique View Of Phantom Contours.   
			
]]
##[[DATA:data/orbz_sec/An application of color graphics to the display of surface curvature.txt|
APPENDIX Curvature Derivation The curvature 
K of a parametric surface ~(u,v) = (X(u,v) Y(u,v) Z(u,v)) is (see APPROACH): lim 2N .AS K = -- As+o 
I~1 ~ Expanding X(u,v) in a bivariate Taylor series, F Au2 7  AX = X u +× v + 1 iXuu x uv Xvvl i 
2- L Av2 J with similar expressions for AY and AZ (subscripts u, v denote differentiation with respect 
to u and v). In vector form, AS = (AX AY AZ)  IX uu Xuv Xv!l rut = LAu + ~'vAV + l /u ,uv ,vv I z 
z LAv~ .J L UU UV V Since N is perpendicular to U and Sv, N.S U = N'S = O, and V X X f Au2 7 N-AS = 
~ I (N x Ny N z) Yuv Y AuAv I UU UV VV zUU vv Z Z Av2 ,_,I L UU UV V = ~1 (N x Ny Nz) " (S'uu S uv Svv) 
AuAv I Av 2 _J Letting A : N-Suu, B : N.Suv and C = N.Svv, we have N.~S : 1 (AAu 2 + 2BAuAv + CAv 2) 
and since I~1 : I~Au + ~vAVl, AAu 2 + 2BAuAv + CAv 2 K(Au, Av) =  l~ul~u~ ÷ 2~u ~v~U~V ÷ I~vl2Av 
2 Volume 15, Number 3 August 1981 To see how K varies wlth Au and Av, we divide by Av 2 and substitute 
t = Au/Av. Letting E = 12' G = vlSI2' F = S -S v, we have 'u'IS- U g(t) : (At 2 + 2Bt + C)/(Et 2 
+ 2Ft + G) Recasting this as an extremum problem with the implicit function H(g(t), t) = O, we see that 
 H(g(t), t) = (A -gE)t 2 + 2(B -gF)t + (C -gG) Conditions for an extremum are H(g(t), t) = O, and aH/at 
= O. The second of these yields t = (gF -B)/(A -gE), which, when substituted into the first, gives 
 g2(F2 -EG) + g(AG -2FB + EC) + B 2 -AC = 0 Under this condition then, we have extrema. In effect, we 
do not care what g looks like as long as we can find values which produce roots. Recalling that the sum 
and product of the roots of a quadratic are -b/a and c/a, we have from the above equation, AG -2FB + 
EC K = a 2(EG -F) 2  AI~I 2 -2B~u " ~v + CI~ 12 2(EG -F) 2 AC -B K - g (EG -F) 2 Since EG- F2 = 
l~uI~ I~v12- %.Sv)~= l~u× ~vI2,  Al~v 12 - 2BSu- Sv + cl~ 12 K a AC -B K  g 1\ x\i2  Using Q 
= S x S instead of the unit normal N, U V  and letting (A' B' C') = Q" (Lu Suv Svv)' we obtain the 
computationally more convenient Computer Graphics Volume 15, Number 3 August 1981 A' I~I ~ -2B'~- ~ 
. c'l\l~ U V K  a 21~I 3 A' C' B' K - g I~1 ~ Letting b = ~Kg -K a = (K M -Km)/2, the maximum and 
minimum curvatures are K M : K a -b K :K +b m a   
			
]]
##[[DATA:data/orbz_sec/An adversarial model for distributed dynamic load balancing.txt|
      1991. 
  
			
]]
##[[DATA:data/orbz_sec/An analytic approach to significance assessment in local sequence alignment with gaps.txt|
 Appendix A" Island High Score Distribution 
In this appendix we derive heuristically the Poisson distri- bution of maximal island scores. We first 
treat the gapless case [12] and then generalize the derivation to alignment with gaps. In the gapless 
case the distribution of large is- lands of length L measured from their begmmng to their peak point 
at height a is by definition given by L p(alL) = (5(a -Z s(z))) (29) Using the Fourier representation 
of the delta function and the statistical independence of the s(i) this yields 1/ p(a[L) = ~ exp(-ika)(exp(zks))Ldk 
(30) For a given peak score a this probablhty is maximal at a certain length Lo(cr). It is reasonable 
to assume that the distribution of island lengths at a given peak score a is suf- ficiently peaked around 
the length Lo(a) at which the prob- ability is maximized. Thus, the probabihty of finding an roland with 
peak score a with any length as dominated by the probability of finding an island of length Lo(a). If 
we further assume that this length is proportional to the peak score, 1 e , Lo(a) = a-lo ", we get c~--lG 
p(a) ... / exp(-zka)(exp(,ks)) dk (31) For large a, Eq (31) can be evaluated via the method of steepest 
descent as p(a) ,~ exp(-Aa) w]th A = ,k* ((~) - log[(exp(,k* ((~)s))]/a (32) The saddle point k* ((~) 
as given by the saddle point equatmn (s exp(ik* ((~)s)) = 1. (33) (exp( ik* ( a )s ) )c~ The slope ct 
of a typical island is so far unknown. It is fixed by the requirement that it maximizes the probabihty 
to find an island of the given peak score a. Thus, we mimmize Eq. (32) with respect to (~ and get together 
with Eq. (33) (exp(~k* (c~*)s)) = 1. Inserting this into Eq. (32) yields con- dltion (5). Additionally 
we get from Eq. (33) the typical slope o~* of an mlaad as 0¢* --- (s exp(As)). It is related to the relative 
entropy H of the scoring system by H = A(s exp(As)) = A~* (34) which is the crucial quantity for the 
correction of the se-quence length dependence of the statistical significance [2] For alignment with 
gaps, the high score of an island of length L from its beginning to its peak point is not just the sum 
of local scores any more. Instead, it is given by the final score h(0, L) of a global alignment of two 
sequences of length L on a triangular lattice as the one shown in Fig. 3(a) taking into account all possible 
insertions of gaps. We can still use the Fourier transformation to get = ~--~[ e-~k~(e'~h(°,L))dk. (35) 
p(alL) = (5(a -h(O, L))) l In App. C we will see, that (exp(),h(0, L))) is for large L the L'th power 
of the eigenvalue of some matrix. We thus define ~(A) by (exp[Ah(0, L)]) = ~L(x) and again assume a linear 
slope cr of the islands where the trmngular shape of Fig. 3(a) with only L/2 matches or mismatches at 
the central line r = 0 makes the definition a --(~Lo(a)/2 the most natural defimtion for c~. Eq. (35) 
then becomes p(a) ~ / exp{[-ik + 2t~ -1 log'p(ik)la}dk (36) Applying as in the gapless case the method 
of steepest de- scent and maximizing with respect to the slope of the island (~ ymlds Eq. (13). Moreover 
it gives the typical slope of an roland as t~ = _ ~(A) = (h(0, L) exp[Ah(0, L)])) (37) " ~(~) L Appendix 
B: Expression of the score dynamics in terms of the bond variables In this appendix we will derive the 
evolutmn equations (17) and (18) from the recursion equation (10) of the original global alignment algorithm 
To this end we apply Eq. (10) to the definition of n(r, t), where we assume by convention that r + t 
is even as in Fig. 4(a). We get n(r, t) = lth(r+l, t)-h(r, t+l)+~+so] = -~[h(r+l,t)+8+so- max{h(r, t-1)+so-71(r, 
t)A, h(r=l=l, t)-(i}] = l[h(r+l,t)-h(r,t-1)+~- -max{-r/(r, t)A, h(r :t: 1, t) -h(r, t-l) -so -(i}] = 
n(r, t- 1)+min{~/(r, t), n(r- 1, t- 1), nma~-n(r, t- 1)} The equation for n(r-1,t) follows completely 
analogously and with the definitmn Eq (18) this yields Eq. (17). In a similar way we can express the 
quantity (e;~h(0'N))0 in terms of the variables n(r, t). To achmve this, we first define for any "time" 
t the average score 1 w-1 h 2k h(t) =f~-W)-~k=°x [ ( ,t-1)+h(2k+l,t)] t even (38)(2~ Ew£1[h(2k, t)Wh(2k+l,t-1)] 
t odd Because of the translational mvariance of the system m the spatial (r) &#38;rection we get (exp[Ah(0, 
N)])o = (exp[Ah(N)])o. (39) Thus, we can restrict ourselves to calculating the large N behavior of the 
latter quantity. The change m the average score h(t) is given by h(t + 1) - h(t) = (40) = ~1 )-~w=~lth(2k, 
t+l)_h(2k, t_l) ] t even [,~-~ ~_,7_~lth(2k+l,t+l)-h(2k+l,t-1)] t odd. The local score differences in 
this equation can for even r + t be expressed as h(r, t + 1) - h(r, t -1) = so - j(r, t)A (41) by a calculation 
analogous to the one used at the beginning of this appendix to obtain n(r, t) Inserting this into Eq. 
(40) yields -~(t+l)_-~(t)=so A ~W_-olj(2k,*) teven (42) 2 2W [)'~w__~13(2k+l,t ) t odd. Combining Eqs. 
(39) and (42) finally yields N--1 x ~ (~(t+l)-~(t)) (eXh(°'N))0= (e~(N))0 = (e t=o )o (43) N/2 W-- 1 
--~ E E (J(2k+1,21--1)+j(2k,21)) = e),SoN/2(e t=l ~=o )0 = e~oN/2(e-~J)o ' with J as defined in Eq. (21). 
 Appendix C: An eigenvalue equation In this appendm we will reformulate the calculation of the generating 
function (exp[wJ])o as an elgenvalue problem We start from the defimtion N/2W--1 (exp[wJl)° = (H H e~frJ(2k+l'2l-1)e~rJ(2k'21))O 
(44) l=l k=O Since, the values of the variables n(r, t) must be integers between 0 and nmax at any time, 
we do not change the expectation value, if we introduce ones of the form 2W--1 1--Z II .... ,o--- Z {n~.to}~{o, 
,nm,,,,}2Wr=0 {n~.t0}e{0,,nm~,,}2W at each fixed t~me t This ymlds (exp[wJ])0--E "'" E Rw(N'{nmt}) (45) 
{~r,O} {r~e,N } w~th 2W--1 N/2 Rw(N, {n~,t}) -----(H 5~(~,o) .... 0 II Dw({nmt}' 2/-1)x r=0 /=1 ×(1-I~ 
,¢~+1,~'-I Dw({n~,t},21) 1 e :y-~'(zk'~ o \ k=0 / \ k=0 / Once a configuration n(r, t) at each t~me step 
is fixed, the expectation value can be factorized into the parts which con- taln only a single random 
variable y(r, t) 2W--1 N/2W--1 r=0 l=l k=O )~£ - ~-"~r3 (2k+1, 21-1 ) on(2k+l,2l_2),n2k+l,2l_ 2 ¢:.~" 
X X Sn( 2k,21--1),nT 2k,21--15n( 2k,21-1),n2k + l,21_ l )0 X X H (6n(2k--1'21--1)'n2'~-1,21-1 s: un( 
2k,21--1),n2k,2~_ l ~'~3(2k,21) k=0 5n( 2k-- l,21),n2k_l,21 6n( 2k,21),n21~+ l,2z )0 X1. Inserting this 
into Eq (45) we can interpret the summation over the possible configurations of the n(r, t) at each time 
step as the summation of inner indices in a matrix multipli- ll2W-1 cation. In this language the first 
term , ,~=o 8~(~,0),~,o is a vector on the (nma~ + 1) 2w dimensional vector space in- dexed by all possible 
configurations. This vector has exactly one non vanishing entry at the configuration which is cho- sen 
as the initial configuration at t = 0 Th~s non vanishing entry is one and we call this vector [¢o). The 
factor of one which we added for the sake of clarity also plays the role of a vector the entries of which 
are all one It stands for the summation over all possible final configurations at t = N and we call this 
vector (¢1{ All the other factors represent matrices They can be written as tensor products of the (nm~x 
+ 1) 2 dimensional matrix TI (w/W) which describes an elementary process as given by Eqs (17) and (18). 
We can read off ~ts elements to be (T1 (w/W))(~,~:),(~ ,.~) (w) - , , ~v~(~,t) (5:~(~- __ 1 ,~-- 1),R 
1 5n(r,t -- I),n 2 e 5~(r - 1 ,t),R1 5~(r, t ) ,n2 )0- Note that the disorder average for each of these 
matrix el- ements is only an average over the single random variable r/(r,t). The matrix elements can 
thus be rewritten m the form given in Eq. (22). Since the lattme of width 2W is at each time step decom- 
posed into W of the budding blocks described by T1 (w/W), the total system is described by the matrix 
W even @ Tw (w) -- Tw(w) --T1(w/W) (46) k=l If Tw (w) describes the time evolutmn at even time steps, 
we can according to Fig. 4(c) generate the time evolution on odd time steps by shifting all variables 
to the right, applying the dynamics of even time steps and then shifting all variables back to the left. 
With the translation matrix C defined in the main text this can be written as T~-d(w) = CTw(w)C -1 The 
structure of the latrine as depmted by Fig 4(c), finally leads to (exp[wJ])o = (¢11 (T~en (w)T~4~d (w)) 
N/2 I¢0 ) (47) = (¢ll(Tw(w)CTw(w)C-')g/21¢o) In the hmit of large N this obviously becomes Eq. (23) of 
the main text where p~ (w) is the eigenvalue of the matrix Tw(w)CTw(w)C -1 with the largest real part 
Since this matrix has no negative entries and is (restricted to the sector defined by condition (19)) 
for non-pathologmal chomes of the scoring matrix irreducible, the largest eigenvalue of this matrix is 
guaranteed to be non degenerate, real, and its eigenvector can be chosen without negative entrms by the 
Perron Frobenius theorem. Due to the lattice symmetry, the eigenvector I¢) for the largest ogenvalue 
of Tw(w)CTw(w)C -1 should be transla- tionally invariant, i.e., C21~b) = I~) should hold. We can thus 
restrict the search for the largest eigenvalue to the subspace C -- {1¢)1C~{¢) = I¢)} (48) of all translatlonally 
invariant eigenvectors On this sub- space by defimtion C = C -1 so that instead of looking for the largest 
eigenvalue p~(w) of Tw(w)CTw(w)C -l we can also look for the largest eigenvalue pw(w) of Tw(w)C on this 
subspace. Additionally Tw(w)C has to be restrmted onto the subspace of valid configurations as defined 
by con- ditmn (19). These reductions in the size and complemty of the matrices make an explicit calculation 
of pw (w) possible Appendix D: Calculating the largest eigenvalue For small W the largest eigenvalue 
pw(w) of Tw(w)C re-stricted to the subspace of valid translationally mvanant configurations as defined 
by condition (19) and Eq (48) can be calculated using computer algebra Although the matrix Tw (w) depends 
on e ~/2W the largest eigenvalue of Tw (w)C only contmn terms of the form e ~/2. Thin 1s a consequence 
of the translational invarlance of the lattice. In order to reveal the underlymg structure of the largest 
elgenvalues pw (w) for &#38;fferent W it turns out to be very useful to expand them m powers of e ~/~. 
We get W=I "pi(w) = x/~+O(e -~) W=2 p2(w) = vrp-(p-1)e~ +O((e~) 2) w=3 p~(~,) = v'~-(p-1)e~ +(v-1)v~(e-~)~ 
+O((e~)~) W=4 p4(w) = x/p-(p-1)e~ +(p-1)x/p(e~) 2 _{p_ 1) x/~e (e ~ )3 + O((e ~ )a), where the O((e~/2) 
k) terms denote terms of the given or- der with prefactors which are different for different W We can 
see, that the coefficients up to order (e~/2) w-1 remain unchanged upon increasing W and that they moreover 
con- stltute the beginning of a simple geometrm serms We can thus extrapolate this behavior to arbitrary 
W by assuming that thin pattern holds for arbitrary orders Resumming the geometric series then yields 
Eq (27).   
			
]]
##[[DATA:data/orbz_sec/An adaptive fuzzy threshold scheme for high performance shared-memory switches.txt|
               
			
]]
##[[DATA:data/orbz_sec/Ancillary effects of simulation.txt|
  AUTHOR BIOGRAPHIES MATT HICKIE is a graduate 
student in the course of master program of Industrial Engineering at Arizona State University. He is 
working for Motorola at Chandler, Arizona. His research interests include optimization and scheduling 
on semiconductor manufacturing system. JOHN W. FOWLER is an Assistant Professor of Industrial Engineering 
at Arizona State University. He holds a Ph.D. from Texas A&#38;M University. His research interests include 
manufacturing systems analysis, discrete event simulation, and applied operations research.  
			
]]
##[[DATA:data/orbz_sec/Animation on a satellite graphics system.txt|
                   
]]
##[[DATA:data/orbz_sec/An agent-based flexible routing manufacturing control simulation system.txt|
 AUTHOR BIOGRAPHIES 
GRACE Y. LIN is working in the Manufacturing Research Department of IBM T.J. Watson Research Center. 
She Received her Ph.D. degree in Industrial Engineering from Purdue University in 1993. Her re­search 
interests include Production Planning, Sched­uling, and Control, Computer Integrated Manufac­turing, 
and Supply Chain Management. She was one of the recipients of the 1994 IIE Doctoral Dissertation Award. 
Her publications have appeared in the Jour­nal of Flexible Manufacturing Systems, IIE Transac­tions, 
and some major conference proceedings. She is a member of IIE, ORSA, and TIMS. JAMES J. S OLBERG is the 
Director of the Engi­neering Research Center for Intelligent Manufactur­ing Systems and Ransburg Professor 
of Manufactur­ing and Industrial Engineering at Purdue University in West Lafayette, Indiana. He received 
his degrees from Harvard and The University of Michigan. In addition to several teaching awards, Dr. 
Solberg won the Book of the Year Award in 1977 and the David F. Baker Distinguished Research Award from 
the In­stitute of Industrial Engineers in 1982. He is member of the National Academy of Engineering. 
As direc­tor of the Engineering Research Center for Intelligent Manufacturing Systems since its formation 
in 1985, Dr. Solberg manages a cross-disciplinary program in research, education, and t ethnology transfer 
involv­ing some 60 companies, 40 professors and 200 stu­dents.  
			
]]
##[[DATA:data/orbz_sec/Analyzing the impact of events in an online music community.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytical models of combining Banyan networks.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animating soft substances with implicit surfaces.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animation of dynamic legged locomotion.txt|
 9 A ~~e~~dix: Physical Parameters 
of IV? Link Mass Moment of Link length center M asS Inertia (m) (m) (kg) (kg -m ) Biped trunk 23.1 
[.17 .17 ,30] upper leg .20 .095 1,4 [.018 .017 .0014] lower leg .63 , 2p .64 [.02 .02 .00018] Hip location 
wrt trunk center of mass: .c = 0.0, ?J = +0.072, z = 0.0 Quadruped trunk 10.0 [.54 2.35 2.39] upper 
leg .41 .2 1.5 [.043 .043 o] lower leg ,4 .2 1.0 [.0035 .0035 0] Hip location wrt trunk center of mass: 
.r = +0.39, y = +0.12, .2 = 0.0 Kangaroo trunk 3.67 .034 thigh .13 .064 1.62 .0039 shin .26 .105 .60 
.0033 foot .174 .14 .00038 .082 tail 1 .166 .079 ,24 .00058 tai12 .166 .071 .14 .00033 t ai13 .166 .076 
.069 .00016 head .13 .04, .04 .33 .00046 Hip location wrt trunk mass center: [-.11 0] Head location 
wrt trunk mass center: [.21 O] Tail location wrt trunk mass center: [.2 O] Table 3: Physical parameters 
of models used in anima­tions. Link lengths are from proximal joint to distal joint. Mass centers are 
distances from the proximal joint of a link to the mass center. Moments of inertia are about the mass 
center of the link. The diagonal of the moment of inertia tensor is given.  
			
]]
##[[DATA:data/orbz_sec/An analysis of dag-consistent distributed shared-memory algorithms.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analytic solution of an integrated performance model of a computer communication network with window flow control.txt|
                  	
]]
##[[DATA:data/orbz_sec/An analysis of diffusive load-balancing.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of link level protocols for error prone links.txt|
                  	
]]
##[[DATA:data/orbz_sec/Analyzing human gait patterns for malfunction detection.txt|
                   
]]
##[[DATA:data/orbz_sec/An agent exploration in unknown undirected graphs with whiteboards.txt|
               
			
]]
##[[DATA:data/orbz_sec/An analysis of the full alpha-beta pruning algorithm.txt|
                    ]]
##[[DATA:data/orbz_sec/An analytic model of hierarchical mass storage systems with network-attached storage devices.txt|
                			
]]
##[[DATA:data/orbz_sec/Analysis of multilevel graph partitioning.txt|
. Bibliographical Sketch of Vipin Kumar Vipin Kumar received 
the B.E. degree in electronics &#38; communication engineering from University of Roorkee, India, in 
1977; the M.E. degree in electronics engi­neering from Philips International Institute, Eindhoven, Netherlands, 
in 1979; and the Ph.D. degree in computer science from University of Maryland, College Park, in 1982. 
He is currently a Professor of Computer Science at the University of Minnesota. His current research 
interests include scalable parallel computing and arti.cial intelligence. He is author of over 80 research 
articles on the above top­ics, and is a coauthor of a text book Introduction to Parallel Computing" (Publ. 
Benjamin Cummings/Addison Wesley, 1994). Kumar has chaired many workshops and served on the program committee 
of many conferences in parallel processing. He is Vice Chair for Applications Area for the 9th International 
Parallel Processing Symposium. Kumar serves on the editorial boards of IEEE Parallel and Distributed 
Technology, IEEE Transactions of Data and Knowledge Engineering, and the Jour­nal of Parallel and Distributed 
Computing. http://www.cs.umn.edu/ kumar. Copyright &#38;#169; 1995 by the Association for Computing Machinery, 
Inc. (ACM). Permission to make digital or hard copies of part or all of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that new copies bear this notice and the full citation on the first page. Copyrights for 
components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. 
To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific 
permission and/or a fee. Request permissions from Publications Dept, ACM Inc., via fax at +1 (212) 869-0481, 
or via email at permissions@acm.org.  
			
]]
##[[DATA:data/orbz_sec/An approach to detecting changes in the factors affecting the performance of computer systems.txt|
                   
]]
##[[DATA:data/orbz_sec/Analysis of superposition of streams into a cache buffer.txt|
               
			
]]
##[[DATA:data/orbz_sec/Another nail to the coffin of faceted controlled-vocabulary component classification and retrieval.txt|
                   
]]
##[[DATA:data/orbz_sec/An algebraic method to compute a shortest path of local flips between two tilings.txt|
               
			
]]
##[[DATA:data/orbz_sec/Analyzing communication latency using the Nectar communication processor.txt|
               
			
]]
##[[DATA:data/orbz_sec/An algorithm for improving graph partitions.txt|
                   
]]
##[[DATA:data/orbz_sec/An application of software science to the quantitative measurement of code quality.txt|
 ACKNOWLEDGEMENTS No part of this research would have been 
possible without the support of Dr. Gerry Howe of IBM's Industry Application Development Center in Atlanta. 
Dr. Howe was responsible for initiating the steps which led to the existance of this research. In addition, 
he provided me with a tremendous amount of guidance as well as a substantial contribution in the development 
of the research methodology. His creative support spawned many of the ideas used in this work. The author 
also wishes to thank and acknowledge Sandra Hartman of IBM's Palo Alto location. Ms. Hartman has developed 
a very proficient tool which allowed this research to jump many steps. Her knowledge about software science 
metrics proved to be an invaluable asset to the progress of this research. The author also acknowledges 
the contributions that the following people or organizations made to this research: Emory University, 
Bill Frey, Allen Gresham, Bonnie Johnson, A. R. Jones, IBM's Atlanta Application Development Center, 
Dianne Quammen, Richard Quammen, Dean Rau, Lynn Silverman and Dr. Frank Tsui.  
			
]]
##[[DATA:data/orbz_sec/An analytical comparison of optimization problem generation methodologies.txt|
  AUTHOR BIOGRAPHY RAYMOND R. HILL is an Assistant Professor of Opera­tions Research 
in the Department of Operational Sciences at the Air Force Institute of Technology. His research interests 
include modeling and simulation, applications of optimization, and military applications of modeling. 
He holds a Ph.D. from The Ohio State University. 
			
]]
##[[DATA:data/orbz_sec/Animating rotation with quaternion curves.txt|
  Appendix I--Conversions L1 Quatcrnion to matrix 
Using the restriction that w2-t-x2-Fy2-t-z2= 1 for u quaternion q = [w,(x,y,z)], the formula for the 
corresponding matrix is 1--2y2--2z 2 2xy+2wz 2xz--2wy ] M = 2xy--2wz 1--2x2--2z 2 2yz+2wx ]. [ 2xz+2wy 
2yz--2wx 1--2x2--2y 2] If the quaternion does not have unit m~gnitude, an additional 4 multiplies and 
divides, 3 adds, and a square root will normalize it. (For the matrix conversion, the square root can 
be avoided in favor of divides if desirable.) Now we can obtain the operation count for creating the 
matrix. Most terms of the entries are a product of two factors, one of which is doubled. So we proceed 
as follows. First double x, y, and z, and form their products with w, x, y, and z. That will take 3 adds 
and 9 multiplies. Then form the sum for each of the 9 entries using 1 add each, plus an extra add for 
each of the 3 diagonal elements, for a total of 12 adds. Thus 9 multiplies and 15 adds suffice to convert 
a unit quaternion to a matrix. L2 Matrix to quaternion An efficient way to determine quaternion components 
w, x, y, z from a matrix is to use linear combinations of the entries Mra,~. Notice that the diagonal 
entries are formed from the squares of the quaternion components, while off-diagonal entries are the 
sum of a symmetric and a skew-symmetric part. Thus linear combinations of the diagonal entries will isolate 
squares of components; sums and differences of opposite off-diagonal entries will isolate products among 
x, y, and z and products with w. Using off-diagonals risks dividing by a component that may be zero, 
or within ¢ (the machine precision) of zero. However we can avoid that pitfall, and easily compute all 
components as follows. w 2 ~ 1/4 (1 + Mll + M22 + M33) w2>e? TRUE FALSE w=O X 2 -- --1/2 (M22 + 2~'/33 
) x2>c? Z = (MI2 --M21 ) / 4t.V TRUE FALSE !, '2 = 1/2 (1 --M~) z ~ M m / 2:~ y2>c? TRUE FALSE z ~ M~3 
/ 2y z=l No more than one square root, three divides, and a few adds and binary scales are required 
for any conversion. L8 Euler angles to quaternion There are twelve possible axis conventions for Euler 
angles. The one used here is roll, pitch, and yaw, as used in aeronautics. A general rotation is obtained 
by first yawing around the z axis by an angle of ¢, then pitching around the y axis by 0, and finally 
rolling around the x axis by ¢. Using the way quaternion components describe a rotation, we first obtain 
a quaternion for each simple rotation. qrott = [cos@,(sin-~,O,O)] qpitch '~ [cos~,(O,sin~,O)] q~aw = 
[c°s 2~,(O,O,sin 2~)] Multlplying these together in the right order gives the desired quaternion q --qyaw 
qpitch qroll, with components = cos --¢ eos --0 cos --¢ + sin -C-sln--0sin 2 2 2 2 2 2 = si.-cos --0cos 
--¢ --cos -C-sin--0sin--¢ 2 2 2 2 2 2  y = cos sin £¢os + sin -C-cos sin--¢ 2 2 2 2 2 2  z = cos -.f-cos 
2-sin-¢ -sin -C-sin £eos £ 2 2 2 2 2 2 1.4 Euler angles to matrix Combining the results of the previous 
two conversions gives M = cos 8cos ¢ cos 0sin ¢ --sin 0 / sin ~bsin 8cos C--cos ~sin ¢ sin ~bsin 0sin 
¢+cos ¢cos 8 cos 0sin ~], cos Csin 0cos ¢q.-sin Csin ¢ cos ~sin 0sin ¢--sln ¢cos ¢ cos 0cos ~J where 
~b, 0, and ¢ are the angles of roll, pitch, and yaw, respe ctively.  1.5 Matrix to Euler angles While 
converting a matrix to a unit quaternion only involves the sign ambiguity of square roots, converting 
to Euler angles involves inverse trigonometric functions, as we con only directly determine the sin's 
and cos's of the angles. Some convention, such as principle angles, must be adopted. However interpolation 
paths will vary greatly, depending on choice of angles. Setting that problem aside, here's a way to extract 
the sin's and cos's. Looking at the previous equation, sin0 can be read off directly as --M13. Use the 
trigonometric identity cos 0 = ::t=%~"~"~0 to compute cos @ to within a sign, which is the best we can 
do. Assuming cos0 is not zero, obtain the sin's and cos's of the other angles from cosO = sine = M23/cos 
cos~b = Ma3/cos/~ sine = Ml~ /cos ~os¢ = Mll/cose If cos t? is zero, then we must avoid dividing by zero. 
It also becomes impossible to distinguish roll from yaw. Adopting the convention that the yaw angle ¢ 
is 0 allows sin ¢ = --M32 cos ¢ = M22 sine = 0 cos¢ = 1 From these values a two argument tan -1 will 
give angles between --Tr and +Tr, or 0 and 275 or some other conventional range; take your pick. (For 
a faster conversion, just compute, say, sin -1 and check the sign of the cosine term with respect to 
cos6~.) Because of the uncertainties of square roots, inverse trigonometric functions, and yaw-roll separation, 
matrix to Euler angle conversion is inherently very ill-defined. 1.6 Quaternion to Euler angles Use the 
most straight-forward approach: convert the quaternion to a matrix, then the matrix to Euler angles. 
Of course it is unnecessary to compute matrix elements that are never used. This conversion is also unavoidably 
ill-defined, as quaternions contain no more information about angles than matrices do.  
			
]]
##[[DATA:data/orbz_sec/An analysis of perspectives in interactive settings.txt|
               
			
]]
##[[DATA:data/orbz_sec/Animation, visualization, and interaction in CS 1 assignments.txt|
               
			
]]
##[[DATA:data/orbz/An introductory course in the applications of computer technology in the health sciences.txt|
               
			
]]
##[[DATA:data/orbz/An interpreter generator using tree pattern matching.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented environment for fast simulation using compiler techniques.txt|
AUTHOR 
BIOGRAPHIES YIQING HUANG is a Ph.D candidate in the Computer Science Department and conducts research 
at the Center for Reliable and High Performance Computing at the University of Illinois at Urbana-Champaign. 
She received a B.S. degree in Computer Science from Tsinghua University, China and an M.S. degree in 
Computer Science from State University of New York at Stony Brook. RAVISHANKAR K. IYER holds a joint 
appointment as Professor in the Departments of Electrical and Com­puter Engineering, Computer Science, 
and the Coordinated Science Laboratory at the University of Illinois at Urbana-Champaign. He is also 
Co-Director of the Center for Reliable and High-Performance Computing. Professor Iyer s research interests 
are in the area of reliable comput­ing, measurement and evaluation, and automated design. Prof. Iyer 
is an IEEE Computer Society Distinguished Visitor, an Associate Fellow of the American Institute for 
Aeronautics and Astronautics (AIAA), and a Fellow of the IEEE. In 1991, he received the Senior Humboldt 
Foundation Award for excellence in research and teaching. In 1993, he received the AIAA Information Systems 
Award and Medal for fundamental and pioneering contributions towards the design, evaluation, and validation 
of dependable aerospace computing systems. 
			
]]
##[[DATA:data/orbz/An online scalable algorithm for average flow time in broadcast scheduling.txt|
 A Proof of Lemma 3.6 
 Here we prove Lemma 3.6. The proof of this lemma relies on a generalization of Hall s theorem. This 
generalization of Hall s theorem was implicitly used in [19], and later formalized in [11]. Definition 
A.1. [11][g-covering] Let G =(X . Y, E) be a bipartite graph whose two parts are X and Y , respectively. 
Let £ : E . [0, 1]. We say {£u,v} is a g-covering if L£u,v =1 and L£u,v = g. v.Yu.X The following lemma 
follows easily from either Hall s Theorem or the Max-Flow Min-Cut Theorem. Lemma A.2. [11][Fractional 
Hall s theorem] Let G = (V = X . Y, E) be a bipartite graph whose two parts are X and Y , respectively. 
For a subset S of X, let NG(S)= {v . Y | uv . E, u . S}, be the neighborhood of S. For every S . X, if 
|NG(S)|= 1 |S|, then there g exists a g-covering for X. Now we are ready to prove Lemma 3.6. Proof of 
[Lemma 3.6] We start by creating a bipartite graph G =(X . Y, E). There is one vertex up,x . X for each 
event Ep,x .A and there is a vertex vq,y . Y for each event in Eq,y .B. Let up,x . X and vq,y . Y . There 
is an edge connecting up,x and vq,y if and only if Eq,y .Bp,x. For any set Z . X, let I(Z) be the set 
of intervals corresponding to events in Z, i.e. I(Z)= { Ip,x | up,x . Z}. We let I(Z) denote the union 
of intervals in I(Z). We denote the sum of length of maximal subintervals in I(Z) by | I(Z)|. We will 
now show that G has a (( 2 )( d+1 ))-covering for X. .µ d Consider any .xed set Z . X. Notice that d 
+1 (1.10) .|Z|= | I(Z)|. d This is because the optimal solution must perform . unique broadcasts for 
each event in Z during I(Z), the optimal solution has 1 speed, and there are at most d+1 | I(Z)| integral 
time steps during I(Z) where d OPT can broadcast. From now on, for simplicity, we assume that I(Z) is 
one continuous interval; otherwise our argument can be applied to each maximal subinterval in I(Z). Let 
' I .I(Z) be such that for any two intervals Ip,x,Iq,y . ' I it is the case that Ip,x is not completely 
contained in ' Iq,y, and also I = I(Z). By de.nition, (1.11) | I ' | = | I(Z)|. ' We order all intervals 
in I in the increasing order ' of starting points. We pick intervals from I one by one and label them 
by the order they are picked; the ith selected interval is denoted by Ii. Starting with I1, we pick Ii+1 
so that Ii+1 the least overlaps with Ii; here we will say Ii+1 overlaps with Ii even when Ii+1 '' starts 
exactly where Ii ends. Let I and I be the odd even odd indexed and even indexed intervals, respectively. 
'' WLOG, assume that | I |=| I|. Since oddeven '' ' I and I are a partition of I , we know that odd 
even '' | I| + | I |=| I ' |. Thus we have oddeven 1 ' (1.12) | Iodd|= | I ' |. 2 Let NG(Z) be the 
neighborhood of Z. We now show ' that |NG(Z)|= µ| I|. Note that up,x, correspond­ odd ' ing to Ip,x 
in I , has at least µ|Ip,x| neighbors. Also odd ' note that all intervals in I are disjoint by construc­ 
odd ' tion of I Hence, by summing up all neighbors of odd. ' vertices corresponding to intervals in I 
, we have odd ' (1.13) |NG(Z)|= µ| Iodd|. From (1.10), (1.11), (1.12) and (1.13), We have d |NG(Z)|= 
( .µ )( )|Z| and G has a (( 2 )( d+1 ))­ 2 d+1 .µ d covering using Lemma A.2. Let £ be such a covering. 
F (A)= L Fp,x up,x.X = L £up,xvq,y Fp,x up,xvq,y.E [By de.nition of the covering] Fq,y L = £up,xvq,y 
. up,xvq,y.E [By Fq,y = .Fp,x] 2 d +1 = ()( ) L Fq,y ..µ d vq,y.Y [Change order of the summation and 
£ is a (( 2 )( d+1 ))-covering] .µ d 2 d +1 =()( )F (B) ..µ d [Since Y is the set of vertices corresponding 
to events in B] 2 d +1 = ()( )LA-W1+E ..µ d [Since B is a subset of all events] D B Omitted Proofs Proof 
of [Lemma 3.3] We apply Lemma 3.6 using the notation given in the lemma. Let A be the set of all  N1 
events. Consider any event Ep,x .A. Let Ip,x = [tp.(ep,x),ep,x) for some .xed ß = . = ß( 10 (I1000cl 
+ E 2) + 1) such that at least Ias(ep,x - t .(ep,x))l self­chargeable events end on Ip,x. Note that . 
exists by de.nition of N1 events. By Lemma 3.4, the optimal solution must broadcast page p during Ip,x. 
Due to this 10000 we set . = 1. Since |Ip,x|= by Lemma 3.5, we E2 have d = minEp,x.A |Ip,x|= 10000 . 
E2 Let Bp,x be the self-chargeable events ending dur­ ' ing Ip,x =[tp.(ep,x)+ a (ep,x - tp.(ep,x)),ep,x). 
Note 2 that there are at most Ias |Ip,x|l events ending during 2 ' Ip,x \ I . Therefore there exist at 
least Ias|Ip,x|l - p,xIas |Ip,x|l = las |Ip,x|J = as |Ip,x| self-chargeable events 2 24 ' ending during 
I . Hence, |Bp,x|= as | and we can p,x4 |Ip,xas set µ =. 4 Let Eq,y .Bp,x. By Lemma 3.1 and the de.nition 
 ' of tp.(ep,x) we know that at anytime t . Ip,x it is the a case that Fp,x(t) = (1 - .)Fp,x. Since our 
algorithm 2 ' chose to broadcast page q at time ep,x . I over page p,xa p, we have Fq,y = (1 - .)Fp,x. 
Therefore we can set 2c a . = (1 - .). 2c In sum, by Lemma 3.6, F (N1) = 2 ..µ d + 1 d F (S) = ( 16c 
a2s )( 1 1 - . ) d + 1 d (.OPT) = O( 1 E11 )OPT. D Proof of [Lemma 3.4] For the sake of contradiction 
assume the lemma is false. The event Ep,x is non-self­chargeable therefore the optimal solution must 
broad­cast page p at some time during (bp,x,tpß(ep,x)). Let t be the latest broadcasting time of page 
p by the op­timal solution during (bp,x,tpß(ep,x)). Let S[bp,x,t] and S(t,ep,x) be the set of requests 
for page p which arrive during [bp,x,t] and (t, ep,x), respectively. We know that F (S[bp,x,t]) < (1 
- ß)Fp,x by de.nition of tpß(ep,x) and t<tpß(ep,x). Thus F (S(t,ep,x))= F (Rp,x \ S[bp,x,t]) > ßFp,x. 
Since the optimal solution does not broad­ * cast page p during (t, ep,x), it follows that F = p,x F 
*(S(t,ep,x)) > ßFp,x = . 1 Fp,x, which is a contradiction to Ep,x being a non-self-chargeable event. 
D Proof of [Lemma 3.5] For the sake of contradiction, assume that there exists a non-self-chargeable 
event 10000 Ep,x such that |[tpß (ep,x),ep,x]| < E2 . Let S be the set of requests for page p which arrive 
on the interval [t ß(ep,x),ep,x). By de.nition of tß(ep,x) it must be the pp case that F (S) > ßFp,x. 
We now want to bound the number of requests in S. Since each request in S can 10000 accumulate .ow time 
at most |[tpß(ep,x),ep,x]| < E2 , we have that F (S) < |S|10000 , thus ßFp,x < |S|10000 . E2 E2 E2 Hence 
we have that |S| > ßFp,x. The optimal 10000 solution must accumulate at least |S| .owtime for the E2 
* requests in S, therefore F =|S| > ßFp,x = p,x 10000 1 Fp,x. This is a contradiction to Ep,x being 
non-self­ . chargeable. D  
			
]]
##[[DATA:data/orbz/An object-oriented program development environment for the first programming course.txt|
               
			
]]
##[[DATA:data/orbz/An InterBase system at BNR.txt|
               
			
]]
##[[DATA:data/orbz/An interactive computer graphics approach for dissecting a mixture of normal (or lognormal) distributions.txt|
                   
]]
##[[DATA:data/orbz/An interactive lecture approach to teaching computer science.txt|
               
			
]]
##[[DATA:data/orbz/An undergraduate course in applied data communications.txt|
                			
]]
##[[DATA:data/orbz/An offline foundation for online accountable pseudonyms.txt|
                   
]]
##[[DATA:data/orbz/An investigation  of geographic mapping techniques for internet hosts.txt|
               
			
]]
##[[DATA:data/orbz/An optimal parallel algorithm for detecting weak visibility of a simple polygon.txt|
               
			
]]
##[[DATA:data/orbz/An open operating system for a single-user machine.txt|
               
			
]]
##[[DATA:data/orbz/An overview of hierarchical control flow graph models.txt|
 AUTHOR BIOGRAPHIES DOUGLAS G. FRITZ is a graduate student at Syracuse University working 
towarck a Ph.D. in Computer Engineering. His research area is hierarchical modeling for discrete event 
simulation. He received M.S. degrees in Electrical :Engineering and Computer Science from Syracuse University 
and a B.S. degree in Electrical Engineering from The Pennsylvania State University. He was formerly with 
IBM as a development engineer for high speed switching systems. ROBERT G. SARGENT is a Professor at Syra­cuse 
University. He received his education[ at the Uni­versit y of Michigan and has published widely. Dr. 
Sargent has served his profession in numerous ways and has been awarded the TIMS College on Simu­lation 
Distinguished Service Award for long-standing exceptional service to the simulation community. His research 
interests include the methodolclgy areas of modeling and discrete event simulation, model valid­ation, 
and performance evaluation. Professor Sargent is listed in Who s Who in America.  
			
]]
##[[DATA:data/orbz/An overview of the SUMMER programming language.txt|
                			
]]
##[[DATA:data/orbz/An optimal randomized logarithmic time connectivity algorithm for the EREW PRAM (extended abstract).txt|
                			
]]
##[[DATA:data/orbz/An NP-complete number-theoretic problem.txt|
               
			
]]
##[[DATA:data/orbz/An open simulation architecture for Force XXI.txt|
 AUTHOR BIOGRAPHIES JOHN A. (DREW) HAMILTON, JR., Major, 
US Army, is currently pursuing a Ph.D. in Computer Science at Texas A&#38;M University enroute to the 
Department of Electrical Engineering and Computer Science at the U. S. Military Academy, West Point, 
New York. He was most recently Chief, Officer Training Division at the Army Computer Science School, 
Fort Gordon. Major Hamilton has a B.A. in Journalism from Texas Tech University, where he was commissioned 
in Field Artillery, an M.S. in Systems Management from the University of Southern California and an M,S. 
in Computer Science from Vanderbilt University. UDO W. POOCH, Ph. D., P.E., received his Ph.D. in Theoretical 
Physics from the University of Notre Dame and is the E-Systems Professor of Computer Science at Texas 
A&#38;M University. Dr. Pooch is the author of numerous articles and books, and most recently authored 
with Lt.Col. James A. Wall, Discrete-Event Simulation published by CRC Press. Dr. Pooch is a very active 
researcher supervising projects in network simulation, network security and fault-tolerant distributed 
environments.  
			
]]
##[[DATA:data/orbz/An object-oriented information model for a patient definition and management system.txt|
               
			
]]
##[[DATA:data/orbz/Analysis of balanced fork-join queueing networks.txt|
               
			
]]
##[[DATA:data/orbz/An introduction to simulation modeling.txt|

AUTHOR BIOGRAPHY MARTHA A. CENTENO is an assistant professor in the Department of Industrial and Systems 
Engineering at Florida International University. She received a B.S. in Chemical Engineering from ITESO 
University (Guadalajara, Jalisco, Mexico), a M.S. in Industrial Engineering from Louisiana State University, 
and a Ph. D. in Industrial Engineering from Texas A&#38;M University. Dr. Centeno s current research 
interest include the utilization of artificial intelligence and database technologies to develop comprehensive 
and smart simulation modeling environments. Dr. Centeno is a member of ASA, Alpha Pi Mu, Tau Beta Pi, 
IIE, INFORMS, and SCS.  
			
]]
##[[DATA:data/orbz/An object-oriented design and implementation of reusable graph objects with C++.txt|
               
			
]]
##[[DATA:data/orbz/An overview of supertoroidal networks.txt|
                			
]]
##[[DATA:data/orbz/An operating systems course using stand alone computers.txt|
              
			

]]
##[[DATA:data/orbz/An object-oriented approach to software process modeling and definition.txt|
               
			
]]
##[[DATA:data/orbz/An on-line simulator and database system for management of a commercial fish farm.txt|
               
			
]]
##[[DATA:data/orbz/An optimal bound for conforming quality triangulations.txt|
                   
]]
##[[DATA:data/orbz/An investigation of the career path of the EDP professional.txt|
  APPENDIX Operatin B Personnel: post processing 
clerk operator trainee operator senior operator lead operator production clerk production trainee lead 
production clerk data entry-tralnee data entry-operator data entry-lead operator data entry-supervisor 
Operations Manager: manager ol computer operations manager of DP operations production control super- 
visor Programmer/Programmer Analyst: application programmAng- trainee, programmer, senior and lead; Analysis 
and programmlng-trainee, Analyst/ programmer, senior and lead; Systems Analyst: systems analysis-trainee, 
analyst, senior and lead Systems Programmer: operating systems program- ming trainee, programmer, senior 
and lead; Data communlcatlons/telecom- munication analyst Applications Manager: systems analysls-Manager 
application progrR~m~ng-mgr. system analysls/programmlng mgr. Computer Systems ManaBer: operating systems 
prog. mgr. DP administrator DP manager Data Communication/teleComm. manager DP/MIS Director: Director 
of DP/MIS - Division and corporate Internal Consultant/Speclallst: Administrative assistant technical 
assistant corpo- services coordinator rate div. program librarian tele comm. tech. control speci-alist, 
magnetic media librarian staff consultant, librarian, k~ supervlsor/operator DB Analyst Training specialist 
Table I. A Grouping of Job Titles Used by Datamation into Position Catagories i00 Table~ Sex Composi~ion 
of Sample Se--x No. F-~male 23 ~le 85 TablelO Table ll A~e Breakdown Of Sample Educational Levels of 
Sample Age Group No. Education No. <25 9 High school graduate -5 26-30 21 Partial college m 31-35 27 
no degree 19 36-40 29 2-year degree 15 41-45 12 4-year degree 21 46-55 7 4-year degree + par- >55 3 tial 
graduate work 23 Haster's degree 16 Post master's work I Tablel~ Tablel3 Departmental Size of Sample 
Salary Range of Sample Department Size Salary Range (No. of People) ° (Range 'O00s) No. No <5 9 10-15 
2 5-10 II 16-20 9 11-15 8 21-30 51 16-30 18 31-40 29 >30 62 >40 15 Tablet~ Table i~ Core Size of Sample's 
Vendors of Computers Computers Reported by Sample Core Size No. Hake No. <64K 5 IBH 70 128-512K I8 Burroughs 
7 )512, <2~m 12 Univac 7 >2HB,~IOYlB 41 Amdahl 4 i >10.~ 9 DEC 4 Honeywell 3 Prlme/HP/TI 4 Others 3 
   
			
]]
##[[DATA:data/orbz/Analysis of concentrated ALOHA satellite links.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented view of backtracking.txt|
                    ]]
##[[DATA:data/orbz/An overview of HLTs for South African Bantu languages.txt|
Table 1. Overview of HLT components available for isiZulu, Sepedi, 
Tshivenda, and Xitsonga. Language isiZulu Sepedi Tshivenda Xitsonga      
			
]]
##[[DATA:data/orbz/An undergraduate compiler laboratory.txt|
Appendix A:  PROGRAM BLOCK ~8fray sJz@s and labels must be positive and less than 
1000 21f Ident is used, it must be a previously defined constant with a value between I and 999 3procedure 
names may not be used Saul Rosen, ed., McGraw-Hill, 1967.  15. Wirth, Niklaus, Algorithms + Data Structures 
= Programs (especially Chapter 5, pp. 280- 350), Prentice-Hall, 1967.  16. Wirth, N. and Kathleen Jensen, 
PASCAL User Manual and Report (Second Edition), Springer-Verlag, 1974.  The PL/CP Syntax STATEMENT 
 --4 I 1constant identtftec not a]lowed 21 ~ numhec ~ 999 3loop parameter expressions must satisfy usual 
constraints or loop execution will be skipped  4call by value-result 35  CONDITION EXPRESSION FACTOR 
T ER___~ LINE CONTROL DESIGNATOR Terminal Symbol s ~I reserved words ~ speclal characters W.~ : ) > p_~..~ 
I~ -(--j dtgt~s:o t t '3 ..+ ~ :: < = c, (~,+,~+++ m S+~ I o'P+h~,h) " 36  
			
]]
##[[DATA:data/orbz/An interactive dynamic model for integrating knowledge management methods and knowledge sharing technology in a traditional classroom.txt|
                   
]]
##[[DATA:data/orbz/An inversion algorithm for geometric models.txt|
 ACKNOWLEDGEMENTS Thanks are due to 
Reijo Sulonen and Markku Tam-minen, who gave valuable comments during the preparation of this paper. 
The work described in the paper has been supported by the Academy of Finland and the Helsinki Universi-ty 
of Technology Foundation.  
			
]]
##[[DATA:data/orbz/Analysis and simulation of passenger flows in an airport terminal.txt|
AUTHOR BIOGRAPHIES MICHEL R. GATERSLEBEN is Manager of the Logistics Competence Center 
at Amsterdam Airport Schiphol. He is working in the field of airport logistics and long term capacity 
planning and is involved in several projects concerning airport development. SIMON W. VAN DER WEIJ is 
a Business Engineer at Incontrol Business Engineers, a consulting firm specialized in improving businesses 
by using quantitative methods. He is involved in several projects in the field of transportation and 
logistics. He holds an M.Sc. in Mechanical Engineer­ing, Production and Operations Management at University 
of Twente. 
			
]]
##[[DATA:data/orbz/An interactive pseudo-assembler for introductory computer science.txt|
               
			
]]
##[[DATA:data/orbz/An overview of ergonomic considerations in computer systems.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented approach to algorithm visualization&#8212;easy, extensible, and dynamic.txt|
               
			
]]
##[[DATA:data/orbz/An optical simulation of shared memory.txt|
               
			
]]
##[[DATA:data/orbz/An internetwork message structure.txt|
               
			
]]
##[[DATA:data/orbz/An interactive graphical modeling tool for performance and process simulation.txt|

NOTICE OF DISCLAIMER Q+ and the COMPASS tool are prcxlucts of AT&#38;T. Bellcore dces not provide comparative 
analysis or evaluation of prcducts or vendors. Any mention of prcxlucts or vendors in this dcmment is 
done where necessary for the sake of scientific accuracy and precision, or for background information 
to a point of technology analysis, or to provide an example of a technology for illustrative purposes, 
and should not be construed as either positive or negative commentary on that product or that vendor. 
Neither the inclusion of a product or a vendor in this dcmment, nor the omission of a product or a vendor, 
should be interpreted as indicating a position or opinion of that praluct or vendor on the part of the 
authors or of Bellcore. Liability to anyone arising out of use or reliance upon any information set forth 
herein is expressly disclaimed, and no representations or warranties, expressed or implied, are made 
with respect to the accuracy or utility of any information set forth herein. AUTHOR BIOGRAPHIES Dennis 
S. Mok is a Member of Technical Staff at Bell Communications Research (Bellcore), Performance Management 
Department. He received his M. Eng. and Ph. D. in Industrial Engineering from Iowa State University. 
He was on the Computer Science faculty at Western Illinois University. His research interests are computer 
systems performance analysis, business prcxesses and operations modeling and simulation, and complex 
precess re-engineering. Dennis is a member of the editorial board of the International Joumat in Computer 
Simulation. Cynthia A. Funks-Lea is a Member of the Technical Staff at AT&#38;T Bell Laboratories, Perfommce 
Analysis Department. Her research interests include simulation, object-oriented systems, and computer 
networks. Cynthia received a BS in computer science, BS in mathematics, and an MS in computer science 
from Penn State University. She is a member of the IEEE Computer Society and the ACM. 
			
]]
##[[DATA:data/orbz/An introduction to Haskell with applications to digital signal processing.txt|
                    ]]
##[[DATA:data/orbz/An object calculus for geographic databases.txt|
                   
]]
##[[DATA:data/orbz/Analysis of buffer replacement policies for WWW proxy.txt|
               
			
]]
##[[DATA:data/orbz/Analyses of load stealing models based on differential equations.txt|
                			
]]
##[[DATA:data/orbz/An optimistic commit protocol for distributed transaction management.txt|
                			
]]
##[[DATA:data/orbz/An intelligent universal advisor.txt|
  John Doe ADVISING SHEET B.S. Computing Science 
Catalog 1995 TO BE COMPLETED COMPLETED (ENG 265 or 275 or 295) and (ENG 2** or SCM ***) Criterion I 
ENG 164, ENG 165 MTH 379 and MTH 396 and (MTH 364 or PHL 362) Criterion II MTH 172 and 173 ((BIO *** 
and BIO ***) or (CHM *** and CHM ***) or (GEL *** and GEL ***)) and (PHY 138/118 and PHY 139/119) Criterion 
Ill Criterion IV ART 160 Criterion V HIS 163, H IS 164, POL 261, POL 331 Criterion VI POL 335, ECO 230, 
PHL 261 Criterion VII KIN 215 and (I-lED 166 or KIN *** or AGR 263)  Major CS 272 and CS 278 and CS 
333 and CS 336 CS 164, CS 165, ACC 231 and CS 474 and CS 437 and CS 3** and CS 3** and CS 3** and CS 
3** and CS 3** and Mgt 380 Minor (Matl0 MTH 274 and MTH 3** and MTH 3** and MTH 172, MTH 173 MTH 3** 
Figure 1. Sample Advising Sheet 109  
			
]]
##[[DATA:data/orbz/An introductory textbook on cyber-physical systems.txt|
               
			
]]
##[[DATA:data/orbz/An introduction to simulation using ProSim for business process simulation and analysis.txt|
 He has more 
than five years of industrial experience in information systems analysis and design. His research interests 
include systems modeling, discrete event simulation, object-oriented modeling, knowledge representation 
and artificial intelligence. MADHAV ERRAGUNTLA received his M.S. in Industrial Engineering from the National 
Institute for Training in Industrial Engineering in 1989 and Ph.D. in Industrial Engineering from Texas 
A&#38;M University in 1996. Dr. Erraguntla conducted research and developed applications in planning, 
simulation, costing, knowledge based systems, optimization, neural networks and fuzzy logic. He has numerous 
journal publications and conference proceedings. He designed and developed PROJECTLINK and process design 
assistant (PDA) presented in this paper. Currently, Dr. Erraguntla is working as a Research Scientist 
at KBSI. 
			
]]
##[[DATA:data/orbz/An overview of CIM enterprise modeling methodologies.txt|
Are there laws of manufacturing? Manufacturing 
Systems. Washington D, C.: National Academy Press. Naga@ T., Y Naga@ and H. Koshimitsu. 1993. Building 
a CIM system for compound plant: Utilization of distributed processing system. Computers &#38;Industrial 
Engineering. 24(4): 561-569. Ngwenyama, O. K., and D. A. Grant. 1994. Enterprise modeling for CIM information 
systems architectures: An object oriented approach. Computers &#38; Industrial Engineering. 26(2): 279-293. 
O Sullivan, D. 1994. Manufacturing System Redesign: Creating the Integrated Manufacturing Environment, 
New Jersey: Prentice Hall. Pandya, K. V. 1995. Review of modeling techniques and tools for decision making 
in manufacturing management. In IEE Proceedings on Science, Measurement, and Technology 142(5): 371-377. 
Petrie, C. J. 1992. Introduction In Proceedings of the First International Conference on Enterprise Modeling 
Ed. Petrie, C. J., 1-17. Massachusetts: MIT Press. Ross, D. 1985. Applications and extensions of SADT. 
Computer April: 25-34. Savolainen, T., D. Beeckmann, P. Groumpos, and H. Jagdev. 1995. Positioning of 
modeling approaches, methods and tools. Computers in Indus@. 25:255­ 262. Wang W., K. Popplewell, and 
R. Bell. 1993. An integrated multi-view system description approach to approximate factory modeling. 
International Journal of Computer Integrated Manufacturing. 6(3): 165­ 174. Weston, Jr. TED . 1994. Three 
dimensions of CIM, Production and Inventory Management Journal. First Quarter 59-61. Young, R.E. and 
J. Vesterager. 1991. An approach to CIM system development whereby mantiactnring people can design and 
build their own Cl&#38;f system. International Journal of Computer Integrated Manufacturing. 4(5): 288-299. 
 AUTHOR BIOGRAPHIES GANESH PAI KATEEL is a Research associate in the Center for Computer Integrated Manufacturing 
in the School of Industrial Engineering and Management at Oklahoma State University, Stillwater, OK. 
He received the B.Tech degree in Mechanical Engineering from the Karnataka Regional Engineering College, 
India and Post Graduate Diploma in Industrial Engineering form the National Institute for Training in 
Industrial Engineering, Bombay, India. He has two years experience in the CNC machine building industry. 
He has taught both at undergraduate and graduate levels at Karnataka Regional Engineering College, India 
for four years. He was the Project OfKcer for the State of Karnatr@ National Technical Manpower Information 
System, Govt. of India from 1990 to 1994. Currently he is completing his M.S. degree in Industrial Engineering 
and Management at Oklahoma State University. During 1995-96, he taught Production Management at the College 
of Business, Oklahoma State University. MANJUNATH KAMATH is an Associate Professor in the School of Industrial 
Engineering and Management and Director of Center for Computer Integrated Manufacturing at Oklahoma State 
University, Stillwater, OK. He received the B.Tech. degree in Mechanical Engineering from the Indian 
Institute of Technology, Madras, India, in 1982, the M.E. degree in Automation from the Indian Institute 
of Science, Bangalore, India, in 1984, and the Ph.D. degree in Industrial Engineering from the University 
of Wisconsin-Madiso~ in 1989. His primary areas of interest are stochastic modeling and queueing theory, 
analytical performance modeling of manufacturing systems, object-oriented modeling and simulation of 
discrete-event systems and Petri nets. He is a member IEEE, IIE, and INFORMS. DAVID B. PRATT is an Assistant 
Professor in the School of Industrial Engineering and Management at Oklahoma State University, Stillwater, 
OK. He holds B. S., M. S., and Ph.D. degrees in Industrial Engineering from Oklahoma State University. 
He has twelve years experience in the petroleum, aerospace and pulp and paper industries. His research 
and teaching interests include manufacturing systems modeling, enterprise integration, and the strategic 
implications of CIM. He is a registered Professional Engineer in Oklahoma, a certified Fellow in Production 
and Inventory Management and an ASQC Cetiled Quality Engineer. He is a member of IIE, NSPE, AFICS, INFORMS, 
and ASQC. 
			
]]
##[[DATA:data/orbz/An undergraduate embedded software laboratory for the masses.txt|
               
			
]]
##[[DATA:data/orbz/An optimizing compiler for LISP for the Z80.txt|
               
			
]]
##[[DATA:data/orbz/An introduction to computer simulation.txt|
 AUTHOR B1OGRAPHY MIKE PIDD is a Professor 
of Management Studies in the Management School of Lancaster University in the UK. He is author of [ omputer 
sintuiation in mana,gewcnt science and of C omputer modclling @ ~i~.scrcie s; HIulatIaH (bet h published 
by John Wiley). He teaches. researches and consulfs in discrete simulfition and management science. His 
current interests include research on object oricntat ion and an upcoming book on Modclling.  
			
]]
##[[DATA:data/orbz/An object oriented simulation model for determining labor requirements at Taco Bell.txt|
 AUTHOR BIOGRAPHIES MARK GODWARD is Manager of Operations 
Engineering at Taco Bell Corporation. He received his MS in Industrial Engineering from North Carolina 
State University in 1989. His other industrial experiences include Ford Motors of Argentina, General 
Tire and Rubber Company, and Tompkins and Associates. The work presented in this paper was partially 
responsible for him being receiving the prestigious Taco Bell President s award for contributions to 
the Corporation. Together with William Swart, he received the 1994 Institute of Industrial Engineers 
Operations Research Division Award for Outstanding Application of Operations Research Techniques Producing 
Significant Results. WILLIAM SWART is Dean of New Jersey Institute of Technology s Newark College of 
Engineering. He is a former Vice President of Burger King Corporation, where he received the 1981 Franz 
Edelman award for the practice of Management Science and the Restaurant and Institutions Magazine Honorable 
mention award for Food Facilities Design. Together with Mark Godward, he received the 1994 Institute 
of Industrial Engineering Operations Research Division Award for Outstanding Application of Operations 
Research Techniques Producing Significant Results. He serves as a strategic consultant to Taco Bell Corporation. 
  
			
]]
##[[DATA:data/orbz/Anaglyphic stereoscopic perception on lossy compressed digital videos.txt|
               
			
]]
##[[DATA:data/orbz/An object-oriented modeling of the history of optimal retrievals.txt|
                   
]]
##[[DATA:data/orbz/An introductory algorithm teacher.txt|
                    ]]
##[[DATA:data/orbz/An operational system for computer resource sharing.txt|
                    ]]
##[[DATA:data/orbz/An object-oriented genetics information system.txt|
Appendix A   A Preliminary 
Object-Oriented Databaae Schema for cDNA Sequencing Figure Al is a schema fur a cDNA sequencing project 
databaw that can easily be generalimd for any DNA sequencing project database. The schema diagram is 
based on the object-oriented data model described in [Kim91]. he bold lines represent the class­subclass 
hierarchy relationships, and the thin lines represent the composite hierarchy relationships. These composite 
links can be of several types, but it is assumed that they were aU exclusive inde­pendent references 
initially. Further study may reveal that some of them should be dependent or shared, but this is not 
addressed at this time. The names of the classes are in bold-face type above each box, with the attributes 
in plain type inside each box (multi­valued attributes am plural), and methcxls associated with this 
class below them in italics. It is these methods that represent the neces­sary special operations that 
will be provided for these types of databases. It is the ability to add these special operations that 
makes the object-oriented data model so attractive. ~ol~ohwma has several major components that can be 
categorized .. .. l). I heIJNA sequencesmat are tang -- Creating ana the con­nections between them. 
2). The record of experimental methods used to obtain the sequences. 3). The special operations that 
help the biologists organize the connections between the sequences and to search for possible meaning 
of these sequences. 4). The results of the search exploration for possible mean­ing. 5). A dictionary 
of known sequences and their meanings (e.g. transcription control elements). The CM description that 
is central to the schema is the sequence~agment, which is the major type of DNA~agment object that is 
being stored in the database that tlus schema describes. The methods shown in italics in Figure Al represent 
the special operations mentioned in (3) above. We chose to model the DNA sequence itself as a string 
upon which various methcds could be used. The sequence fragments arc smaUer overlapping pieces that can 
be thought as having some ordering; thus the preceding_fragment, following_fragment, left.overlap~s, 
and right_overlap_pcs attributes. These attributes are computed using the CreateContig methcd. Also depicted 
is the type of information that needs to be kept about the experimental process of DNA sequencing, and 
is representativeof what is now kept in an indi­ vidualresearcher slaborstoxynotebook.Mostof the attributes 
for Iibrary, clone, vector, and seque~e_fragrnent objects are entered when a new sequence is to be stored 
in the database. This prelimi­naryschema wiU evolve as the system progresses. 650 Qel DNA_fragment -- 
_ Illz..bp ~=: ~ ,h&#38;L , - \ ~,m ~ pattern cDNA_fmgmmta sequence.fragment    F-g II rusoiction.nqn 
Eerie fxecedm~fmgnmnt clOm_v.3ct01 pnttern.mcqumce Ipnttem_&#38;3cnptmn I I I followm~fmgmmt w-tw_6­ 
mwJmmedin~fkgme.nt followm~me I q-H gem_9qleace &#38;st_fiOm_pmc_gene m­ potem.sequences dlst_tO_fol~m 
H ~P $equerlce_cO-t Slmllsmhes vector left_Ovedsp~ 1 restriction.map v9X0r_nanm 1 righ_Overlap_pJs amisso_acid_sequessce 
3 a) Cn A &#38;9_stmg IsHomologowTo bold clam m7 a CreakConrig / DisplCont TramlateSequence \ l\ nucteii_acid_sequenee 
- / / DNA_ming llkltCht S / DtsplqvMafch IsSintilarTo/ DisplaySitni/orin, AlignmenrOj/ Displm,Altgnmenf 
Cld paftetratss&#38;iption_control_element rest-map_site restriction enzvme -= ­ mm m res_l.acat10n8 
similarity-resutt atgOrithm_type 7input outputs vectOr_sequema I fasta_simihuity-input c fasta_zimilarity_output 
+ I regular attribute Italic rnetfwd l 1 composite hierarchy IS-PART-OF ctasdsubclass hierarchy Is+j 
(inheritance) ~ I Figure A 1, cDNA .%quencmg FroJect Obyxt-orrented Schema ­ 
			
]]
##[[DATA:data/orbz/An intensive instruction format for information systems.txt|
               
			
]]
##[[DATA:data/orbz/An interpretation of objects and object types.txt|
Appendix In this appendix we summarize several calculi, giving both grammars and rules. 
We often use assertions of the form EFZ Vi~l . . . n to indicate n hypotheses; by convention, this means 
E 1-0 when n = O. A The Obl<. Calculus The calculus Obl<. consists of the rules given in Tables 7 and 
8. It has the following syntax: Environments E::= OIE, Z:A Types A,B ::= Top I [Zi : Bt El ] Variables 
X>Y Terms a,b ::= z I [L = s(2, :A)b, l ] I a.1 \ a.1 + <(z :A)b Results v ::= [1, = <(at : A)b; e ] 
 El The F<:P Calculus The calculus F<.P consists of the rules given in Tables 7 and 9. It has the following 
syntax: Environments E ::= OIE, X: AI E, X<:A Type Variables X, Y Types A,B, C ::= X I Top \ A--+B I 
{1, : B, e m} [ p(X)A I V(X<:A)B \ 3( X<:A)B Variables X)Y Terms a,b,c, d ::= x I}(z :A)b Ia(b) I{1, 
= b, l n} Ia 1 I fold(A, b) I unfold(a) I A(X<:A)b I b(A) [ pack X<:A = C with b : B{X} lopencas X<: 
A,x:Bind:D Results ::= A(z : A)b I {li = bi 61 } v I fold(A, v) I J(X<:A)b I pack X<:A = C with b : B{X} 
Other definitions of the set of results could be adopted. The one given here is convenient for our adequacy 
theorem; it is however not particularly compelling. Fortunately our techniques are not too sensitive 
to changes in the definition of the set of results. C The Imperative Variant of Obl<, The typed imperative 
object calculus contains all the rules of Obl<. (described in Appendix A) and contains the typ­ing rules 
given in Table 10 for its additional terms. As for Obl <., we can prove a minimum-types property for 
the typed imperative calculus. (This is a convenient departure from the original calculus of [AC95a]: 
the terms described here contain more type information. ) The syntax is: Environments E::= OIE, Z:A Types 
A,B ::= TOp I [t, : B, =ln] Variables X)Y Terms a,b ::= z \ [~i = S(Z, :A)b, l ] Ia.1 Ia.1 + <(z :A)b 
I clone(a) lletc:A=ainb D The Ob$ Calculus The calculus Ob~ consists of the rules given in Table 7, 
the rules (Env X), (Type X), (Sub X) given in Table 9, and the rules of Table 11. It has the following 
syntax: Environments E ::= O\ E, X: AI E, X<:A Type Variables X, Y Types A,B ::= X I Top I Obj(X)[l,v, 
: B, ln] with v, ~ {+, ,0} Variables X>Y Terms a,b ::= z I obj(X=A)[l, =q(z, :X)b, sl n] 1 U,.1 I al&#38; 
(Y<A,y : Y)<(z : Y)b 406 Table 7: Common Typing Rules Environments Subtyping EkA Ek A<:B El- B<:C (Sub 
Refl) EkA<:A (Sub Trans) EI-A<:C Eka:A EkA<:B (Val Subsmp) Eka:B Top (Type Top) E~ET~p (Sub TOP) E hEA~T.p 
 Table 8: Additional Typing Rules for Obl < 407 Table 9: Additional Typing Rules for F< ~ Types E , X<:A, 
E b O (Type X) (Type +) E , X<:A, E k X EFB, Vi C1. ..n (Type Record) (Type Ret)Et-{1, : B, =l n} E, 
X<:AFB (Type All) (Type Exists) E + V(X<:A)B Subtyping E , X<:A, E 1-0 Et-A <:A Ek B<:B (Sub X) (Sub 
+)E , X<:A, E k X<A E # A* B<: A ~B EkB, <:B~, di~l. ,,n EkB~, Vi En+l. ..n+m (Sub Record) E+ {1, : B, 
1 n+ }<:{1, : B; e n} E ~ p(X)A E + w(Y)B E, Y<: Top, X<:Y t-A<:B (Sub Ret) E + K(X) A<:p(Y)B EkA <:A 
E) X<.A E B<:B E k A<:A E, X<:A K B<:B (Sub All) (Sub Exists)E t-V(X<:A)B<:V(X<: A )B E t-3( X<: A) B<:3(X<:A 
)B Term Typings E,x:Akb:B E+ b:A+B Eka:A(Val Fun) (Val Appl) E + ~(X : A)b A-+B E+ b(a):B Ekb, :B, Viel. 
,,n (Val Record) E&#38; {1, = b% El n} : {1, :B, = } Eba:{l, :B, =l } (Val Record Select) Ekall:BJ 
 g~ n E+ b: B{A} (Val Fold) E + fold(A, b) :A A - ( X)B{X} EFb:A (Val Unfold) E + unfold(b) : B{A} 
 A + ~( Y)B{x} E, X<: Akb:B E+ b :V(X<:A)B E+ A <:A (Val Fun2) (Val App12) E h A(X<:A)IJ : V(X<:A)B 
E!-b(A ) : B{ A } E F C<:A E 1-b{C} :B{ C } (Val Pack) E 1-pack X<:A = C with b{X} : B{ A } : 3( X<: 
A)B{X} E\c:3(X<:A)B EFD E, X<: A,x:Bkd:D (Val Open) E+(open .as X<: A,x. Bind: D): D Table 10: Additional 
Typing Rules for the Imperative Calculus 408 Table 11: Additional Typing Rules for Ob~ Variance Subtypings 
o (Sub Covariant) E K ~~~ B<~+>\O } (Sub Contravariant) E E ~~ ~B<~_>\ } EFB (Sub Invariant) E t- l?<: 
B Object Types and Subtyping E, X<: Topt-B, {X} Viel... n + , 0}, B, ~ovariant in x (Type Object) Z 
ie{,E + Obj(X)[l;vi : B~ e n] (Sub Object) For A = Obj(X)[tiv; : B;{X} G +m], A = Obj(X)[t,v: : B:{X} 
e ] E, Y<:A 1-v, B,{ Y}<:v(B~{Y} Vi c 1.. .n E t-A<:A Term Typings E)z, :A1-b,{A}:B, {A} Vi~l... n 
(Val Object) A = Obj(X)[Lv, : B,{X} ~ln] E K obj(x = A)[l, = f(z, : X)bt{X} 61 ] : A (Struct Val Select) 
For A = Obj(X)[Lv, : 13{X} 1 ], v, G $+~o~<:fi,l . . . n E!-a:A E t-a.l$ : Bj{A} (Struct Val Update) 
For A = Obj(X)[Lv, : B,{X} G n],v, ~ {-, o}, j E 1.. .n Eka:A EHA<:A E, Y<: A,y:Y, z: Y+ b: Bj{Y} E E 
al, @ (Y<:A, y :Y)r(z :Y)b :A  
			
]]
##[[DATA:data/orbz/An ordinal optimization approach to a token partition problem for stochastic timed event graphs.txt|
 AUTHOR BIOGRAPHY XIAO-LAN XIE is a research officer at the Institut National 
de Recherche en Informatique et en Automatique (INRIA). His research interests include modelling, performance 
evaluation, real-time control and design of manufacturing systems.  
			
]]
##[[DATA:data/orbz/An iterative semi-supervised approach to software fault prediction.txt|
               
			
]]
##[[DATA:data/orbz/An interruptible algorithm for perfect sampling via Markov chains.txt|
               
			
]]
##[[DATA:data/orbz/An interprocess communication facility for the model a multi-microcomputer system.txt|
                   
]]
##[[DATA:data/orbz/Analysis of dynamic congestion control protocols.txt|
               
			
]]
##[[DATA:data/orbz/Analysis of demand paging policies with swapped working sets.txt|
               
			
]]
##[[DATA:data/orbz/An interactive graphics editor for document preparation.txt|
               
			
]]
##[[DATA:data/orbz/Analysis and experience with an Information System development methodology.txt|
               
			
]]
##[[DATA:data/orbz/An interleaving technique for block coding of black-and-white facsimile data.txt|

4,­ .. -,,,:; J ...~=-l r-- -.... . _-,_  -1 P-l------ ----­  -* z._ . . .-._d L_.. ---L. II Al -Handwritten 
Text A2 -Circuit Diagram !s--.-- .-. _:*.-Lx -.! L.. -.-!.4d m.-, n,0 *,J,b.!.. ...-, *1,...,,..,. ,w@$tIw 
$..C.--v. tn.. ?.,..4 .. Ilq ppA04w #u,,aw...p.M,M,M ,-p**, V* ~_Bu*~ -,, c...., . -.,.** oAnOti. M&#38;*P..m.-tippfmw.mw. 
. . ,. *,., &#38;.mq ,. b...,,,,........c.. ,,dW-b.-. , u ,,, , +.4. ,19 ,-.. -. *d.-G ,.. 10A-.tdb -.*. 
(**m, v. ,.,, b.n*-.p.f*, ,m. ...$,8.6***, W,p--..+.l!)m ,),,,.,, ,4,, .,.94 09.. .,, ..0.-.,,, ~* * 
,.t.,ln...,Td****,.,... ....,, - *. - *. ,,-p.l..p... ,ti CA ,,*  -=T-J~;z-&#38;:-~ . ,.,. . .. * 
 ...M H -.,,,q ,!!,*, k pp.,-d.QO-. -. ., ...... . , .,,..*.,.A.4m..,a.-,. k , * -*. x n-,* -.,. --W!-m.l. 
$-.-. ti-. I-.P. -.* (----.9, .--.-.-.-.. mm # *9-..-. VI . ,.., .* ----. * -.9,, + .- m-*,..-- -. Dam 
 ,,-m , ),am $--.,,.., ,-,. -,-w., .,. -..,*-N .m.l ,... -s. . .  # 1,!9 **IO ,s c ,.am8 ,,e ,_ -lwnl 
 ,Cd * *,* ; Cw,.,-, ,.,m - u -d-, s .-m,­ q!.,. **P*. I. . ..flhfdh.d. . l. ..-.u-da9# d~ws... Few.-.u., 
u,-o--d ...10.--.--8 ndd n --rep---#m .. ,, , 0 . ,.. ,x ,,..., . . ,, * ,.q. ,d .. J... . ..*-. .*-. 
--.$.s­ ,mm  W-,: l:% 0 Ian .w-.k V----,--.,-, b---ate . .Id*ott ............. w,  t . ... n.-. ..,, 
!. ..,.,...,.,,.-.e, me-*.* -,.,. ... -,0 ),# ,.,. ., ,.. - . ?------1.-... . ... ...... $. , . .. --,,p.. 
. .nm..~- .. * m.. .,, , 1 .....!.,.-.+,.,,, .,,, ,*. ,, ,4,* >,-. ,.. ,+..-. m ,... . . . . . .. . 
.. . . ~ .~. :,. w . ., ,... .. . .. ... ,W.. ?,,..! 1..--,. a!-. ..... !., ...... a-,,.O. . ! z~~-i~~ 
 m j~}~.. - . ,!.,...,,, ,.,,..,,,.,. ,* ,-,,@......U ..,.,. . . ,.,..,., ,, a 1. ..q ,,.,. , $ ,.. 
..,. . .,, ,,, ,,,,.. ,. %. , %.,1.. , b.. ! ...-.U.. ..*.* . ...!, .1 ., ., ,,.., . . ,. ,,. du...!... 
J! . ..,. . . . =..0,., , .. .,,,, ?..,,, .......-,.,  A3 -Financial Statement A4 -Typewritten Text 
Figure 5 (Mginal Test lmrigcs Used for IIIC (Al -A4) 42 - -.~-.m . B . -*-. . --­ m aR ~.-Urn-m - . - 
. ­ ss- s :.: :. . ... -------­ > . Y,. m . . . ­, ?:; .: , ........­ i i (b) Al Section, Reconstructed 
(b) Modified IIIC Method, Al Section, . ..---.. -.----­ Triuuta.lhdd Iiprh tin d h h *(h  Triwm.b*kd 
IIwI$ wereWXI h W ­c~mmok (NCW E@@ Nudex, USA) @ Ci/mrnok (New E@wJ Nudar, USA) ad ~ Ci mmok m WII u 
the Ilpttit DAGO d -. chrtndq M 4) u the llpti DAGO ad D6L8T fN1.UrIwaCxdwkyic Sxocc Ccaler,~ d (AwurrtonGrthdqic 
SacrlccCca!er,.Aca4@qd IJI Gcneli@ A-q of Scxnca of he mm) IJ1 Gcndh, AdUny of &#38;-%ncud IbeU$sq 7Mply 
of W wum4aMtd lip W TMprfily Of{helrIwn4M4d II* N M /$lcfck, FederalRqNhlIc Of f.jcrnUlq&#38; m ~~tlf 
60 (\ fcrci, Federal Rr~iIf.lK C( ~:~~). ?%4~~~ : q (c) A4 Section, Original (c) lIIC Method, A4 Section 
 -.... ... . TriIIuuWW lipb wn u$d is ti ~ Ctimok (,% u~ ~~f, USA) ~ Ckhmok,M Udfu w llplbds  DA(XIad 
Mxr,  fAWnna Grdtdqic W,MX CCOW, Adtq d h Genckt, Acukrq d StXnUS &#38; Ibe U=} IIW pdriq 0( [k mllttmwwt!d 
!@sd m M iJ!ti{t, WCEI N~Jl!ltI Cl !j.:~~j, W! ~~d 7 (d) A4 Section, Reconstructed (d) Modified II?C, 
A4 Section Figure 7. IBC Simulation Results, F = 160 Figure 9. IIIC and Modified lBC Simulation Results 
F = 64 (~) ESTOSRate= l/looo (a) EtTor Rate= l/looo * .­ . . -­ - ,--- --­ * ---­ ~) EITOTRate = 1/100 
(b) Ems Rate = II1OO (c)Ems Rate= 1/32 (c) Error Rate = 1/32 Figun 11. Recons~uctd Image in Presence 
of Random tlwwnission Emors for WBS Teckique$ Figure 10. Reconswtd Image in Presence of Random Transmission 
EsTors fos Modified IBC Techniques, F=64   
			
]]
##[[DATA:data/orbz/An only undergraduate course in object-oriented technology.txt|
                   
]]
##[[DATA:data/orbz/Analysis of careers for Georgia youth in computer occupations, 1971-76.txt|
. 4. Non-profit is higher, but the size of 
total employ-ment does not support its significance. . It should be noted, however, that in large data 
processing organizations and also in some large corporate organizations with strong emphasis on data 
processing, the Career Ladder for key-punch operator would generally involve several grade levels for 
key punching work, based on higher levels of skills and experience with comparable pay ranges for each 
grade level. DISCUSSION OF FULMER PAPER Fred A. Gluckson National Bank of Detroit Professor Fulmer's 
paper continues a tradition with SIGCPR --an investigation of supply and demand at the entry levels 
in data processing. Last year we heard Professor Morris Pollack of CUNY and in 1971 Professor Gary 
~)pkin described junior college curricula. Also in 1971, Professor Ethel Shrout surveyed working systems 
 analysts to learn what competencies and training are actually required by their job. Similar papers 
can be found in prior proceedings. Please note that Professor Fulmer stops short of systems analysts, 
just addressing programmers and operators of keypunch machines and computers. His paper is rather wide 
ranging. In addition to quantifying demand, he touches on training requirements, personal qualifications, 
job descriptions, aptitude testing and career ladders. I would direct the interested reader to prior 
CPR re- search findings that concentrate on each of these areas. Our proceedings cover them in some depth. 
 Now for specific observations and opinions of my own. Professor Fulmer's growth trends seem rather 
mo=e con- servative than those of the Department of Labor. In 1968, the State of Georgia had 2.3% of 
the population of the United States. The Department of Labor projects 23,000 annualprogrammer openxngs, 
while this paper projects 276, or approximately 1%. I suspect this con- servative trend is more accurate 
since it is based on hard data from a local survey. However, Professor Fulmer does not mention thai'of 
his annual demand for programmers, many are not at the entry level. In my installation, for example, 
we currently have requisitions to hire several programmers. We could fill them tomorrow with trainees. 
But our deadlines are such that we have no ~Ime for training and are looking for experienced people that 
we can lure from other companies. Thus the student just out of a two-year col- lege may have trouble 
getting his first break. An observation on the data regarding growth of key-punch and computer operator 
jobs, in our large installation these jobs are actually shrinking. Where we had five computers three 
years ago, by year-end we will have two (larger) to do far more work. And our trend is to move data 
entry terminals into the user departments and make users responsible for entering and validating their 
own data. Thus our centralized key-punch group is diminish- ing. So I would view these growth figures 
with some caution. Perhaps enough smaller companies are growing to offset the large ones which are shrinking. 
 A minor point, I do not see a key verifier operator as a step up from key-punch. They are essentially 
the same job and are usually performed by the same individual. If anything, key verifier is less rewarding, 
as he or she doesn't get to make any little holes. ~ey-punch to key-punch supervisor, O.K. But to computer 
operator? To programmer? Professor Fulmer's analysis of job trends by type of in- dustry is interesting, 
something I have not seen before. Nor can I explain why construction is the lowest user of computer personnel. 
I suppose they shovel dirt ~ as opposed to paper, as in industry or government. Professor Fulmer concludes 
that computers have restruc- tured jobs, which no one can deny. Yet I disagree with his contention (b), 
that "the new ~echnology has reduced the skill level and complexity of Jobs." Would that it were so. 
 
			
]]
##[[DATA:data/orbz/An intermediate language for source and target independent code optimization.txt|
. 198 Op LINE SB11 SB21 SBMI FUNC STR PARR PARV EPR START EQL ABSI UMII 
 ADD11 SUB11 SUBI11 MULl1 DIV11 P11 NEll LT11 GT11 ADDO0 AND OR NOT CVIO CVRI Appendix Typical 
Operators for an Algebraic Language Primitive Operators Description SOURCE LINE NUMBER SINGLE SUBSCRIPTION 
OF INTEGER ARRAY DOUBLE SUBSCRIPTION OF INTEGER ARRAY MULTIPLE SUBSCRIPTION OF INTEGER ARRAY (etc., 
for arrays of other size units) FUNCTION CALL BEGINNING OF FUNCTION PARAMETER LIST FUNCTION PARAMETER 
(by reference) FUNCTION PARAMETER (by value) (etc., for by name or such) END OF FUNCTION PARAMETER LIST 
(operators similar to the above may be needed for procedure or I/O calls if different calling sequences 
are involved) STARTING POINT OF MAIN PROGRAM REPLACEMENT (:= or =) INTEGER ABSOLUTE VALUE INTEGER 
UNARY MINUS INTEGER ADDITION INTEGER SUBTRACTION INTEGER INVERSE SUBTRACT INTEGER MULTIPLICATION INTEGER 
DIVISION (-A+B) INTEGER RAISED TO INTEGER POWER INTEGER INEQUALITY COMPARISON INTEGER LESS THAN COMPARISON 
INTEGER GREATER THAN COMPARISON (comparisons of other types) (note: see macro list for EQ, GE, LE) 
(above integer operations can be duplicated for real or other, types, such as: REAL ADDITION ) BOOLEAN 
AND OPERATION BOOLEAN OR OPERATION BOOLEAN NOT OPERATION (other Booleans, as needed) CONVERT REAL TO 
INTEGER CONVERT INTEGER TO REAL (other type conversions) Special Class I Properties I CONSTANT OPERAND 
EXPECTED RESULT IS AN ADDRESS RESULT IS AN ADDRESS RESULT IS AN ADDRESS I OPERAND I ADDRESS I OPERAND 
 NO OPERAND NO OPERAND EXPECTED OPERAND EXPECTED EXPECTED EXPECTED EXPECTED OPERANDS MUST BE SAME 
TYPE UNARY UNARY UNARY UNARY UNARY 199 Appendix (continued) Typical Operators for an Algebraic Language 
 Primitive Operators (continued) 02p Description Special Class I Properties JMP JUMP I LABEL OPERAND 
EXPECTED JMPT JUMP IF FIRST OPERAND IS TRUE SECOND OPERAND IS LABEL JMPF JUMP IF FIRST OPERAND IS FALSE 
SECOND OPERAND IS LABEL LOC LOCATION (LABEL DEFINITION) I LABEL OPERAND EXPECTED INFN BEGINNING OF INTERNAL 
FUNCTION I CONSTANT OPERAND EXPECTED EXFN BEGINNING OF EXTERNAL (SEPARATELY I CONSTANT OPERAND EXPECTED 
 COMPILED) FUNCTION ENTRY FUNCTION ENTRY I LABEL OPERAND EXPECTED RET FUNCTION RETURN ENDFN PHYSICAL 
END OF FUNCTION NO OPERAND EXPECTED ERETN "ERROR" DETECTED IN FUNCTION -NO OPERAND EXPECTED RETURN TO 
SUPERVISOR PARM STORE FUNCTION PARAMETER IN MEMORY I OPERAND EXPECTED (UPON ENTRY TO FUNCTION) STOP STOP 
EXECUTION (RETURN TO SUPERVISOR) NO OPERAND EXPECTED ENDPG END OF PROGRAM NO OPERAND EXPECTED Macro 
Operators 02 Description Translated Into ADDIO ADD01 EQLIO ADD INTEGER TO REAL ADD REAL TO INTEGER REPLACE 
INTEGER BY REAL CVRI, C VRI, CRIO, ADDO0 ADDO0 EQL (etc., for other operations) mixed-type GE11 NEll 
INTEGER INTEGER INTEGER ° LESS OR EQUAL COMPARISON GREATER OR EQUAL COMPARISON INEQUALITY COMPARISON 
NOT, NOT, NOT, GT11 LT11 EQ11 (etc., for other data types and mixed types Note that only half of the 
six comparisons are primitives, thus improving chances for optimization via common subexpression or excess 
"not" removal. The choice of which three are primitives is based on best object code, and may be reversed 
for different target machines. For machines on which all six are equally efficient, one can define all 
six as primitives and use the "distribution" and "self complementing" properties of the "not" operation 
in the optimizer.) 200  
			
]]
##[[DATA:data/orbz/Analysis of add-with-carry and subtract-with-borrow generators.txt|
 AUTHOR BIOGRAPHIES 
SHU TEZUKA is an advisory researcher at the IBM Tokyo Research Laboratory, Tokyo, Japan. His research 
interests are in random number generation, global opti­mization, and stochastic simulation. He is an 
Editor for the Journal of Information Processing Society of Japan, and a councillor of the Society of 
Information Theory and its Applications. He is also a member of ACM, IEEE, SIAM, and IPSJ. PIERRE L ECUYER 
is a full professor in the de­partment of Informatique et Recherche Op&#38;ationnelle (IRO), at the University 
of Montreal. He received a Ph.D. in operations research in 1983, from the University of Montreal. From 
1983 to 1990, he was a professor in the computer science department, at Laval University, Ste- Foy, Qu6bec. 
His research interests are in Markov renewal decision processes, sensitivity y analysis and optimization 
of discrete-event stochastic systems, random number gen­eration, and discrete-event simulation in general. 
He is an Associate Editor for Management Science and for the ACM Transactions on Modeling and Computer 
Simula­tion. He is also a member of ACM, IEEE, ORSA and Scs. 
			
]]
##[[DATA:data/orbz/An optimal algorithm for the on-line closest-pair problem.txt|
                   
]]
##[[DATA:data/orbz/An IS1 workbench for ACM information system curriculum '81.txt|
                			
]]
##[[DATA:data/orbz/Analysis of Ada for a crucial distributed application.txt|
                			
]]
##[[DATA:data/orbz/Analysis of a simple algorithm for global data flow problems.txt|
  conununica­ 
			
]]
##[[DATA:data/orbz/An overview of the new routing algorithm for the ARPANET.txt|
               
			
]]
##[[DATA:data/orbz/An intelligent framework for mobile devices.txt|
               
			
]]
##[[DATA:data/orbz/An investigation of linguistic features and clustering algorithms for topical document clustering.txt|
               
			
]]
##[[DATA:data/orbz/An upper level computer science curriculum.txt|
                			
]]
##[[DATA:data/orbz/An optimal solution to a wire-routing problem (preliminary version).txt|
       
 176   
			
]]
##[[DATA:data/orbz/An unlevel playing field.txt|
               
			
]]
##[[DATA:data/orbz/Analysis of algorithms, a case study.txt|
APPENDIX A  PROCEDURE BET (A,N) ALGEBRAIC 
ARRAY A; INTEGER N; VALUE A,N #THIS PROCEDURE CALCULATES THE DETERMINANT OF TEE #NTH ORDER MATRIX A 
BY INTEGER PRESERVING DAUSSIAN ELIMINATION INTEGER ARRAY (I:N} REORDER INTEGER I, II,J,E, KK,SIGN=i 
 ALGEBRAIC DIVISOR DO K"I,N; ~tEORDER (K}=K;' DOEND OD K=I,N-I DO I=K,N; IF (A(REORDER(I),K}.NE.O) 
GO TO PIVOT;DOEND RETURN (0) PIVOTIIF (I.EQ.E) KK=REORDER(K) ELSE DO; KK=REORDER(I); REORDER(I)=REORDER(K); 
REORDER (K) =KK; SIGN=-SIGN ; DOEND DB I=K+I,N; II=REORDER(I). DO J=K+i, N IY(R .NE. I)A (II, J)'A(II 
t J)/DIVISOR A(I I ' J) =A(I I, J) *A(KK, K)-A (II, K) *A (KK, j)  DOEND A(II,K)-. NULL. DOEND DIVISOR-A(KR,K) 
 DO J=R,N; A(KK.J)-.NULL. ;DOEND DOEND RETURN (SIGN*A (REORDER(N) , N) ) END APPENDIX B PROCEDURE 
DET(A,N) ALGEBRAIC ARRAY A INTEGER |THIS PROCEDURE CALCULATES THE DETERMINANT OF THE N ORDER #MATRIX 
A BY EXPANDING BY MINORS INTEGER ARRAY (0:N,O:N) BIHOM ALTRAN INTEGER PASCAL ALGEBRAIC ARRAY (0:i,0:PASCAL(N,BINOM)) 
MINOR=0 #PASCAL INITIALIZES THE BINOMIAL COEFFICIENT TABLE, AND # RETURNS AS ITS VALUE N CHOSE N/2 
LESS 1 IJE KEEP TRACK OF OUR MINORS USING THE METHOD OF INDEXING DESCRIBED IN CACM ~ (1960), p. 235 (R.M. 
Brown) INTEGER LuC,ADDR,SIGN,M, ~K,OLD=0,NEW=i INTEGER ARRAY (0:N+I) I=-1 I (0 } =N DO LOC=i,N; MINOR(OLD,LOC-I)=A(I,LOC);DOEND 
DO M=i,N-I # COMPUTE M+i DOEND MINORS FROM M ORDER LOC=O; DO J=I,M; I (J)=M-J; DOEND NEXT MINOR:IF (MINOR(OLD,LOC).NE.0) 
DO; K=N-i; J=0; ADDR=LOC+BINOM(K,M+I); SIGN=I NEXT USE:IF (K.EQ.I(J+I)) DO; J=J+l; SIGN=-SIGN; DOEND 
ELSE MINOR(NEW,ADDR)=MINOR(NEW,ADDR)+SIGN~A (M+i,K+i)_ #NINOR(OLD,LOC) IF (K.GT.0) DO; K=K-i; ADDR=ADDR-BINOM 
(K,M-J); GO TO NEXT USE DOEND # DISPOSE OF U~ECESSARY MINOR AND INCREMENT INDICES MINOR(OLD,DOC)=0 DOEND 
LOC=LOC+I DO J=M,i,-i; I(J)=I(J)+l; IF (I(J).LT.I(J-I)) GO TO NEXTMINOR ELSE I(J)=M-J~ DOEND #ALL M+i 
ORDER MINORS ARE NOWCALCULATED OLD=i-OLD; NEW=I-NEW DOEND RETURN (MINOR (OLD, 0 ) ) END PROCEDURE PASCAL(N,BINOM) 
INTEGER N,BINOM ARRAY BINOM #INITIALIZES TABLE OF BINOMIAL COEFFICIENTS, AND RETURNS THE #MAXIMUM NUMBER 
OF MINORS,LESS 1 INTEGER I,J ALTRAN INTEGER FLOOR=S9IFLR BINOM(0,0)=I DO I=I,N BINOM(I,0)=i; BINOM(I-I,I)=0 
 DO J=l,I BINOM(I,J)=BINOM(I-I,J-i)+BINOM(I-i,J) DOEND DOEND RETURN {BINOM(N,FLGOR(N/2))-I) END 141 
  
			
]]
##[[DATA:data/orbz/An optimal algorithm for hyperplane depth in the plane.txt|
               
			
]]
##[[DATA:data/orbz/Analysing information flows and key mediators through temporal centrality metrics.txt|
                			
]]
##[[DATA:data/orbz/An object-based approach to protocol software implementation.txt|
               
			
]]
##[[DATA:data/orbz/An investigation of a standard simulation-knowledge interface.txt|
 An application of discrete-event simulation to on-line 
control and scheduling in flexible manufacturing. /nternationa/Journa/ of Production Research 27:9, 1603-1623. 
AUTHOR BIOGRAPHIES CAROL S. RUSSELL is a doctoral student in the Computer Science and Engineering Department 
at the University of Louisville. She is currently employed as a lecturer in mathematics at Indiana University 
Southeast, New Albany, Indiana. Adel Said Elmaghraby is an Associate Professor of Engineering Mathematics 
And Computer Science at the University of Louisville. His research areas include Simulation and Artificial 
Intelligence, Robotics and Automation. He is the founding editor of the ACM/lEEE joint Simulation Newsletter 
and chairman of the IEEE Computer Society Technical Committee on Simulation (TCSIM). James H. Graham 
is currently Henry Vogt Professor of Computer Science and Engineering at the University of Louisville. 
His research interests include robotics, artificial intelligence and distributed computing. He is the 
editor of Safety, Reliability and Human Factors in Robotic Svstems, published by Van Nostrand Reinhold 
in 1991. 
			
]]
##[[DATA:data/orbz/An introduction to Extend.txt|

 AUTHOR BIOGRAPHY DAVID KRAHL is the Technical Coordinator for Imagine That! Inc. In this position he 
is responsible for the technical support and blink development for Extend. David received a BS degree 
in Industrial Engineering in 1986 from the Rochester Institute of Technology. Since then, David has performed 
consulting, technical support, and development for a wide range of simulation products. 
			
]]
##[[DATA:data/orbz/An interactive online process for developing and producing policy and procedure documentation.txt|
                  	
]]
##[[DATA:data/orbz/Analysis of a queueing system with impatient customers and working vacations.txt|
                			
]]
##[[DATA:data/orbz/An optimal algorithm for closest pair maintenance (extended abstract).txt|
               
			
]]
##[[DATA:data/fa/Ada tasking for parallel computation.txt|
               
			
]]
##[[DATA:data/fa/A decentralized communication efficient distributed shared memory.txt|
         365   
			
]]
##[[DATA:data/fa/Adaptively sampled distance fields.txt|
            .  
			
]]
##[[DATA:data/fa/A  deductive data model for query expansion.txt|
               
			
]]
##[[DATA:data/fa/&#8220;Put-that-there&#8221;.txt|
             
			
]]
##[[DATA:data/fa/A data communications course for information systems majors.txt|
               
			
]]
##[[DATA:data/fa/Adaptive, multiresolution visualization of large data sets using a distributed memory octree.txt|
            .  
			
]]
##[[DATA:data/fa/Adaptive precision in texture mapping.txt|
  Appendix: derivation of the partitioning 
algorithm The figure below shows the possible spans that may arise in a mapped pixel. When we consider 
edge information some spans become unrealizable; these are marked X. For example, the fifth span on the 
first row must have the given partitioning; if the quadri- lateral had any points inside the shaded triangle 
the endpoints of the span would be cor- ners. Sometimes we need another point of the polygon to decide 
which side of the span to partition. This point is chosen to lie off the line(s) formed by the span, 
if possible, and is marked ~ in this diagram. ...... 2-spans J2 -> N ~.~ ~.:.:~ :...:':..:'... 4-spans 
  
			
]]
##[[DATA:data/fa/3D gadgets for business process visualization&#8212;a case study.txt|
             
 
			
]]
##[[DATA:data/fa/TESLA-based secure routing protocol for wireless sensor networks.txt|
               
			
]]
##[[DATA:data/fa/Anatomy of a real E-commerce system.txt|
               
			
]]
##[[DATA:data/fa/Adaptive protocols for parallel discrete event simulation.txt|
. AUTHOR BIOGRAPHY SAMIR 
R. DAS is an assistant professor in the Division of Computer Science at The University of Texas at San 
Antonio. He received his ME in com­ puter science and engineering from the Indian Insti­ tute of Science, 
Bangalore, in 1988 and PhD in com­ puter science from the Georgia Institute of Technol­ ogy, Atlanta, 
in 1994. His research interests include parallel and distributed systems, performance eval­ uation and 
discrete event simulation. In tlhe recent past he worked on performance aspects of Time Warp based parallel 
simulation systems. 
			
]]
##[[DATA:data/fa/&#8220;Tuning&#8221; an ASM metric.txt|
             
			
]]
##[[DATA:data/fa/A data model and architecture for hypermedia database visualization.txt|
             
 
			
]]
##[[DATA:data/fa/An interactive system for teaching input processes in simulation.txt|
               
			
]]
##[[DATA:data/fa/4th Workshop on Emerging Web Services Technology (WEWST 2009).txt|
          . 2  
			
]]
##[[DATA:data/fa/An experiment on high speed file transfer using satellite links.txt|
      
 257    
			
]]
##[[DATA:data/fa/Adaptive parallax autostereoscopic LED display.txt|
             
 
			
]]
##[[DATA:data/fa/3D digital cleansing using segmentation rays.txt|
. (a) (b) Figure 19: A cross-section of the CT data showing 
colon (a) before segmentation, and (b) after segmentation.  (a) (b) Figure 20: Volume rendered images 
showing (a) presence of .uid before segmentation, and (b) .uid removed after segmentation.  
			
]]
##[[DATA:data/fa/A case study of the static analysis of the quality of novice student programs.txt|
            82 
			
]]
##[[DATA:data/fa/A decomposition solution to the queueing network model of the centralized DBMS with static locking.txt|
               
			
]]
##[[DATA:data/fa/&#8220;One stop shopping&#8221; getting connected at Texas A&amp;M University.txt|
         52  
 
			
]]
##[[DATA:data/fa/14.9 TFLOPS three-dimensional fluid simulation for fusion science with HPF on the Earth Simulator.txt|
               
			
]]
##[[DATA:data/fa/A data-analysis pipeline for large-scale gene expression analysis.txt|
               
			
]]
##[[DATA:data/fa/&#8220;User revealment&#8221;&#8212;a comparison of initial queries and ensuing question development in online searching and in human reference interactions.txt|
             . 
			
]]
##[[DATA:data/fa/A latent semantic retrieval and clustering system for personal photos with sparse speech annotation.txt|
           .   
			
]]
##[[DATA:data/fa/3D Virtual museum for Digital TV.txt|
               
			
]]
##[[DATA:data/fa/50 GFlops molecular dynamics on the Connection Machine 5.txt|
           .   
			
]]
##[[DATA:data/fa/A bisimulation for dynamic sealing.txt|
               
			
]]
##[[DATA:data/fa/3D behavioral model design for simulation and software engineering.txt|
. AUTHOR BIOGRAPHY PAUL FISHWICK is Professor 
of Computer and Information Science and Engineering at the Univer­sity of Florida. He received the PhD 
in Computer and Information Science from the University of Pennsyl­vania in 1986. His research interests 
are in computer simulation, modeling, and animation, and he is a Fel­low of the Society for Computer 
Simulation (SCS). Dr. Fishwick will serve as General Chair for WSC00 in Orlando, Florida. He has authored 
one textbook, co-edited three books and published over 100 techni­cal papers. Permission to make digital 
or hard copies of part of all of this work or personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies bear this 
notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, 
or to redistribute to lists, requires prior specific permission and/or a fee. VRML 2000, Monterey, CA 
USA &#38;#169; ACM 2000 1-58113-211-5/00/02 $5.00
			
]]
##[[DATA:data/fa/An approach to teaching simulation to undergraduates.txt|
               
			
]]
##[[DATA:data/fa/Anthropomorphization of a space with implemented human-like features.txt|
               
			
]]
##[[DATA:data/fa/A data tracking scheme for general networks.txt|
             
 
			
]]
##[[DATA:data/fa/A &#8220;conservative&#8221; approach to parallelizing the Sharks World simulation.txt|
               
			
]]
##[[DATA:data/fa/A data front-end for layered manufacturing.txt|
             
 
			
]]
##[[DATA:data/fa/190 TFlops Astrophysical N-body Simulation on a Cluster of GPUs.txt|
               
			
]]
##[[DATA:data/fa/3D-visualization of tomographic volume data using the generalized voxel-model.txt|
         57    
			
]]
##[[DATA:data/fa/Ada+SQL&#8212;an overview.txt|
       162   
			
]]
##[[DATA:data/fa/Ants in the Pants.txt|
               
			
]]
##[[DATA:data/fa/Approximate linear programs.txt|
            .  
			
]]
##[[DATA:data/fa/&#8220;Data in your face&#8221;.txt|
             . 
			
]]
##[[DATA:data/fa/Accurate modeling of the hybrid hash join algorithm.txt|
               
			
]]
##[[DATA:data/fa/3D-model-based face replacement in video.txt|
                			
]]
##[[DATA:data/fa/A data labelling technique for high-performance protocol processing and its consequences.txt|
  A Implementation Considerations The simple version of chunks that we have discussed in this paper 
are easy to parse because of their fixed-field format. Chunks also simplify distributed protocol processing 
because they can be demultiplexed via the TYPE field and routed to the appropriate processing units. 
Individual processing units are responsible for knowing which chunk (ID, SN, ST) tuple to use. Although 
simple to process, the chunks discussed in this paper do not use bandwidth efficiently. Chunk header 
size may be reduced if we are willing to perform additional pro­cessing andfor take advantage of the 
characteristics of specific underlying networks. The chunk syntax transformations that we discuss in 
this section are invertible, because they allow recovery of the original chunk syntax. Protocols can 
be de­fined to use the simplest form of chunks and chunk syntax transfonnations can be used to increase 
the bandwidth effi­ciency of chunk headers without changing the basic operation of the protocol. In fact, 
chunks headers can have different formats in different parts of the network if desired. one way to reduce 
chunk header size is to avoid including chunk header fields that seldom change. For example, instead 
of carrying an explicit SIZE field, chunk size information can be shared by specification or by signaling. 
With the specification approach, the value of the SIZE field of each chunk TYPE is part of a protocol 
specification. An alternative is to use a signaling system similar to that used for a virtual circui~ 
when a connection is formed, the value of the SIZE field of each chunk TYPE can be carried in the signaling 
message. Another form of signaling system is that used for TCP header compression [JACO 90]; a similar 
system could be adopted for chunks. With any of these approaches, the chunk header need not contain a 
SIZE field. The C.ST bit also could be sent as a signaling message, because it is used only when a connection 
closes. Some chunk header ID fields can be eliminated with the use of implicit ID s. An implicit ID takes 
advantage of the fact that the SN fields of a chunk change in lock-step. For example, consider the C.SN 
(connection SN) and T.SN (TPDU SN) fields of a TPDU. The value of (C.SN -T.SN) is identical for each 
chunk of a TPDU, and this difference can be used in place of an explicit T.ID (TPDU ID) field. Figure 
7 shows an example of how an implicit ID is derived. C.ID AA AA AA AA C.SN 35 3637 38 394041 42 T.SN 
50123450 T.ID = C.SN -T.SN 301363636363636i............. . . ~42 T.ST 10000010 DATA TPDU DATA Figure 
7: How an implicit T.ID is derived. Another way to reduce chunk header size is to minimize the number 
of different frames used by different protocol functions. Because each different frame requires a separate 
(ID, SN, ST) tuple, the fewer different frames, the smaller the chunk header. Also, each time any frame 
boundary occurs, a new chunk header is needed. Consequently, aligning frame boundaries also reduces the 
chunk header overhead. Packets are utilized more efficiently if multiple chunks can be carried in a packet. 
Previously we discussed packets that carry multiple chunks from a single connection, and this idea can 
be extended to packets that carry chunks from multiple connections. Data, signaling information, and 
acknowledg­ments can be combined in any combination. Notice that this allows an error detection system 
that utilizes chunks to achieve the efficiency associated with the piggybacking of acknowledgments without 
requiring the explicit design of piggybacking into the error control protocol. Thus, chunks provide more 
modularity in protocol design by allowing some efficiency considerations to be separated from other aspects 
of protocol design. In some cases, the chunks headers within a packet maybe related, if so, some chunk 
fields may be implicit rather than explicit. Forexample, because thechunk following the last TPDU DATA 
chunk is always a TPDU ED chunk, the ED chunk does not require a chunk header because its TYPE is known, 
and its C.ID and T.ID fields can be derived from the DATA chunk header. In general, we can use positional 
in­formation and Huffman encoding to reduce the chunk header overhead within a packet. On a network that 
has low loss and maintains packet or­der, we need not send SN S in each chunk header. SN S can be regenerated 
at the receiver with a counter that is incre­mented each time a data element passes. However, because 
loss and misordenng may occur, the counter at the receiver may sometimes lose synchronization with the 
transmitter. To recover synchronization, the transmitter must send SN infor­mation to the receiver occasionally, 
such as at the beginning of each PDU. During the time that the receiver is out of synchronization, the 
error detection system will detect the incorrect sequence numbers and allow any incorrect chunks to be 
discarded. Chunks are a dynamic way of mapping PDU information to packets. If we make the PDU small enough 
to fit into a packet, then the same chunks will appear in each packet. If this is true, then a protocol 
can specify a static packet format rather than the chunk format and eliminate the complexity of dynamically 
fitting chunks into packets. Thus, the design of conventional packet header formats can be considered 
a special case of chunks. B Comparison of Chunks with Other Protocols The syntax of chunks is similar 
to the syntax of other proto­cols, although chunks have a cleaner, more general design. Chunk headers 
provide explicit framing and type informa­tion for all PDU types in a communication system. Existing 
protocols provide implicit or explicit framing information for one or more PDU types. The equivalent 
of the chunk SIZE field is implicit for all existing protocols. Carrying some framing infortnation (ID, 
SN, ST) implicitly is common for protocols designed to operate on non-misordering channels. The type 
5 ATM Adaptation Layer (AAL) [LYON 91] provides a single bit of higher-layer framing information in the 
ATM cell header that is equivalent to the T.ST bit in chunks. The error detection code field is found 
by its position in the frame. No explicit ID, SN, or TYPE fields are needed because because ATM links 
do not misorder. Because no SN is used, an SN of zero cannot be used to indicate the beginning of a frame. 
A cell is considered to contain the beginning of a frame if the previous cell was the end of a frame. 
LEN information is explicit. Thetype4 AALprotocol uses an C.ID (MID), a4-bit C.SN, and framing information 
denoting the beginning, continua­tion, or end of message (BOM, COM, EOM) [DEPR 91]. EOM is equivalent 
to X.ST, and with BOM, the X.ID and X.SN can be derived from the C.SN. No C.ST is used. LEN information 
is explicit. The HDLC link-layer protoco114 provides three levels of framing. The basic HDLC frame is 
delimited by flags, and the error detection code is found by its position in the framq thus TYPE, T.ID, 
T.SN, and T.ST are implicit. HDLC uses a C.ID (address field), C.SN (SN field), and C.ST is indicated 
by a HDLC disconnect. The P/F bit can be used as an X.ST bit, but the X.ID and X.SN are implicit and 
derived from the C.SN and X.ST bit. LEN also is implicit. The URP protocol [FRAS 89] provides three levels 
of framing. URP uses a C.SN, but the C.ID is implicit because URP connections are mapped one-to-one onto 
network con­nections, and the C.ST is indicated by connection tear-down. URP delimits messages with a 
BOT marker (similar to X. ST) and delimits blocks (TPDU S) with a BOT marker or BOTM marker (similar 
to T.ST). The error detection code is found by its position in the framq thus TYPE, T.ID, and T.SN are 
implicit. The X.ID and X.SN are implicit and derived from the C.SN and X.ST bit. LEN also is implicit. 
Some protocols are designed to work with misordeting channels, and provide explicit framing information. 
IP [POST 81] uses provides T.ID (identification field), T.SN (fragment offset field), and T.ST (logical 
inverse of the more fragments bit) fields. The VMTP protocol [CHER 86] pro­vides error detection per 
packet, so T.ID, T.SN, T. ST, and TYPE information is implicit. VMTP also provides an X.ID (transaction 
identifier), a X.SN (segOffset), and X.ST bit (End-of-Message). LEN is implicit. Axon [STER 90] provides 
several levels of framing, Each level of framing has an SN (index) and ST bit (limit). How­ever, not 
all levels of framing have an ID, which means that some frames are assumed to be hierarchically nested. 
Chunks allow the use of completely independent frames at all levels. Axon headers also contain some explicit 
type information, but some PDU pieces, such as the error detection checksum, have their functionality 
indicated by position within the PDU, rather than explicit type information. LEN is implicit. The Axon 
framing structure provides enough information for placement of disordered data into application memory 
space. The only data processing that occurs is the compu­tation of an error detection checksum for each 
packet. The chunks framing structure is designed not only for data place­ment, but also for data processing 
functions that are indepen­dent of data framing, such as error detection and encryption15. Some protocols 
can accept disordering for some framing levels, but require that data be reordered for other framing 
levels. The DeIta-T protocol [WATS 83] has a C.ID and C.SN, with the C.SN large enough to allow reordering 
of l tMaY ~~er liti-layer protocols we SimikiI to HDLC (SDLC, Ccp, LAPB, LAPD, etc.). 15me abili~ to 
processdisordered data depends not ordy on what fi~ing information is available, but rdso on the use 
of functions that can accept disordered data [FELD 92]. disordered data. Within the data stream, Delta-T 
provides symbols that mark the beginning and end of a higher-level frame (the B and E symbols). The E 
symbol is equivalent to the X. ST, and the X.ID and X.SN can be derived from the 1? symbol and C.SN. 
The XTP protocol [XTP 90] is similar with its use of BTAG and ETAG fields. TYPE, T.ID, T.SN, and T.ST 
information is implicit for these protocols. Generally, framing information is provided in two ways: 
header fields, or flags/symbols in the data stream. The ad­vantage of using header fields is that we 
need not parse the data streatyt for flags. The advantage of flags is that multiple frames can be delimited 
within a single packet. Chunks pro­vide the best of both worlds because multiple chunks, each of which 
delimits a frame, can be placed in a single packet. Once the chunk headers have been found, we do not 
have to parse chunk data fields for flags. Fragmentation Algorithm Assume that we have a chunk that 
we wish to fragment into two chunks, chunks and chunk.b. The algorithm below can be repeated until each 
chunk carries only a single unit of data. Ifi chunk.len >1 Then: chunk_a.type i--chunk.type chunk_a.size 
i-chunk.size chunkalen +-newlen chunks.c.id h chunk.c.id chunkat.id + chunk.t.id chunk-a.x.id G chunk.x.id 
chunk-a.c.sn b chunk.c.sn chunkat.sn -chunk.t.sn chunk_a.x.sn * chunk.x.sn chunks.c.st + O chunkat.st 
e O chunks.x.st + O FOH O~ i < new-len chunks.data[i] +-chunk.data[i] chunk-b.type -chunk.type chunk-b.size 
e chunk.size chunk-b.len +-chunk.len -new_len chunk_b.c.id e chunk.c.id chunk-b.t.id e--chunk.t.id chunk_b.x.id 
e chunk.x.id chunk-b.c.sn e chunk.c.sn + newlen chunk_b.t.sn +--chunk.t.sn + new_len chunk-b.x.sn e chunk.x.sn 
+ newlen chunk-b.c.st &#38; chunk.c.st chunk-b.t.st ~ chunk.t.st chunk.b.x.st -chunk.x.st Fo~ new_len 
s i < chunk.len chunk-b.data[i] +-chunk. data[i -newlen]  D Reassembly Algorithm Assume that we have 
two chunks, chunk_a and chunk.b, that we wish to reassemble into chunk-c. The algorithm below can be 
repeated as long as eligible chunks exist. It , (chunks.type = chunk_b.type) A (chunks.size = chunk_b.size) 
A (chunks.c.id = chunk_b.c.id) A (chunks.t.id = chunk_b.t.id) A (chunks.x.id = chunk_b.x.id) A (chunks.c.sn 
+ chunks.len = chunk-b.c.sn) A (chunks.t.sn + chunks.len = chunk-b.t.sn) A (chunks.x.sn + chunks.len 
= chunk-b.x.sn) Then: chunk.c.type +-chunks.type chunk-c.size e chunk_a.size chunk_c.len +--chunk-a.len 
+ chunk.b.len chunk-c.c.id G chtmka.c.id chunk-c.t.id -chunka,t,id chunk-c.x.id k chunkd.x.id chunk-c.c.sn 
b chunks.c.sn chunk-c.t.sn ~ chunk-a.t.sn chunk-c.x.sn e chunks.x.sn chunk-c.c.st ~ chunk_b.c.st chunk-c.t.st 
+ chunk-b.t,st chunk-c.x.st +-chunk_b.x.st FOE O ~ i < chunks.len chunk_c.data[i] -chunks.data[i] Fo~ 
chunks.len ~ i < chunk-b.len chunk-. c.data[i] -chunk-b. data[i -chunks.len] 
			
]]
##[[DATA:data/fa/A DBMS for large design automation databases.txt|
               
			
]]
##[[DATA:data/fa/Active network vision and reality.txt|
               
			
]]
##[[DATA:data/fa/3D reconstruction of planetary nebulae using hybrid models.txt|
             
 
			
]]
##[[DATA:data/fa/16.4-Tflops direct numerical simulation of turbulence by a Fourier spectral method on the Earth Simulator.txt|
Figure 4: Intense-vorticity isosurfaces showing the region where |.| 
>.¯+ 4s; . is the vorticity, and .¯and s are the mean and standard deviation of |.|, respectively. The 
size of the display domain is (59842 × 1496)., periodic in the vertical and horizontal directions. . 
is the Kolmogorov length scale and R. = 732 (see Table 3). Figure 5: A closer view of the inner square 
region of Fig. 4; the size of the display domain is (29922 × 1496).. Figure 6: The same isosurfaces 
as in Fig. 4; a closer view of the inner-square region of Fig. 5. The size of the display domain is (14962 
× 1496).. Figure 7: The same isosurfaces as in Fig. 4; a closer view of the inner-square region of Fig. 
6. The size of the display domain is (7482 × 1496).. 
			
]]
##[[DATA:data/fa/&#8220;Alfonse, give me a call!&#8221;.txt|
           .   
			
]]
##[[DATA:data/fa/Algebraic constructions for algorithms (Extended Abstract).txt|
               
			
]]
##[[DATA:data/fa/Alfonse, Your Java Is Ready.txt|
             . 
			
]]
##[[DATA:data/fa/Database.txt|
                   
]]
##[[DATA:data/fa/An implementation-independent approach to teaching recursion.txt|
               
			
]]
##[[DATA:data/fa/A comparison of three methods of face recognition for home photos.txt|
               
			
]]
##[[DATA:data/fa/3-D graphic display of discrete spatial data by prism maps.txt|
               			
]]
##[[DATA:data/fa/A compression algorithm for DNA sequences and its applications in genome comparison.txt|
                			
]]
##[[DATA:data/fa/Accurate skin deformation model of forearm using MRI.txt|
               
			
]]
##[[DATA:data/fa/An overview of post information warfare data recovery.txt|
        . 254  
			
]]
##[[DATA:data/fa/An introduction to the simulation data language.txt|
             . 
			
]]
##[[DATA:data/fa/A case study of file system workload in a large-scale distributed environment.txt|
        . 277  
			
]]
##[[DATA:data/fa/A linkage analyzer for process management.txt|
         . 221 
			
]]
##[[DATA:data/fa/Adaptive storage control for page frame supply in large scale computer systems.txt|
               
			
]]
##[[DATA:data/fa/A comparative study of the NAS MG benchmark across parallel languages and architectures.txt|
. A 
Compiler Speci.cations The following is a summary of the compilation process used in these experiments. 
The compiler, version number, and command-line arguments used are given for each language and platform. 
In addition, the communication mechanism used at runtime is noted. F90+MPI GNU g77 0.5.25 O3 MPI (MPICH 
1.2) HPF PGI pghpf 3.1-2 O3 Mautopar Moverlap=size:1 Mmpi MPI (MPICH 1.2) ZPL U. Wash. zc GNU gcc 1.16a 
2.95.2 O3 MPI (MPICH 1.2) IBM SP compilers F90+MPI IBM mpxlf 2.4 O3 MPI (IBM) HPF PGI pghpf 2.4-4 
 O3 Mautopar Moverlap=size:1 Mmpi MPI (IBM) ZPL U. Wash. zc IBM mpcc 1.16a 2.4 O3 MPI (IBM) Cray T3E 
compilers F90+MPI Cray f90 3.3.0.0 O3 MPI (Cray) CAF Cray f90 3.3.0.0 O3 X 1 Z nprocs E-registers HPF 
PGI pghpf 3.0-1 O3 Mautopar Moverlap=size:1 Msmp SHMEM ZPL U. Wash. zc Cray cc 1.16a 6.3.0.0 O3 SHMEM 
 Sun Enterprise 5500 compilers F90+MPI WorkShop f90 5.0 fast MPI (Sun) SAC U. Kiel sac2c SUNW cc 0.90alpha 
5.0 O3 v1 noLIR noTSI maxlur 3 mt fast shared memory ZPL U. Wash. zc SUNW cc 1.16a 5.0 fast MPI (Sun) 
 SGI Origin compilers F90+MPI MIPSpro 7 f90 7.3.1.1m O3 MPI (SGI) HPF PGI pghpf 2.4-4 O3 Mautopar Moverlap=size:1 
Mmpi5 MPI (SGI) ZPL U. Wash. zc MIPSpro cc 1.16a 7.3.1.1m O3 MPI (SGI)  B Experimental Timings The 
following tables contain the best observed times for each con.guration and were used to compute the speedup 
graphs of Section 5. Linux cluster (ethernet) Class B processors 1 2 4 8 16 32 64 128 F90+MPI 362.60 
194.51 110.41 52.51 30.39 17.55 8.29 6.21 ZPL 309.43 175.12 97.83 55.14 35.24 21.30 11.73 11.88 HPF 
. 896.02 964.65 618.68 362.18 223.62 146.13 115.47 Linux cluster (ethernet) Class C processors 1 2 
4 8 16 32 64 128 F90+MPI . . 828.18 390.26 215.02 121.04 56.51 34.66 ZPL . . 725.29 384.99 214.52 
117.45 62.82 44.49 HPF . . . . . . . . 5Although Msmp would be more appropriate for the Origin, 
it was not supported with our installation. Linux cluster (myrinet) Class B processors 1 2 4 8 16 32 
64 128 F90+MPI 359.33 181.84 99.13 44.02 23.59 13.21 5.82 3.34 ZPL 308.51 176.92 108.82 42.57 21.96 11.05 
6.10 3.35 HPF . 616.38 516.15 314.54 177.57 104.10 62.95 47.15 Linux cluster (myrinet) Class C processors 
1 2 4 8 16 32 64 128 F90+MPI . . 775.83 356.45 189.27 104.95 45.93 24.99 ZPL . . 827.56 338.99 
172.15 86.87 44.53 23.27 HPF . . . . . . . . IBM SP Class B processors 1 2 4 8 16 32 64 96 
F90+MPI . 83.48 48.86 23.19 12.55 7.83 3.80 . ZPL . 82.27 45.12 28.75 14.41 7.71 4.94 3.98 HPF 
. . . . . . 42.17 31.10 IBM SP Class C processors 1 2 4 8 16 32 64 96 F90+MPI . . . . 96.35 
54.65 25.40 . ZPL . . . . 104.01 52.08 29.96 21.95 HPF . . . . . . . . Cray T3E Class 
B processors 1 2 4 8 16 32 64 128 256 CAF . 117.38 58.86 28.98 14.98 7.87 4.22 2.31 1.15 F90+MPI . 
 127.22 68.94 31.47 17.52 10.49 4.77 2.92 1.96 ZPL . 127.79 59.08 30.39 15.55 7.88 4.51 2.63 1.63 HPF 
 . . . . . . 80.16 . 56.35 Cray T3E Class C processors 1 2 4 8 16 32 64 128 256 CAF . . 
. . 118.42 59.89 30.23 15.91 7.91 F90+MPI . . . . 128.59 70.89 32.14 18.12 10.92 ZPL . . . 
 . 112.63 57.85 31.24 15.30 8.24 HPF . . . . . . . . . SGI Origin Class B processors 1 2 
4 8 16 32 64 128 256 F90+MPI 202.13 130.04 61.88 32.84 16.93 8.46 3.98 2.65 264.17 ZPL 244.88 147.27 
72.37 39.06 19.37 9.66 5.46 3.10 310.15 HPF 556.13 488.93 341.50 183.94 94.67 52.80 29.33 24.96 . SGI 
Origin Class C processors 1 2 4 8 16 32 64 128 256 F90+MPI . 1534.95 853.55 380.58 135.18 64.36 33.62 
22.51 340.35 ZPL . 2004.99 1026.91 441.74 160.35 75.09 41.31 26.47 445.16 HPF . . . 1949.62 1006.18 
 . . . . Sun Enterprise Class A processors 1 2 4 8 14 F90+MPI 73.49 39.36 19.87 11.34 . ZPL 61.29 
35.37 17.59 12.60 12.15 SAC 92.56 49.27 27.07 17.27 15.18 Sun Enterprise Class B processors 1 2 4 8 
14 F90+MPI 341.77 172.33 103.78 59.13 . ZPL 277.53 162.00 80.02 57.87 55.83 SAC 434.02 230.80 126.08 
79.49 68.76  
			
]]
##[[DATA:data/fa/3D widgets for exploratory scientific visualization.txt|
             
			
]]
##[[DATA:data/fa/A Bayesian batch means methodology for analysis of simulation output.txt|
 
[EEE PETER W. GLYNN Peter W. Glynn received his Ph.D. in Operations Research from Stanford University 
in 1982, and is currently an Assistant Professor of Industrial Engineering at the University of Wisconsin-Madison. 
He is a member of the Operations Research Society of America, the Institute of Mathematical Statistics, 
and the Statistical Society of Canada. Professor Peter W. Glynn Dept. of Industrial Engineering University 
of Wisconsin-Madison 1513 University Avenue, Rm 385 Madison, WI 53706  
			
]]
##[[DATA:data/fa/Adaptive set intersections, unions, and differences.txt|
               
			
]]
##[[DATA:data/fa/4DIS.txt|
                			
]]
##[[DATA:data/fa/50,000 users on an Oracle8 universal server database.txt|
           530 
			
]]
##[[DATA:data/fa/A cell probe lower bound for dynamic nearest-neighbor searching.txt|
               
			
]]
##[[DATA:data/fa/Algorithms for compile-time memory optimization.txt|
                			
]]
##[[DATA:data/fa/A composite modelling approach to software performance measurement.txt|
        . 276  
			
]]
##[[DATA:data/fa/3-dimensional pliable surfaces.txt|
           .   
			
]]
##[[DATA:data/fa/A correspondence matching technique of dense checkerboard pattern for one-shot geometry acquisition.txt|
Figure 6: Reconstructing the geometry of discontinuous surfaces: a) capture scenario, 
b) camera image, and c) reconstructed geom­etry.  
			
]]
##[[DATA:data/fa/A fast Las Vegas algorithm for triangulating a simple polygon.txt|
. I I I I (b) I I i I (b) i I I (ol I I(a) I ---'-'I (b) 
I I (a) I I (d) I (d) (b) (b) (b) (b) Figure 1. Five line segments and their vertical visibility decomposition. 
I ~ I I 61 I I ~1 I I _ I  f 114""-.--8T"'-.. ! I 31K"- i °~l I I I I I I I Figure 2. A simple curve 
through the line segments of Figure 1. The endpoints of the origi- nal segments are (1,37), (6,9), (13,16), 
(19,22), and (30,31). In a polygon the curves would be polygonal chains. 3:3 32 18 28 29 3 q¢~/~ 8 19~ 
23 22 Figure 3. Representative family trees for the curve shown in Figure 2. The tree on the left is 
the inner family tree for the region whose corners are 7, 8, 15, and 14. The tree on the right is the 
inner family tree for the region of type (c) in Figure 1. 22 
			
]]
##[[DATA:data/fa/A new solution to the critical section problem.txt|
         -88 - 
			
]]
##[[DATA:data/fa/A &#8220;curriculum-cycle&#8221; environment for teaching programming.txt|
 dents using OOT as part of a computer summer camp at our uuiversit y. 
			
]]
##[[DATA:data/fa/Adding some spice to CS1 curricula.txt|
  s The reduced enrolments in 1996 are proportionate 
to an overall decline in the number of university registrants. 208 
			
]]
##[[DATA:data/fa/A parallel branch-and-bound algorithm for MIN-based multiprocessors.txt|
         . 223 
			
]]
##[[DATA:data/fa/A database driven server for an Internet based plant layout presentation system.txt|
               
			
]]
##[[DATA:data/fa/A debugging calculus for mobile ambients.txt|
               
			
]]
##[[DATA:data/fa/Adapation in a ubiquitous computing management architecture.txt|
        567    
			
]]
##[[DATA:data/fa/A first course on files.txt|
             
 
			
]]
##[[DATA:data/fa/A multilevel approach to undergraduate software engineering education.txt|
               
			
]]
##[[DATA:data/fa/&#8220;Alfonse, you have a message!&#8221;.txt|
               
			
]]
##[[DATA:data/fa/Adding rule-based reasoning to a demonstrational interface builder.txt|
               
			
]]
##[[DATA:data/fa/An operating systems programming laboratory course.txt|
               
			
]]
##[[DATA:data/fa/A comparison of classifiers and document representations for the routing problem.txt|
            .  
			
]]
##[[DATA:data/fa/Adaptive selectivity estimation using query feedback.txt|
 
 Appendix Specifications of Update Workloads In our experiments, an update query is simulated by its 
effect on the value distribution of the attribute of interest. An update query is specified by five parameters: 
(i, fV, D, [rein, rnaz], problNs), where i means this update takes place immediately before the ith 
query in the query stream. N is the number of tuples updated (either inserted or deleted). Each tuple 
s attribute value is randomly generted from range [rein, maz] according to a distribution D. A tuple 
is inserted with probability problNs or deleted with probability y 1 problNs. Three different update 
workloads are tested, each of which is interleaved with another 40 random selection queries. The three 
update workloads are specified in the following, with i7(z, y) denotes the uniform distribution among 
range [z, y], iV(~, a) the normal distribution with mean p and standard deviation u. LOAD1: (11, 4500, 
U( 50, 250), [ 50, 250], 1.0) LOAD2: (11, 2250, U( 150, 550), [ 150, 550], 0.75), (17, 2250, U(-150, 
550), [-150, 550], 0.75), (23, 2250, U(-150, 550), [-150, 550], 0.75), (29, 2250, U(-150, 550), [-150, 
550], 0.75). LOAD3: (11, 3000, N( 63, 50), [ 150,25],0.9), (17,1500, N(112,40), [25,200],0.1), (23, 2250, 
N(290, 60), [200, 375], 1.0), (29, 2250, N(455, 50), [375, 550], 0.4). (a) approximating distribution 
curves 35 30 ~25 * . :20 g,5 : 10 5 0 -100 0 100 200 300 400 Figure (a) approximating distribution curves 
70 60 ,: .... ... .,. 50 ­$ ,. z ,? Ob o 200 400 600 800 arlibute values Figure 3: (a) approximating 
d!strbution curves atbibute values Figure [a) atmroximatina,,, distribution curvas 60 50 - (b) selectivity 
e$timstion errors [c o 10 20304050 queries 100, , I I   ~ :k 500 o 10 20304050 queries 2: Normal 
Distribution (b) selecwty aatimstion errors 2030 4050 queries IL10 150 T ~ ~ 100 ? G .: 50­g PY 1000o 
1020304050 Chi-Square Distribution fb) selactivitv stimation errors 1P o 1020304050 queries 4: the F 
Distribution (b) selectivity estimation errors 20, . .. .. [L o 1020304050 queries Figure 5: a hi-modal 
Distribution (a) approximating distribution curves 3 ~ z * al 3~~ % m I z~ i 4000 ­ .. E 2 c 3000 -.,. 
... ... . . .. ~ 2000 ­ . ... 1000;. J o~ 1950 1955 1960 1965 1970 1975 attribute values (monthfyear) 
 Figure 6: Adaptation in LowQL (a) approximating distribution curves 3000 g ,-1. 0 2500-k al $J = 032000 
-; 0. ~ u! ~ ~ 1500 -. g .. .. E 40 3 .. :. ~ . ~ 1!46 1950 1952 1954 1956 1958 1960 attribute values 
(monthfyear) Figure 7: Adaptation in MedQL (a) approximating distribution cuwes 900 800 -. 700­ 500 
... . 400-8 . 300 ... . . . 200­ ;~1 1949 1950 1951 1952 1953 attribute values (month/year) Figure 8: 
Adaptation in HighQL (b) selectivity estimation errors queries (Low queries Query Locality) (b) selectivity 
estimation errors * (Medial queries ., f 35 Query Locality) (b) selectivity estimation ,, 40 errors 45 
, 50 queries (High Query Locality) 172 (1) afkr (a) Animation of DWibution Curves 9 queries, O update 
(2) aner 13 warms, 1 ur3date :m (3) after 20 queries, 1 update (4) aiter 35 queries, 1 update ~ ~ Figure 
9: (a) Animation of Distribution Curves (1) aner 9 qwmes, 0 update (2)attQr 13querles, ~ (3) atter 19 
queries, 2 updates (4) after 35 queries, 63 Adaptation l update 4 updates 1 in Update 30 q @ o Y [L0 
5 150, LOAD1 (b) Selectivity ,Wx 10 15 queries Estimation Errors ,x &#38;*+ %:;3.%: :.%..Xx 20 25 30 
S5 queries I ) I ~ (1) after Figure 10: Adaptation (a) Animation of Distribution Curves 9 queries, O 
update (2) after 13 queries, 1 update 60, 1 in 50, Update LOAD2 (b) Selectivity Estimation Errors ~~ 
(3) after 24 queries, 3 updates ~~ (4) after 35 queries, 4 update$ queries Figure 11: Adaptation in Update 
LOAD3  
			
]]
##[[DATA:data/fa/3D geometric simulation of MEMS fabrication processes.txt|
               
			
]]
##[[DATA:data/fa/3D Galatea.txt|
               
			
]]
##[[DATA:data/fa/Adding inheritance to Ada.txt|
               
			
]]
##[[DATA:data/fa/3D agent-based virtual communities.txt|
          .  
			
]]
##[[DATA:data/fa/An animation of a fixed-radius all-nearest-neighbors algorithm.txt|
          387  
			
]]
##[[DATA:data/fa/4-8 factorization of quadrilateral subdivision.txt|
          304  
			
]]
##[[DATA:data/fa/A decomposition method for the analysis and design of finite state protocols.txt|
          176  
			
]]
##[[DATA:data/fa/A new infeasible interior-point algorithm for linear programming.txt|
       , 1989. 
			
]]
##[[DATA:data/fa/A JAD experience (abstract).txt|
               
			
]]
##[[DATA:data/fa/A data management system for a small computer.txt|
               
			
]]
##[[DATA:data/fa/A core calculus of dependency.txt|

 A Translations into DCC The translations of the various source calculi into DCC are given in Tables 
7-12 below. To make the translations more readable, most of the cases of sums and products are left out. 
We also use the DCC combinator and abbreviation  dot : TK(TK (t)) + Tati dot =hr: T,(T~(t)).bindy=xinbindz=yin(~,u~ 
z) (seqbindf =eine ) = (seqv=e inbindf =v ine ) where v is a fresh variable. Most of the translations 
also re-quire a coercion combinator for interpreting subsumption, but these combinators-and a few others-need 
to be defined specially for each system. These definitions are found in each translation. Table 7: Translation 
of the Call-by-name Functional SLam Calculus into DCC (excerpts). coerw, 1s2 : s; --f s; = k~:T~(unit~).bindy=xin(~~y) 
 COerce(,it,k),(unit,~)  = kc: T,(s~~uf).bindy=nin~lc (~z:~~.coerce~,,,,(y(coerce,~,,.~,z))) =oe~ce(.s2+U, 
,w),(s,+U2,~) = hx: T,(s; xuT).bindy=xin~~~~ (coerce,Y,,s2(proj1 y),coerce,,,,,(proj2y)) coerce(.~,,,,,K),(.~,xu,,~) 
 = hr:T,((s~+u~)~).bindy=.~in~~~ (seqz=yin casezcoeYCe(,~,+u,,IC),(SZ+UZ,K ) of injI(w). lift (injl (coerce,T,,,T, 
w)) 1inj2(w).lift (inj2 (coerce,,,,, w))) w4 [Unit] rk(),:(unit,K)* r* I- llK(lift()):TK(unitJ Tl-e:sl 
r* t- e* : S; SliS2 kbl rkees2 * r* t- (coerce,y,,,T, e*) : s; r*,f:s*  r,f :ske:s be*:s* [JW rk(pf:s.e):s 
* r*l-(pf:s*.e*):s* be*:~; v-4 rk(h:sl.e)K:(~l * r* k (qK (LX : s;. e*)) : T,(s; -+ s;) r,x: sl I-e : 
~2 r*,x:s; -+sz,K) l-t-e: (s, --+s~,K) rFel :sl r* k e* : TK(s; --t s;) r* k e; :s; LAPPI rk(eel):s20K 
* r*t-dot(bindf=e*in(qr(fe;))):(s2*K)* jisfresh rt-ei:Si r* I-e: : ST [Pair] rk(el,e2)K:(sl Xs2,K) * 
r* +(r(,(e;,e$)): G(sT Xsb) rte:(Sl Xs2,K) r* l-e* : T,(s; xs;) [WI rk(projie):si*K * I-'* (bindx= e* 
in(TIK (projix))) :(SiOK)* k dot xis fresh TFe:si r* t e* :s; [WI rt(injie)h-:(sl fs2,K) * (qK(lift (injie*))) 
+$)I) r* I- : T,((s; r* k e* : T,( (s; + s;)~) r*,x:sfke;:s* r*t-dot( bindy=e* T+~:(s,+s~,K) r,x:siFei:s 
in (TIK( seqv=yin y fresh   [Case] =+ casev of injI(x).e; 1inj2(x). ez))) : (S*K)* rE(caseeofinjI(x).el 
Iinj2(x).e2):s*K rt-e:s r* f e* :s* [Protect] rt-(protect,e):s*K * r*I-ddot(qre*):(s*K)* Table 8: Translation 
of the Slicing Calculus into DCC (excerpts). W-1 r,x:s,rfkx:s+r*,x:s*,(r')*k~:~* [Unit] rt On : (unit,{n}) 
=+ r*I-r({,)(lift0) :T{,)(unit~) [km1 r,x:sI k e: g r t- (Ix:s~.~),: (s, -+s2,{n}) * r* t- (q{,,) r*,X:Sfke*:s; 
(Lx: sT.e*)) : T{,,)(si -+ ss) Tke: (s, +s~,K) rFel:sl r* t-e* : TK(s; -+ s;) r* t-e; :s; VPPI rt(eel):s20~ 
* r* I- dot (bindf= e* in (Q (fer))) : (s2oK)* fis fresh Table 9: Translation of the Binding-time Calculus 
into DCC (excerpts). r,x:s,r~x:sJr*,x:s*,(r )*~.:s* WI [Unit] rt ()p: (unit,@ *r* I- (qp (lift 0)) : 
Tj(unitl) r-,x: s1 k e : ~2 r*,x:s;t-e*:~;km1 rk(hr:sl.e)p:(s~ -+s2,P) * r* I- (Q (IX :s;.e*)) :Tp(s; 
-+ sz) rte: (~1 +s2,/3) r t- el : s1 j r* k e* : Tg(s; -+ s;) r* ~ T ; f is fresh L%wl rk(eel):s2 
Table 10: Translation true = (if e thene, elsfz; = = proj, = c0ercet.p = c0erceL.H= c~~erceHcmd.Lcmd 
= r*l-(bindf=e*in(fe;)):s; of the Smith-Volpano Calculus into DCC. (inj 1 0) (inj;! 0) (caseeof injl(x).el 
 1inj*(n).ez),n is fresh theprojection statetothe x oftbe variable hf..f , e = L, H, (L cmd),or (H cmd) 
hf.hs:S"f,(rH)XS"L(rL).~H (,fS) hf'.h~:SVff(r~)xSV~(T~).lift (,f's,proj2s)  W4 rH;r~tX:~=+(hO.proj,O):sv(rH,rL,z) 
ifxErT [ TrueH] rH;rL k true :H * (ho.qH true) :sv(rH,rL,H) [FalseHj rH;rL t false:H + (ho.T)H,fdse) 
:sv(rH,rL,H) [True-L] rH;rLI-true: L* (hatrue) :sv(rH,rL,q [FalseL] r,&#38;rL.t false : L + (ho.,fahe) 
: s"(rH,rL,L) P@Hl rH;rLk skip:H cmd+(ha,proj,O):sv(r,,r,,H cmd) [Sk&#38;L] rH;rLbskip:Lcmd+(ho.lift 
CJ):SV(TH,TL,LC~~) WI rH; rL t e : .w .w ISI rH;rLbe:21 * e* : sv(rH,rL,SO) (COerCeSople*) : s"(rH,rL,SI) 
[Assigns] r&#38;rLke: H rH =(~l,...r&#38;) rH;rL!F((xi:=e):Hcmd j e*:sv(rH,rL,H) (h~.(proj,(proj, @,...,(e* 
(~),...,)):Sv(r~,r~,Hcmd) [AssignL] rH;rLte:L rL=h,...,4 rH;rLl-(q:=e):Lcmd * e : sv(rH,rL,L) (ho.lift 
((proj1Q),(proj,(proj*(T),...,(e*cT),...,))):sv(rH,rL,Lcmd) rH;rLkCI:Hcmd rHH;rLb-c2:Hcmd j CT:SV(rH,rL,Hcmd) 
c;:SV(rH,rL,Hcmd) PeNI rH;rL k (cI;c2): H cmd (h0.c;(cl Q,proj2O)):SV(rH,rL,Hcmd) rH;rL+cC1:Lcmd rH;rLkC2:Lcmd 
j Ci :S"(rH,rL,L cmd) C;:s"(rH,rL,L cmd) rH;rLk(Cl;C2):Lcmd (ho.seqal =(Ci6) in(c~a~)):S"(TH,TL,Lcmd) 
WI r&#38;rLke: H rH;rL k Ci :H cmd rH;rLtifethenclelsec;?:H cmd * e*:SV(rH,rL,H) (lcr.bindv= (e* O) c; 
:SV(l-H,r-L,HCrnd) v is fresh inifvthen(Ci cr)else(c;o)):SV(rH,rL,Hcmd) WI rH;rLte:L rH;rLtci:Hcmd rH;rLt-ifethenclelsec2:Lcmd 
e*:sv(rH,rL,L) of:sv(rH,rL,Lcmd) * (ho.if (e* CJ) then{ci o)else (cz o)) :SV(r~,rL,Lcmd) [While] rH;rLte:L 
rH;rLtc:Lcmd j lYH;rLFwhileedOc:Lcmd e*:s"(rH,rL,L) C* :s"(rH,rL,L cmd) (~,?f..ho.if(e*a)thenseqd=(c*(T)in(fd)else(lifto)):SV(r~,rL,Lcmd) 
 Table 11: Translation of the Call-by-value Functional SLam Calculus into vDCC (excerpts). ifs=(sl+.v~,K)and(s:!or)=s~ 
c"erce(,,it,r).(unit,~) fi = p,!f.hg:s*+(s*)~.g(~,(hx:s~.seqbindh=(f'g)in(hx))) = k:T,(unit).bindy=nin(~y) 
c~'erce(.,z+u,.r)~(.~,~uz,n') (hz :si.seqv (y (c~erce,~,.,,~ z)) = hr : T,(s; + (Ui)l).bindy=.XinIld 
= in lift (coerce,,,,2 v)) seqV=e; inseqr=(,f'~)inlift(dot(Tj~r)):(.Q.~); Prl r,n:s,I+ I-(liftx):(s*)~k-x:s* 
r*,x:s*,(r')* [Unit] rt-(),:(unit,K)*r*t-(lift(Ij,())):(T,(unit))~ Pbl rte:.q s, 5 r I- e: s2 92 * r*te*:(s;)I 
r* t- seqw= e* inlift(c0erce,v,,,s2 w) : (.$)I w fresh [Reel r, .f : s I- e : s S = ($1 --f .Q,K) r t- 
(p..f : s : 3.e) (S1.K) = s* * r*,f: S* t e* : (s*)~ r*kji.x(k,f :~*.e*) :(s*)~ [Lam1 r,x: 3, t- e : 
.q r~(hr:.Vl,e)K:(sl -+S2,K) * r*,n: Si t-e* : ($)I r* k lift(?jK(hY:.7i.e*)):(TK(si -+ (S;)I))I PPPI 
rte:(s, --Fs~,K) rte, rI_ (eel) :S~OK :s, a r* k e" : (Tx(Si --f (s;)~))~ r* I- seqbind,f =e*in r* k 
ei : (s;)~ ,f',v,r fresh rte:s r* t-e* : (s*)~ r-t-(protect,e) * r*Fseqm=e*inlift(dot(Ijrm)):(s*K); 
mfresh :SIK Table 12: Translation of the Call-tracking Calculus into vDCC (excerpts). ifs= (~1-% ~2) 
 fir = p,f.hg:~*+(T~(s*))~.g(hr:s~.seqbindh=(f'g)in(h~)) r,x:s,r~x:s,L~r*,n:s*,(r)*~lift(~~x):(T (~*))~ 
rt-() :unit,L* r* k lift (ljr. 0) :(T~(unit))~ : S* I- e : (TK(~*))L Fe4 rt-: s.e) * r*~~((hf :.~*.e*):(T,(.~*))l 
r,.f : s t e : S,K s = (SI -r, .q) r*,f' (p.!f' : s r,x:S, I-e :s~,K r*,n: Si I- e* : (T,(.$))L k4 r-F- 
(hr :.q.e), : (s, q s2),L * I? k (lift(IjL (k:si.seqr=e*in lift (dot (qt,) r))))) : (TL(si -+ (Ti,),,(s;))l))l 
rfresh r* F e* :(T&#38;(si --f (T,(s;))~))~ r* t ei : (T,,(si))l rke:(Sl&#38;S2),Kl r!-el:Slr~2 j r*t-seqbindf'=e*in 
,f ,y,v fresh MPPI  rt (eel):S2,KuKl UK2 seqbindy=eiin seqbindv= (.t'~) inlift(%uK,uK2 ~):(TMJ~,u~~(s;))~ 
   
			
]]
##[[DATA:data/fa/A note on the performance of genetic algorithms on zero-one knapsack problems.txt|
          195  
			
]]
##[[DATA:data/fa/A data-parallel algorithm for three-dimensional Delaunay triangulation and its implementation.txt|
               
			
]]
##[[DATA:data/fa/Adding imageability features to information displays.txt|
               
			
]]
##[[DATA:data/oraby/A logical view of composition and refinement.txt|
               
			
]]
##[[DATA:data/oraby/Alternative employment structures in information systems.txt|
            .  
			
]]
##[[DATA:data/oraby/AI (panel session).txt|
          209  
			
]]
##[[DATA:data/oraby/A parallel iterative linear solver for solving irregular grid semiconductor device matrices.txt|
               
			
]]
##[[DATA:data/oraby/A distributed UNIX system based on a virtual circuit switch.txt|
               
			
]]
##[[DATA:data/oraby/A framework for designing an animated simulation system based on model-animator-scheduler paradigm.txt|
 AUTHOR BIOGRAPHIES JAMES T. LIN is an Associate Professor in the Department 
of Industrial Engineering at National Tsing-Hua University (NTHU), Taiwan R.O.C. He received his Ph.D. 
degree in Industrial Engineering at Lehigh University in 1986. His current research interests include 
simulation modeling methodology, performance evaluation of manufacturing systems, and modeling of Automated 
Guided Vehicle System. He is a member of IIE, SCS, and IEEE. KUANG-CHAU YEH is a Ph.D. student at the 
Industrial Engineering Department at National Tsing-Hua University (NTHU), Taiwan R.O.C. He received 
his M.S. degree in Industrial Engineering from NTHU in 1989. His research interests include the application 
of AI and simulation. LIANG-CHYAU SHEU is a Ph.D. student at the Industrial Engineering Department at 
National Tsing-Hua University (NTHU), Taiwan R.O.C. He received B.S. and M.S. degrees in Industrial Engineering 
from NTHU in 1988 and 1990. His research interests are focused on feature-based design, and simulation 
modeling.  
			
]]
##[[DATA:data/oraby/A generalized air-cache design for efficiently broadcasting on multiple physical channels.txt|
               
			
]]
##[[DATA:data/oraby/A mini-course on concurrency.txt|
          96   
			
]]
##[[DATA:data/oraby/Alpha-algorithms for incremental planarity testing (preliminary version).txt|
 Figure 1: x Figure 2: 2 x Figure 3: el Figure 4: / / / 0-\ \ \ \ \ I  
			
]]
