
 Let me list some of the restrictions on the design of this system. It is restricted to drum and tape 
as no disc yet designed will survive. Eventually we may have a solid state mass memory but not now. What 
is the potential load for this limited mass storage? The union of the wish list of all potential Army 
users filled 32 volumes...and these were mostly topic headings and sketches. This user's group itself 
is composed of Army officers and enlisted in combat. The user both constructs and uses the data base. 
 I can identify at least two major components of this data base. There is a small fixed component such 
as the number of gallons per mile a tank gets. The problem comes for the other component. That part is 
the much larger time varying data base which must be extracted from the river of information which flows 
into and through an Army Tacticai Operations Center while it is engaged in combat. This information is 
being constantly gathered from patrols, intelligence activities, units in contact, etc. The user may 
put the information into the system at the beginning of his shift and then use it before the shift is 
over. This means that the time scales for input and retrieval are severely compressed over the other 
examples presented at this conference. Data, which is input and then retrieved, is used for real time 
planning, and operation on a time scale of hours or days after initial acquisition. Let us take an example 
of employment of TOS for file and retrieval only. We start with a static situation. This may be the result 
of several days of light activity. Regardless, the data base has had time to become stabilized and purged 
of most wrong information. It is at least asymptotic to the kind of data base you normally understand. 
The operations center gets a spot report that various supply depots have been hit. The fact that the 
sky outside the tent is lit up convinces you that something is happening, but what? Fragmentary details 
begin to flow back as to the extent of the damage. In other words, confi- dence in portions of your data 
base have just been wiped out. In time you will be able to reconstruct a profile of material remaining 
in the depots~ but the problem is that you must plan and launch an operation right away. You must try 
to use the incoming data when you know it is a mixture of correct and incorrect data, about which you 
can only make value judgments. The same sort of thing can happen when an operation is launched. The data 
base begins to decay and build-up at the same time. It is almost as if there is a kind of dead time when 
the data is least reliablebut when it is needed most. I can find no mathematical treatments of such data 
decay and regeneration. It would be convenient to be able to treat this as some kind of steady state 
problem with data always in some state of flux but with some kind of constant confidence factor. Practically 
speaking the data base regenerates most completely during lull in combat during the night. The Army's 
initial attempt to solve the TOS problem is to treat TOS data base as a Cartesian data structure. Information 
is put into the files and taken out in fixed formats of which there are some 30 common examples in most 
frequent use. The formats bear a good deal of similiarity to standard Army message formats. Heavy emphasis 
is place on initial screening and value judgment before being placed into any permanent file. CRT's are 
used as input-output devices. Usage tends to be restricted to planning for future operations rather than 
conduct of ongoing operations. Functions are limited to intelligence and operations data. What I am 
briefly trying to sketch i a world of data retrieval quite different from the antiseptic world generally 
assumed for constructing and accessing data bases. It is closer to police and fire than to a university. 
It is a world where the data is in constant flux; where almost all data has a very short half life; where 
storage is very limited and the priorities are brutal. The operators and users operate under very difficult 
stresses, so that a high premium is put on ease of operation. At the center is the problem of working 
and living with a data base in which the correct and erroneous are mixed with no hope of ever separating 
them completely. Yet, the requirement remains for making decisions using the given data base. The only 
mathematics addressing this which I have found are based on work of Dr. Zadeh (U. of Cal., Berkeley) 
on fuzzy set theory and linguistic variables. To summarize, I claim that the foregoing generates an 
interesting class of problems not normally addressed in the literature. I would expect that there may 
be software solutions, or as some are beginning to suggest, firmware solutions as well. I thank you 
for the opportunity to present this sketch. A NOTE ABOUT THE PROXIMITY OPERATORS IN INFORMATION RETRIEVAL 
Patrick C. Mitchell U. S. Department of Justice Information Systems Section The proximity operators 
(within; preceding; and followin$) are binary distance and ordering relations on words within a sentence 
or document. For example, Figure 1 illiustrates part of a sentence form the comparative analysis that 
Tom Martin (I) left us yesterday. FIGURE I. Example sentence and queries. ...a comparative analysis 
of eleven interactive information retrieval systems under a grant from the National Science Foundation. 
 Query Hit/Miss Systems <2> Interactive Hit Interactive (i Systems Miss National Science Foundation Hit 
 If this sentence were in your data base, you could use proximity relations to select the document contain- 
ing it. You might, for example, ask for words "systems" and "interactive" with no more than two words 
separating them. This is called the "within" relation and it is denoted in this example by 2 . The two 
words can exist in any sentence as long as no more than two words separate them. The "preceding" relation 
is similar. To use it, you mlght enter as a query "interactive 1 systems". This query requires the two 
words to be in the same sentence with no more than one word separating them and "interactive" must precede 
"systems". Notice that there are two words between "interactive" and "systems" in this example, and if 
this were the entire query, it would not result in a hit on this document based on this sentence. The 
last proximity operation is "following", which isn't illustrated here but it's exactly the opposite of 
"preceding". Consecutive query terms in a system that utilizes proximity operators do not indicate the 
"and" operation as in many retrieval systems, but rather the proximity operation with zero intervening 
words. That is, the query "National Science Foundation" would give you a hit on only those documents 
where some sentence contained the three consecutive words"Natlonal", Science" and "Foundation". The proximity 
operators are thus all intersection operators, but each is stronger than the "and" operation. /i: Of 
what value is the proximltycapability? First, in searching~it provides more meaningful use of "common" 
words. This is exactly the point Professor Salton (2) made[yesterday, i.e., combining words which have 
many occurrences in some phrase notation and selecting documents that contain the phrases. This technique 
reduces ambiguity and increases precision. Another purpose is for highlighting. After process- ing the 
query "National Science Foundation", it will be known exactly which sentences contain the phrase as well 
as the location of the phrase within each sentence. This allows us to highlight, or "visually emphasize" 
the phrases used in the query to direct the user's attention to salient information as opposed to merely 
regurgitating entire documents. The proximity operators are also useful for searching titles, because 
the word order in a specific title is known. Similarly, the proximity operators can be useful in any 
language subset where phrases are used consistently. Who uses proximity operators? If you examine the 
comparative analysis that Martin (i) left, you will find that the following interactive systems incorporate 
some type of proximity operations: JURIS ( the Department of Justice System), DIALOG, STAIRS, LEXIS (Mead 
Data Central), RIQS, INTREX, and we just heard (3) that it's going to be used in Europe as well, As 
the Department of Justice we are including them in the next version of our retrieval system (JURIS-II). 
During the detailed design stage of JURIS-II, several problems appeared, and these are what I would llke 
to discuss with you for a few minutes. First there's a resource problem. When an inverted record is 
concorded (saving word location data as well as document ID), there is overhead in storing word number 
and sentence number. You can optimize by just inserting the document ID once and including word/sentence 
pairs. Still it takes more space and time to invert and to process a concorded index than a straight 
index with no location data in the inverted file. The second problem is in highlighting. This divides 
into two areas. First, we can miss some refer- ences. An article may say "National Science Foundation" 
in one paragraph and use the word "it" in succeed- ing sentences or paragraphs. Also, abbreviations and 
acronyms can be missed after they are defined. The second area is combining phrases. For highlighting 
purposes, suppose we have a sentence with four words in it: A, B, C, and D, (see Figure 2). Now Use a 
proximity expression to select the phrase B, C. Denote that query as X. Corresponding with X there is 
a llst of documents which include sentences containing the phrase B, C. Let's put another query (Y) to 
select the phrase A, D and allow two intervening words. Notice that the same document is going to get 
selected. Now you've got two previous queries, X and Y. What should result if a third query is entered 
which asks for documents where X is within Y, X precedes Y, or X follows Y? I think we all agree if you 
were looking for X within Y and you had this situation that you'd want to get a hit. But it's not nearly 
as clear that X precedes Y or X follows Y. This is ambiguous. Two people might not expect the same results 
when they use this facility. FIGURE 2. The proximity relation between phrases. A B CD. x<>Y? X< Y 
? x>Y The last problem is the distributive problem. Let's examine the query (A + B + C) i D. First 
we have to assign some meaning to this query. Most folks would distribute (expand) the query and explain 
it as : (A i D) o/_ (B i D) or (C i D). Any one or more of those three conditions would result in a hit. 
Thls can be called the "any" condition. Now consider the same queryuslngthe "and" operator between A, 
B, and C. This query means something else, i. e,, (A i D) and (B I D)and (C i D), and can be called the 
"all" condition. Selected documents must satisfy all the criteria. The "any" and "all" conditions are 
not conslsten% and this can be illustrated byconsldering a document which contains the phrase A, D and 
the words B and C, but not the phrases B, D and C, D. The document satisfies both Boolean expressions 
 (A+B+C) and (A&#38;B&#38;C).? It satisfies the "any" condition (A+B+C) i D, but not the "all" condition 
(A&#38;B&#38;C) i D. You can define the proximity operators to properly distribute either Boolean sums 
o_/_Boolean products, but not both. In summary, the proximity operators can be used to increase precision 
and decrease ambiguity by permitting queries on phrases as opposed to individual words. They further 
allow the highlighting of data on a terminal to assist the user in finding salient information in selected 
documents. However, the Boolean operators do not distribute consistently over the proximity operators, 
so this facility must be very carefully defined for the user.* Y QUESTIONS Jean E. Sammet: I have 
a technical question. I may have gotten lost somewhere in this, but you had the situation where (A&#38;B&#38;C) 
1 D, and in a linear string of characters i do not quite see how you are going to hack that. Mitchell: 
You may have occurrences in three different sentences. Richard S. Marcus: As you mentioned, in INTREX, 
we did use proximity operators, sometimes to a very good effect. However, wlth respect to word position 
within a sentence or phrase, we found that the only useful relation was strict adjacency. I wonder if 
you or anyone here has any examples of where it's useful to say "A with- *References i, E. B. Parker 
and T. H. Martin, "Comparative Analysis of Interactive Retrieval SYStems" , Institute for Communication 
Research, Stanford University, October I0, 1973 revlsion. 2. G. Salton and C. T. Yu, "On the Construction 
of Effective Vocabularies for Information Retrieval!', in the proceedings.  3. N. Price, "Comments on 
Experiments with Retrieval of Legal Information in Full Text," Proceedings of the SIGPLAN-SIGIR Interface 
Meeting, Galthersburg, Md., November 4-6, 1973.  in two or within three words of B", and not strict 
adjacency or the whole sentence? Mitchell: I don't have one now but I'll get one for you. Adjacency 
and full-sentence are perhaps the most useful forms of proximity operations. However, we have found that 
"adjacent" words are not infrequently separated by "common" words and/or modifiers, e.g., the phrases 
"interactive systems for information retrieval applications", "interactive retrieval systems", and "interactive 
information retrieval systems". At a session with the JURIS system, the queries in the following table 
were made against the Federal law data base. Notice that, if column C is the desired result, there is 
a considerable improvement in precision over column B. Number of Documents at each Proximity Distance 
A B C Terms Adjacent Full Sentence l-7-words certiorari, appeals 1,777 i00 territories, possessions like, 
property search, seizure 12 14 3 258 48 106 206 27 99 hearing, record 1 94 35 COMMENTS ON EXPERIMENTS 
WITH RETRIEVAL OF LEGAL INFORMATION IN FULL TEXT Norman Price Computer Science &#38; Systems Division 
Harwell I wish briefly to describe some of the work we have done at Harwell where we have been concerned 
mainly with the full text of legal information. Initially we began with our own Statute Book but more 
recently we have incorporated European Legislation and therefore have in fact done some work in Spanish 
as well. Our data base at the moment stands at some i0 million characters but is growing fairly rapidly. 
A point we have to consider is that with law you are dealing with real information, i.e. the lawyer who 
has to access it wants the original source material. A difference exists between a is in charge of b 
and a is in the charge of b for example. You must be careful to give the user what he needs. Again we 
have to consider more than one type of computer so we try to make the system machine-independent. I cannot 
claim complete success, which is to use the high level language FORTRAN. The core of the program is largely 
machine- independent, with certain interface components dealing with the peculiarities of particular 
configurations. In storing the material we use an inverted file structure, basically a tree structure, 
we call this a concordance since we are dealing with text. In the case of a Treaty each entry of the 
concordance holds the number of the Treaty, the article within that Treaty, the sentence within the article, 
and the position of that word within that sentence. Therefore when we search we can use proximity as 
well as Boolean "ands", "ors", or "nots". A problem arising from the use of more than one natural language 
is that two equally authentic or authoritative texts exist initially but after a period of time, because 
of amendments, the texts begin to diverge. Thus we are faced with bringing them back into line or at 
least identifying the divergences. Consequently, we find the need for glossaries or dictionaries as well 
as our printed concor- dances and our annotated listings which enable you to find references manually. 
Of course we prefer to work with the concordance in the machine and much better to work interactively 
and on-line. We have a total system, the on-line and interactive portion of which is the top of the iceberg 
--the shop window of the system, but behind this are numerous utilities for batch processing, making 
major amendments, etc. Our search language is intended for the ordinary lay user who is not a computer 
person, but somebody who has a reasonable amount of common sense and working knowledge of the working 
vocabulary. We base the search method on Boolean logic using "and", "or", "not" operators plus the relation 
of the position of words with respect to each other. We have in fact endeavoured to hide some of these 
operators from the users so that the user may put in a complete phrase or complete sentence. A phrase 
like "Atomic Energy Authority" or "sans distinction aucune" for example, may be input as an ordinary 
phrase and the program inserts the Boolean operators. The basic problem is how to get a good answer from 
a bad question, and the technique is to work on the question -this is where the interactive facility 
comes into its own by working on the 
			
