
 A GRAPH-THEORETIC REAL-TIME VISIBLE SURFACE Steven L. Tanimoto U-157 University of Connecticut  Storrs, 
CT ABSTRACT Efficient visible surface (hidden surface) al­ gorithms must make use of information about 
the structure of the environment, constraints on view­point locations and the coherence between successive 
 views in a sequence. Here the visible surface pro­blem is posed as a problem in graph theory. A new 
 techniquebased on' updating cut-sets in a graph is presented as a means to streamline the culling of 
back faces during visible surface computations. The technique can be used for general environments that 
contain some convex polyhedra. Since the meth­od saves the most computation when convex polyhedra having 
many faces appear in the environment, it is particularlyappropriatefor handling geodesicdomes and polyhedral 
approximations to spheres. A direct extension for nonconvex polyhedra is suggested. KEYWORDS: visible 
surface, hidden surface, back face, culling, cut-set, geodesic domes, convex polyhedra, graph theory, 
computer graphics, sur­ face editing CR CATEGORIES: 3.41, 5.32, 8.2 I. Motivation and Introduction 
 One of the most fascinating applications of com­ puters is the production of pictures of imaginary 
environments. In order to make the pictures look realistic however, many technical challenges must 
be met, not the least of which involves improving the method by which the visible parts of the envir­ 
onment are determined. Much work has been done on this problem and yet we still do not have systems 
 powerful enough to generate the imagery let alone any of the imagination that goes into a sequence 
of images such as the film Fantasia. With goals of that level, undoubtedly computer graphics research­ 
ers will be working for many years. This paper re­ presents one small effort toward that goal. Permission 
to make digital or hard copies of part or all of this work or personal or classroom use is granted without 
fee provided that copies are not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, to 223 republish, to post 
on servers, or to redistribute to lists, requires prior specific permission and/or a fee. Siggraph 77, 
July 20-22 San Jose, California 06268 An interestingclass of visible surface (or hidden surface) problems 
is typified by one where the system has some "knowledge" beforehand of -­  he likelihoods chat given 
parts of an environment will be visible at a given point in time. Several visi­ ble surface algorithms 
in the past have used a priori visibility constraints to gain efficiency. For example, for computing 
views inside a simula­ "house", the system can be told in advance that the interior of the bathroom 
is never visible from the living room (after [1]). Furthermore, many methods make the assumption that 
the interiors of closed objects will never be visible. Several algorithms have taken advantage of "coherence" 
ten­  dencies in various data sets during visible surface computation. These have included scan line 
to scan line coherence of object intersectionlocations, point to point coherence of intensity, frame 
to  frame coherence for the set of visible entities, etc. [2]. Coherence may be viewed as a class of 
 constraints. Visibility constraints may be divided up into static and dynamic types. Static constraints 
cull out from the set of potentially visible entities some or all of those which for some reason will 
 never be visible, or static constraints may assign a priori probabilities of visibility to the enti­ 
ties. The notion of dynamic visibility constraints constitutes a generalizationof that of static ones. 
Dynamic constraints have the form "If <condition> then face f is visible with probability p". When 
the condition involves the location of the viewpoint we have a viewpoint-based constraint. An example 
of this would be the precomputationof priorities of linearly separable clusters (after Schumacker [2,3]) 
and the associationof these pri­ orities with each of a number of viewpoint regions. A scheme following 
this approach has been implemen­ ted by Jones. Jones' method concerns itself with only a subset of the 
environmentat any one time. In his system a graph data-structure,given to the  II. Background 3 Let 
Erepresent 3-dimensional Euclidian space. 3 Any plane divides Einto two Half-spaces. A closed half-space 
is a half-space together with the dividing plane. The intersectionof a finite number of closed half-spaces 
is a convex Polyhedron if it is bounded (no half-lines-arewholly contained with­ facts can easily be 
shown: The intersectionof a convex polyhedron with a half-space is a convex polyhedron (note that the 
empty set is the "trivial polyhedron"). If P is any intersectionof half­spaces then P is a convex set. 
 These definitions of on-view and off-view faces are analogous to the characterizationof "back faces" 
provided in [2]. In the list-priority by computing the predicate S * (v-vp)'N. > 0 algorithms [2] of 
Newell et al [14] and especially of Schumacker [3], the detection of on-view faces is a critical time-consumingstep 
in the computa­tion of a frame. Although this can be done simply 1 for each frame, this can be bad 
when there are a large number of faces and the time between frames should be small. One simple way 
to reduce the number of on-view tests required uses position-basedvisibility con­straints. As an example 
consider an environment made up primarily of rectangular parallelopipeds (see figure 1) in different 
locations and orienta­ 224 tions. By storing the decision tree shown in fig­ure 2, a savings can be 
realized. When faces likely to be on-view with respect to the viewpoint tend to be tested first, the 
savings approaches 50 percent. With a uniform likelihood assumption, the expected number of predicate 
computationsper parallelopiped is 4.769 out of the standard 6. While the savings using this decision 
tree are not dramatic, they do indicate that savings are possible. Much more dramatic savings are possible 
using a class of graph-theoreticdynamic visibility con­straints based on frame-to-frame coherence. III. 
Graph-theoreticformulation In order to achieve significant savings in the computation of the on-view 
predicates in a sequen­tial views problem, we pose the visible surface problem as one of finding a certain 
cut-set in a graph. Let P be a convex polyhedron (as defined previously) having nondegenerate faces f.,i=l,...,n. 
Then the face graph G=(N,E) for P has a node for each f. and an edge between two nodes whenever their 
faces share an edge. (Context will differen­ tiate graph-theoreticedges from geometrical edges). For 
example, figure 3 shows a sample P and figure 4 shows its corresponding G. If the set of nodes N of 
G is partitioned into two nonempty sets W and W' = N-W, then the set of edges joining W with W' is 
known as a cut-set [15]. It is easy to see that for any convex polyhedron P and external viewpoint 
vp the nodes of G that correspond to on-view and off-view faces of P with respect to vp form such a 
partition of N. Thus the set of all edges con­ necting an on-view face node to an off-view face node 
constitute one cut-set of G. Thus the cut­ set divides G into two connected components, one whose nodes 
correspond with on-view faces and a­ nother for off-view faces. This cut-set may easily be obtained 
by computing the on-view predicate for each face. Now by using frame coherence constraints we show 
how cut-sets for many-faceted polyhedra can be updated for a new viewpoint with very few new on-view 
predicate computations. A cut-set for the graph of figure 4 is shown in figure 5. With an incremental 
change in the viewpoint there will either be no change in the cutset or a "small" one. The cut-set 
may be updated by testing nodes incident on cut-set edges. If the component to which a node belongs 
changes during the update, it is then necessary to check any unchecked neighbors of that node. This 
will insure the correctness of the update even when the viewpoint changes drasti­ cally. Generally, 
the number of nodes to be checked is about twice the number of cut-set edges. Let us now discuss the 
technique in greater de­ tail. The cut-set is represented as follows. The edges of the current cut-set 
are stored in a list. The order is immaterial. Implicitly associated with each cut-set edge is the 
information indica­ ting which of its incident nodes represents an on­ view face and which represents 
an off-view face. In a separate table of nodes the on-view/off-view information is repeated but for 
all nodes, not just those on the cut-set edges. Each node also carries a flag indicating whether a 
new on-view predicate computationhas been done for it or not. Starting with the first edge on the list, 
the predicate is computed for each of the two nodes. If there is no change in the status of these nodes 
then these nodes are simply checked (flag set) and the process is repeated for the next edge of the cut-set. 
However if the status of either node changes, several steps are taken. Let A and B re­ present the two 
nodes, where A was on-view (off­ view) and B was off-view (on-view)with respect to vp. If A is now off-view 
(on-view)with respect to vp' the edge AB is deleted from the cut set and A is pushed onto a stack so 
that later a depth­ first search can be initiated from A to find addi­ tions to the cut set. The depth-first 
searches from nodes on the stack do not begin until all the cut-set edges have been considered. In 
the depth­ first search (from A initially, but from a general X in the recursive procedure), each unchecked 
 neighbor Y of X is tested and if on-view (off-view), the edge YX is added to the cut-set; if Y is off­ 
view (on-view), the search continuesrecursively from Y. After these searches are complete, the cut-set 
has been updated. The efficiency of this technique derives from the gradualness of the viewpoint motion 
or object motion. An average face of the polyhedron has a low probability of changing status. Furthermore 
 the changes that do occur tend to happen right a­ long the cut-set so that time spent in the depth­ 
first searches is very small. When the number of faces on the polyhedron gets very large, it can be 
seen that the fraction of faces that need to be tested on update ap­ proaches zero percent of the total. 
This follows from the assumption that the number of faces a­ round a great circle of an approximated 
sphere is proportional to the circumference while the total number of faces is proportional to the 
surface area. Since this method achieves a savings where large convex polyhedra are to be displayed 
at a succession of viewpoints and/or a succession of object positions and rotations, its appropriate­ 
ness depends on several factors. If the environ­ ment neither contains any convex polyhedra nor ob­ jects 
constructed from convex polyhedra, then the method is inapplicablein its current form. If the environment 
consists of only one convex poly­ hedron, then this method alone is sufficient to determine visible 
surfaces (except for "clipping" [2]). On the other hand, when the environment con­ tains some convex 
polyhedra this method may be used to speed up the culling of back faces within a larger system. Since 
a prime goal here is to mini­ mize the number of on-view predicate computations to be done, small systems 
where multiplicationis slow may benefit most from this. Finally, because savings are greatest where 
the environment consists of many-faceted polyhedra, this method may be pro­ grammed as a subroutine 
[11,16] to be invoked es­ pecially for geodesic domes or planar approxima­ tions to spheres. Savings 
can be estimated easily. Suppose we are displaying a "geodesic sphere" whose radius is roughly 10 "face-widths". 
The approximate total number of faces for this polyhedron is then 1256 based on a 2 surface area. The 
number of faces to be tested during an update is about 125, assum­ 4. Warnock, J. E., A hidden-surfacealgorithm 
for ing that the cut-set corresponds with a great cir­ computer-generatedhalftone pictures. Compu­ cle 
on the polyhedron. Note that this is the worst ter Science Dept., University of Utah, TR 4-15 case; this 
is the largest cut set possible and (June 1969). occurs when the viewpoint is very far away from the 
object. The 125 is obtained by multiplying the 2rr 5. Roberts, L. G., Machine perception of three­ cut-set 
edges on the great circle by 2 face tests dimensional solids. MIT Lincoln Laboratory, per cut-set edge. 
Even with this worst case assump- TR 315 (May 1963). tion, 90 percent of the tests have been eliminated 
for this polyhedron. 6. Watkins, G. S., A real-time visible surface algorithm. Computer Science Dept., 
University It should be noted that the method can be ex­ of Utah, UTECH-CSC-70-101, (June 1970). tended 
directly for updating on-view faces for non­ convex polyhedra. The main added complications are 7. Loutrel, 
P. P., A solution to the hidden-line that the partition into on-view and off-view sub­ problem for computer-drawn 
polyhedra. IEEE graphs now involves members which (1) may not be Trans. Comput. C-19, 3, (March 1970) 
p. 205. connected subgraphs of G and which (2) have com­ ponents that can shrink to nothing or grow "out 
of 8. Galimberti,R. and Montanari, U., An algorithm nowhere" within a component of the other member, 
for hidden line elimination. Comm. A.C.M. from one view to the next. In order to detect the Vol. 12, 
No. 4, (April 1961), pp. 206-211. "birth" of a cluster of these nodes, it is neces­ sary to know the 
maximum number of clusters that 9. Bouknight, W. J., A procedure for generation can occur (as the viewpoint 
changes), and to search of half-tone computer graphics representations. for the emergence of these clusters 
if any are Comm. A.C.M. Vol. 13, No. 9, (Sept. 1970) missing. If the objects have high maximum numbers 
p. 527. of these clusters (that is, the "concavity com­ plexity" of the objects is high), it will be 
im­ 10. Bramall, R., Three dimensional data display possible to realize much savings with the cut-set 
with hidden line removal. TR CSRG-12, Univer­ method alone. sity of Toronto. (April 1972). If concave 
parts of polyhedra are treated 11. Clark, J. H., Hierarchicalgeometric models separately by the canonical 
one-test-per-face for visible surface algorithms. Comm. A.C.M. method, savings may still be realized 
for the re- Vol. 19, No. 10 (Oct. 1976) pp. 547-554. maining convex portion(s). 12. Tanimoto, S. L., 
An iconic/symbolicdata IV. Conclusion structuring scheme, Pattern Recognition and Artificial Intelligence, 
Academic Press, N. Y. Efficient visible surface algorithms must make 1976, pp. 452-471. use of information 
about the structure of the en­ vironment, constraints on viewpoint locations and 13. Cheston, G. A., 
Incremental algorithms in graph the coherence between successive views in a se­ theory, Techn. Rept. 
No. 91, Universityof quence. A new technique based on updating cut- Toronto, Dept. of Computer Science 
(March sets in a graph has been presented as a means to 1976). streamline the culling of back faces during 
visi­ ble surface computations. The method is most 14. Newell, M. E., Newell, R. G., and Sancha, T. L. 
appropriate when convex polyhedra having many A new approach to the shaded picture problem. faces appear 
in the environment. Proc. ACM National Conf., 1972. Acknowledgment 15. Busacker, R. G. and Saaty, T. 
L., Finite Graphs and Networks, McGraw-Hill, N. Y., 1965. The author would like to thank Professor Theo 
Pavlidis of Princeton University for several valu­ 16. Newell, M. E., The utilization of procedural able 
discussions related to this problem. models in digital image synthesis. Ph.D. dissertation,Computer Science 
Dept., Univer- References sity of Utah, 1975. 1. Jones, C. B., A new approach to the "hidden­ line" problem. 
Computer Journal Vol. 14, No. 3, (Aug. 1971), pp. 232-237. 2. Sutherland, I. E., Sproull, R. F., and 
Schumacker, R. A., A characterization of ten hidden-surfacealgorithms. Computing Surveys Vol. 6, No. 
1, (March 1974), pp. 1-55. 3. Schumacker, R. A., Brand, B., Gilliland, M. and Sharp, W., Study for applying 
computer­ generated images to visual simulation. AFHRL-TR-69-14,U.S. Air Force Human Resources Laboratory 
(Sept. 1969).  A decision tree to reduce the number of on-view predicate computations required for the 
rectan­gular parallelopiped. One tree may be used for Each path an arbitrary number of these objects. 
corresponds with one plausible combinationof visible faces. 227 
			
