
 A NOTE ON ONE-WAY FUNCTIONS AND POLYNOMIAL-TIME ISOMORPHISMS (Extended Abstract) Ker-I Ko I 2 Timothy 
J. Long 3 Ding-Zhu Du i. Introduction Berman and Hartmanis [2] considered the question of whether 
all NP-complete sets are polynomial-time isomorphic. They essentially showed that all "natural" NP- complete 
sets are in fact polynomial-time isomorphic and, based on this result, con- jectured that all NP-complete 
sets are polynomial-time isomorphic. The conjecture remains open and is difficult since it im- plies 
that P ~ NP. More recently, Joseph and Young [5,8] have introduced new classes of NP-complete sets which 
they denote K~, where k is any natural number and f is any one-one, polynomially honest, and polynomial-time 
computable function. They have noted that k the sets Kf do not seem to be polynomial- time isomorphic 
to "natural" NP-complete sets unless the function f is also polynomial-time invertible. Thus, if f is 
a one-way function, then it seems that not all NP-complete sets are polynomial- time isomorphic. In fact, 
it is conjec- tured in [5,8] that if one-way functions exist, then not all NP-complete sets are polynomial-time 
isomorphic. Further, since it is believed that one-way functions exist, it is also conjectured in [5,8] 
that Permission to copy without fee all or part of this material is granted provided that the copies 
are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of 
the publication and its date appear, and notice is given that copying is by permission of the Association 
for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
&#38;#169; 1986 ACM 0-89791-193-8/86/0500/0295 $00.75 the NP-complete sets are not all polynomial-time 
isomorphic. This, of course, is the opposite of the Berman- Hartmanis conjecture and is based on the 
 apparent close connection between one-way functions and polynomial-time isomorphisms for NP-complete 
sets. The existence of one-way functions is also closely related to the question of whether the EXP-complete 
sets are all polynomial-time isomorphic, where EXP is the class of sets recognizable in time 20(n) Berman 
[i], Dowd [3], and Watanabe [7] have all shown that the EXP- complete sets are equivalent under one-one 
and length-increasing polynomial-time reductions. Using the polynomial version of the Cantor-Schroeder-Bernstein 
con- struction as described, for example, in Berman and Hartmanis [2], it follows that if one-way functions 
do not exist, then the EXP-complete sets are all polynomial- time isomorphic. Watanabe [7] has asked 
about the converse of this last statement and also a weaker question. More precisely: 1 Department 
of Computer Science, University of Houston, Houston, Tx. 77004, and Mathematical Sciences Research Institute, 
Berkeley, Ca. 94720. The research of this author was supported in part by National Science Foundation 
Grants MCS- 8103479A01 and DCR-8501226. 2 Department of Computer and Information Science, The Ohio 
State University, Columbus, Oh. 43210. Part of this work was done while this author was at New Mexico 
State University. 3Mathematical Sciences Research Institute, Berkeley, Ca. 94720.  295 (1) Does the 
existence of one-way functions imply that the EXP-complete sets are not all polynomial-time isomorphic? 
  (2) Is the existence of one-way func- tions sufficient to distinguish between polynomial-time isomorphism 
and equivalence under one-one and length-increasing polynomial-time reductions? Note that question (i) 
for the EXP- complete sets is the same as Joseph and Young's [5,8] conjecture for the NP- complete sets. 
  In this paper we present an affirma- tive answer to Watanabe's second question, and a partial answer 
to his first question. More precisely, we construct, under the assumption that one-way functions exist, 
two sets A and B such that (i) A and B are equivalent under one-one and length-increasing polynomial- 
time reductions,  (ii) A and B are not polynomial-time isomorphic, and  (iii) A and B are polynomial-time 
truth-table complete for EXP. Our result shows that the existence of one- way functions is sufficient 
to distinguish, in the class EXP, between polynomial-time isomorphism and equivalence under one-one and 
length-increasing polynomial-time re- ductions. On the other hand, our proof technique does not seem 
extendable to make the sets A and B polynomial-time many- one complete for EXP so that the exact relationship 
between the existence of one- way functions and the existence of polynomial-time isomorphisms for the 
NP- complete sets and the EXP-complete sets remains open. We remark that Berman [i] , Grollmann and 
Selman [4], and Ko [6] have all shown that one-way functions exist if and only if P ~ U, where U is the 
class of languages in NP that can be accepted by nondetermin- istic polynomial-time Turing machines with 
unique accepting computations. Thus our result shows that the notions of polynomial- time isomorphism 
and equivalence under one- one and length-increasing polynomial-time reductions are equivalent if and 
only if P = U. 2. Notation and Definitions We use the alphabets {0,i} and Z = {0,1,$}. The symbol $ 
is added for con- venience and could be eliminated by a simple coding scheme without affecting our results. 
For each x E Z*, IxI denotes the length of x. We use the standard lexicographic order of Z*, and write 
x + 1 to denote the successor of x in this order. <, ) denotes a bijective pair- ing function defined 
on natural numbers. For any alphabet A, we let PF(A) denote the class of partial functions on A* that 
are computed by TM transducers in polynomial time. We let gl' g2' "'" be an effective enumeration of 
PF(Z) with polynomial Pi bounding the runtime of gi' i ~ 0. We further assume that Pi(n) ~ n i + i for 
all n, i ~ 0. We define EXP to be the class of all sets contained in ~* that are recognized by TM acceptors 
in time 2 cn for some con- stant c. A function f is polynomially honest if there exists a polynomial 
p such that for all y in the range of f there exists an x in the domain of f such that f(x) = y and Ixl 
! P(iYl)- f is length-increasing if, for all x in the domain of f, IxI < If(x) i . A func- tion f E PF 
is a one-way function if f is one-one, polynomially honest, and f-i PF. It is not known if one-way func- 
 tions exist. Note that one-way functions are invertible, but they are not invert- ible in polynomial 
time. Also, because one-way functions are required to be poly- nomially honest, their inverses cannot 
be hard to compute for the trivial reason that large inputs map to small outputs. In the proof of 
our main theorem, we need to assume the existence of a one-way function that is both total and length- 
 increasing. The next proposition shows  that such one-way functions exist, if one- way functions exist 
at all. Proposition i. If one-way functions exist, then one-way functions that are both total and length-increasing 
exist. Sketch of Proof. Let g be a one-way function and let p be a polynomial such that for all y 
in the range of g, Ig-l(Y) I ~ P(IYl) Define the function f such that for all x E Z*, = i x0 if x 
~ domain of g f(x) [g(x)01 Ixl+l if x E domain of g. It is easy to verify that f 6 PF, that f is length-increasing, 
and that f is one- one (recalling that g is one-one). Fur- thermore, it is not hard to see that f-i E 
 -i PF implies g E PF. So, by contradic- tion, it follows that f-i ~ PF. [] For any function f on 
{0,i}* that is total, one-one and length-increasing, we define two functions f0 and fl on Z* as follows. 
 First, extend f to f on ~* as follows. Case i. If x E {0,i}* then f(x) = f(x). Case 2. If x = ySz 
for some y, z E {0,i}* then f(x) = f(y)$z. Case 3. If x contains more than one $, then T(x) = x. 
Next, let f0(x) = f(x)0 and fl(x) = f(x)l. Then, both f0 and fl are total on Z*, one-one and length-increasing. 
 Also, f is one-way on {0,I}* if and only if f0 is one-way on E* if and only if fl is one-way on Z*. 
 For each function f that is total, one-one and length-increasing on {0,i}*, and for each x E Z*, define 
the follow- ing sets: xside-fA-chain(x ) = {y @ Z* : (flf0)k(x)  = y for some k ~ 0, or (flf0)k(y) 
= x for some k > 0}, otherside-fA-chain(x ) = {y E Z* : (f0fl)kf0(x) = y for some k ~ 0, or (flf0)kfl(y) 
= x for some k _> 0}, fA-chain(x) = xside-fA-chain(x ) O otherside-fA-chain(x), xside-fB-chain(x ) 
= {y E Z* : (f0fl)k(x) k = y for some k ~ 0, or (f0fl) (y) = x for some k > 0}, otherside-fB-chain(x 
) = {y E Z* : (flf0)kfl(x) = y for some k ~ 0, or (f0fl)kf0(y) = x for some k _> 0), fB-chain(x) = 
xside-fB-chain(x ) O otherside-fB-chain(x).  We say that C C Z* is an f-chain if, for some x E ~*, 
C = fA-chain(x) (and hence C = fB-chain(f0(x))). These f-chains are pictured in Figure i, and the following 
proposition gives some basic properties of f-chains. Proposition 2. Let f be a one-one and length-increasing 
function on {0,i}*. Then, (a) for any x E ~*, fA-chain(x ) A fB-chain(x) = {x};  (b) for any x E Z*, 
if x ends with 0, then x is the smallest element of fA-chain(x), and if x ends with i, then x is the 
smallest element of fB- chain(x);  (c) for any x E ~*, if x ends with $, then x is the smallest element 
of both fA-chain(x) and fB-chain(x).  In addition to the well known reduci- bilities ~, <P and <P 
--m' --tt' we use the following notation. _P P A =i B if and only if A ~i B and P B !l A; <P P A 
--l,Zi B if and only if A ~i B via a length-increasing function;  <P A --l,inv B if and only if A < 
B via a function f such that --f-I PF; P A HP B if and only if A ~l,inv B iso p f-i via f and B ~l,inv 
A via for some function f. 3. The Main Result  In this section we prove our main re- sult. Before 
the construction, we first present a lemma that asserts a search pro- cess used in the main construction 
always halts. Recall that {gi } is an enumera- tion of all functions in PF(Z), and Pi is a polynomial 
that bounds the runtime of gi" Lemma i. Let f be a total, length- increasing, one-way function on {0,I}*. 
Let C I, ..., C m be finitely many f- chains. Then, for every i, j > 0, either (a) there exists an x 
 Z* such  that gi(gj (x)) ~ x or gj (gi(x)) ~ x (including the cases where the left-hand sides are undefined), 
or (b) there exists an x {0,i}* such m  that x$ ~ Uk=l Ck' and gi(x$) otherside-fA-chain(x$). Sketch 
of Proof. By way of contradiction, assume that there are natural numbers i, j such that neither (a) nor 
(b) is true. (Note that there are infinitely many x  {0,1}* such that x$ ~ C k for all k = i, ..., 
m, as easily verified from Propo- sition 2.) With this assumption, we show that f-i PF({0,1}) which 
contradicts the hypothesis that f is a one-way function.  Consider an arbitrary y in the range of f 
and let f(x) = y. If x$ C k for some k = i, ..., m, then x$ is the smallest element in C k and finding 
x from y can be done by just verifying that either f0(x$) = y$0 (in case C k = fA-chain(x$)) or that 
fl(x$) = y$1 (in case C k = fB-chain(x$)). By Proposition 2(c), only m such x's need to be m  checked. 
Suppose now that x$ ~ Uk=l Ck" Condition (b) not true implies that gi(x$) 6 otherside-fA-chain(x$). 
Since the value n = pi(Ix$1) bounds the length of gi(x$), and since f0 and fl are length-increasing, 
gi(x$) 6 {z0, z I ..... z n} where z k = (f0fl)kf0(x$), for k = -i  0, ..., n. Then, since gj = gi 
(be- cause condition (a) not true), x$ 6 {gj(z0) ..... gj(Zn)}. Nothing that z 0 = f0(x$) = f(x$)0 
= f(x)$0 = y$0, we see that x can be found from y by checking the conditions "f0(g~(zk)) =? y$0" for 
 J  k = 0, i, 2, ..., n. For the k E {0,1 .... ,n} such that f0(gj(zk)) = y$0, we have gj(zk) = x$. 
Therefore, f-i is computable in polynomial time. We omit the detail of the polynomial-time algorithm 
 for f-l. []  Theorem I. Assume that one-way functions exist. Let E C {0,i}* be an EXP- complete set. 
Then, there exist A, B Z* such that _P (i) A :i,£i B,  (ii) A __~[,inv B,  I (iii) E ~t A, and 
 (iv) A, B EXP.  Proof. We first describe the idea for the construction of A and B. Assuming the 
existence of a one-way function, we let f be a one-way function that is total and length-increasing. 
By Proposition i, we know that the existence of such an f follows from the hypothesis of Theorem i. 
 Recalling the functions f0 and fl de- fined earlier, A and B are constructed <P so that A --l,li 
B via f0 and <P B ~l,ii A via fl' implying the condi- P tion (i). To guarantee that A ~i B via f0" 
when a string x is assigned to A (or A), all of xside-fA-chain(x) must be assigned to A (or A) and 
all of otherside-fA-chain(x) must be as- signed to B (or, respectively, B). To P guarantee that B 
~i A via fl' when a string x is assigned to B (or B), all of xside-fB-chain(x) must be as- signed 
to B (or B) and all of  otherside-fB-chain(x) must be assigned to A (or, respectively, A). In order 
to prove condition (ii) that A ~[,inv B, a diagonalization is used. To describe the diagonalization, 
define, for all natural numbers i and j, the re- quirement Ri, j : If gi and gj are both one-one -i 
 and.~total and if gj = gi ' then A ~ B via gi" Stage n = (i,j) of the construction will satisfy requirement 
Ri, j. Taken over all stages, the construction guarantees that P A --With the property proved in 
 il,invB. Lemma i, the diagonalization is straight- forward. Suppose g~ and gj are one- one, total 
and gi = gj-i " Then, to satisfy Ri, j we must find some witness w and assign w to A (or A) and the corre- 
sponding gi(w) to B (or, respectively, to B). To do so and still ensure that A ~_ B via f0' we must have 
a witness w such that gi(w) ~ otherside-fA-chain(w). Lemma 1 guarantees the existence of such a witness 
w, and so ensures that each R. 1,j can be satisfied in a finite number of steps. To satisfy condition 
(iii) that <P P E --tt A, we fix the following ~tt- reduction: for all w {0,i}*, w 6 E if and only 
if exactly one of w$$ or w$$$ is in A. To guarantee this condition, for each w {0,i}*, we always compute 
whe- ther w E and assign w$$ and w$$$ to A or A accordingly. Since strings of the forms w$$ and w$$$ 
will not both be involved in a single stage of the diagonal- ization and chain assignments (since they 
 are the smallest elements of their own f- chains), we can do this without violating conditions (i) 
and (ii). (See remarks fol- lowing the proof on why a <P-reduction de- -m fined by w E if and only 
if w$$ A, for example, may interfere with conditions (i), (ii) or (iv).) Construction. This is a stage 
construc- tion. In stage n = (i,j), we satisfy Ri,J~ and assign finitely many f-chains to A or A, and 
finitely many f-chains to B or B. We will make sure that all strings of length ! 2 n will be assigned 
by stage n. Algorithm. we first define some subprocedures. ASSIGN-A(x) ::= Begin A := A U xside-fA-chain(x); 
 B := B U otherside-fA-chain(x ) End; ASSIGN-A(x) ::= Begin := ~ U xside-fA-chain(x); := ~ U otherside-fA-chain(x 
) End; ASSIGN-B(x) ::= Begin B := B U xside-fB-chain(x); A := A U otherside-fB-chain(x ) End; 
ASSIGN-B(x) ::= Begi____n := ~ U xside-fB-chain(x); := ~ U otherside-fB-chain(x ) End; Procedure 
ASSIGN(x); Begin if x not assigned to A or then if x = y$$ for some y E {0,i}* then begin {x = y$$, 
assign y$$ and y$$$ to A or A such that y 6 E iff ex- actly one of these strings is in A} case i. y$$$ 
6 A: if y 6 E then ASSIGN-A(x) else-ASSIGN-A(x) ; case 2. y$$$ A: if y E then ASSIGN-A(x) else-ASSIGN-A~ 
 case 3. y$$$ not assigned toAorA: beg~n ASSIGN-A(y$$$) ; if y E then ASSIGN-A(x) else ASSIGN-A(x) 
 end end else if x = y$$$ for some y E {0,i}* then {similar to the case x = y$$,_ assign y$$ and y$$$ 
to A or A such that y E E iff exactly one of these is in A} else {x not yet assigned to A or A and not 
of the form y$$ or y$$$} ASSIGN-A(x) ; if x not assigned to B or B then ASSIGN-B(x) End; Now we describe 
the main procedure for stage n. Stage n = (i,j) x := ~; witness-found := false; bound := 2 n ; while 
(not witness-found) or (Ixl <_ bound) do Begin if witness-found then ASSIGN(x) else if x witnesses (a) 
of Lemma 1 then begin {Ri, j is now known tobe satisfied} witness-found := true; ASSIGN (x) end else 
if x witnesses (b) of Lemma 1 {x = w$ for some w E {O,1}* and x not in fA-chains already assigned} then 
begin {Ri, j will now be satisfied} witness-found := true; if gi(x) E B then ASSIGN-A(x) else gi(x) 
E B or gi(x) not assigned to B or begin ASSIGN-B(g i (x)) ; ASSIGN-A (x) ; bound := max(bound, Igi(x) 
l + i) en_d ; ASSIGN(x) {make x E B or B} end else {witness not found and x not a witness } ASSIGN (x) 
; x := x + 1 End {while} ; It is not hard to verify from our earlier discussions that the sets A and 
B constructed above satisfy conditions (i)-(iii). In the following we give a detailed analysis of their 
time complexity. Complexity of A and B. We now de- scribe how, given z, the construction of A and B 
can be simulated to determine if z E A, A, B, or B in time 20(Izl) Let m = Flog Izl~. The con- struction 
assigns z to A, A, B or during one of stages 0 through m. Thus, to determine membership of z, stage 0, 
 stage i, ..., stage m are simulated, in this order, until z is assigned. When simulating a particular 
stage, as soon as z is assigned, the entire process stops. Thus, we make the following very useful observation: 
during the simulations of stage 0, stage i, ..., stage m the while- do loop of each stage is never executed 
with a string x such that Ixl > Izl since z would be assigned before any such x is reached. During 
the simulations, assignments of f-chains to A, A, B, or B will be implemented by recording only finite 
portions of such assignments in a table T. We first analyze how much of an f-chain must be entered into 
such a table. In a particular stage n = (i,j) of the simu- lations, the longest string that may be considered 
by the while-do loop for a par- ticular value of x is the string gi(x). Assuming that (,) is monotonically 
in- creasing in both of its arguments, we have i < n < m. Thus, Igi(x) I ~ Pi(Ixl ) 2 Pi(Izl ) ! Pm(IZl 
) = Izl m + m ! 21zl m = 21zl Fl°glzl7 ! 22Fl°glzI72 Thus, when some f-chain is being assigned during 
the simulations, no string y with IYl > 22Fl°glz172 need be recorded in the table T. This implies 
that the procedure ASSIGN-A(x) should be changed to the following (let k = Flog Izln2). ASSIGN-A(x) 
::= begin for each y 6 xside-fA-chain(x ) such that Ixl ! IYl ! 22k and such that y is not in T do enter 
y in T as belonging to A; for each y 6 otherside-fA-chain(x ) such that Ixl ! IYl ! 22k and such that 
y is not in T do enter y in T as belonging to B end; ASSIGN-A(x), ASSIGN-B(x), and ASSIGN- B(x) are 
similarly modified. (Note that these procedures actually use z as a parameter.) Now consider the size 
of T. By inspection of the construction, it fol- lows that each iteration of the while-do loop assigns 
at most 3 f-chains so that at most 3-(3 Izl+l -i) f-chains in all are assigned during the simulations 
as a whole. (3 Izl+l -1 is the maximum number of iterations of the while-do loop.) Each f-chain assigned 
can have at most 22k strings of length at most 22k since f0 and fl are length-increasing. Hence, the 
 size of T is at most 22k.22k-3 - (3 [zl+l -i) < 2 d'Izl for some constant d since k = Cloglzl-~. In 
turn, this im- plies that a sequential search of T can be done in time 20(Izl) Finally, con- sider 
the time to generate the strings y such that Ixl ~ JYl ! 22k and y e fA- chain(x), f0 and fl are computable 
in time q for some polynomial q. At most 22k such y are computed and the longest has length at most 22k. 
Thus, the time to generate these y is at most 22k.q(22k) < 22k-2 h2k for some constant h which is 2 O(Izl) 
since k = Clog [z172. This anal- ysis shows that the modified procedures ASSIGN-X(x), for X = A, A, 
B, or B, all run in time 20(Izl) We now consider the time to decide if x has been assigned A, A, B, 
or B in some iteration of the while loop with Ixl Izl. Determining if x has been as- signed cannot be 
done by simply searching for x in T. The reason is as follows. When an f-chain is first assigned, it 
can happen in one of two ways. Consider, for example, fB-chain(w) where w is the smallest string in fB-chain(w). 
If fB- chain(w) is assigned by calling ASSIGN- B(w) or ASSIGN-B(w), then the entire initial segment of 
fB-chain(w) out to strings of length 22k will be recorded in T. Thus, if x 6 fB-chain(w), consulting 
T for x will work. However, if fB- chain(w) is assigned by calling ASSIGN- B(gi(y)) or ASSIGN-B(gi(y)) 
for some gi(y) ~ w, then only those strings u 6 fB-chain(w) with Igi(y) I ~ lul ~ 22k may be recorded 
in T and if x 6 fB-chain(w) and Ixl < Igi(y) I , x will not be in T. Thus, to determine the membership 
of x in B or B, for example, T must be searched for each y E fB-chain(x) such that IxJ ~ IYl ! 22k" 
(More precisely, x 6 B if for some y 6 xside-fB-chain(x), Ixl ~ lyl ~ 22k, Y is in T and is as- signed 
to B, or if for some y E °therside-fB-chain(x), Ixl ! IYI ! 22k, y is in T and is assigned to A.) It 
is easy to see that this can be done in time 2 O(Izl) by an analysis similar to our earlier analysis 
of ASSIGN-A(x). Only two more costs need to be con- sidered to finish our analysis. One is the cost 
of deciding if y is in E for some y such that x = y$$ or y$$$ and the other is the cost of deciding 
if x wit- nesses (a) or (b) of Lemma i. Consider an iteration of the while loop for a string x such 
that Ixl ! Izl in some stage n = <i,j> < m. ASSIGN(x) may check if y is in E for some y. But in this 
case, ]Yl < IY$$$I ~ Ixl + 1 i Izl + 1 and since E can be decided in time 20(n) , deciding if y is 
in E can be done in time 20(Izl) Deciding if gj(gi(x)) ~ x or if gi(gj(x)) ~ x takes time pm(Pm(IXl) 
) . (Again we are using monoton- icity of (,) so that i ~ n ~ m and J ! n ~ m.) Using Ixl ! Izl and m 
= Clog IzlT, it is easy to verify that pm(Pm(IXl) ) is 20(Izl) Finally, decid- ing if gi(x) otherside-fA-chain(x) 
can be done by generating y otherside-f A- < 22k and chain(x) such that Ixl ~ IYl _ seeing if gi(x) 
appears. Again, our earlier analysis shows that this can be done in time 20(Izl) To summarize, each 
iteration of the while loop for a value x such that Ixl ! Izl in some stage n ! m executes in time 2 
O(Izl) Since the while loop exe- cutes only for x such that Ixl ~ Izl, it follows that A and B and in 
EXP. [] Remark. In the above proof, we showed that E __~t A via the reduction that y 6 E if and only 
if exactly one of y$$ or <P_ y$$$ is in A. This is not a -m reduction. We would like to have E <P A 
 --m by simply putting y$$ in A if and only if y E E, for example, since this would make A EXP-complete. 
However, since the diagonalization process in stage n = (i,j } requires that x 6 A if and only if gi(x) 
 B when x witnesses (b) of Lemma i, the assignment of x to A or A de- pends on whether gi(x) B or not, 
and that, in turn, may depend on whether y E or not for some y {0,i}* as it is pos - sible that gi(x) 
 otherside-fA-chain(y$$). So, the runtime for recognizing "x A?" may take 2 c'pi(Ixl) moves (note that 
IYl may be as large as Igi(x) I and "y E?" takes time 2c'lYl), and is not even bounded by 2 q(Ixl) for 
any fixed poly- nomial q. We avoided this problem by not computing "y E?" until the computation reaches 
the point where "y$$ A?" or "y$$$ A?" is to be determined. By doing <P so, we sacrificed the -reductlon 
between --m E and A. In short, it appears to be dif- ficult to satisfy simultaneously conditions (i), 
(ii), (iv), and E <P A using our --m techniques. Thus, the question of whether the existence of one-way 
functions implies that the EXP-complete sets are not all polynomial-time isomorphic remains open. 
Acknowledgment We would like to thank Alan Selman and his theory group at Iowa State University for 
bringing Proposition 1 to our attention. This helped to strengthen considerably an earlier version 
of this paper. We also thank Osamu Watanabe for point- ing out that our construction of sets A and 
B in Theorem 1 can be made to run in exponential time. This observation was made independently of our 
work. References i. L. Berman, Polynomial Reducibilities and Complete Sets, Ph.D. dissertation, Department 
of Computer Science, Cornell University, 1977. 2. L. Barman and J. Hartmanis, On isomor- phisms and 
density of NP and other complete sets, SIAM J. Comput. 6 (1977), 305-322.  3. M. Dowd, Isomorphism of 
complete sets, unpublished manuscript.  4. J. Grollmann and A. Selman, Complexity measures for public-key 
cryptosystems, Proc. 25th IEEE Symp. Foundations of Computer Science (1984), 495-503.  5. D. Joseph 
and P. Young, Some remarks on witness functions for non-polynomial and non-complete sets in NP, Theoret. 
Comput. Sci. 39 (1985), 225-237.  6. K. Ko, On some natural complete oper- ators, Theoret. Comput. Sci. 
37 (1985), 1-30.  7. O. Watanabe, On one-one polynomial time equivalence relations, Theoret. Comput. 
Sci. 38 (1985), 157-165.  8. P. Young, Some structural properties of polynomial reducibilities and sets 
in NP, Proc. 15th ACM Symp. Theory of Computing (1983), 392-401.  ~- ........................... other 
side-fA-chain (x) ...... -~ Figure i. fB-chain(x) Figure i. fB-chain(x) Figure i. fB-chain(x) <_ 
....... ~---/ X ............ ..~._,_o,.,°<,> ....... (a) fA-chain(x) and when x ends with a i. ~fl .......... 
xside-fB-chaln (x) ....... /\~1/\~,../~0 ~/~o ~ " otherslde-fn-chaln (x) ........-~ other side-fA-chain 
(x) ....... (b) fA-chain(x) and when x ends with a 0. ......... xslde-fA-chaln(x) ....... x ~--------/---~---......... 
xslde-fB-chain (x) ....... ~ k /~o ~\ /N~ d'\~ ... ( ...... _ ................ otherstde_fB_Chain (x) 
........ / otherside-fA-chain (x) ...... ~,~ \~ ~... /~o ~ / -o .......... xside-fA-chain (x) ...... 
fl~~ .......... xside-fB-chain (x) ...... (c) fA-chain(x) and when x ends with a $. other side-fB-chaln 
(x) ...... 303  
			
