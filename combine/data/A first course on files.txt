
 A FIRST COURSE ON FILES Freeman L. Moore Department of Computer Science Central Michigan University 
 ABSTRACT :  Students are exposed to various computer lan- guages by means of introductory courses and 
texts. Often times, they do not have an adequate amount of time to become highly proficient in all aspects 
of a language. In the battle against time, often the material relating to file processing is omit- ted. 
This paper is about a course devoted entirely to file processing techniques as approached from several 
languages. INTROUDCTION:  Since the publication of the ACM 68 guidelines (2), many institutions for 
higher learning have adapted or modified their curricula in accordance with the goals set forth in that 
document. For institutions started since 1968, ACM 68 has been the guiding direction in course development. 
Cen- tral Michigan University has been no exception to that statement, where the only computer-related 
course was available through the mathematics department in 1968. Ten years later, Computer Science has 
developed into a separate department serving approximately 225 majors, i00 minors and over 35 graduate 
students at the master's level. One topic not dealt with in the ACM 68 ~uide- lines, is a specific course 
dealing with the techniques of processing and maintaining data files. In 1975, it was felt that such 
a need existed and thus prompted the introduction of our junior level course entitled "File Manipulation 
Techniques." The objective of the course is to make the student well versed in knowledge of files and 
their structure, as well as the mechanisms of the major computer languages used to maintain and access 
files. The Committee on Curriculum in Computer Sciences (6) has re-evaluated the ACM 68 guide- lines 
and now includes the course CS-5, Intro- duction to File Processing. Furthermore, they have chosen to 
include the course in their core curriculum. While we have not yet required our students to take this 
course, feedback from those who have, reaches our students and is causing the course enrollment to swell. 
 CHOICE OF LANGUAGES: it is only practical to present the use of files from the viewpoint of the languages 
most commonly used by business: COBOL, PL/I, and FORTRAN. Thus, the student can experience the good and 
bad of three different file implementation languages. This is not intended to exclude other langauges 
such as RPG, PASCAL, BASIC,.., yet is used to indicate the importance of the chosen languages. Students 
entering the course are expected to have a working knowledge of FORTRAN and PL/I, yet those programming 
courses have little, if any, time to spend on file processing. Hence, to ensure a well-rounded knowledge, 
FORTRAN and PL/I file capabilities are initially presented with an appro- priate programming assignment 
to use sequential and direct-access methods. Our version of FORTRAN currently supports sequential and 
dlrect-access files by means of the DEFINE FILE statement. The FORTRAN 77 standards of IF-THEN-ELSE-ENDIF 
are already available with the OPEN and CLOSE state- ments expected in the next general release of the 
compiler. Coverage of PL/I files is more detailed due to the ENVIRONMENT option of the OPEN state- ment. 
This allows the student the opportunity to become exposed to internal storage methods of files as used 
by the operating system, such as segments and buffers. Since the students already know these two languages, 
the file processing abilities can be presented and contrasted in about four weeks of course time. By 
this time, students should be aware of the concepts of sequential and direct (random) files as well as 
ISAM (indexed sequential) files. Since they know PL/I, they are familiar with structures and picture 
declarations. With this background, an introduction to COBOL is quite easy. The approach in presenting 
COBOL is not to treat it as another language, but as a means to specify and manipulate a set of data. 
This presentation naturally alters the "normal" order as given in most COBOL texts as well as omitting 
some informa- tion (e.g. report writer, extensive use of editing, SPECIAL NAMES). Since a great deal 
of COBOL can be inferred from PL/I, this COBOL introduction only requires about eight weeks for the students 
to become comfortable. JOB CONTROL LANGUAGE:  Students often survive the introductory courses Realizing 
that the commercial world is an with a knowledge of problem solving and how to use extremely large user 
and creator of data files, a language. What they generally fail to grasp is 79 how to use the operating 
system commands correctly. Too often, an instructor merely provides the needed JCL (job control statements) 
and students are un- able (or don't care) to understand what it is. This problem could be compounded 
in this course since three languages are used and control card assignments of cataloged and temporary 
files must be used. Several class sessions throughout the semester have been devoted to JCL usage, including 
infor- mation on which system manuals may be of benefit for more information. Exercises such as explain- 
ing what a given runstream causes and the possible options available have been helpful. This has also 
allowed for the presentation of the @DUMP utility for dumping files, and discussion of internal formats 
such as SDF (system data format) and the clarification between program and data files per Univac terminology. 
 PROJECTS: Sperry Univac is attempting to standardize file formats for its various ASCII language processors 
by using a common I/O subsystem called PCIOS. By means of PCIOS, files created in FORTRAN can be used 
by PL/I and COBOL programs, and vice-versa. This inter-language file compatibility is used in the development 
of student projects. During the last four weeks of the semester, students were assigned to four-member 
teams, with each team given a different task chosen by the instructor. As much as possible, each team 
was to develop three or four related programs, all interacting/ updating with a file or a set of files. 
The choice of language was left up to the students, with most (80%) choosing COBOL. Student demand for 
JCL and file usage varied greatly in this part of the course and finally revealed that students could 
undertake team projects and decide upon the needed JCL. CONCLUSIONS: Upon completing the course, the 
students not only understand files, but they have a better understanding of PL/I and FORTRAN with a good 
exposure to COBOL. In addition to using the languages, some understanding of the support software is 
gained. In keeping with the COBOL-74 standards, Sperry Univac has recently implemented MSAM files (multi-keyed 
files). Discussion of this file organization will be incorporated into the course outline for the future. 
 Appendix A provides a course outline while Appendix B provides a brief description of the programming 
assignments given. Student accep- tance of the course has been overwhelming in that the population has 
doubled (from one section of 25 students in 1977 to two sections of 30 students each in 1978), and continues 
to show a need both to students as well as to their prospec- tive employers. It is my opinion that a 
course such as this needs to be incorporated into the academic life of every computer science student 
and that the development of a course like this (or CS-5) is a start.  Appendix A COURSE OUTLINE CPS 
370 -File Manipulation Techniques Creation and manipulation of program and data files, scientific and 
industrial applications of file-oriented systems, prominent computer languages having file processing 
capabilities. Prerequisite: Knowledge of FORTRAN and PL/I.  Sequential Files 1 week FORTRAN (tape) 
and PL/I (stream) Blocking of data Direct Files 1½ weeks DEFINE FILE of FORTRAN DIRECT organization 
in PL/I ISAM Files in PL/I 1½ weeks Using and creating files Concept of keys Introduction to COBOL 
4 weeks Basic concepts of divisions presented with sequential files More of COBOL 4 weeks P~ogram structure/design 
SORT and MERGE abilities ISAM files Direct access files Project 4 weeks Miscellaneous topics including: 
Internal/external documentation Program testing Linked lists applied to files Student involvement in 
team projects 16 weeks  Appendix B BRIEF DESCRIPTION OF PROGRAMMING ASSIGNMENTS  i. Develop a program 
to list a file from a magnetic tape (PL/I or FTN). All homework assignments will be available on a magnetic 
tape, located in different files. Develop a program to list your next homework assignment after moving 
the tape to the correct file.  2. Maintain a variable-record sized file of textual information (PL/I 
or FTN). Consider a collection of fixed length records (card images), several of which form one logical 
record. Develop a program to create/update/delete these variable sized records from your directory. 
 80 3. Compute gas mileage (COBOL). Information about the usage of an automobile is on a sequential 
file. Provide a usage report including the cost/mile, emphasis to be on output editing.  4. Merge 
two sequential files (COBOL). Two sequential files have been created, combine these into one sorted 
file without use of the MERGE statement, although use of SORT is encouraged. Include all needed error 
checking to eliminate redundant records. 5. Updating a master file via transactions (COBOL).  Given 
an indexed master file, update the file according to a set of transaction records. After updating, produce 
an alphabetical listing of all records satisfying some pre-assigned criteria.  6. Small class registration 
(COBOL).  Develop a program to maintain two ISAM files, one by section and the other by student number. 
Input is a series of drop/add requests by students for a particular section. Upon conclusion, print a 
class list for each section. REFERENCES <RefA>i. <SinRef><author>Brainerd, W. </author>"<title>FORTRAN 77</title>," <journal>Communications of the ACM</journal>, <date>October, 
1978</date></SinRef>. 2. <SinRef>"<title>Curriculum 68: Recommendations for Academic Programs in Computer Science</title>," <journal>Communications 
of the ACM</journal>, <date>March, 1968</date></SinRef>.  3. <SinRef><author>Epley &#38; Sjoerdsma</author>, "<title>A Two-Semester Course Sequence in Introductory 
Programming Using PL/I-A Rationale and Overview</title>," <journal>SIGCSE Bulletin</journal>, <date>August, 1978</date></SinRef>.  4. <SinRef><author>Gottfried, B.</author> <title>Comparison 
of Programming Languages</title>, <publisher>Quantum Publishers</publisher>, <date>1973</date></SinRef>.  5. <SinRef><author>Judd, D. R. </author><title>Use of Files</title>, <volume>2</volume>nd Ed., <publisher>American 
Elsevier</publisher>, <date>1975</date>. (Assigned text)  </SinRef>6. <SinRef>"<title>Special Issue on Computer Science Curricula</title>," <journal>SIGCSE Bulletin</journal>, 
<date>June, 1977</date></SinRef>.  7. <SinRef>"<title>Team Projects in the Undergraduate Curriculum</title>," <journal>SIGCSE Bulletin,</journal> <date>February, 1978</date></SinRef>.  </RefA>
 
			
