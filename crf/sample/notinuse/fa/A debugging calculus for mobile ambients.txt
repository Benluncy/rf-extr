
 A Debugging Calculus for Mobile Ambients * GianLuigi Ferrari Computer Science Dept. Universitb di Pisa 
Corso Italia 40 56125, Pisa, Italy giangi@di.unipi.it  Keywords Wide Area Network, Programming Languages, 
Debuggers ABSTRACT Advancements in network-aware computing has prompted the study of novel programming 
languages with advanced programming abstractions to support various forms of mo- bility and to coordinate 
and monitor the use of resources. This work addresses the issue of designing debuggers for network-aware 
programming languages. In our approach a debugger is viewed as being an extension of the underly- ing 
programming language with suitable debugging abstrac- tions. We apply this idea to Cardelli and Gordon's 
AmbÂ£ent Calculus [3]. The resulting debugger is designed to monitor and trace executions of mobile ambients 
by keeping track of causal informations about events of computations. 1. OVERVIEW Network-aware applications 
are distributed applications that use network facilities to access remote resources and services. A characterizing 
feature of such applications is the possibility of extending them with new mobile components (e.g. code 
downloaded from other sites of the network) when the application is running. The ability of dealing with 
d~/- narnic and unpredictable changes of their network environ- ments distinguishes network-aware applications 
from tradi- tional distributed applications. Several foundational calculi have been proposed as models 
for the design of network-aware programming languages [3, 6, 8, 9, 10, 11]. Their programming models 
encompass ab- stractions to represent the execution contexts of the net where applications roam and run, 
and suitable mechanisms to ensure security policies which avoid the possibility of at- tack. *Research 
supported by EC TMR Network GETGRATS (General Theory of Graph Transformation Systems). Permission to 
make digital or hard copies of all or part of this work for personal or classroom use is granted without 
fee provided that copies are not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on 
servers or to redistribute to lists, requires prior specific permission and/or a fee. SAC2001 Las Vegas, 
NV Copyright 2001 ACM 1-58113-324-3/01/02 ..$5.00  Emilio Tuosto Computer Science Dept. Universitb di 
Pisa Corso Italia 40 56125, Pisa, Italy  etuosto@di.unipi.it Our aim is to address the issue of design 
debuggers for net- work programming languages focusing on how debuggers can be formally defined. The 
formal characterization of what can and cannot be accomplished using the debugging mech- anisms has a 
practical utility as it provides the formal ba- sis to identify and generate debugging abstractions and 
the corresponding analytical tools. Our approach draws much of its power by the idea of viewing a debugger 
as being an extension of the underlying programming language with a variety of debugging abstractions 
to program the debugging activities. For the purpose of this work, a debugging session is an executable 
process programmed inside the debugging calculus. To demonstrate the approach, we introduce a simple 
de- bugging calculus for Cardelli and Gordon's Ambient Calcu- lus [3]. In the calculus a debugging session 
is programmed using the ambient programming model. For instance, the ambient A[P] encapsulates process 
P inside a debugging boundary which controls all the interactions among P and its surrounding environment. 
Ambients can enter into a de- bugging session by exercising the in capability which has the effect of 
moving an ambient inside the debugging ambi- ent. For instance, we can write m[inA.QIR ]IA[- P]~A[m[QIR]IP 
] to dynamically attach anabient ra to a debugging session. Similarly, to terminate a debugging session 
it is enough to exercise the open capability. We have: open A.P I A[Q] ~ el Q. The design of the calculus 
ensures that the state of the debugging ambient keeps track of all the interactions inside the boundary 
and, moreover, performs the logging of the operations which crossed the boundary. We now explain the 
idea. Assume that the pair (T, S) represents the state of the debugger. The S component details which 
are the monitored ambients (their names) while T describes (an abstraction) of the trace of the execution. 
Assume also that V is the set of the monitored authorities (ambient names). Then, the expression n~. 
siP] is a proc~s of the debugging calculus. The process n~. siP] describes an intermediate state of a 
debugging session: P gives the part of the program which has still to be debugged, while pair (7, S) 
keeps track of the operations carried on in the past of the ongoing debugging activity. The basic idea 
is that a step in the execution of a monitored ambient has a side effect over the state of the debugging 
ambient. We remark that the debugging ambient nVr. siP] is similar to the state operator introduced by 
Batten Figure 1: Debugging ambients as folders k ki I1_, II ~ 'l~ I :!i :q , i :J Figure 2: Folder 
reduction and Bergstra [1] to describe processes which transform a certain state space. An attractive 
property of our debugging calculus is that debugging states have a natural representation in terms of 
Petri nets. This has the main advantage that debugging activities may benefit from knowledge about the 
causal re- lation of the events in a computation. In other words, it becomes easy to understand the causal 
flow of information of computations of mobile ambients. Debugging ambients can be graphically represented 
as a generalization of the folder metaphor. An ambient is viewed as an active named folder containing 
computational entities which are referenced through pointers. These pointers give the access paths to 
the monitored processes. The folder also includes a picture (causal net) of the ongoing execution and 
the set of monitored names. Figure 1 illustrates the folder representation of the debugging ambient h 
v, siP]. Figure 2 is the graphical representation of the transition k[hO I n[in h I m[(M)]]] --~ k[h[n[(M)]]]. 
Initially, the net of k simply reports that k contains two sub-ambients, h and n; similarly, the net 
of h is void and the net associated to n reports that n contains a capability in parallel with ambient 
rn. After the transition, the net of k records that n is entered in h, the net of h records that an ambient 
named n is appeared in h and, finally, the net of n records that a capability has been consumed and a 
process is terminated, i.e. the place named o has disappeared. The main contribution of our work is 
the formal defini- tion of the debugging calculus for mobile ambients. The full version of the paper 
provides a semantics theory to sup- port debugging reasoning about behaviors. Moreover, it is proved 
that the semantics of processes is not altered when they are wrapped in a debugging environment. We focused 
on the ambient calculus, however similar techniques can be applied to define debuggers for other calculi 
(details may be found in the full paper). Indeed, we are experimenting our techniques in the implementation 
of a debugger for the Klair, experimental programming language [6]. 2. RELATED WORKS Debugging tools 
(e.g. tracers and profilers) for functional languages are automatically generated from a continuation- 
passing style semantics in [7]. In [4] a framework is veloped to define and prove correctness of debuggers. 
The debugger is viewed as a function acting over the sequence of the past evaluation states of the program. 
In [5] a non interleaving semantics for the Facile language has been ploited to detect and fix bugs of 
an agent based system. The main advantage of a causal semantics is that one may focus directly on the 
events which caused the bug. To our knowl- edge, the idea of developing a debugger on top of the pro- 
gramming language definition has been originally proposed by Bernstein and Stark [2]. They design a debugger 
a functional language which provides a combinator, called focus, which allows the user to focus on the 
evaluation particular subexpressions of programs and to view program execution (a debugging session) 
from that perspective. Our work extends the approach of Bernstein and Stark to the case of network programming 
languages. Moreover, whereas Bernstein and Stark used standard labelled transi- tion system semantics 
we use a causal model of behaviors. 3. REFERENCES <RefA>[1] <SinRef><author>J. Baeten</author>, <author>J., Bergstra</author>. <title>Global Renaming Operators 
in Concrete Process Algebra</title>. <journal>Info~Comp</journal>. <volume>78 (3</volume>), <pages>205-245</pages>, <date>1988</date></SinRef>. [2] <SinRef><author>Bernstein</author>, <author>K. </author>and <author>Stark</author>, <author>E</author>.: <title>Operational 
semantics a focussing debugger</title>", <journal>MFPS'95, ENTCS </journal>(<volume>1</volume>), <date>1995</date></SinRef>. [3] <SinRef><author>L. Cardelli</author>, <author>A. Gordon</author>. <title>Mobile Ambients</title>. 
<journal>Theoretical Computer Science</journal>, <volume>240 (1)</volume> <pages>pp. 177-213</pages>, <date>2000</date></SinRef>. [4] <SinRef><author>F. da Silva</author>. <title>Correctness proofs of compilers 
and debuggers: an approach based on structural operational semantics</title>. PhD Thesis,<institution> University of Edinburgh</institution>, 
<journal>LFCS</journal>, <date>1991</date></SinRef>. [5] <SinRef><author>P. Degano</author>, <author>C. Priami</author>, <author>L. Leth</author>, <author>B. Thomsen </author><title>Causality for debugging mobile agents</title>. <journal>Acta 
Informatica </journal><volume>36</volume>, <pages>353-374</pages>, <date>1999</date>, </SinRef>[6] <SinRef><author>R. De Nicola</author>, <author>G. L. Ferrari</author>, <author>R. Pugliese</author>. <title>Klaim: A Kernel Language 
for Agents Interaction and Mobility</title>, <journal>Theoretical Computer Science</journal>, <volume>238 (1-2)</volume>, <pages>pp. 389-437</pages>, <date>2000</date></SinRef>. [7] 
<SinRef><author>A. Kishon</author>, <author>P. Hudak</author>,<author> C. Consel</author>. <title>Monitoring semantics: a formal framework for specifying and reasoning 
about execution monitors</title>. <booktitle>Proc. ACM SIGPLAN'91, Conf. on Progr. Lang. Design and Impl.</booktitle>, <pages>338-352</pages>, <publisher>ACM 
Press</publisher> <date>1991</date></SinRef>. [8] <SinRef><author>C. Fournet</author>, <author>G. Gonthier</author>, <author>J.J L6vy</author>, <author>L. Maranget</author>, <author>D. R6my</author>. <title>A Calculus of Mobile Agents</title>, 
<journal>LNCS</journal> <volume>1119</volume>, <pages>pp. 406-421</pages>, <publisher>Springer</publisher>, <date>1996</date></SinRef>. [9] <SinRef><author>M. Hennessy</author>, <author>J. Riely</author>. <title>Type-safe execution of mobile agents 
in anonymous networks</title>. <journal>LNCS</journal> <volume>1603</volume>, <pages>pp.95-115</pages>, <date>1999</date>, <publisher>Springer</publisher>, <date>1999</date></SinRef>. [10] <SinRef><author>P. Sewell</author>, <author>P. Wojciechowski</author>, 
<author>B. Pierce</author>. <title>Location-Independent Communication for Mobile Agents: a Two-Level Architecture</title>. <journal>LNCS</journal> <volume>1686</volume>, 
<pages>pp.l-31</pages>, <publisher>Springer</publisher>, <date>1999</date>. </SinRef>[11] <SinRef><author>J. Vitek</author>, <author>G. Castagua</author>. <title>Towards a Calculus of Secure Mobile Computations</title>. 
<journal>LNCS</journal> <volume>1686</volume>, <pages>pp. 44-77</pages>, <publisher>Springer</publisher>, <date>1999</date></SinRef>.</RefA>   
			
