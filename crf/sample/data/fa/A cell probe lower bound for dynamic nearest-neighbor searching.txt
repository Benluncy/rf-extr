
 A cell probe lower bound for dynamic nearest-neighbour searching Stephen Alstrup* Thore Husfeldt t 
Theis Rauhe* 1 Introduction The nearest-neighbour search (NNS) problem is to store a set of points and 
return the point of shortest distance to any given query point. In the fully-dynamic NNS problem, the 
data structure is maintained under inser- tions and deletions of points. This paper proves lower bounds 
for the dynamic NNS problem in two dimensions with respect to the Euclidean norm in finite precision 
models. The lower bound holds in the cell probe model, so it "can be trusted to apply to virtually any 
conceiv- able sequential algorithm" [8]. We consider the following setting: The dimension is 2, and the 
points S C U 2 are integral with U = {1,...,2w}. The word size of our model is w, so every point from 
U 2 fits into two words. The update operations are insert(p), which adds p E U to S, and delete(p), which 
removes a point. The query is nearest(p), which returns a point q E S minimising [[p-q[], their Euclidean 
(or, L2) distance. We show that any data structure that supports these operations needs f~(log [U[/log 
log [U[) amortised time per operation. For the semi-dynamic variants of the NNS problem, i.e., where 
the updates are only insertions or only deletions, we show the same bound for the worst-case time per 
operation. 1.1 Techniques. Our lower bounds are derived by reductions from the marked ancestor problem 
[3] for trees. This problem is to maintain a subset M of nodes of a fixed rooted tree T with n nodes. 
The nodes in M are the marked nodes. A query for a node decides whether it has a marked ancestor or not. 
In [3] the authors show a lower bound of f~(logn/loglogn) amortised time per operation in the cell probe 
model with word size log °(x) n. 1.2 Related work. In one dimension, the static NNS problem is known 
as the static predecessor problem: store a set S C U such that max{x E S [ x < q} for a given query point 
q E U can be returned ---tiT-University of Copenhagen. Glentevej 67, DK-2400 Copen- hagen NV. E-mail 
{stephen,theis}@it-c.dk. ?Department of Computer Science, Lund University, Sweden. E-mail thore@cs. Ith. 
se. efficiently. Recently [6] presented tight bounds of 0 (min{log log [U[/log log log IV[, x/log IS[/log 
log IS[ }) per operation for a data structure using polynomial space in the size of S. Thus the dynamic 
predecessor problem needs fl(loglog [U[/ logloglog [U[) amortised time per operation. A van Emde Boas 
tree uses O(log log IU[) per operation. Recently, a number of cell probe lower bounds for the static 
NNS problem in high dimensional spaces and the Hamming cube have been established [5, 7, 8]. The points 
S C U are viewed a w-bit strings and the distance norm is the Hamming distance. For space polynomial 
in S there is aft (min{[S[, log [U[/log IS[}) lower bound for query time for the exact NNS in this setting 
[5]. However, these bounds do not seem to imply non-trivial lower bounds for constant dimensional spaces, 
so in the static case, the lower bound for one dimension from [6] is still the best known. In the e-approximate 
NNS problem for Euclidean space, we are satisfied with finding a point whose distance is within 1 + e 
of the minimum distance. By extending the van Emde Boas tree one can achieve update and query time of 
O(loglog[U D for for any constant e > 0 and constant dimension [4]. Hence, our lower bound separates 
the complexity of approximate and exact dynamic NNS for constant dimension > 2 in the cell probe model. 
It is generally believed [9] that the exact NNS problem is much harder than the approximate NNS problem. 
No dynamic exact NNS data structure for the Euclidean planar norm with polylogarithmic time per operation 
is known. The current best upper bounds [1, 2] are O([S[ ~) per operation for any constant e > 0. 2 
Lower bound 2.1 Interval cover. Our reduction goes via the in-terval cover (IC) problem. We write [n] 
= {1,... ,n) and [i .. j] = {i,... ,j}. The problem is to maintain a set I of intervals [i.. j] C [n] 
under the following opera- tions: insert(i, j) adds the interval [i..j] to I, delete(i, j) removes it, 
and covered(x) returns 'yes' iff x E Ur[i ..j]. THEOREM 2.1. In the cell probe model with word size log°0) 
n, the IC problem requires fl(logn/loglogn) amortised time per operation. The same lower bound holds 
for the worst-case single-operation complexity of the semi-dynamic variants. This theorem is obtained 
by a simple reduction from the marked ancestor problem [3]. We omit the proof. 2.2 Reduction. Let n be 
a positive integer. Let [x ± d] denote the interval [x -d .. x + d]. Let D(x, y) denote the disc of radius 
n 2 with center in (x,y). To each point (x, y) with 0 < y < n 2 we associate an integer interval J(x, 
y) = [x ± kn] where k is the largest integer such that [x ± kn] × {0} C D(x,y)M (N × {0}). We let J = 
Upes J(P)" Finally, define f(k) = [n n2~- k2J. L~°(x, y) } LEMMA 2.1. IfO < k < n then J(x,f(k)) = [x 
± kn]. Proof. Let l denote the horizontal distance between (x, 0) and the perimeter of D(x, y). We need 
to show (2.1) kn < I < (k + 1)n. By the Pythagorean Theorem, 12 = n 4 - f(k) 2. If we let a (0 < a 
< 1) denote the fractional part of nv~-k 2, we can write f(k) 2 = n 4 -n2k 2 + ~2 _ 2anv/~ ¢ - k 2. Thus, 
(2.2) 12 -~ rt2k 2 - a 2 -4- 2an~/n 2 - k 2. Since k < n the rightmost term is at least 2an > a > a 
2, so l > nk, establishing half of (2.1). For the other half, we have 2anv/~ -k 2 < 2n 2, so the right 
hand side of (2.2) is strictly less than n2k 2 +2n 2. Since k > 0 we can write n2k2+2n 2 < n2k2+n2+2kn 
2 = n2(k+l) 2 as claimed. [] LEMMA 2.2. X E J iff D(x,O) MS #O. Proof. The statement x E J means that 
(x',y') E S with x E J(x',y'). This means that (x,0) E D(x',y') and by symmetry (x',y') E D(x,O) as claimed. 
[] THEOREM 2.2. The dynamic NNS problem for universe U 2 = {1,..., 2w} 2 in the cell probe model with 
word size w has lower bound of ~(logiUi/loglog]UI) amortised time per operation. The same lower bound 
holds for the worst-case single-operation complexity of the semi- dynamic variants. Proof. Let n = 2½ 
(w-l), so that U = {1,...,2n2}. We reduce the IC problem on [n] to NNS on U. Since the IC problem has 
a lower bound of ~2(logn/loglogn) for word size w = log °0) n, this implies a lower bound of ~(log IUI/loglog 
IUI) for the NNS problem. Let I, a set of intervals from [n], denote an instance to IC. We will maintain 
set S C [2n 2] x [n 2] C U 2 such that (2.3) [i .. Jl e I iff (n(i + j), f(nli -Jl)) e S. Every interval 
insertion and deletion results in a single update to the NNS data structure. For the query we claim that 
covered(x) is equivalent to the test N nearest(nx, O) - (nx, 0) 11 < n 2. This expression is equivalent 
to D(nx, O)M S ~ 0, and by Lem. 2.2 to nx E J. In other words there exists p E S such that nx E J(p). 
By our invariant (2.3) we can write p as (n(i + j),f(nii -Jl), and using Lem. 2.1 we get nx e J(p) = 
J(n(i + j), f(nii -Jl)) = [n(i + j) ± nii -Jl] = [ni .. nj], which means x E [i .. j] as claimed. [] 
 References <RefA>[1] <SinRef><author>P. K. Agarwal</author>, <author>D. Eppstein</author>, and <author>J. Matougek</author>. <title>Dy-namic algorithms for half-space reporting, 
proximity problems, and geometric minimum spanning trees</title>. <booktitle>In FOCS</booktitle>, <date>1992</date></SinRef>. [2] <SinRef><author>P. K. Agarwal </author>and <author>J. Matou~ek</author>. 
<title>Ray shooting and parametric search</title>. <journal>SIAM J. Comp</journal>.,<volume> 22(4)</volume>:<pages>794-806</pages>, <date>1993</date></SinRef>. [3] <SinRef><author>S. Alstrup</author>, <author>T. Husfeldt</author>, 
and <author>T. Rauhe</author>. <title>Marked ancestor problems</title>. <booktitle>In 39th FOCS</booktitle>, <pages>pages 534-543</pages>, <date>1998</date></SinRef>. [4] <SinRef><author>A. Am±r</author>, <author>A. Efrat</author>, <author>P. 
Indyk</author>, and <author>H. Samet</author>. <title>Efficient regular data structures and algorithms for location and proximity problems</title>. 
<booktitle>In 4Oth FOCS</booktitle>, <date>1999</date>. </SinRef>[5] <SinRef><author>O. Barkol </author>and <author>Y. Rabani</author>. <title>Tighter lower bounds for nearest neighbor search and 
related problems in the cell probe model</title>. <booktitle>In 32nd STOC</booktitle>, <date>2000</date></SinRef>. [6]<SinRef> <author>P. Beame </author>and <author>F. Fich</author>. <title>Optimal bounds 
for the predecessor problem</title>. <booktitle>In 31st STOC</booktitle>, <date>1999</date>. </SinRef>[7] <SinRef><author>A. Borodin</author>, <author>R. Ostrovsky</author>, and <author>Y. Rabani</author>. <title>Lower bounds 
for high dimensional nearest neighbor search and related problems</title>. <booktitle>In 31st STOC</booktitle>, <date>1999</date>. </SinRef>[8] <SinRef><author>A. Chakrabarti</author>, 
<author>B. Chazelle</author>, <author>B. Gum</author>, and <author>A. Lvov</author>. <title>A lower bound on the complexity of approximate nearest- neighbor searching 
on the hamming cube</title>. <booktitle>In 31st STOC</booktitle>, <date>1999</date>.</SinRef> [9] <SinRef><author>M. Staid</author>. <title>Closest-point problems in computational geometry</title>. 
<booktitle>In Handbook of Comp. Geom. Elsevier</booktitle>, <date>2000</date></SinRef>.</RefA>  
			
