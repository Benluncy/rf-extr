
 Adding Some Spice to CSI Curricula Geoffrey Holmes and Tony C. Smith Department of Computer Science, 
University of Waikato, Hamilton, New Zealand. geoff,tcs@cs.waikato.ac.nz Abstract CSl curricula that 
focus primarily on teaching programming skills may fail to give students a sense of the breadth of topics 
to which a knowledge of computability might apply. We attempt to correct for this by adding a survey 
of computing concepts into our introductory course. Sophisticated topics usually reserved for senior 
level courses are presented in a popular science manner, and given equal time alongside the essential 
introductory programming material. By exposing students to a broad range of specific computational problems 
we endeavour to make their first course more interesting and enjoyable, and instil in them a sense of 
vision for areas they might specialise in as computing majors.  Introduction CS 1 curricula are often 
developed from a core requirement that computing majors must be skilled programmers before they can undertake 
the more interesting and compelling topics of Computer Science in subsequent courses. For many first 
year students, this emphasis serves only to convey the distorted view that Computer Science is just programming, 
and that taking up the subject as a major will inevitably result in years of staring bleary eyed at a 
computer screen attempting to placate a disgruntled compiler. Some educators have proposed that CSl curricula 
can be made more enjoyable by incorporating specialised educational software [4], or by setting more 
interesting programming assignments [6], or by attempting to teach programming in different ways [!3h 
But, as has often been said about mathematics, changing the way in which fundamental skills are taught 
does little to overcome the primary obstacle as perceived by the students-being able to see the point. 
 , The challenge for educators in any discipline is to present topics of interest in a manner that will 
capture the imagination of the learners and release the creative energies that will carry them through 
their programme of study, fostering a sense of enjoyment for what may develop into a lifelong career. 
Permission to make digital/hard copy of part or all of this work for personal or classroom use is granted 
without fee provided that copies are not made or distributed for profit or commercial advantage, the 
copyright notice, the title of the publication and its date appear, and notice is given that copying 
is by permission of ACM, Inc. To copy otherwise, to republish, to post on servers, or to redistribute 
to lists, requires prior specific permission and/or a fee. SIGCSE 97 CA, USA 0 1997 AcM o-89791 -889~497tooo2...$3.50 
Introductory courses in Computer Science have a great many conflicting agendas to address. How to introduce 
programming to students who have no prior experience; how to correct for prior experience; how to motivate 
students who can program and who have acquired good habits ; how to introduce abstraction as a key concept; 
how to introduce the subject of Computer Science, its scope, beauty, genius, and fun [lo]. Add to this 
list the issue of making the curriculum more inclusive for females, the religious and sometimes fanatical 
wars over programming language, and the need to encourage good written and oral communication skills 
and we have a problem as complex as any encountered in the subject itself. This situation has not deterred 
attempts by educators to find a solution, many of which are adapted to local conditions [S, 11. In this 
paper we present our local solution which we believe strikes a nice balance among these conflicting agendas 
by dividing all lectures, laboratories and tutorials into two parallel streams: one dedicated to teaching 
introductory programming, and the other to giving students exposure to a broad spectrum of computing 
concepts and computational problems. Sophisticated topics usually reserved for more senior level courses 
are presented in a manner that can be understood by those with little computing experience, Our hope 
is that this sneak preview of the subject gives students a better sense of what Computer Science is about, 
and puts thorn in a better position from which to make decisions about undertaking a major programme 
of study.  Background At Waikato University, Computer Science majors must pass two 12 week semester 
courses in order to qualify for entry into second year. In this paper we concentrate on describing the 
first of these 12 week courses. Students enter the course with a variety of computing experiences, with 
the majority having had no prior computer programming experience. The objectives of the course arc to 
introduce students to programming in C-l-t, and to basio ideas and concepts relating to a wide variety 
of topics in Computer Science. The course has per week: three lectures, two tutorials and between two 
and four hours of hands-on programming practice. The first lecture of the week is on programming, the 
second is on a Computer Science concept and the third is a review lecture in which the lecturer presents 
five or six small problems related to the previous two lectures. The students attempt the problems in 
the lecture, and then the 204 lecturer, resisting the temptation to reveal the answers too soon, carefully 
goes through the solutions. In this way students can assess their progress with the material. The tutorials 
are split behveen programming and concepts. The course is assessed by a combination of internal coursework 
and final examination (50% for each). The internal coursework is based on laboratory live practical tests, 
a small programming project, programming practicals and homework from the concept tutorials. In order 
to stress the importance of the work done in the concept tutorials and at home, we allocate almost half 
of the internal assessment to this activity. The programming side of the course is to all intents and 
purposes fairly standard, and so we will only mention it further where necessary. There is an open question, 
however, as to whether it is important to bind the work on programming with the concepts. We will return 
to this question after we have described what we mean by a concept tutorial. Concept Tutorials The course 
contains ten concept tutorials on a range of Computer Science topics. The tutorials are dovetailed into 
the lecture program, and represent the practical consequence of the material presented in lectures. Students 
attend the tutorial where the practical material is introduced. They start to tackle the problems here 
where they can gain assistance from their tutor. Remaining work is taken home to complete, and their 
solutions are handed in at the next concept tutorial. Table 1 provides a summary of the topics covered 
and the activities students have to complete for each of the ten concept tutorials. The programming material 
is presented to the students in small pieces and is drawn together in the final two weeks of the course 
alongside a programming project and material on systems analysis. The idea is to bind the notion of programming 
in the large with systems development. This is why systems analysis is the topic for the final concept 
tutorial. The first five topics cover issues pertaining to representation, which we consider to be fundamental 
to an understanding of what Computer Science is all about and how programming is achieved on a computer. 
This material helps to cement programming ideas that are being presented in parallel on data types, variables, 
a basic data model of a computer and the principles of abstraction. The second five topics are more concerned 
with algorithms and representing procedures. This material is presented in conjunction with programming 
notions such as control structures, functions, modularisation, arrays, and systems analysis to try to 
achieve the same effect. Inspiration The material that we have collected together in our concept tutorials 
is drawn and adapted from hvo excellent sources: stanza from Dr. Seuss uicksort, radix sort, bubble sort 
election sort, compare times stimate for large numbers of tree for fictitious nehvork of air Table 1: 
Summary of Concept Tutorials A. K. Dewdney s Turing Omnibus [S] and an, as yet, unpublished book by Tim 
Bell, Ian Witten and Mike Fellows called Computer Science Unplugged . . . off-line activities and games 
for all ages [2]. This latter work is aimed at presenting important topics in Computer Science, without 
using computers, to five to hvelve year-olds. It is essentially a manual for teachers, presenting lessons 
on each topic to be conducted in the classroom. We have adapted material so that the level of presentation 
in Bell et al s book is raised and the level in Dewdney s book is lowered (some topics in the Omnibus 
are at the appropriate level, but not all). In keeping with the 20.5 Unplugged book, none of our concept 
tutorials involve computers. They are pencil and paper exercises which attempt to get across the ideas 
without the threat of programming a solution.  Examples Example 1: Representation -Data Security This 
tutorial begins by explaining the need to preserve confidential information when it is transmitted down 
a communications channel. It addresses the problem of transmitting text-messages and deals with encryption/decryption 
using ciphers and Huffman coding. The emphasis is on representation and is a good topic to address at 
the same time as programming material on character data types and the binary representation of characters. 
Students are first shown an example of the k-th substitution method using 27 letter English (A-Z plus 
a space character). A sequence is encoded, using k = 4, and then decoded. A discussion follows on how 
this type of encryption is vulnerable to statistical attacks, after which students attempt to decode 
a message using just such a method. Avoiding statistical attacks is addressed by introducing a multi-rotor 
Enigma2 machine. An exercise is set in which students decode and then encode a message that we provide 
using the two-rotor Enigma machine shown in Figure 1. They do this by cutting out the rotors from an 
appendix in their manual (which has been printed on thick card) and pinning the three rotors together 
using a drawing pin (bent over at the back). Clearly, this is an opportunity in lectures to discuss the 
work done during the war by Alan Turing and his colleagues. Once the genera1 principles have been established 
we can talk about their realisation on a computer. For example, it is possible to discuss the relative 
ease with which the k-th substitution method can be programmed using a fixed offset of the ASCII values 
of the characters (this is possible, of course, because the characters are represented by binary numbers-the 
topic of the previous week s concept tutorial). In order to make the connection more concrete, * k-th 
substitution, sometimes called the Caesar cipher, works by encrypting each letter of the message with 
the k-th letter after it (modulo the size of the symbol set so that references beyond the last symbol 
wrap to the beginning again). 2 To encrypt a letter using the Enigma machine in Figure 1, find the letter 
on the inside rotor and note the letter adjacent to it on the outside wheel (the backplate), then find 
that letter on the second rotor (i.e. the middle wheel) and output the one adjacent to it on the backplate. 
After a letter is encrypted, turn the inside rotor clockwise one step. Whenever the inside rotor returns 
to its original orientation, the second rotor turns in lock-step, just like the odometer in a car. Such 
a machine makes unauthorised decryption difficult by creating a new permutation of character-substitutions 
after each letter is encrypted. we follow the Enigma machine with an explanation of Hffian coding. The 
advantage of Huffman coding is that it deals with the bit-level representation of a code in a file. It 
also presents yet another representation of characters-a representation Figure 1: Two-Rotor Enigma Machine 
 which does not use a fixed number of bits per character, This is an example of a piece of lateral thinking 
in computing which leads to an extremely clever solution to the encryption problem (the story of how 
Huffman found this solution3 is again excellent lecture material). This is precisely the kind of idea 
that makes Computer Science an interesting, fun and challenging subject. Further, the introduction of 
Huff&#38;n coding serves to introduce the noxt representation topic: data compression. Example 2: Algorithms/Procedures 
 -Graph Problems The objective of this tutorial is to show students the connection between representation, 
algorithms/procedures that use the underlying representation, and real-world problem solving. We begin 
by explaining the concept of an acyclic subnetwork and a minimal spanning tree (MST4), and work through 
an abstract example showing how to 3 Legend has it that, as a student, Huffman s professor invited students 
to solve a related problem and receive an automatic A grade for the course or attend lectures and tnkc 
the final examination. Huffman chose the former and on the eve of 1110 exam (after many failed attempts) 
solved the problem, 4 A minimum spanning tree for a graph is a subset of its edges where 1) a unique 
path is maintained for all vertex-pairs, and 2) the total weight of these edges is the minimum possible 
for all subsets satisfying 1). construct a MST. The construction process is laid out as an algorithm, 
and students are encouraged to follow the steps and to answer questions such as whether there exists 
more than one MST for a given network. From this abstract example we present a fictitious network depicting 
domestic air routes between major cities of New Zealand s North Island, shown in Figure 2. The students 
are then asked to construct a variety of MSTs for the network, and to decide which would be preferred 
if an airline wanted to minimise stop-overs. The remainder of the tutorial is dedicated to describing 
Dijkstra s shortest path algorithm. Again we motivate the algorithm through the previous real world example 
and ask the question: What if a traveller wants to travel on the cheapest route behveen two cities? T: 
If we bind these concepts to the programming portion of the course then we might compromise this distinction, 
and therefore lose some of the benefits of working away from the computer. We prefer to delay the implementation 
of many of these concepts until the practice of programming has become more established-specifically 
at the third year level in a course on the design and analysis of algorithms. Even so, the exercises 
and tutorials from the programming side of the course are designed to incorporate some specific component 
of the concept being studied at the same time. In fact, for their final programming project students 
implement a specification they constructed during an earlier system analysis tutorial. We realise that 
many of the students with prior experience might breeze through the programming material. It is highly 
unlikely, however, that they would have met all of the concepts. This group of students, more than any 
other, will need to be persuaded that Computer Science is not equivalent to computer programming. In 
order to capture the imagination of the students who breeze through the concept material, and to extend 
them a little, we conclude each concept tutorial with some open questions (similar to the way Knuth uses 
starred exercises in his books [7]).  Results The material described in this paper was trialed for 
the first time in 1996. Though it is often difficult to assess the extent to which a new course is successful 
in achieving its goals, there are some indicators which can be used to gain some insight. First, as is 
customary at our university, every student is given the opportunity to fill in a questionnaire at the 
end of each course, offering their perceptions about the course material, lectures, and manner of assessment, 
and to proffer comments about their experience in the course. For comparison purposes, we used the same 
set of questions adopted by the 1995 appraisals when programming was the predominant focus in the introductory 
course. Figure 2: Fictitious Airline Nehvork Before tackling this question on the network of New Zealand 
cities, we present a careful step by step solution to a smaller, more abstract network, using Dijkstra 
s algorithm. Students are then asked to answer the traveller s question using the network of New Zealand 
cities and their new found knowledge of Dijkstra s algorithm. Discussion We use the concept tutorials 
to present a view of Computer Science which demonstrates that ideas and creative solutions rather than 
programming are the main focus of the subject, In general, student responses to questions about the course 
pace, workload, and reasons for taking the course were the same for both years. However, questions aimed 
at assessing student reactions to course material showed a definite shift toward the positive end of 
the spectrum. For example, when asked how often students found the course challenging, 47 of the 116 
respondents in 1996 said always , compared with 25 of the 117 respondents in 1995. And while 53 students 
answered sometimes , seldom or never in 1995, only 29 did so in 1996. The remaining students (about 40 
in each year) claimed that they found the course usually challenging. When asked how valuable students 
thought the course had been for them, 20.7% of the 1996 respondents said 207 extremely, whereas only 
12.% did in 1995, with the remaining responses for both years showing similar distributions over the 
choices very valuable, moderately , slightly and not valuable. A similar upward shift was also seen in 
responses to such questions as How was your interest in this subject affected by the course? and What 
is your overall rating for this course? . As a rough measure of the extent to which the new curriculum 
encouraged students to pursue Computer Science as a major programme of study we compared the number of 
emohnents in the next core computing course, for which the course described in this paper is a prerequisite. 
In 1995, 197 of the 243 students who enrolled in the introductory course went on to complete it, and 
172 students enrolled in the follow-on course. In 1996,189 of the 221 students5 who started the introductory 
course went on to complete it, and 183 enrolled in the second course. These figures reveal a reduced 
attrition rate in 1996 for both the course itself and the programme of study. While course appraisals 
and enrolment figures seem to indicate that the new curriculum is successful in motivating students and 
maintaining their interest, results from the performance assessments reveal a serious weakness. The final 
examination was divided into two components, one set of questions dealing with aspects pertaining to 
computer programming and another with Computer Science concepts. Each question was worth ten marks. The 
average mark for the concept questions was 6.77, whereas the average mark for the programming questions 
was 4.41. This unsatisfactory result indicates that our effort towards making the introductory course 
more enjoyable has perhaps undermined the essential goal of teaching fundamental programming skills. 
This shortcoming will to some extent be corrected in the follow-on course, which has been similarly modified 
to have two parallel lecture streams: one dedicated to continued instruction in programming, and the 
other to an introduction to computing theory. Even so, a plan is in place for 1997 to improve the situation 
in the introductory course by dedicating two of the three lectures each week solely to programming, with 
computing concepts being taught only in the third. Conclusion In light of our experiences, we believe 
that this approach to teaching Computer Science has great merit. Firstly, it is exciting material to 
present to the students. Some of the material may well be the reason why the lecturer for the course 
studied Computer Science, and therefore, their enthusiasm for the subject should come across. Secondly, 
elegant and neat solutions together with the ugly and brute-force can co-exist and be discussed without 
the burden of discussing the relative merits of ease of implementation, and without concern for the wide 
variation in programming ability, which must play some role in discouraging less experienced students 
from continuing in Computer Science. Finally, the material is very flexible and adaptable to local conditions. 
We have a tutorial on text compression because state-of-the-art algorithms to perform this task have 
been the outcome of research at Waikato University [3]. This shows students that research in the subject 
is ongoing and achievable in a university thousands of miles from the main centres of Computer Science 
in North America and Europe. References <RefA>1. <SinRef><author>Barrett</author>, <author>Martin L. </author><title>Emphasising Design in CSl </title>, <booktitle>In The Proceedings 
of the 27th SIGCSE Technical Symposium on Computer Science Education</booktitle>, pp <pages>315-318</pages>, <location>Philadelphia</location>, <date>1996</date></SinRef>. 
 2. <SinRef><author>Bell, T. </author>and <author>Witten, I. H. </author>and <author>Fellows, M. </author>(draft)<title> Computer Science Unplugged . . . off-line activities 
and games for all ages </title></SinRef>. 3. <SinRef><author>Cleary, John G., </author><author>Teahan, W. J. </author>and <author>Witten, Ian H, </author><title>Unbounded context lengths 
for PPM</title>. In <editor>Storer, J. A. </editor>and <editor>M. Cohn </editor>(eds). <booktitle>Data Compressionconference proceedings</booktitle>. pp <pages>52-61</pages>, <date>Utah, 
1995</date></SinRef>.  4. <SinRef><author>Connelly</author>, <author>Christopher</author> and <author>Biermann</author>,<title> Alan W. Home-Study Software: Flexible, Interactive, and 
Distributed Software for Independent Study </title>. <booktitle>In Tlte  Proceedings of the 27th SIGCSE Technical Symposium 
on Computer Science Education</booktitle>, pp <pages>63- 67</pages>, <location>Philadelphia</location>, <date>1996</date>.</SinRef> 5. <SinRef><author>Dewdney, A. K. </author><title>The (new) Turing Omnibus</title>. 
<publisher>Computer Science Press</publisher>. <location>New York</location>, <date>1993</date></SinRef>. 6. <SinRef><author>Feldman</author>,<author> Todd J. </author>and <author>Zelenski, Julie D. </author><title>The Quest for Excellence 
in Designing Csl/Cs2 Assignments </title>. <booktitle>In The Proceedings of the 27th SIGCSE Technical Symposium on Computer 
Science Education</booktitle>,pp <pages>3 19-323</pages>, <location>Philadelphia</location>, <date>1996</date></SinRef>. 7. <SinRef><author>Knuth, D. E. </author><title>The art of computer programming</title>, 
<volume>2</volume>nd edition. <publisher>Addison-Wesley</publisher>, <date>1973</date></SinRef>. 8. <SinRef><author>Paxton, John T. </author>and<author> Ross, Rockford J. </author>and <author>Starkey, J. Denbigh 
</author><title>A Methodology for Teaching an Integrated Computer Science Curriculum </title>. <journal>SIGCSE Bulletin</journal>,<volume>26(l) </volume>pp <pages>l-5</pages>, 
<date>1994</date></SinRef>.  9. <SinRef><author>Reek, Margaret M. </author><title>A Top-Down Approach to Teaching Programming </title>. <journal>SIGCSE Bulletin</journal>, <volume>27( 1) </volume>pp 
<pages>6-9</pages>, <date>1995</date></SinRef>. 10. <SinRef><author>Scragg, Greg </author>and <author>Baldwin, Doug </author>and <author>Koomen, Hans </author><title>Computer Science Needs an Insight-Based 
Curriculum </title>.<journal> SIGCSE Bulletin</journal>,<volume> 26(l) </volume>pp <pages>150-154</pages>, <date>1994</date></SinRef>.</RefA>. 208 
			
