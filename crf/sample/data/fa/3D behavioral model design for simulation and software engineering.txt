
 3D Behavioral Model Design for Simulation and Software Engineering* Paul A. Fishwick University of Florida 
November 24, 1999 Abstract Modeling is used to build structures that serve as surrogates for other objects. 
As children, we learn to model at a very young age. An object such as a small toy train teaches us about 
the structure and behavior of an actual train. VRML is a .le standard for repre­ senting the structure 
of objects such as trains, while the behavior would be represented in a computer lan­guage such as ECMAScript 
or Java. VRML is an ab­breviation for Virtual Reality Modeling Language [2], which represents the standard 
3D language for the web. Our work is to extend the power of VRML so that it is used not only for de.ning 
shape models, but also for creating structures for behavior. Behavior shapes are built using metaphors 
mapped onto well­known dynamic model templates such as .nite state machines, functional block models 
and Petri nets. The low level functionality of the design still requires a traditional programming language, 
but this level is hidden underneath a modeling level that is visual­ized by the user. We have constructed 
a methodol­ogy called rube which provides guidelines on building behavioral structures in VRML. The result 
of our en­deavors has yielded a set of VRML Prototypes that serve as dynamic model templates. We demonstrate 
several examples of behaviors using primitive shape and architectural metaphors. 1 INTRODUCTION One physical 
object captures some information about another object. If we think about our plastic toys, metal trains 
and even our sophisticated scale-based engineering models, we see a common thread: to build one object 
that says something about another usually larger and more expensive object. Let s call these objects 
the source object and the target object. Similar object de.nitions can be found in the litera­ture of 
metaphors [6] and semiotics [10]. The source *Department of Computer &#38; Information Science and En­gineering, 
P.O. Box 116120, Gainesville, FL 32611, Email: fishwick@cise.ufl.edu object models the target, and so, 
modeling represents a relation between objects. Often, the source object is termed the model of the target. 
We have been dis­cussing scale models identi.ed by the source and tar­get having roughly proportional 
geometries. Scale­based models often su.er from the problem where changing the scale of a thing a.ects 
more than just the geometry. It also a.ects the fundamental laws applied at each scale. For example, 
the hydrodynam­ics of the scaled ocean model may be di.erent than for the real ocean. Nevertheless, we 
can attempt to adjust for the scaling problems and proceed to un­derstand the larger universe through 
a smaller, more manipulable, version. Our task is to construct a software architecture that encourages 
3D construction of objects and their models. Our focal point is the behavioral modelwhere one de.nes 
the behavior or dynamics of an object using another set of objects. This sort of modeling may be used 
in representing the models of large-scale systems and software in the case where models have been used 
to specify the requirements and program design [1, 11]. We call this modeling architecture rube. An example 
use of rube is de.ned in the Sec. 2, and the methodology of rube in Sec. 3. Facets of the VRML implementation 
are de.ned in Secs. 4, 5 and 6. We close the paper with philosophical issues on the art of modeling 
in Sec. 7 and the summary in Sec. 8. 2 NEWELL S TEAPOT In the early days of computer graphics (c. 1974-75), 
Martin Newell rendered a unique set of B´ezier surface spline patches for an ordinary teapot, which currently 
resides in the Computer Museum in Boston. The teapot was modeled by Jim Blinn and then rendered by Martin 
Newell and Ed Catmull at the University of Utah in 1974. While at this late date, the teapot may seem 
quaint, it has been used over the years as an icon of sorts, and more importantly as a bench­mark for 
all variety of new techniques in rendering and modeling in computer graphics. The Teapot was recently 
an o.cial emblem of the 25th anniversary Figure 1: O.ce scene with Newell Teapot, dynamic model and props. 
of the ACMSpecial Interest Interest Group on Com­puter Graphics (SIGGRAPH). Since 1989 at the University 
of Florida, we have constructed a number of modeling and simulation packages documented in [4, 3] In 
late 1998, we started designing rube, named in dedication to Rube Gold­berg [8], who produced many fanciful 
cartoon ma­ chines, all of which can be considered models of be­havior. One of our goals for rube was 
to recognize that the Teapot could be used to generate another poten­tial benchmark one that captured 
the entire teapot, its contents and its models. The default teapot has no behavior and has no contents; 
it is an elegant piece of geometry but it requires more if we are to construct a fully digital teapot 
that captures a more complete set of knowledge. In its current state, the teapot is analogous to a building 
fa¸cade on a Hollywood .lm studio backlot; it has the shape but the whole entity is missing. In VRML, 
using the methodology previ­ously de.ned, we built TeaWorld in Fig. 1. We have added extra props so that 
the teapot can be visual­ized, along with its behavioral model, in a reasonable contextual setting. The 
world is rendered in Fig. 1 using a web browser. World is the top-most root of the scene graph. It contains 
a Clock, Boiling System, and other objects such as the desk, chairs, .oor and walls. The key .elds in 
Fig. 2 are VRML nodes of the relevant .eld so that the contains .eld refers to mul­tiple nodes for its 
value. This is accomplished using the VRML MFNode type. The hierarchical VRML scene graph for Fig. 1 
is illustrated in Fig. 2. The scene contains walls, a desk, chair and a .oor for context. On the desk 
to the left is the teapot which is .lled with water. The knob controlling whether the teapot heating 
element (not modeled) is on or o. is located in front of the teapot. To the right of the teapot, there 
is a pipeline with three machines, each of which appears in Fig. 1 as a semi-transparent cube.  Figure 
2: VRML Scene Graph for the Teapot and its models. Each of these machines re.ects the functional behav­ior 
of its encapsulating object: Machine1 for Knob, Machine2 for Water and Machine3 for Thermometer. The 
Thermometer is a digital one that is positioned in Machine3, and is initialized to an arbitrary ambi­ent 
temperature of 0. C. Inside Machine2, we .nd a more detailed description of the behavior of the wa­ter 
as it changes its temperature as a result of the knob turning. The plant inside Machine2 consists of 
Tank1, Tank2, Tank3, and four pipes that move infor­mation from one tank to the next. Inside each tank, 
we .nd a blackboard on which is drawn a di.erential equation that de.nes the change in water tempera­ture 
for that particular state. The following model­ing relationships are used: Pipeline is a Functional Block 
Model (FBM), with three functions (i.e., ma­chines); Machine is a function (i.e., semi-transparent cube) 
within an FBM; Plant is a Finite State Machine (FSM) inside of Machine 2; Tank is a state within a FSM, 
and represented by a red sphere; Pipe is a tran­sition within a FSM, and represented by a green pipe 
with an attached cone denoting direction of control .ow; and Board is a di.erential equation, represented 
as white text. The following metaphors are de.ned in this example. The three cubes represent a sequence 
of machines that create a pipeline. One could have easily chosen a factory .oor sequence of numerically 
controlled machines from the web and then used this Figure 3: Pipeline closeup. in TeaWorld to capture 
the information .ow. Inside the second machine, we .nd a plant, not unlike a petroleum re.nery with tanks 
and pipes. The Pipeline and its components represent phys­ical objects that can be acquired from the 
web. For our example, we show simple objects but they have been given meaningful real-world application­oriented 
names to enforce the view that one ob­ject models another and that we can use the web for searching and 
using objects for radically di.er­ent purposes than their proposed original function. The overriding 
concern with this exercise is to per­mit the modeler the freedom to choose any object to model any behavior. 
The challenge is to choose a set of objects that provide metaphors that are mean­ingful to the modeler. 
In many cases, it is essen­tial that more than one individual understand the metaphorical mappings and 
so consensus must be reached during the process. Such consensus occurs routinely in science and in modeling 
when new mod­eling paradigms evolve. The purpose of rube is not to dictate one model type over another, 
but to allow the modelers freedom in creating their own model types. In this sense, rube can be considered 
a meta­level modeling methodology. The simulation of the VRML scene shown in Fig. 2 proceeds using the 
dashed line thread that be­ gins with the Clock. The clock has an internal time sensor that controls 
the VRML time. The thread cor­responds closely with the routing structure built for this model. It starts 
at Clock and proceeds downward through all behavioral models. Within each behav­ioral model, routes exist 
to match the topology of the model. Therefore, Machine1 sends information to Machine2, which accesses 
a lower level of abstrac­tion and sends its output to Machine3, completing the semantics for the FBM. 
The FSM level contains routes from each state to its outgoing transitions. Fig. 3 shows a closeup view 
of the pipeline, that represents the dynamics of the water, beginning with the e.ect of turning of the 
knob and ending with the thermometer that reads the water temperature. Figs. 4 through 6 show the pipeline 
during simula- Figure 4: Cold state.  Figure 6: Cooling state. tion when the knob is turned ON and OFF 
at random times by the user. The default state is the cold state. When the knob is turned to the OFF 
position, the system moves into the heating state. When the knob is turned again back to the OFF position, 
the system moves into the cooling state and will stay there until the water reaches the ambient temperature 
at which time the system (through an internal state transition) returns to the cold state. Temperature 
change is in­dicated by the color of Water and Machine3, in addi­tion to the reading on the Thermometer 
inside of Ma­chine3. The material properties of Machine1 change depending on the state of the knob. When 
turned to the OFF position, Machine1 is semi-transparent. When turned on, it turns opaque. Inside Machine2, 
the current state of the water is re.ected by the level of intensity of each Plant. The current state 
has an increased intensity, resulting in a bright red sphere. The dynamics of temperature is indicated 
at two  Figure 8: Inside the Heating phase. levels. At the highest level of the plant, we have a three 
state FSM. Within each state, we have a di.er­ential equation. The equation is based on Newton s Law 
of Cooling and results in a .rst order exponen­tial decay and rise that responds to the control input 
from the knob. The visual display of temperature change con.rms this underlying dynamics since the user 
.nds the temperature changing ever more slowly when heating to 100.C or cooling back to the ambient temperature. 
Fig. 7 displays a closeup of the heat­ ing phase from the outside, and Fig. 8 is a view from inside the 
red sphere modeling the phase. 3 rube Methodology The procedure for creating models is de.ned as fol­lows: 
1. The user begins with an object that is to be mod­eled. This object can be primitive or complex such 
as a scene with many sub-objects. In the case of the teapot, we identify the teapot, water, knob, heating 
element as well as other aspects of the environment: room, walls, desk and .oor. Not all of these objects 
require embedded behav­ioral models; some objects are props or exist for contextual reasons. 2. The scene 
and object interactions are sketched in a story board fashion, as if creating a movie or animation. A 
scene is where all objects, in­cluding those modeling others, are de.ned within a VRML .le. The rube 
model browser is made available so that users can .y though an ob­ject to view its models without necessarily 
clut­tering the scene with all objects. However, hav­ing some subset of the total set of models sur­faced 
within a scene is also convenient for aes­thetic reasons. The modeler may choose to build several scenes 
with models surfaced, or choose to view objects only through the model browser that hides all models 
as .elds of VRML object nodes. In Fig. 1, the object Pipeline models the heating and cooling of the water, 
which is inside the teapot to the left of Pipeline. We could also have chosen to place a GUI behavioral 
model handle for the teapot inside the teapot itself or within close proximity of the teapot. 3. The 
shape and structure of all objects are mod­eled in any modeling package that has an ex­port facility 
to VRML. Most packages, such as Kinetix 3DStudioMax and Autodesk AutoCAD have this capability. Moreover, 
packages such as CosmoWorlds and VRCreator can be used to di­rectly create and debug VRML content. We 
used CosmoWorlds for the walls, .oor and Pipeline. Other objects, such as the teapot, desk and chair 
were imported from the web. 4. VRML PROTO (i.e., prototype) nodes are cre­ated for each object, model 
and components thereof. This step allows one to create seman­tic attachments so that we can de.ne one 
ob­ject to be a behavioral model of another (using a behavior .eld) or to say that the water is con­tained 
within the teapot. Without prototypes, the VRML .le structure lacks semantic relations and one relies 
on simple grouping nodes, which are not su.cient for clearly de.ning how objects relate to one another. 
PROTOs are created for all physical objects, whether or not the objects are role-playing as a behavior 
model or as a be­havior model component. This is discussed in more depth in Sec. 4.  5. Models are created. 
While multiple types of models exist, we have focused on dynamic mod­els of components, and the expression 
of these components in 3D. Even textually-based mod­els that must be visualized as mathematical ex­pressions 
can be expressed using the VRML text  node. Models are objects in the scene that are no di.erent structurally 
from pieces of visible ob­jects being modeled they have shape and struc­ture. The only di.erence is that 
when an ob­ject is modeling another, one interprets the object s structure in a particular way, using 
a dynamic model template for guidance. 6. Several dynamic model templates exist. For Newell s Teapot 
(in Sec. 2), we used three: FBM, FSM, and EQN. These acronyms are de.ned as follows: FSM= Finite State 
Machine; FBM= Functional Block Model; EQN = Equation Set. Equations can be algebraic, ordinary di.erential, 
or partial di.erential. The FBMserves to cap­ture the control .ow from the activity of the knob to the 
temperature change of the water, and on to the thermometer. The FSMinside Machine2 of Pipeline models 
the water temper­ature changes. 7. The creative modeling act is to choose a dy­namic model template 
for object behavior, and then to pick objects that will convey the mean­ing of the template within the 
scenario. This part is a highly artistic enterprise since literally any object can be used. It is not 
the policy of rube to recommend or insist upon one metaphor. In practice, di.erent groups will evolve 
and cer­tain metaphors may compete in a process akin to natural selection. Our Pipeline could easily 
have been more artistically modeled so that it appeared more as a pipeline, and so the Plant looked more 
like an industrial plant. We were caught between trying to employ metaphor to its fullest extent and 
wanting those familiar with traditional 2D behavior models to follow the rube methodology. 8. There 
are three distinct types of roles played by modelers in rube. At the lowest level, there is the person 
creating the model templates (FSM,FBM,EQN,PETRI-NET). Each dynamic model template re.ects an underlying 
system­theoretic model [5]. At the mid-level, the per­son uses an existing model template to create a 
metaphor. An industrial plant is an example of a manufacturing metaphor. At the highest level, a person 
is given a set of metaphors and can choose objects from the web to create a model. These levels allow 
modelers to work at the lev­els where they are comfortable. Reusability is created since one focuses 
on the level of interest. 9. The simulation proceeds by the modeler creat­ing threads of control that 
pass events from one VRML node to another. This can be done in one  of two ways: 1) using VRML Routes, 
or 2) us­ing exposed .elds that are accessed from other nodes. Method 1 is familiar to VRML authors and 
also has the advantage that routes that ex­tend from one model component to an adjacent component (i.e., 
from one state to another or from one function to another) have a topolog­ical counterpart to the way 
we visualize infor­mation and control .ow. The route de.nes the topology and data .ow semantics for the 
simula­tion. Method 2 is similar to what we .nd in tra­ditional object-oriented programming languages 
where information from one object is made avail­able to another through an assignment statement that 
references outside objects and classes. Such an assignment is termed message passing. In method 1, a 
thread that begins at the root node proceeds downward through each object that is role-playing the behavior 
of another. The rout­ing thread activates Script nodes that are em­bedded in the structures that act 
as models or model components for the behaviors. All objects acting as behavioral model components are 
con­nected to a VRML clock (i.e., TimeSensor) so that multimodeling is made possible by allowing model 
components to gain control of the simula­tion and proceed in executing lower level model semantics. 10. 
Pre-and Post-processing is performed on the VRML .le to check it for proper syntax and to aid the modeler. 
Pre-processing tools in­clude wrappers (that create a single VRML .le from several), decimators (that 
reduce the polygon count in a VRML .le), and VRML parsers. The model browser mentioned earlier is a post-production 
tool, allowing the user to browse all physical objects to locate objects that model them. In the near 
future, we will ex­tend the parser used by the browser to help semi-automate the building of script nodes. 
The browser and underlying VRML parser is based in Java (using JavaCUP) and therefore can be activated 
through the web browser. rube treats all models in the same way. For a clari.cation of this remark, consider 
the traditional use of the word Modeling as used in everyday terms. A model is something that contains 
attributes of a target object, which it is modeling. Whereas, equation and 2D graph-based models could 
be viewed as being fundamentally di.erent from a commonsense model, rube views them in exactly the same 
context: everything is an object with physical extent and mod­eling is a relation among objects. This 
uni.cation is theoretically pleasing since it uni.es what it means to model regardless of model type. 
We are able to unify the commonsense view of modeling (i.e., scale or clay models) with more abstract 
modeling tech­niques used on the computer. 4 VRML IMPLEMENTATION OF THE TEAPOT Newell s Teapot has the 
VRML scene graph struc­ture as shown in Fig. 2, but there are also key proto­ type de.nitions used for 
objects and the models. The structure of the PROTOs are as follows. First, we have the PROTO for the 
dynamic model type FSM (Finite State Machine): EXTERNPROTO FSM [ eventIn SFFloat set_clock field SFVec3f 
position exposedField SFBool input eventIn SFString set_state field SFNode start_state field MFNode sounds 
field MFNode states field MFNode transitions field SFBool passive field MFNode active ] "fsm.wrl#FSM" 
The FSMis composed of states and transitions, with each state having a sound. There is a start state 
and a position for placing the FSM in the scene. set clock is the clock input and al­lows the FSMto take 
its input to drive the state transition changes. Each FSMmay be modeled at one of two lev­els: active 
and passive. The use of the 3 tanks and 4 pipes is passive since there is no motion only a change in 
intensity of each tank when a state is en­abled. An active mode implies the existence of two extra nodes, 
a mover and a path, both of which de­.ne the geometry associated with an object moving along a path. 
For example, if active has a .eld value of [avatar24 spline3] then node avatar24 would make a motion 
along a physical path de.ned by node spline3 to denote a change in state. EXTERNPROTO FSM_STATE [ eventIn 
SFFloat set_clock exposedField SFBool enabled field MFNode audio exposedField MFNode geometry field MFNode 
behavior ] "fsm.wrl#FSM_STATE" Each state and transition has a geometry model and a behavior mode. The 
geometry model is that which de.nes how the object is to be rendered. The be­havior model de.nes how 
the state is to be executed. behavior may terminate in a VRML Script node, but may also be further de.ned 
by another 3D structure to any abstraction level. Using geometry,we may allow any 3D scene or object 
to re.ect the notion of state. EXTERNPROTO FSM_TRANSITION [ eventIn SFFloat set_clock exposedField SFBool 
enabled eventOut SFString state_changed field SFNode from field SFNode to field SFNode fsm field SFNode 
object exposedField MFNode geometry field MFString behavior ] "fsm.wrl#FSM_TRANSITION" The transition 
nodes are similar in that one may as­sign both geometry and behavior to them. Each transition has from 
and to states. The transition also carries the behavior logic that determines whether a state change 
occurs. The metaphor elements are mapped directly to model templates, each of which is de.ned by a PROTO 
node: Industrial Plant metaphor . Finite state ma­chine . FSMPROTO  Tank (in Plant) metaphor . State 
. FSM-STATE PROTO  Pipe (in Plant) metaphor . Transition . FSM-TRANSITION PROTO  5 PROGRAMMING USING 
VRML Object-Oriented Software engineering has long advo­cated the use of modeling in de.ning the creation 
of software. A recent example is the signi.cant interest in the Uni.ed Modeling Language (UML) [12, 9]. 
The embedded nature of software encourages the model­ing approach since the design re.ects the distributed 
nature of the hardware components. Software engi­neers evolve into system modelers. Using VRML, we created 
a small operating system kernel that involves metaphors for tasks (using avatars), routes through the 
system (using colored paths) and resources (us­ing o.ce desks with attendants). The overall oper­ating 
system is shown as an o.ce building in Fig. 9 and inside the building there is a .oor designated as the 
kernel (Fig. 10). Tasks begin in a waiting Figure9:Theoperatingsystemstructure. area on the left side 
of Fig. 10 and proceed to the CPU desk. Tasks continue to move toward the key resources (DEVice, COMmunications,MEMory,I/O). 
The paths to the resources are in orange and the re­turn paths back to the holding area are blue. When 
a resource is requested, this begins an audio track specifying which resource is being used. 6 VRML ISSUES 
We found VRML to be fairly robust for the task set side within rube but there are a number of issues 
that need to be resolved in the future. The most serious issues, having an e.ect on rube, are delineated: 
1. VRML needs a strong object-oriented (OO) structure with classes, inheritance, object in­stances and 
a capability for referring to a current object with a this .eld. We found it di.cult to create a regional 
scoping of public variables, for example, in allowing a component to gain access to its parents .elds. 
Instead, one has to expose a .eld to every other node. One side-e.ect of a solid OO architecture would 
be that there would be a distinct di.erence between de.ning a Node and creating one. The existing DEF 
both de.nes and creates. 2. Exposed .elds should operate exactly as if one were to specify an eventIn, 
field and eventOut. Several VRML texts suggest an equivalence, but in practice they are quite di.er­ent. 
Currently, if one creates an exposedField, then one cannot de.ne an eventIn for set­ting values in a 
script node using a function of the eventIn name. There are many instances where it would be useful to 
use both methods of access to an exposedField: 1) directly with node.set field, or 2) indirectly with 
a route using set field as an eventIn within a script node. Routes are useful in surfacing connections 
between one node and another, but prudent use of exposedFields (if they were more completely implemented) 
simpli.es a spaghetti-like network of routes. 3. Both forward and backward references to nodes should 
be possible. Currently, one cannot spec­ify USE somenode unless it has already been de­.ned with DEF. 
This may require a multi-pass option on parsing the VRML scene graph, which would slow the parsing but 
give the VRML au­thor the freedom to choose forward referencing where they may wish to implement it. 
 4. Scripting capabilities need to be expanded to support native code, and need to be consistent among 
browsers in supporting Java in the Script node and full implementations of Javascript. In­stead of being 
implementor options, they should be required. Native code is essential if VRML is to both compete with, 
expand upon and reuse other 3D software. 5. We found PROTO and EXTERNPROTO sup­port to be variable among 
VRML software de­velopers. Since these are among the most impor­tant node types in VRML, their implementations 
should be ubiquitous in all VRML modelers and software support.  7 ART OF MODELING Given the Newell 
Teapot scene, there are some key issues which we should ask ourselves: Is it just a visualization? The 
work in rube provides visualization, but models such as Newell s Teapot demonstrate active modeling en­vironments 
whose existence serves an engineer­ing purpose and not only a post-project visual­ization purpose for 
outside visitors. This sort of modeling environment is needed from the very start of a mission as an 
integral piece of the puzzle known as model design. There is little question that this sort of production 
is useful for teaching purposes, but we also view this as a precursor to next generation software engineer­ing. 
The power of VRML in this regard is that it can be used to reinvent software engineering through the 
surfacing of 3D models. It is one thing to think of this as a visualization of an Operating System kernel, 
but it is quite another to call it the Operating System itself. We need to bridge this gap if we are 
to progress beyond textual, linear programming styles. Is it economical? Is this a lot of work just 
to create an FSM? All 3D objects are reused and so can be easily grabbed from the web. The con­cept of 
reuse is paramount to the rube approach where the metaphor can be freely chosen and implemented. Without 
the web, rube would not be possible. 3D object placement can be just as economical as 2D object placement, 
but object repositories are required.  What is the advantage? If we consider psy­chological factors, 
the 3D metaphor has signif­icant advantages. First, 3D spatially-speci.c ar­eas serve to improve our 
memory of the mod­els (i.e., mnemonics). Second, graphical user in­ terfaces (GUIs) have shown that a 
human s in­teraction with the computer is dramatically im­proved when the right metaphors are made avail­able. 
rube provides the environment for building metaphors. One should always be wary of mixed metaphors. We 
leave the ultimate decision to the user group as to which metaphors are e.ective. A Darwinian-style of 
evolution will likely deter­mine which metaphors are useful and which are not. Aesthetics plays an important 
role here as well. If a modeler uses aesthetically appealing models and metaphors, the modeler will enjoy 
the work. It is a misconception to imagine that only the general populous will bene.t from fully interactive 
3D models. The engineers and scien­tist need this sort of immersion as well so that they can understand 
better what they are doing, and so that collaboration is made possible.  Is this art or science? The 
role of the Fine Arts in science needs strengthening. With fully im­mersive models, we .nd that we are 
in need  of workers with hybrid engineering/art back­grounds. It is no longer su.cient to always think 
in the abstract about modeling. E.ec­tive modeling requires meaningful human inter­action with 3D objects. 
So far, the thin veneer of a scale model has made its way into our engineer­ing practices, but when the 
skin is peeled back, we .nd highly abstract code and text. If the in­ternals are to be made comprehensible 
(by any­one, most importantly the engineer), they must be surfaced into 3D using the powerful capabili­ties 
of metaphors [7, 6]. This doesn t mean that we will not have a low level code-base. Two­dimensional metaphors 
and code constructs can be mixed within the 3D worlds, just as we .nd them in our everyday environments 
with the em­bedding of signs. At the University of Florida, we have started a DigitalArts and Sciences 
Pro­gram with the aim to produce engineers with a more integrated background. This background will help 
to produce new workers with creative modeling backgrounds. What role does aesthetics play in modeling? 
It is sometimes di.cult to di.erentiate models used for the creation of pieces of art from those used 
with scienti.c purposes in mind. Models used for science are predicated on the notion that the modeling 
relation is unambiguously speci.ed and made openly available to other scientists. Model­ing communities 
generally form and evolve while stressing their metaphors. In a very general sense, natural languages 
have a similar evolu­tion. The purpose of art, on the other hand, is to permit some ambiguity with the 
hopes of causing the viewer or listener to re.ect upon the modeled world. Some of the components in worlds 
such as Fig. 1 could be considered non-essential mod­ eling elements that serve to confuse the scien­tist. 
However, these elements may contribute to a more pleasing immersive environment. Should they be removed 
or should we add additional ele­ments to please the eye of the beholder? In rube, we have the freedom 
to go in both directions, and it isn t clear which inclusions or eliminations are appropriate since it 
is entirely up to the modeler or a larger modeling community. One can build an entirely two dimensional 
world on a black­board using box and text objects, although this would not be in the spirit of creating 
immersive worlds that allow perusal of objects and their models. It may be that a select number of modelers 
may .nd the TeaWorld room exciting and pleasing, and so is this pleasure counterproductive to the scientist 
or should the scientist be concerned only with the bare essentials necessary for unambigu­ous representation 
and communication? Visual models do not represent syntactic sugar (a term common in the Computer Science 
community). Instead, these models and their metaphors are essential for human understanding and compre­hension. 
If this comprehension is complemented with a feeling of excitement about modeling, this can only be for 
the better. Taken to the ex­treme, a purely artistic piece may be one that is so couched in metaphor 
that the roles played by objects isn t clear. We can, therefore, imagine a kind of continuum from a completely 
unam­biguous representation and one where the roles are not published. Between these two extremes, there 
is a lot of breathing space. Science can be seen as a form of consensual art where everyone tells each 
other what one object means. Agree­ment ensues within a community and then there is a mass convergence 
towards one metaphor in favor of another. 8 SUMMARY E.ort to unify behavioral and software engineering 
modeling methodologies are useful, but we should also have a way to express models more creatively and 
completely. Model communities will naturally evolve around 2D and 3D metaphors yet to be de­termined. 
rube has a strong tie to the World Wide Web (WWW). The web has introduced a remarkable transformation 
in every area of business, industry, science and engineering. It o.ers a way of sharing and presenting 
multimedia information to a world­wide set of interactive participants. Therefore any technology tied 
to the web s development is likely to change modeling and simulation. The tremendous in­terest in Java 
for doing simulation has taken a .rm hold within the simulation .eld. Apart from being a good programming 
language, its future is intrinsically bound to the coding and interaction within a browser. VRML, and 
its X3D successor, represent the future of 3D immersive environments on the web. We feel that by building 
a modeling environment in VRML and by couching this environment within standard VRML content, that we 
will create a Trojan Horse for simulation modeling that allows modelers to cre­ate, share and reuse VRML 
.les. Our modeling approach takes a substantial de­parture from existing approaches in that the mod­eling 
environment and the material object environ­ment are merged seamlessly into a single environ­ment. There 
isn t a di.erence between a circle and a house, or a sphere and a teapot. Furthermore, ob­jects can take 
on any role, liberating the modeler to choose whatever metaphor that can be agreed upon by a certain 
community. There is no single syntax or structure for modeling. Modeling is both an art and a science; 
the realization that all objects can play roles takes us back to childhood. We are building rube in the 
hope that by making all objects virtual that we can return to free-form modeling of every kind. Modeling 
in 3D can be cumbersome and can take con­siderable patience due to the inherent user-interface problems 
when working in 3D using a 2D screen in­terface. A short term solution to this problem is to develop 
a model package that is geared speci.cally to using one or more metaphors, making the insertion of, say, 
the petroleum re.nery a drag and drop opera­tion. Currently, a general purpose modeling package must 
be used to carefully position all objects in their respective locations. A longer term solution can be 
found in the community of virtual interfaces. A good immersive interface will make 3D object positioning 
and connections a much easier task than it is today. ACKNOWLEDGMENTS We would like to thank the students 
on the rube Project: Robert Cubert, Andrew Reddish, John Hop­kins and Linda Dance. Also, we thank the 
following agencies that have contributed towards our study of modeling and simulation: (1) Jet Propulsion 
Lab­oratory under contract 961427 An Assessment and Design Recommendation for Object-Oriented Physi­calSystem 
Modeling at JPL (John Peterson, Stephen Wall and Bill McLaughlin); (2) Rome Laboratory, Gri.ss Air Force 
Base under contract F30602-98-C­0269 AWeb-BasedModelRepository forReusing and Sharing Physical Object 
Components (Al Sisti and Steve Farr); and (3) Department of the Interior un­der grant 14-45-0009-1544-154 
Modeling Approaches &#38; Empirical Studies Supporting ATLSS for the Ev­erglades (Don DeAngelis and Ronnie 
Best). We are grateful for their continued .nancial support. References <RefA>[1] <SinRef><author>Grady Booch</author>. <title>Object Oriented 
Design</title>. <publisher>Ben­jamin Cummings</publisher>, <date>1991</date></SinRef>. [2]<SinRef><author> Rikk Carey </author>and <author>Gavin Bell</author>. <title>The Annotated VRML 2.0 Reference Manual</title>. 
<publisher>Addison-Wesley, </publisher><date>1997</date>. </SinRef>[3] <SinRef><author>Robert M. Cubert </author>and <author>Paul A. Fishwick</author>. <title>MOOSE: An Object-Oriented Multimodeling 
and Simulation Application Framework</title>. <journal>Sim­ulation</journal>, <volume>70(6)</volume>:<pages>379 395</pages>, <date>1998</date></SinRef>. [4] <SinRef><author>Paul A.</author> <title>Fishwick. Simpack: 
Getting Started with Simulation Programming in C and C++</title>. <booktitle>In 1992 Winter Simulation Conference</booktitle>, <pages>pages 
154 162</pages>, <location>Arlington, VA,</location> <date>1992</date></SinRef>. [5] Paul <SinRef><author>A. Fishwick</author>. <title>Simulation Model Design and Execution: Building Digital 
Worlds</title>. <publisher>Prentice Hall</publisher>, <date>1995</date></SinRef>. [6] <SinRef><author>George Lako</author>..<author> Women, Fire </author>and <author>Dangerous Things</author>: <title>what categories reveal 
about the mind</title>. <publisher>University of Chicago Press</publisher>, <date>1987</date></SinRef>. [7] <SinRef><author>George Lako</author>. and <author>Mark Johnson</author>. <title>Metaphors We Live 
By</title>. <publisher>University of Chicago Press</publisher>, <date>1980</date></SinRef>. [8] <SinRef><author>Peter C. Marzio</author>. <title>Rube Goldberg, His Life and Work. Harper 
and Row</title>,<location> New York</location>, <date>1973</date></SinRef>. [9] <SinRef><author>Pierre-Alain Muller</author>. <title>Instant UML</title>. <publisher>Wrox Press</publisher>, Ltd.,<location> Olton, Birmingham, England</location>, 
<date>1997</date></SinRef>. [10] <SinRef><author>Winfried Noth</author>. <title>Handbook of Semiotics</title>. <publisher>Indiana University Press</publisher>, <date>1990</date></SinRef>. [11] <SinRef><author>James Rumbaugh</author>, 
<author>Michael Blaha</author>, <author>William Pre­merlani</author>, <author>Eddy Frederick</author>, and <author>William Lorenson</author>. <title>Object-Oriented Modeling and 
Design</title>. <publisher>Prentice Hall</publisher>, <date>1991</date></SinRef>. [12] <SinRef><author>James Rumbaugh</author>, <author>Ivar Jacobson</author>, and <author>Grady Booch</author>. <title>The Uni.ed Modeling 
Language Refer­ence Manual</title>. <publisher>Addison-Wesley</publisher>, Reading, <location>MA</location>, <date>1999</date></SinRef></RefA>. AUTHOR BIOGRAPHY PAUL FISHWICK is Professor 
of Computer and Information Science and Engineering at the Univer­sity of Florida. He received the PhD 
in Computer and Information Science from the University of Pennsyl­vania in 1986. His research interests 
are in computer simulation, modeling, and animation, and he is a Fel­low of the Society for Computer 
Simulation (SCS). Dr. Fishwick will serve as General Chair for WSC00 in Orlando, Florida. He has authored 
one textbook, co-edited three books and published over 100 techni­cal papers. Permission to make digital 
or hard copies of part of all of this work or personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies bear this 
notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, 
or to redistribute to lists, requires prior specific permission and/or a fee. VRML 2000, Monterey, CA 
USA &#38;#169; ACM 2000 1-58113-211-5/00/02 $5.00
			
