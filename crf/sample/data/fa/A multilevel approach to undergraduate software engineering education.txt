
 A Multilevel Approach to Undergraduate Software Engineering Education Wing C. Tam Computer Science 
Department Harvey Mudd College Claremont, CA 91711 In this paper a multilevel approach to undergraduate 
software engineering education is presented. The full range of educational objectives for these levels, 
from the teaching of basic programming skills to providing the essential experience and training in project 
management, software development, and oral and written communication are discussed. These objectives 
are achieved by a sequence of courses and a unique program which brings projects from industry on campus 
to be solved by student teams. Introduction Current discussions on software engineering education have 
centered mainly on a single course [1][2] or a two-course sequence [3]. However, in order to train students 
to be software engineers one must take a broader look at the overall educational process and approach 
it at the curriculum level. At Harvey Mudd College, we view undergraduate software engineering education 
as divided into three levels. At the first level, the emphasis is on those concepts and skills essential 
as an individual programmer. The second level concentrates on providing the knowledge and skills in requirement 
analysis, software design and team project management. The third level provides the experience and training 
as a practitioner in a realistic software development environment with real-world problems. It is designed 
to integrate all the skills learned in the previous two levels. In the following sections the major educational 
objectives for the three different levels and how they are implemented will be discussed. Level I.: Software 
Development Skills AsAn Individual Programmer A student is assumed to have very little or no computing 
background when entering this level. Initially the emphasis is on problem solving Permission to copy 
without fee all or part of this material is .granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and/or specific permission. 1985 ACM0-89791-152-0/85/003/0332 
$00.75 and the use of the computer as a tool. Eventually it leads to the acquisition of the knowledge 
and development of the skills which are deemed essential for a programmer. The level of competency expected 
of students coming out of this level is: 1. A structured and systematic approach to program development, 
 2. Knowledge and use of programming language which reflects the important concepts of programming in 
a natural and easily understandable way. 3. Understand the quality requirements for a program such as 
reliability, readability, efficiency, proper program documentation and so on. 4. The ability to debug 
and test programs in a systematic way, including the use of proper tools.  This level of competency 
is achieved through the first two courses in our computer science curriculum. The first is a Freshman-year 
Pascal programming course and the second a course on data structures and program complexity. Level 2: 
Design And Management Of Large- Scale Software This level is concerned with the basic topics in software 
engineering and with the transition from a programmer to a software designer. The major goals at this 
level is encompassed by a one semester software engineering course. At the end of this course, a student 
will be able to: I. Understand the life cycle approach to software development. 332 2. Knobs and use 
the techniques and the tools for requirement analysis and to produce functional specifications. 3. Design 
a system from specificatio n using modern design techniques. This includes understanding the strengths 
and weaknesses of the major design methodologies.  4. Implement a design in a programming language and 
validate the implementation through testing.  In addition, students are required to work as a programmer 
team on a medium-size project, thus gaining some experience working in a team environment. At this level 
students may also take courses in programming language design, computer architecture, operating system, 
compiler design, etc. in conjunction with the software engineering course. Level 3: The Practice Of Software 
Engineering Significant software engineering issues arise in software which requires a long development 
time and involves many modules and many programmers. These issues are extremely hard to raise and appreciated 
in a one-semester course. This is true even for project-oriented courses. Some of the problems cited 
by Sathi [4] in running a project-oriented course are: 1. Difficulty in selecting real-world projects 
and not just "toy" problems. 2. Lack of time for students to devote to a big project on top of having 
to learn and digest all the course material. 3. Difficulty in finding real users who can interact with 
students in a big project.  Thus, the idea for this level is to provide the students with an opportunity 
to work on real-world problems of sufficient magnitude and complexity without the difficulties listed 
above. This is done through our engineering and mathematics clinic program which brings in software projects 
from industry to be solved by small teams of students under faculty supervision. Projects originate from 
different sources: industry, business, or government agencies. The initial contacts with potential sponsors 
are usually done by the college's development office, although faculty members also try to use their 
industrial contacts to help turn up projects. The criteria for selecting projects are that: (a) the projects 
must be of real interest to the sponsor; (b) the project's content promises to be of educational value 
to students; and (c) the sponsor must be willing to allocate a few hours every week or two of liaison 
time. After the projects are selected, teams of three to five students v~ork under a team leader with 
a faculty advisor on the projects for an entire academic year. For a software project, the team typically 
goes through the major steps of the software development life cycle: from initially negotiating with 
the sponsor on a formal proposal and functional specification to design implementation and testing. All 
project sponsors pay a fixed fee, based on an estimate of the average project's expenses, faculty release 
time, and overhead, to be involved in the clinic. The monetary involvement guarantees an interested and 
sometimes critical user for the projects. Part of the fee is used to provide the faculty advisor with 
release time from teaching and support for professional activities. The students received regular course 
credit for their participation in the project but no monetary compensation. Through clinic projects, 
students are introduced to the responsibilities of working as a team and meeting the constraints of time, 
budget, and the other requirements of a client. Beside bringing valuable experience to students by permitting 
them to work on realistic and practical software projects for an entire academic year, the clinic program 
also provides ample training in communication skills. After completion of a project, the sponsor receives 
a final written report and other necessary documentation. The sponsor also receives regular progress 
reports, either written or oral or both, throughout the life of the project. Furthermore, each team is 
required to give an oral presentation to the faculty and students once a semester. At the end of each 
academic year a "Project Day" open house permits each student team to present and demonstrate its results 
to invited company representatives and guests as well as the faculty and fellow students. A more detailed 
description of the clinic organization and sample projects is given in [5]. Since the clinic project 
comes after students having already taken a software engineering course, this enables them to integrate 
and practice what they have learned in the previous two levels and make the best out of their project 
experience. We feel that this is an attractive and viable way of providing software engineering education 
to the students. Conclusions To better prepare undergraduate students to be software engineers a broader 
view of software engineering education is needed. The multilevel approach presented in this paper provides 
a clear focus of the educational requirements and a foundation for the evolution of an undergraduate 
software engineering curriculum. One of the problems in software engineering education has always been 
that issues concerning software development in team environment involving many months, many programmers, 
and many modules cannot be handled satisfactorily by the traditional courses. Our approach not only provides 
the essential knowledge and skills through coursework but also, through our clinic 333 program, allows 
students to acquire the experience and training in software engineering in a realistic environment, outside 
the confines of a classroom setting. Results so far have been very encouraging. Those students who seek 
employment after graduation have been highly successful in making the transition to industry as software 
engineers. References <RefA>i. <SinRef><author>Kant, Elaine</author>, "<title>A Semester Course in Software Engineering</title>," <journal>Software Engineering 
Notes</journal>, <volume>Vo1. 6, No. 4</volume>, <date>August 1981</date>,<pages> p. 52-76</pages></SinRef>. 2. <SinRef><author>Carver, Doris L., </author>"<title>Software Engineering For Undergraduate</title>," 
<journal>SIGCSE Bulletin</journal>, <volume>Vol. 16, No. 3, </volume><date>September 1984</date>, <pages>p. 23-25</pages></SinRef>. 3. <SinRef><author>Bolz, Richard E. </author>and <author>Jones, Lawrence E., </author>
"<title>A Realistic Two-Course Sequence In Large Scale Software Engineering</title>," <journal>SIGCSE Bulletin</journal>, <volume>Vol. 15, No. 
1, </volume><date>February 1983</date>, <pages>p. 21-24</pages></SinRef>. 4. <SinRef><author>Sathi, Harbans L., </author>"<title>A Project-Oriented Course For Software Systems Development</title>," 
<journal>SIGCSE Bulletin</journal>, <volume>VoI. 16, No. 3, </volume><date>September 1984</date>, <pages>p. 2-4</pages></SinRef>.  5. <SinRef><author>Busenberg, Stavros N. </author>and <author>Tam, Wing C., </author>
"<title>An Academic Program Providing Realistic Training in Software Engineering</title>," <journal>Communications of the ACM</journal>, 
<volume>Vol. 22, Ho. 6, </volume><pages>p. 341-345</pages></SinRef>.  </RefA>
			
