
 Adding Inheritance to Ada Jiirgen F.H. Winkler Siemens AG, Corporate Research Otto-llahn-Ring 6, D-8000 
M6nchen 83, FRG winkler@ztivax.siemens.com The paper shows how Ada can be turned into an object oriented 
language by adding package types and an inheritance clause. Keywords: Ada, Inheritance, Object oriented 
programming, Class, Subclass, Package type Introduction Ada provides some elements of object ori- ented 
programming (OOP) but it lacks the mechanism of inheritance, which is a 'very useful mechanism, and which 
can save a lot of recompilation and retesting effort. There are no good workarounds known, which could 
be usedto simulate inheritance in native Ada. Perez [Per 88] presents one proposal for simulating in- 
heritance in native Ada. His investiga- t/on shows that inheritance can only be simulated partially, 
and that, especially,  the introduction of new data components in a subclass is not directly possible. 
It seems therefore worthwhile to propose language constructs which allow for full inheritance in Ada. 
This paper is based on COPYRIGHT 1990 BY THE ASSOCIATION FOR COMPUTING MACHINERY, INC. Permission to 
copy without fee all or part of this material is granted provided that the copies are not made or distributed 
for direct commercial advantage, the ACM copyright notice and the title of the publication and its date 
appear, and notice is given that copying is by permission of the Association for Computing Machinery. 
To copy otherwise, or to republish, requires a fee and or specific permission. a proposal submitted 
to the Ada9X project [Win 89]. Some ideas are also borrowed from [DSW 90]. The proposal for the introduction 
of in- heritance into Ada is based on the concept of package types (in analogy to task types). A package 
type has quite the same properties as a class in an object oriented programming language. Inheritance 
is introduced via a new clause, the inheritance clause. In this pa- per we present single inheritance 
only. Multiple inheritance could also be intro- duced. 2 Class Definition We define classes as package 
types ex-tending the syntax of Ada as depicted in the following example: PACKAGETYPE Figure IS . . END 
Figure ; (1) This is quite the same syntax as that for task types. The definition (1) defines "Fig- ure" 
as a private type. In terms of OOP "Figure" can also be called a class. We will use the term package 
type in the rest of the paper. Inside the specification part of such a package type a new form of subprogram 
declaration can be used: CONSTR Figure (Pos PointTy); (2) Such a declaration defines a constructor for 
the package type in whose specifica- tion part it is contained. Such a construc- tor must have the same 
identifier as the corresponding package type. Constructors may be overloaded in the same way as subprograms. 
A constructor is automati- cally called when a variable of the pack- age type is created. Variables of 
package types are created in the very same man- ner as variables in Ada (which are actual- ly called 
objects): MyFigure : Figure (Pos => (lO,Z0)); (3) In the rest of the paper we call the vari- ables objects 
as it is done in Ada. The dif- ference between the object declaration (3) and an object declaration in 
Ada is the fact that the type name after the colon is interpreted as the name of a constructor subprogram. 
Since a constructor may have parameters we obtain the general form of an object declaration given in 
(3). This declaration declares an object named "MyFigure" of type "Figure". As part of the elaboration 
of this declaration the cor- responding constructor is called with the given parameter. Apart from the 
constructors the speci- fication part of a package type may con- tain the same declarations as a package 
specification. Subprograms declared in the public part of a specification part of a package type are 
typically called methods in the OO world. We call them also meth- ods because they are called in a slightly 
different way than other subprograms. A method is always called in the context of an object. The package 
type "Figure" may contain the following method declaration: PROCEDURE Move (To: PointTy); (4) The application 
of the method "Move" to the object "MyFigure" is expressed in the form generally used in the OO world: 
Myrigure.Move (Vector => (40, 65)); (6) In this form of call the object is a kind of additional and implicit 
parameter of the method; i.e. there is a special binding be- tween a package type and its methods. This 
is different from the relation be-tween a package and its public subpro- groinS. The complete specification 
part of the package type "Figure" may look like: PACKAGE TYPE Figure TYPE Dimensions IS (X, Y); Lower-Bound 
: constant := -I00; Upper-Bound : constant := 100; TYPE Coordinate-Value IS Range Lower_Bound Upper-Bound: 
.. TYPE PointTy IS Array (Dimensions) Of Coordinate-Value; CONSIR Figure; CONSTR Figure (Pos: PointTy); 
FUNCTION Position Return PointTy; Pragma Inline(Position); PROCEDURE SetPosition (To: PointTy); PROCEDURE 
Nove (Vector: PointTy); PRIVAIE Center: Point/y; END Figure; The body of a package type declaration 
contains the bodies of the subprograms specified in the specification part and may contain further declarations 
but it must not contain any statements. Washington Ada Symposium Proceedings. June 1990 Subclass Definition 
A package type C can be used as a basis to define further package types which are then a kind of extensions 
of C. The O0 term for such extended package types is subclass. A subclass of "Figure" can be defined 
as another package type using an inheri- tance clause: PACKAGE TYPE Circle IS.A Figure IS ... (6) The 
clause "IS_A Figure" is called the in- heritance clause and indicates that "Cir- cle" is a subclass of"Figure". 
I.e. an object of type "Circle" consists of two data com- ponents: "Center" and "Rad', and all sub- programs 
in the visible part of "Figure" are also implicitly contained in the visible part of "Circle". The most 
important con- sequence of this property of subclasses is the fact that all methods defined in the superclass 
may also be applied to an ob-ject of the subclass. If we define an object "YourCircle" as follows: YourCircle 
: Circle ... (7) then we can apply the method "Move" also to this object: VourCircle.Move(Vector => (5,5)); 
(8) A complete definition of the specification of the subclass circle may look like: PACKAGE TYPE Circle 
IS_A Figure IS TYPE RadiusTÂ¥ IS Range 0 .. Upper-Bound; CONSTR Circle (Pos: PointTy; Radius: RadiusTy); 
FUNCTION Radius Return RadiusTy; PROCEDURE SetRadius (Radius: RadiusTy); PROCEDURE Draw; PRIVATE Rad: 
gadiusTy; END Circle ; 3 Assignment Statement Package types can be used in the same way as other types. 
Since package types are private types the operations ":=", "--", and '7 =" are available. The assign- 
ment operation is not only defined for the case where the type of the left hand side and the type of 
the right hand side are equal but also for the more general case in which the type of the right hand 
side is a subclass of the type of the left hand side. The effect of the assignment statement is the copying 
of the values of the data com- ponents of the object on the right hand side into the corresponding data 
compo- nents of the object on the left hand side. Therefore the following assignment is le- gal: NyFigure 
:= YourCircle; (g) but not the other way round: YourCircle := MyFigure; (10) because there is no "Rad" 
component in an object of type "Figure". Some examples for manipulating objects are given in the following 
procedure "Main". With Circle, Figure; PROCEDURE Main IS Point%: Figure.PointTy; NyCircle: Circle ((5,5), 
7); YourCircle: Circle ((8, -10), 3); BEGIN MyCircle.Move ((10, 10)); Point! := NyCircle. Position; YourCircle.Draw; 
YourCircle := MyCircle; YourCircle.Dra.; END Main; Summary By adding one generalization (package type) 
and one new construct (IS.A clause) Ada has has been turned into a fully ob- ject oriented language. 
Since Ada con-rains already some elements of object ori- ented programming the extensions fit into the 
general framework of the lan-guage. We have not treated the integration of concurrency into the OO framework. 
The first idea to solve this problem is to intro- duce also an inheritance clause for task types. But 
this does not work because the internal structure of Ada tasks is quite different from the internal structure 
of objects in the sense of OOP. We will in- vestigate this problem further in a future paper. References 
<RefA>DSW 90 <SinRef><author>Diefl], Georg</author>; <author>Schu|z, Georg</author>; <author>Winkler, Jflrgen F. H</author>.: <title>Object-CHILL: The Road to Object Oriented 
Programming with CHILL</title>. In: <editor>Palma, A. </editor>(ed.):<booktitle>Proceedings ofthe 5th CHILL Conference</booktitle>, <location>Rio de Janeiro</location>, <date>March 
1990</date>, <pages>118..125</pages></SinRef>. Per 88 <SinRef><author>Perez, Eduardo Perez</author>: <title>Simulating Inheritance with Ada</title>. <booktitle>Ada Letters</booktitle> <volume>VIII, 5</volume> (<date>1988</date>) 
<pages>pp. 37..46</pages></SinRef>. Ref83 <SinRef><title>Reference Manual for the Ada Programming Language</title>. <tech>ANSI / MIL- STD 1815 A</tech>. <date>February 
1983</date></SinRef>. Win 89 <SinRef><author>Winkler</author>, <author>Jfirgen F. H</author>.: <title>Ada9X, Proposal# 8906230125</title>. <booktitle>Washington Ada Symposium Proceedings</booktitle>. 
<date>June 1990</date></SinRef></RefA>  
			
