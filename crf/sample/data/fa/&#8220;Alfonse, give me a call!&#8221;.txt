
 "Alfonse, Give Me a Call!" Stephen J. Hartley Computer Science Department Rowan University Glassboro, 
NJ 08028 -I.-1 856 256 4500 hartley@elvis.rowan.edu Abstract The SR programming language supports a 
simple and elegant set of abstractions for its model of distributed computing. The model provides an 
effective framework for demonstrating to students the different styles of dis- tributed programming. 
A small Java toolkit based on SR's model is presented in this paper. This toolkit al- lows instructors 
to use the popular Java language as a platform in parallel and distributed processing courses. Introduction 
 Distributed computing has become more widespread due to the decreasing cost and improving performance 
of computer hardware and network technology. The hardware involved is often described as "commodity off 
the shelf" (COTS), a network of workstations (NOW), or a cluster. The Beowulf project [5] is a good example. 
The user programs on these systems create a set of pro- cesses that cooperate to solve some computationally 
de- manding problem. These processes do not share mem- ory and thus need some mechanism to communicate 
in order to synchronize and share data. Two styles of pro- cess interaction are client-server and peer-to-peer. 
In the former, clients send request messages to servers and await replies; in the latter, peers pass 
around data. To support these process interactions, the programming environment and/or the operating 
system of the cluster nodes must implement some sort of message passing. Two kinds of message passing 
are blocking or synchro- nous, in which the sender of a message blocks until the message is received, 
and non-blocking or asynchronous. A particular kind of message passing is used by clients Permission 
to make digital or hard copies of all or part of this work for personal or classroom use is granted without 
fee provided that copies are not made or distributed for profit or commercial advan- tage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on 
servers or to redistribute to lists, requires prior specific permission and/or a fee. SIGCSE 2001 2/01 
Charlotte, NC, USA &#38;#169; 2001 ACM ISBN 1-58113-329-4/0110002._$5.00  and servers, called the guarded 
rendezvous. A client sends a request message to a server and blocks, waiting for the reply message. A 
server specifies some sort of condition or criterion, called a guard, that is used to choose which client 
request message to handle next. This paper describes a simple Java [3, 15] toolkit that implements message 
passing and the guarded rendez- vous and is used to illustrate these programming prin- ciples to students 
in a parallel computing course. The toolkit is inspired by the SR concurrent program- ming language [1, 
2, 8], which has an elegant orthog- onal model of services and invocations. Java's remote method invocation 
(RMI) package is used in the toolkit to extend message passing and guarded rendezvous from within one 
Java virtual machine (JVM) to between two JVMs that are perhaps executing on different cluster nodes. 
2 What Java Has Java has support for concurrent programming with its built-in threads. In the more recent 
JVMs, these threads are mapped onto kernel threads, and in a shared-memory multiprocessor, they are scheduled 
over the multiple CPUs available. A multithreaded Java pro- gram running on such a system thus exhibits 
true par- aUelism. Synchronization is supported in Java with object locks and wait sets. Although called 
a monitor [10], Java's synchronization primitive is low level and error prone, lacking multiple condition 
variables and suffering from subtle race conditions between signals (notifications) and program-initiated 
thread interrupts [7]. Java's only built-in support for inter-JVM cluster com- puting is RMI. RMI includes 
support for object serial- ization, which is used to copy the objects in a method's parameter list from 
one JVM to another. Message pass- ing and guarded rendezvous between threads must be provided by user-written 
classes. passive synchronous (a) method call asynchronous (b) spawn new thread active (c) guarded rendezvous 
or synchronous message passing (c) asynchronous message passing Figure 1: Operations and Invocations. 
  3 SR's Model The SR language has an elegant synchronization and in- terprocess communication design. 
Using Java's object- oriented terminology, threads in objects communicate by invoking services in other 
objects. The significant abstractions in the design are operations, invoking an operation, and implementing 
an operation. Operations are the public methods or services provided by an ob- ject. An operation is 
invoked by sending parameters to it. An operation is implemented in one of three ways with code that 
is executed (a) by the invoking thread as in a method call, (b) by a new thread created in the service 
object, or (c) by an existing thread in the service object. Invocations can be local (intra-JVM) or remote 
(inter- JVM) and can be synchronous (block until performed) or asynchronous. Services can have a return 
value or not and can be implemented passively with a method or actively with an accepting thread. All 
design combi- nations are supported in SR. Figure 1 shows how these combinations map to (a) method calling, 
(b) creating a new thread, and (c) message passing and guarded ren- dezvous. It is important to note 
the orthogonality of the design: the invoker of an operation does not know how the operation is implemented 
(passive or active) and the operation does not know how it is invoked (synchronous or asynchronous). 
 4 The Toolkit The toolkit is available at http://elvis.rowan, edu/ -hartley/SIGCSE/Norkshop/workshop2.html. 
It con- taius ten classes and eight example programs, and was developed on a Pentium PC running Red Hat 
Linux 6.1 using IBM's JDK 1.1.8 for Linux [12]o  4.1 Message Passing The toolkit's MessagePassing class 
implements a mail- box or channel shared by a collection of threads that have a peer relationship. Sending 
a message is asyn- chronous, that is non-blocking. The class is used in the following way. // shared 
data type class Message { ... } // user defined // shared mailbox or channel MessagePassing mb = new 
MessagePassing(); // sending thread Message ms = new Message(...); mh.send(ms); // receiving thread 
Message mr = (Message) mb.receive();  Synchronous message passing is done with the call (ms) method 
of the guarded Rendezvous class, described later. RMI, also described later, is used to implement message 
passing between threads in different JVMs, which may be on different physical machines. 4.2 Rendezvous 
Using Message Passing The rendezvous interaction is used by threads that have a client-server relationship. 
A client thread interacts with a server thread by sending a request message. The client follows that 
immediately with a receive that blocks until the server sends a reply message containing the results 
of the request. Two MessagePassing objects are created for each client-server pair. // shared data types 
class Request { ... } // both are class Reply { ... } // user defined // shared by client and server 
for requests MessagePassing rq = new MessagePassing(); // shared by client and server for replies MessagePassing 
rp = new MessagePassing(); // client thread Request request = new Request(...); rq.send(request); Reply 
reply = (Reply) rp.receive(); // server thread Request request = (Request) rq.receive(); Reply reply 
= new Reply(request); rp.send(reply);  4.3 Guarded Rendezvous The guarded Rendezvous class is used 
to instantiate a single object that is shared by multiple clients and mul- tiple servers to carry out 
the above kind of interaction. The class includes a mechanism for a server to specify a condition or 
guard on what type of client requests the server is willing to handle. It is used as follows. // shared 
by multiple clients and servers Rendezvous r = new Rendezvous(); // client threads Request request = 
new Request(...); Reply reply = (Reply) r.clientTransactServer(request);  // server threads message 
to a remote peer creates a RemoteRendezvous- class ServerCondition implements Client object, passing 
to the constructor the machine RendezvousCondition { ... } name and service name. These client and server 
objects RendezvousCondition c = // the guard encapsulate all of the details and steps necessary to use 
new ServerCondition(...); RMI to execute remote methods. Transaction t = r.serverGetClient(c); Request 
request = (Request) t.serverGetRequest(); Reply reply = new Reply(request); t.serverMakeReply(reply); 
 Transaction and RendezvousCondition are auxiliary classes. See Figure 2. Blocked "inside" a Transaction 
object, waiting for the reply, is the client whose request a server is currently handling. The RendezvousCondi- 
tion interface specifies a single method boolean checkCondition(int messageNum, Vector blockedMessages, 
int numRlockedServers); that must be implemented by any server-defined guard class. Whenever a client 
sends a request message to the shared guarded Rendezvous object, each waiting server's checkCondition 
method is called to evaluate the server's guard on the client's request. The first server whose call 
succeeds is given the client's request to handle. A server's checkCondition method has access to the 
queue of all waiting client request messages and the number of waiting servers, if needed for its evalua- 
tion. The Rendezvous class defines three more methods, send(ms), call(ms), and receive(c), that are used 
for asynchronous and synchronous conditional message passing among a collection of peer threads. A receiv- 
ing peer specifies a condition for messages it is willing to receive, just as is specified by a server 
for a guarded rendezvous. To block until the message is received by some peer, a sender uses call (ms) 
instead of send (ms). 4.4 Remote Method Invocation The three classes RemoteRendezvous, RemoteRendez- 
vousClient, and RemoteRendezvousServer allow a guarded rendezvous between two threads executing in different 
JVMs, perhaps on different nodes in a cluster. RemoteRendezvous is an interface containing the lo- cal 
guarded rendezvous method specifications: client- TransactServer, serverGetClient, send, call, and receive. 
A server willing to accept transactions from remote clients or a peer willing to accept messages from 
remote peers advertises itself by creating a RemoteRen- dezvousServer object, passing to the constructor 
the RMI service name to be registered. A client wanting to transact with a remote server or a peer needing 
to send a The use of l:tMI shows how service invocation is orthog- onal to service implementation. For 
passive implemen- tation, a server registers methods that execute the steps needed to perform the service. 
For active implementa- tion, the registered method delegates its invocation to a local guarded Rendezvous 
object, as shown in the ae- moteRendezvousServer class. class RemoteRendezvousServer ... { ,., local 
= new Rendezvous(); ,.. public Object clientTransactServer (Object message) ... { return local.clientTransactServer 
(message); }  4.5 Examples Included in the toolkit download are examples that il- lustrate the use 
of all the classes in the toolkit. Parallel versions of quicksort, sieve of Eratosthenes, and radix sort 
demonstrate the MessagePassing class. The din- ing philosophers and the "picky" consumers show how to 
use the guarded Rendezvous class (picky consumers select the smallest item from those produced). A ring 
of peers in a network of workstations uses remote message passing to circulate a token around the ring. 
Clients use the RemoteRendezvous classes to perform transactions with a remote database server. Other 
similar toolkits exist. Doug Lea's [13, 14] concur- rent programming package is designed for synchronizing 
threads in a single JVM executing on a shared-memory multiprocessor type of parallel machine. It has 
over 60 classes. JCSP [4] and CTJ [6, 9] are based on Hoare's communicating sequential processes [11] 
and implement channels for message passing. They are more complex and rich, having over 100 classes each, 
than the toolkit described here. 5 Conclusions The small and simple toolkit described in this paper is 
ideal for teaching the basics of distributed parallel com- puting. It is written in a popular language, 
Java, that most students will know by the time they take such a course. Another strength of the toolkit 
is being based on the clean versatile design of the SR language primi-    IrnewRendezvousl' : .. Sewem 
%  Clients : ., &#38; reply = : % r.clientTransactServer(m) Transaction t = ~% r.serverGetClient(c); 
I%I% ~ .... 1% ... ! l  Transaction 14 ............... : I I / | !  retest = t.serverGetRe~est(); 
~-" reply = ...; s / t.serverMakeReply(reply); .,it" Figure 2: Guarded rendezvous between clients and 
servers. tives for concurrent programming: orthogonal operation (service) invocation and implementation. 
A service is invoked synchronously or asynchronously, independent of its implementation, which is passive 
or active. The toolkit satisfies the need Java has for a distributed programming library that implements 
some useful com- munication and synchronization tools and that hides the complexities and race conditions 
of its built-in monitors. References <RefA>[1] <SinRef><author>Andrews, G. </author><title>Concurrent Programming: Principles and Practice</title>. 
<publisher>Benjamin/Cummings</publisher>, <date>1991</date></SinRef>. [2] <SinRef><author>Andrews, G., </author>and<author> Olsson, R. </author><title>The SR Program- ming Language: Concurrency in 
Practice</title>. <publisher>Benja-min/Cummings Publishing</publisher>, <date>1993</date>. </SinRef>[3]<SinRef> <author>Arnold, K.</author>, and <author>Gosling, J. </author><title>The Java Programming Language, 
2 nd ed.</title> <publisher>Addison-Wesley</publisher>, <date>1998</date>. </SinRef>[4] <SinRef><author>Austin, P., </author>and <author>Welch, P.</author> <title>JCSP web page at the University of Kent</title>, 
<location>Canterbury, UK. Online. Inter- net</location>. [<date>October 28, 2000</date>]. Available WWW: <url>http:// www. cs. ukc. ac. uk/proj 
ect s/of a/j csp/</url>. </SinRef>[5] <SinRef><title>The Beowulf Project</title> <location>Online. Internet</location>. [<date>Octo-ber 28, 2000</date>]. Available WWW: <url>http://www.be- 
owulf, org/</url>. </SinRef>[6] <SinRef><author>Chalmers, A. </author><title>JavaPP Web page</title> at <location>the Univer- sity of Bristol, UK. Online Internet</location>. [<date>October 
28, 2000</date>]. Available WWW: <url>http://www.cs.bris. ac. uk/'alan/j avapp, html</url></SinRef>. [7] <SinRef><author>Hartley, S. </author><title>Alfonse, Wait 
Here For My Signal! </title><journal>ACM SIGCSE Bulletin </journal><volume>31, 1 </volume>(<date>March 1999</date>), <pages>58- 62</pages></SinRef>. [8] <SinRef><author>Hartley, S. </author><title>Alfonse, You Have 
a Message! </title><journal>ACM SIGCSE Bulletin</journal> <volume>32, 1 </volume>(<date>March 2000</date>), <pages>60-64</pages></SinRef>. [9] <SinRef><author>Hilderink, G. </author><title>JavaPP Web page</title> at <location>the University 
of Twente, Netherlands. Online. Internet</location>. [<date>October 28, 2000</date>]. Available WWW: <url>http://www.rt.el. utwent 
e. nl/j avapp/</url></SinRef>.  [10] <SinRef><author>Hoare, C. A. R. </author><title>Monitors: An Operating System Structuring Concept</title>. <journal>Communications 
of the A CM </journal><volume>17, 10 </volume>(<date>October 1974</date>), <pages>549-557</pages></SinRef>. [11] <SinRef><author>Hoare, C. A. R. </author><title>Communicating Sequential Pro- cesses</title>. 
<publisher>Prentice-Hall International</publisher>, <date>1985</date>. </SinRef>[12] <SinRef><title>IBM. JDK 1.1.8 for Linux</title>. <location>Online. Internet</location>. [<date>Octo- ber 28, 2000</date>] 
Available WWW: <url>http://www, ibm. com/j ava/j dk/118/linux/</url></SinRef>. [13] <SinRef><author>Lea, D.</author> <title>Concurrent Programming in Java</title>, 
2 nd ed. Addison-Wesley, 2000</SinRef>. [14] <SinRef><author>Lea, D.</author> <title>Package util. concurrent</title>. <location>Online. Inter- net</location>. [<date>October 28, 
2000</date>] Available WWW: <url>http:// gee. cs. oswego, edu/dl/cpj/</url></SinRef>.  [15] <SinRef><publisher>Sun Microsystems</publisher>, Inc. <location>Java. Online. 
Internet</location>. [Oc- tober 28, 2000] Available WWW: <url>http://java. sun. com/</url></SinRef></RefA>.   
			
