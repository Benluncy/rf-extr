
 3D Gadgets for Business Process Visualization a case study Bastiaan Sch¨onhage* ASZ R&#38;D, Gak NL 
Alex van Ballegooijt CWI Anton Eli¨ens: CWI Vrije Universiteit Mathematics and Computer Science Amsterdam, 
The Netherlands Abstract Business visualization is becoming increasingly important, since managers recognize 
the power of human visual intuition in information-rich decision tasks. Nevertheless, despite its promises, 
3D visualizations are far less common than one would expect. In this paper, we describe a case study 
where we took a 2D vi­ sualization of a business process as a starting point, for which we subsequently 
provided a 3D visualization. We introduce a small collection of 3D visualization gadgets and associated 
behaviors, im­ plemented in Java3D, which proved to be relatively complete for our case. For each of 
these gadgets and behaviors, we will discuss require­ ments and design trade-offs. The case study, which 
concerns an actual business process of the largest social security provider in the Netherlands, illustrates 
the usability of our gadgets and their associ­ ated behaviors, which include brushing, grouping, and 
(drill down) manipulation. CR Categories and Subject Descriptors: I.3.2 [Computer Graph­ ics]: Graphics 
Systems -Distributed/network graphics; I.3.8 [Com­ puter Graphics]: Applications; D.2.12 [Software Engineering]: 
In­ teroperability -Distributed objects Additional Keywords: Java3D, Information Visualization, Gad­ 
gets, Business Process Visualization 1 Introduction In the DIVA project we deploy visualization components 
which are called visualization gadgets. These gadgets can present informa­tion in a two-or three-dimensional 
fashion, dependent on the goal and target group of the visualization. In the past, we have created three-dimensional 
gadgets based on VRML and Corba as described in [8]. To overcome problems signaled there, such as the 
limited possibilities for interaction, we decided to experiment with the new high-level 3D API offered 
by Sun, Java3D. In order to validate re­quirements and design tradeoffs in a realistic setting, we recreated 
*bastiaan@cs.vu.nl tAlex.van.Ballegooij@cwi.nl +eliens@cs.vu.nl Permission to make digital or hard copies 
of part of all of this work or personal or classroom use is granted without fee provided that copies 
are not made or distributed for profit or commercial advantage and that copies bear this notice and the 
full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute 
to lists, requires prior specific permission and/or a fee. VRML 2000, Monterey, CA USA &#38;#169; ACM 
2000 1-58113-211-5/00/02 $5.00 an existing 2D visualization of a particular business process in 3D, 
using our Java3D gadgets. The case study concerns the visualization of business informa­tion at Gak Netherlands 
in the domain of social security. Section 2 describes the context of this case study and shows an example 
of the 2D prototype that was the result of a previous case study. In addition, we will discuss why we 
made the transition to 3D visu­alization of business processes. After that, Section 3 presents the reusable 
collection of Java3D gadgets we deployed to create the 3D prototype. The collection consists of both 
behavior and visualiza­tion components. The application to visualize business information is described 
using the case study at Asz/Gak in Section 4. Finally, in Section 5 we will end with conclusions.  2 
Managing Business Processes at Gak Netherlands Gak is the largest social security provider of the Netherlands. 
One of the core businesses of Gak NL is processing applications for ben­e.ts. For example, when people 
are unable to work due to illness, they can go to the Gak and apply for a bene.t. Their applications 
are processed in a number of stages, including medical inspection and ability assessment. This process 
is the business process that we will use as the topic of our information visualization later. However, 
before that, we will .rst explain why we have chosen to visualize business processes in this domain. 
In the near future, social security will no longer be state-owned and Gak will loose its current monopoly. 
To obtain a strong position in the market, the Gak company wants to improve the production time and ef.ciency 
of their production process without losing the quality of their prod­ucts. The delivered products (in 
this case products are bene.t ap­plications) are qualitatively good but the production process from application 
of the worker to approval or disapproval takes too long. Depending on the type of application, the norm 
production time is 8 or 13 weeks. However, due to unknown problems in the production process, the production 
often exceeds this norm. The Gak company wants to .nd the production bottleneck and its cause. In the 
past, we have created a 2D visualization system to support managers who control the bene.t application 
processes[9]. The system was built in two phases. First, we concentrated on increas­ing insight by creating 
visualizations to indicate the bottlenecks in the business process. The data sources consisted of databases 
con­taining measurements of the time that applications needed at the stages of the process. In the second 
phase of the project, we cre­ated a business process simulation and used the previously designed visualizations 
to display the results of that simulation. Figure 1 contains a screenshot of one of the visualizations 
cre­ated to increase insight in the current production status. The com­bination of process structure 
and associated histograms helps man­agers to quickly .nd bottlenecks. The histograms indicate the status 
Figure 1: 2D visualization of the throughput of the business process of applications, that is whether 
they are early, in time or too late. In addition to this, visualizations are available to give an overview 
of the past in order to search for trends. As a third option, managers are able to asses the results 
of possible interventions such as adding people to the workforce by means of simulation. In summary, 
the prototype uses the same visualizations to view past, present and fu­ture but requires multiple windows 
to present them. Based on experiences with the two-dimensional visualizations, this case study aims at 
a 3D version of business visualization. Since the future users have little experience with 3D, the handling 
and navigation of the three-dimensional information space will almost certainly be less effective than 
its 2D counterpart. However, 3D has the potential of high information density. This gives us the oppor­tunity 
to catch more information, e.g. concerning past, present and future, in a single environment.  3 A Reusable 
Collection of Visualization Gadgets in Java3D Java3D [11] is the 3D application program interface (API) 
of the Java language. It is used to create platform-independent 3D ap­plications that can be used over 
the internet. Additionally, Java3D can read and display VRML [5, 1] .les and combine VRML scenes with 
Java3D contents. Although Java3D offers some high-level building blocks, such as built-in primitives 
(sphere, cone, etcetera) and behaviors for in­teraction, it still requires a lot of programming effort 
to create a simple visualization. To .ll in this gap, we have created a collec­tion of reusable visualization 
gadgets based on top of Java3D. The set consist of two types of primitives. First, we have the behaviors 
which usually do not present themselves graphically, but merely exist to add interaction to a scene graph. 
The behaviors we will discuss here are brushing and manipulation. The second class of components we have 
created, the gadgets or visualization prim­itives, represent information by means of 3D visualization. 
The gadgets we will describe here are the cone tree, the histogram and the graph. 3.1 Behaviors The DIVA 
Java3D collection currently contains .ve different types of behaviors. Two of them (brushing and modify 
behavior) are dis­cussed in somewhat more detail below. The current behaviors are: .BrushingBehavior 
reveals extra information about the object that the input device is currently pointing at. .KeyBehavior 
is a generic behavior class to move objects through the scene according to key presses. It is often used 
to move the camera viewpoint. .MenuBehavior displays a context-sensitive 3D menu when the user selects 
an object. .ModifyBehavior adds many possible manipulations of a Java3D object to a single mouse button. 
Supported exam­ples include rotation, translation, scaling and iconi.cation of groups. .TranslateBehavior 
translates 3D objects in such a way that they move along the screen s x-axis and y-axis (instead of the 
default behavior of translation along the object s local coordi­nate system). 3.1.1 BrushingBehavior 
The retrieval of more detailed information about parts of a visual­ization without changing the visualization 
itself is called brushing. When a pointing device is moved over a particular component in the visualization, 
extra information appears on top of the selected object. The advantage of brushing is that information 
can be re­trieved quickly without replacing the current visualization. A sim­ple mouse movement is enough 
to reveal, for example, the numbers on which the visualization is based. The goal of the brushing behavior 
is to allow a program to easily add information in the form of brushing to an existing scene graph. For 
the brushing behavior we have three requirements: .It must be possible to add brushing information to 
an existing scene graph. .It must be possible to dynamically change the information that is associated 
with brushable objects.  .The brushing behavior must be relatively ef.cient, because it is expected 
to be used often and should therefore not pose too much of a burden on the system. The brushing behavior 
we developed satis.es the de.ned re­quirements. One can add it to an existing scene graph and dynam­ically 
change which 3D objects are brushable and what informa­tion is to be associated with them. Figure 2 illustrates 
the effect of brushing a VRML scene that has been extended with brushing capabilities. 3.1.2 ModifyBehavior 
An important way of interacting with a visualization is the abil­ity to manipulate the objects present 
in the 3D scene. The stan­dard Java3D behaviors support this by means of a combination of mouse and key 
presses. A problem with these standard behaviors is that the controls are not intuitive and use all three 
mouse buttons (many users only have one or two mouse buttons). As an example of a counter-intuitive standard 
manipulation behavior, the translation behavior moves objects according to their local coordinate system. 
Depending on the viewpoint and the object s orientation this can be a completely different direction 
than the user moved the mouse. The requirements for the modify behavior are: .The behavior must be selectively 
applicable. In other words, the program must be able to indicate what objects the user can and cannot 
manipulate. Figure 2: Brushing the red box .The behavior must be extensible; it should be possible to 
add additional manipulation methods. .The object or group of objects under manipulation should be clearly 
marked. .The basic rotation, translation and scaling manipulations should work intuitively. For instance, 
moving an object to the left must result in the object moving to the left along the x-axis of the screen, 
regardless of the orientation of the object and the current viewpoint.  Figure 3: The red box modify 
behavior has been activated The modify behavior allows users to pick an object. A transpar­ent box to 
indicate selection surrounds the selected object. Users can manipulate the selection by pressing one 
of the icons and drag­ging the mouse. Figure 3 shows a scene containing a box and a pyramid. The box 
object has been selected and rotated a little. The selection of the red box is visible through the transparant 
white box drawn around it. The three little icons indicate three possible actions. From left to right 
the icons can be used for respectively rotation, scaling and translation. In addition to these actions, 
new icons can easily be de.ned and added to modify objects in different manners.  3.2 Visualization 
gadgets Currently, the collection of visualization primitives in the DIVA package comprises three gadgets: 
the cone tree, the histogram and the graph gadget. This set proved to be relatively complete for the 
purposes of visualizing business process simulation. Each of these gadgets will be discussed in somewhat 
more detail below. 3.2.1 The Cone Tree The cone tree was developed at Xerox Parc and has since then 
be­come one of the best known examples of 3D visualization [6]. The idea behind the conetree is that 
the 3D representation of a tree struc­ture makes optimal use of the screen space and thus enables the 
visualization of much larger structures than the traditional 2D ap­proach [2]. The requirements for our 
implementation of the cone tree are as follows: .As the cone tree is meant to visualize large data sets, 
an impor­tant requirement is that the implementation must be ef.cient. It must be able to display several 
thousands of nodes without a problem. .The implementation must be able to display dynamic trees. Changes 
in the underlying data-structure must be visible in the cone tree. .The user must be able to navigate 
through the data set by ma­nipulating the layout of the tree. In the case of the cone tree this is realized 
by allowing the user to rotate each of the cones.  .Users must be able to select nodes in the tree. 
Additionally, the gadget must be able to change the constellation of the branches in such a way that 
the selected path is rotated to the front. Figure 4: A Cone Tree visualizing a directory structure Figure 
4 shows the visualization of a directory structure of a .le system. The visualization continuously monitors 
modi.cations of the underlying .le structure and adapts the tree when necessary. Performance was the 
major design requirement for this gadget. Therefore, we have implemented critical elements of the tree 
using our own customized graphical objects. For example, instead of us­ing a standard scenegraph consisting 
of group and transform nodes to create a single cone with associated text planes, we created a special 
purpose TreeTextPlaneobject that patches translations into its de.ning vertices. Additionally, all TreeTextPlaneob­jects 
share an alphabet of textures to decrease memory allocation.  A drawback of this approach is that adapting 
the tree to new re­quirements has become more complex.  3.2.2 The 3D Histogram The histogram is a visualization 
primitive that is used to give insight into the distribution of data over a speci.c quantity, such as 
time. The advantage of a 3D histogram over a 2D histogram is the fact that the third dimension can be 
used to show additional information. This way, multiple data sets can be compared. For example, the monthly 
sales results of three competing companies can effectively be compared using 3D histograms. As requirements 
for our 3D histogram we state: .The dimensions of the histogram must be customizable. .The histogram 
must be able to handle an arbitrary number of bars of arbitrary size and shape. .The text displayed 
at the axis must be customizable. .The histogram must be able to change dynamically whenever the input 
values for the visualization change.  Figure 5: The histogram gadget Figure 5 shows a screenshot of 
the 3D histogram in action. Be­cause 2D histograms are often used in (business) visualizations, we have 
designed the gadget to resemble normal 2D histograms. The 3D implementation, however, adds the possibility 
to show multiple rows of bars at the same time. In addition to this, the gadget has a so-called water-level, 
which can be used to indicate to the user what level is to be considered normal. The water-level can 
be seen in Figure 5 as the transparent blue box .lling the lower 25 percent of the histogram gadget. 
An important feature is that the histogram works with generic bars. All that a bar object must do for 
the histogram gadget to be able to use it is implement the Bar interface. This makes it pos­sible to 
implement speci.c bars for speci.c purposes. There are two standard implementations of the Bar interface 
included in the DIVA package. The .rst option is a simple bar, which is nothing more than a red cylinder 
that can grow and shrink. A second im­plementation is the multi-level or stacked bar. This class allows 
for a sub bars with customizable colors that can all grow and shrink independently of each other. The 
histogram gadget uses the brush­ing behavior to allow users to retrieve additional information about 
each of the bars. 3.2.3 The Graph The purpose of the Graph gadget is to visualize the structure of and 
transitions in dynamic (business) processes. It is capable of repre­senting both the static model (a 
graph) and the dynamic behavior in the form of elements .owing through the model. Requirements for the 
graph gadget include: .The gadget must be able to visualize activities within the graph by means of tokens 
.owing over the edges of the graph. .The user must be able to change the layout of the graph. .The 
user must be able to collapse subgraphs in order to focus on what is important.  .It must be possible 
to select nodes and interact with the un­derlying information source (e.g. a simulation). The graph gadget 
consists of nodes which are connected by edges. To visualize a .ow in the model, tokens move from node 
to node over the edges of the graph. The BrushingBehavior provides the user with information about nodes 
and tokens. Manipulation of graph elements is achieved by means of the ModifyBehavior. To al­low users 
to select and (de)iconify groups, two new icons are added to the default modify behavior. One icon allows 
users to select the parent group that the currently selected item is part of. The other icon allows users 
to collapse (iconify) or expand (de-iconify) the currently selected group. Figure 6: The graph gadget 
Figure 6 illustrates usage of the graph gadget to visualize a sim­ulation of a counter-based business 
process, such as can be found at banks or fast food restaurants. From left to right, the graph structure 
depicts arrival, a single waiting queue, two counters and departure. People, represented by the small 
tokens, enter the process on the left and wait in the queue until one of the counters is empty. After 
being served, tokens leave the process graph again on the right-hand side. 3.2.4 Additional Gadgets 
The set of gadgets can be extended; more visualization primitives can be thought of that would be useful. 
The results of our work and the experiences gathered indicate that Java3D is well suited for this kind 
of work. However, our current purposes are not to create an exhaustive set of 3D visualization primitives. 
Rather, we want to rebuild a 2D visualization application using 3D techniques to evaluate the advantages 
and disadvantages of the 3D approach to business visualization. The collection of gadgets we have built 
allows us to experiment with 3D visualization in an actual business process as will be shown in Section 
4.  3.3 Software Architecture The study presented in this paper is one of a series of case stud­ies 
done as part of the DIVA project. We have been experimenting with collaborative visualization [7], 2D 
visualization of business processes [9] and dynamic and mobile VRML visualization gad­gets [8]. All of 
the case studies resulted in (prototype) implementa­tions of visualization applications. All of them 
were built according the same DIVA software architecture. The Distributed Visualization Architecture 
decouples informa­tion sources and visualization. This allows multiple visualizations and users to look 
at the same shared information source. Addition­ally, a single visualization can retrieve its data from 
multiple data sources. The architecture distinguishes two types of data sources: static and dynamic. 
A typical static information source is a database. Examples of dynamic sources include simulations and 
measuring devices that produce new data on a timely basis. The data is trans­ferred from its source location 
to the visualization components by means of the Shared Concept Space (SCS), a model for (dis­tributed) 
data exchange. On the client-side, a visualization application maps source data and received data updates 
into visual representations. These appli­cations should preferably be based upon visualization components, 
such as our collection of 3D gadgets, to allow for the exchange of visualization perspectives [7].  
4 Case study: Visualizing Business Pro­cesses The DIVA gadgetsaredeployedina3Dbusinessvisualizationstudy 
at Gak Netherlands. We used the two-dimensional visualization as a starting point since it proved to 
be successful in the organization during previous evaluation sessions. However, with respect to its 2D 
counterpart, we extended the 3D visualization with animation and interaction facilities. As the data 
source for visualization, our system uses a business process simulation. While the simulation is running, 
both status and preliminary results of the simulation are visualized by a 3D graph and histograms. This 
enables users to inspect the ins and outs of the business process and, when necessary, modify the parameters 
of the simulation. The requirements of interactivity, on-the-.y visualiza­tion and integration with our 
own visualizations are not satis.ed by the (commercial) simulation products known to us. Therefore, we 
have built our own simulation library, based on JSim [3] in Java. 4.1 Overview Figure 7 is the initial 
screen of the visualization prototype. It con­sists of a 3D view, a few control buttons and a chat box. 
The chat box enables users visualizing the same business process simulation to chat with each other in 
order to support the process of collabora­tion. Figure 7: The initial visualization screen Initially, 
the 3D view depicted in Figure 7 only contains a cone tree. The cone tree presents the set of available 
visualizations: a process graph and a collection of histograms. Below the 3D view, there are three controls 
that allow the addi­tion of new visualizations as well as viewpoint navigation. Pressing the Start Visualization 
button results in the creation of the visualiza­tion that is currently selected in the conetree. This 
allows the user to start any of the available visualizations. The Add View button allows users to dynamically 
add viewpoints to the list of available viewpoints. The control on the right allows users to select a 
view­point from the list of available viewpoints. Once the user selects such a viewpoint the camera moves 
smoothly to this new location. For each visualization gadget in the 3D view a prede.ned viewpoint is 
available. In addition to this, users can add custom viewpoints by the Add View button. The most important 
visualization in the prototype is the process graph of the simulation. It can be created by selecting 
processgraph in the cone tree and pressing the Start Visualization button. The graph gadget visualizes 
the static structure of business process, i.e. the stages it consists of. Additionally, the .ow of bene.t 
applica­tions through the simulated business process is visualized by means of animated tokens. Figure 
8 shows the process graph of a business process consisting of 5 processing stages (the large spheres) 
and 5 queues for applications waiting to be processed (the boxes). The business process visualized in 
Figure 8 is the same as the process used in the 2D version as was shown in Figure 1. Bene.t applications 
are visualized as small colored spheres. When a bene.t application progresses through the simulated pro­cess, 
the sphere depicting the application travels a corresponding trajectory in the process graph. 4.2 User 
Interaction The process graph makes use of the brushing behavior. When the mouse pointer is over one 
of the nodes (either a queue node or a processing node) or over one of the application tokens, the brushing 
behavior displays the name of that speci.c element. Another means of interaction is provided through 
the modify be­havior. The graph uses the modify behavior to allow users to move, rotate and scale any 
of the nodes in the graph structure. Figure 8: The process graph of which a single node is selected 
As was mentioned in the discussion of the graph gadget, the graph gadget is built up of groups. In the 
prototype the queue and process nodes constituting a single phase are grouped together. In order to manipulate 
these groups, the graph gadget adds a fourth and .fth icon to the modify behavior. These two additional 
icons respectively select the parent group of a selected node and collapse or expand a selected group. 
This allows, for example, a simpli­.cation of the graph to .ve objects representing the stages of the 
process. 4.3 Insight in Present and Past The combination of presenting the process structure, the length 
of waiting queues and the .ow of applications through the process gives managers insight into what is 
going on in process at a partic­ular moment in time. However, only information about the current situation 
is not enough to control a business process. Therefore, an important aspect of the prototype is the ability 
to present summary information of past weeks by means of histograms associated to the queues and process 
nodes of the graph. Drilling-down to reveal historical information can be achieved by another icon that 
is added to the modify behavior. When the drill-down icon is clicked, the histogram associated with the 
cur­rently selected processing or queue element is displayed. These histograms can also be accessed by 
use of the cone tree index, but drilling-down on the graph provides a more natural interface to reach 
these histograms. As mentioned, both queue and processing nodes of the process graph have histograms 
associated with them. Figure 9 illustrates the histograms that are associated with the processing nodes. 
These histograms visualize the percentages of applications that are either too early, on time or too 
late. The x-axis of the histogram is a timeline where each bar represents a single week in the production 
process. The histogram is intended to give immediate insight into the progress of applications in the 
admission process. The histograms associated with the queues nodes visualize the waiting times of applications 
at a particular stage before they were processed during a (simulated) week. Each bar of the histogram 
represents a certain time-interval; the height of the bar re.ects the number of applications falling 
within that time-interval. To com­pare the results of the past week with the weeks before, the his­togram 
contains a history of four weeks of simulated time. The histograms of Figure 10 visualize waiting times 
of applications at all .ve stages.  Figure 10: The process graph and associated queue histograms 4.4 
3D versus 2D 3D graphics and its application in information visualization appli­cations is a matter of 
dispute. On the one hand, its advocates pro­mote the usage of 3D because of its close relation with human 
s three-dimensional intuition. Additionally, 3D visualizations can contain more information at once and 
are therefore better suitable of presenting multi-dimensional data sets. Opponents of 3D, on the other 
hand, state that current input de­vices fall short in controlling the 3D space and therefore distract 
users from their primary task [4]. Additionally, 3D applications are often considered as toy applications 
because they look nice without adding relevant new features. Experiments with two and three-dimensional 
visualizations in­dicate that it is very dif.cult to compare 2D and 3D directly. A striking phenomenon 
is the fact that people with more computer experience signi.cantly gain better scores with 3D interfaces 
than novices. Sebrechts et al therefore rightly conclude that 3D visual­ization cannot be adequately 
evaluated using only short-term stud­ies of novice users [10]. People will probably have to get acquainted 
to 3D like they had to get acquainted to graphical interfaces. At present, we have no empirical data 
supporting the usefulness of 3D business visualization. The Gak managers, who are the pos­sible future 
users of the presented visualization system, do not have any experience with 3D business visualization 
and only limited ex­perience with 2D visualization. However, some qualitative judge­ments of the strength 
and weaknesses of the 3D prototype as op­posed to the 2D version are presented in Table 1. Speed Good 
Acceptable Control Easy Cumbersome Acceptance Good Tentative Animation Limited Rich Manipulation Limited 
Flexible Multiple perspectives Replacement or multiple windows Virtual environment, Expand/collapse Time 
frame Single Multiple Table 1: Comparison of the 3D and the 2D prototypes A disadvantage of the 3D version 
of the business visualization is the exhibited speed. While the 2D prototype runs smoothly on every desktop 
PC, the 3D visualizations require a 3D-accelerated high-range PC to reach an acceptable level. A second 
disadvantage is ease of use with respect to interacting with the visualizations and the underlying data 
sources. Controlling the 2D prototype is sim­ple and straight-forward. In contrast, in spite of utilities 
such as prede.ned viewpoints and manipulation aids, controlling the 3D visualizations is much harder. 
Another problem to be noted here concerns the acceptance of 3D graphics in business visualizations. Although 
2D visualizations are generally accepted as tools to in­crease the insight in information, the attitude 
at the Gak company towards 3D visualizations is at best tentative. On the positive side, the 3D prototype 
has some interesting as­pects not available in its 2D counterpart. For example, the presence of rich 
animation possibilities in the graph gadget clari.es the dy­namics of the business process under inspection. 
Furthermore, the 3D visualizations exhibit rich manipulation capabilities in the form of the (extended) 
modify behavior. This allows users to customize the visualization to their personal interests. Multiple 
perspectives, i.e. visualizations, on the information space are supported differently by both approaches. 
The 2D proto­type replaces an existing visualization with a new one when a user drills down into the 
data. Multiple windows are necessary to com­bine multiple perspectives. The 3D prototype, on the other 
hand, contains a virtual environment that can contain multiple presenta­tions of the data. Additionally, 
detailed information can be hidden or shown by means of the expand and collapse capabilities of the graph 
gadget. As to the question whether 3D visualizations allow for present­ing a richer information space, 
the answer is positive. In particular, whereas the 2D visualization can only represent either historic 
or present data, the 3D prototype simultaneously visualizes the state of the simulation, the current 
as well as the historic status of the queues. 4.5 Design Issues Although the collection of gadgets is 
small, it suf.ces for the pur­pose of visualizing business process simulation. Since the gadgets are 
not explicitly tailored to the current situation, they can also be deployed in other business visualization 
applications. The behavior components are even more generic because they do not depend on the type of 
information they have to represent. Therefore, the be­havior components are reusable in other 3D graphics 
applications as well. During the connection of the graph gadget to the simulation we discovered a mismatch 
between simulations and animated visual­izations. Namely, in the simulation events occur when an applica­tion 
has moved from one stage to the next. The transitions are con­sidered as actions that take no time. The 
graph gadget, however, visualizes transitions of the tokens by animating them as moving spheres between 
nodes. This movement, of course, takes time. The resulting conceptual clash can only be solved by introducing 
a vi­sualization that is slightly lagging behind.  5 Conclusions In the case study performed at Gak 
NL, we have shown the possi­bility of deploying 3D visualizations in a business context. In com­parison 
with the 2D predecessor of the prototype we can conclude that the 2D version is more easily accessible. 
The well-organized 2D visualizations in combination with the intuitive use of colors provide an uncomplicated 
visualization that is easily accepted by business people. The 3D visualizations on the other hand allow 
us to combine more information into a single scene. In particular, the process graph may visualize the 
current status of the simula­tion while the histograms reveal information about the last couple of simulated 
weeks. In this case, the 3D visualization offers the possibilities to visualize past, present and simulated 
data in a sin­gle image. We observe, however, that simulation and visualization are not yet generally 
accepted as instruments for decision making. Moreover, most managers are not familiar with 3D. Yet, what 
solu­tion is to be preferred is up to the managers who in the end have to make the decisions.  References 
<RefA>[1] <SinRef><title>The Virtual Reality Modeling Language</title>, <date>1997</date>. International Standard ISO/IEC IS 14772-1:1997</SinRef>. [2] 
<SinRef><author>H. Koike </author>and <author>H. Yoshihara</author>.<title> Fractal approaches for visualizing huge hierarchies</title>. <booktitle>In Proceedings of the 
IEEE 1993 symposium in visual languages</booktitle>, pages <pages>55 60</pages>, <date>1993</date></SinRef>. [3] <SinRef><author>John A. Miller</author>,<author> Yongfu Ge</author>, and <author>Junxio 
Tao</author>. <tech>Component­based Simulation Environments: JSIM as a case study us­ing java beans</tech>. <booktitle>In Proceedings 
of the 1998 Winter Simula­tion Conference (WSC 98), </booktitle><location>Washington, DC</location>, pages <pages>373 381</pages>, <date>1998</date></SinRef>. [4] <SinRef><author>Jakob Nielsen</author>. 
<title>2D is better than 3D</title>. <url>www.zdnet.com/devhead/alertbox/981115.html</url></SinRef>. [5] <SinRef><author>Mark Pesce</author>.<title> VRML: Browsing and 
Building Cyberspace</title>. <journal>New Riders Publishing</journal>, <date>1995</date>.</SinRef> [6] <SinRef><author>George G. Robertson</author>,<author> Jock D. Mackinlay</author>, and <author>Stuart 
K. Card</author>. <title>Cone Trees: animated 3D visualizations of hierarchical infor­mation</title>. <booktitle>In Proceedings of the ACM 
SIGCHI 1991 Confer­ence on Human Factors in Computing Systems</booktitle>, pages <pages>189 194</pages>, <date>1991</date></SinRef>. [7] <SinRef><author>S.P.C. Sch¨onhage</author>, 
<author>P.P. Bakker</author>, and <author>A. Eli¨ens</author>. <title>So Many Users So Many Perspectives</title>. <booktitle>In Proceedings of Design­ing effective 
and usable multimedia systems </booktitle>, <pages>9-10 </pages><date>Septem­ber 1998</date>, <institution>Fraunhofer Institute IAO</institution>, <location>Stuttgart, Germany</location>. IFIP, 
<date>1998</date>. </SinRef>[8] <SinRef><author>S.P.C.Sch</author>¨<author>onhageandA.Eli¨ens</author>.<title>DynamicandMobileVRML gadgets</title>. <booktitle>In Proceedings of VRML99-International 
Confer­ence on the Virtual Reality Modeling Language and Web3D technologies</booktitle>, <date>1999</date></SinRef>. [9] <SinRef><author>S.P.C. Sch¨onhage</author>, 
<author>Ard van der Scheer</author>, <author>Edwin Treur</author>, and <author>A. Eli¨ens</author>. <title>Visualization and Simulation of Busi­ness Information 
at Gak NL</title>, <date>1999</date>. Available at: <url>www.cs.vu.nl/.bastiaan/diva/publications/</url></SinRef>. [10] <SinRef><author>Marc M. Sebrechts</author>, <author>Joanna 
Vasilakis</author>, <author>Michael S. Miller, </author><author>John V. Cugini</author>, and <author>Sharon J. Laskowski</author>. <title>Visualization of Search Results: 
A Comparative Evaluation of Text, 2D and 3D Interfaces. </title><booktitle>In Proceedings of 22nd ACM SIGIR confer­ence 
on Research and development in information retrieval</booktitle>, pages <pages>3 10</pages>, <date>1999</date></SinRef>. [11] <SinRef><author>Sunsoft</author>. <title>Java 3D</title>. <url>java.sun.com/products/java-media/3D</url></SinRef>/.</RefA> 
 
			
