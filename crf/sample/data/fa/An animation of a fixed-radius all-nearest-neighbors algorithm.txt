
 An animation of a fixed-radius all-nearest-neighbors algorithm* Hans-Peter Lenhof Michiel Smid This 
video shows an animation of an algorithm due to the authors [2] for solving the fixed-radius all-nearest-neighbors 
problem. In this problem, we are given a set S of n points and a real number 6, and we have to report 
all pairs of points that are at distance at most 6. The algorithm works in two stages. In the first stage, 
a grid is computed. Instead of a standard grid, we use a so-called de­graded grid that is easier to construct 
by means of a simple sweep algorithm. This degraded grid con­sists of boxes with sides of length at least 
8. If a box contains points of S, then its sides are of length exactly 8. In the second stage, this grid 
is used for the actual enumeration. For each non-empty box, it suffices to compare each of its points 
with all points in the same box or in one of the neighbor­ing boxes. Although the algorithm may compare 
many pairs having distance more than 6, it can be shown that the total number of pairs considered is 
proportional to the number of pairs that are at most 6 apart. As a result, the total running time of 
the algorithm is proportional to n log n plus the number of pairs that are at distance at most 6. As 
an application, we give an animation of the algorithm of Heiden at al. [1] for triangulating the contact 
surface of a molecule. In a first step, points on this surface are computed. Given these points, *This 
work was supported by the ESPRIT Basic Re­search Actions Program, under contract No. 7141 (project ALCOM 
II). Authors address: Max-Planck-Institut fur In­formatik, D-66123 Saarbriicken, Germany. we compute 
all pairs that are at distance at most for a suitable choice of $, This gives for each point a neighbor 
list containing all points that are at dis­tance at most 8 to it. Given these lists, we can triangular 
e the surface incrementally: An edge of the current triangulation is called an outer edge, if it belongs 
to only one triangle. All outer edges are maintained in a queue. With each edge, we store a so-called 
common neighbor list, which is the in­tersection of the two neighbor lists of the points belonging to 
this edge. We start with. any trian­gle. Its edges and their common neighbor lists are inserted into 
the queue. As long as the queue is non-empty, we do the following: We t a:ke any edge from the queue 
and look at all points in its common neighbor list. Each such point defines a triangle with the current 
edge. We take that point defin­ing the smallest triangle. This triangle becomes part of the triangulation 
and we update the queue appropriate ely. The video was produced at the Max-Planck-Institute for Computer 
Science, using Silicon Graphics Indy and Indigo2 machines, and using Showcase and Geomview-1.l software. 
We thank Roland Berberich, Jack Hazboun, Dirlc Louis and Pet er Muller for their help in producin~~ this 
video. References <RefA>[1]<SinRef><author>W. Heiden</author>, <author>M. Schlenkrich</author> and <author>J. Brickmann</author>. <title>Triangulation algorithms foT the representation 
of molecular surface properties</title>. <journal>J. Comp. Aided Mol.</journal> <date>Des. 4 (1990)</date>, <pages>pp. 255-269</pages></SinRef>. [2] <SinRef><author>H.P. Lenhof</author> and 
<author>M. Smid</author>. <title>Enumerating the k closest paim optimally</title>. <booktitle>Proceedings FOCS </booktitle><date>1992</date>, <pages>pp. 380-386</pages></SinRef>.</RefA> 387  
			
