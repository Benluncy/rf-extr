
 4DIS: A Temporal Framework for Unifying Meta-Data and Data Evolution* Antonio Si Hong V. Leong Peter 
Y. Wu Department of Computing UJB Solutions The Hong Kong Polytechnic University Monroeville, PA 15146 
Hong Kong USA { csasi, cshleong } (~comI), p()lyu.edu,hk pwu~UJBSolutions.com Keywords: data modeling, 
(latat)ase design, object-oriented database, temporal database. ABSTRACT Time is all important aspect 
of all rval-world phenomena. Events occur at specific poims in time: objects and their rela- tionships 
exist and change over ',ime. "[radii iomdly, temporal database systems allow different snapshots of data 
units to be modeted and queried, ltowever, it has been quite difficult to model evolution of meta-data: 
this is primarily due to the lack of proper logical data independence supporI in existing data- base 
systems. In this paper, we introduce a temporal object database model called Four Dimensional Information 
Space (,{DIS). [n 4DIS, both recta-data and data Ulfits are mod- eled uniformly as objects. The databa~se 
is modeled as a set of relationships, each of which relates two individual objects. Each relation is 
also ~ussociated with a temporal dimension which supports valid and transaction time. This allows time 
to be naturally integrated with objects of arbitrary granular- ity and provides flexible logical data 
independence support for the database. Meta-data aud data evolution could thus be unified in a standard 
framework. "I~mporal operations can also be evaluated against both recta-data and data units in a uniform 
maturer. 1 Introduction Time is an important aspect of all real-world phenom-ena. Events occur at st)ecific 
points m time: objects and the relationships alllOilg objects exist and change over time. The ability 
to model this temporal dimen-sion of the real-world as well as to provide application- dependent operations 
is essential to many applications including accounting, banking, geographical information systems, inventory 
control, medical records, multimedia, scientific data analysis [5], and multidataba,ses [8]. A database 
is used to model certain {'acts of the real- world called the mini-world. The temporal dimension of the 
mini-world has been modeled in a rather static manner in traditional datab~).~e svstems: namely, data 
units are allowed to evolve over time. but only the most "Research supported in part by the tlong Kong 
Polytechnic University Central Research Grant nutnh, er 35:~/066. Permission to make digital/hard copy 
of all or part of this work lbr personal or classroom use is granted without li~e provided that copies 
are not made or distributed for profit or commercial advantage, the copyright notice, the title of the 
publication and its date appear, and notice is given that copying is by permission of ACM, Inc. To copy 
otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission 
and/or a fee. &#38;#169; 1998 ACM 0-89791-969-6/98/0002 3.50 current snapshot of each data unit is maintained 
in the database. A conventional database is referred to as a snapshot database as its content represents 
a snapshot of the mini-world [10]; queries evaluated against a snap- shot database are called snapshot 
queries, Some data- base systems support the concept of versioning. Ver-sioning is different from temporal 
support. The former is for improving performance [2]. The database system does not understand the semantics 
of time and could not operate on time. The latter treats time as a first-class object with temporal operators 
directly supported. It has been recognized that conventional query lan- guages are not capable to express 
queries that require the semantics oftimesuch as: "Compute the amount of tax payable by John in the past 
fiscal year". A query like this would require the salary history of John to be explicitly modeled in 
the d~tabase as well as a query language that would understand the semantics of time. Neither of these 
two features is supported in snap- shot. database systems [9]. During the past decade, there has been 
a resurgence of research in supporting some aspect of time in a data- base, .Multiple snapshots of data 
units could be main- tamed and queried. Such a database is known as a temporal database and the corresponding 
management software ms a temporal database system [12]. Existing temporal databases have been focused 
en-tirely on supporting temporal dimension on factual data. However, we observe the same necessity on 
meta-data (schema) management as well. For instance, consider a database modeling the design of airplanes 
of a par-t.i(:ulm' company. ,-ks we are all aware, the structure of an airplane changes over time. A 
query "Re1:urn the airplane evolution from 1960 to 1980" will require the meta-data of the database to 
be integrated with tem- poral information. Traditionally, it has been quite diffi- cult to model evolution 
of meta-data. This is mainly be- cause logical data independence in existing database sys- tems is not 
supported properly. Very often, data units of a database need to be changed when the meta-data of the 
database is modified. Providing temporal support for me{a-data is also largely unaddressed, In this paper, 
we introduce a temporal database model called Four D~mensional Information Space (4DIS), which provides 
temporal support for both me{a-data and data units within a uniform framework. Tempo- 203 ral operations 
can then be evaluated against both recta- data and data umts in a unified manner. By providing temporal 
support for meta-data, the 4DIS model inher- ently provides flexible logical data independence support 
for the database, and meta-data evolution becomes a natural phenomenon. This is because snapshots of 
data units have to be bound to the corresponding meta-data snapshots. Modifying the recta-data units 
will result in a new snapshot for ~he modified meta-data units. The existing data units, which are still 
bound to the previ- ous meta-data snapshot, are hence not required to be modified. Under the 4DIS model, 
a conventional snap- shot database could be modeled naturalh as a special case of a 4DIS database; ~his 
allows both temporal and snapshot queries to be supported uniformly in the 4DIS framework. The remainder 
of this paper is orgauized as follows. Section 2 is devoted to a brief survey on existing tem-poral supports 
in database systems. In Section 3, we describe the 4DIS model and how the temporal dimen- sion for meta-data 
and data units could be modeled uniformly within 4DIS. Since the tbcus of this paper is on unifying meta-data 
and data units evolution using a temporal model, we will focus our discussion on the structure and the 
query language of 4DIS. Other fea-tures of 4DIS such as temporal constraints support will not be discussed 
in this paper. Finally, m Section 4, we conclude with the current s~atus of out" research.  Related 
Work The rationale of temporal databases originates from tem- poral logic which is centered around two 
structural mod- els of time. linear and branchin9 [7]. In the linear model, time advances from pas~ to 
future in a totally ordered fashion. In the branching model, time is linear from the past to now, where 
it then divides into several time lines, each representing a potential seqm,'nce of events in the future. 
Along any future path, additional branches may exist. The structure of branching time is a tree rooted 
at now, This corresponds to the parallel universal view- point in cosmology. Each moment of time is usually 
referred to as a time ehronon. The density of chronon could be discrete, dense, or continuous [5]. In 
discrete time, each chronon has a single successor. In dense time. between any two chronons, there always 
exists another chronon. How-ever, chronons may not exist evervwhere. Finally. m continuous time, the 
chronons are represented by a con- tinuous function and they exist continually everywhere. In the context 
of databases, two temporal dimen-sions are of general interest [5, 10]. Vahd tzme denotes the time at 
which a fact was true in reality. The valid time of an event is the time the event occm'red in the real-world, 
independent of its recording in anv database. Transactzon tzme is the time whml the fact was pre-sented 
in the database as stored data. The two temporal dimensions are orthogtmal. A data model supporting neither 
is termed a .~napshot {10]. A data model supporting only valid time is termed a vahd-time model while 
ore, supporting only transaction time is termed a transactaon.time model, Finally, one that supports 
both is termed b:temporal. Temporal database is a generic term, referring to a databasr whose data model 
provides some kind of temporal support, In the- ory. both linear and branching temporal models can be 
incorporated in both valid and transaction temporal di- mensions. There have been many attempts to incorporate 
time in existing data models such as entity-relationship model, semantic data model, relational model, 
as well as object- oriented model [6, 12]. Support for time in conven-tional database systems is entirely 
at the level of user- defined time, i.e., attribute values drawn from a tem-poral domain. For instance, 
the Historical Relational Data Model [12] extends the relational model to pro-vide a life-span domain. 
Each life-span represents the time interval in which each tuple is valid. The Historical Relational Data 
Model thus supports valid temporal di- mension. The problem here is that multiple tuples need to be explicitly 
maintained even if only one attribute value was modified. Variations to the model have been proposed 
such that the liD-span is associated with each attribute. In such a case, each temporal relation vio-lates 
the first normal form requirement [12]. Temporal queries are facilitated by extending relational algebra 
to incorporate special temporal operators. The OODAPLEX object model [12] allows users to define their 
own temporal domain via abstract data type, thus providing both valid and transaction temporal di-mensions. 
Temporal operators are provided via encap- sulated methods. The flexibility of supporting multiple temporal 
dimensions comes with the price of more diffi- cult query processing and optimization techniques. The 
design of existing temporal databases does not properly take advantage of the temporal domain. Cur- 
rent temporal data models mainly support linear time and dense chronon density. Special temporal operator 
is needed to retrieve the most current snapshot of the data- ba,se and users are forced to use special 
temporal opera- tors in order to initiate a query on the current database snapshot. We believe that a 
snapshot database should be a special case of a temporal database and conven- tional query languages 
on querying a snapshot database should work properly on a temporal database. Spe- cial temporal operators 
should only be included when a query involving temporal information is needed. Fur- thermore, while existing 
temporal database models have been focused on supporting and manipulating temporal dimension for data 
units, supporting temporal dimen- sion for meta-data is largely unaddressed. We believe a cross fusion 
with temporal data support will benefit the management of recta-data evolution. In the next section, 
we illustrate how our 4DIS model addresses the above mentioned problems attd related issues. 3 A Four 
Dimensional Temporal Framework Tile 4DIS model is an extension of a generic object- oriented database 
model known as Three Dimensional Information Space (3DIS) proposed in [1]. We choose 3DIS ~,-~ our starting 
point, as we believe that 3DIS has provided a clean and homogeneous way to represent in- formation in 
the context of an object-oriented frame-work. Data and the descriptive information about data (i.e., 
meta-data) are handled uniformly in an extensi-ble manner. It will therefore provide a ground for the 
database evolution with the newly introduced temporal dimension. We give a brief overview of the 3DIS 
model here, adequate for understanding the 4DIS model. De-tails of the 3DIS model could be found in [1]. 
3.1 The 3DIS Model The 3DIS model provides uniformity in modeling data and me(a-data in an extensible 
ham(,work so that they can be manipulated bv a single set of basi(' operations. 3DIS supports two basic 
modeling constru(:ts: objects and mappings. Every fact in the real-world corresponds to an object in 
a 3DIS database, Tit(, 3DIS model sup- ports atomic, class, attd cornposzte ob}e(ts. Atomic ob- jects 
represent the symbolic constants in a database. Class objects specii\ the descriptive and classification 
information. Comt)osite objects describ(, entities of ap- plication environments. Mapt)ings belong t() 
a special kind of composite objects, which can b(, ('ousidered as recta.data. They are mainly used for 
uto(t(,lh(g relation- ships between two objects. A relationship among objects is modeled as a (domain-object 
(D), mapping-object (M), range-object (R)) triple, i.e., each relationship, raoIs, in a 3DIS database 
is a member of D x :1I x R. The range object coniponent in at( c.,,n~s could be a single object, or a 
set of objects representing one-to-one or one-to-many ('ardinalities respe(tivelv..',laity-to-one and 
many-to-many cardinatities could be modeled by mapping different domain objects to the same range ob- 
ject component. Each object has a unique object iden- tifier (old). Old of an atomic object is denoted 
by its symbolic constant while oids for class aim composite ob- jects are generated by the 3DIS database 
svstem: this is in contrast with most object-oriente(l models in which only instance objects have oids 
[4]. A 3DIS database contains a colh,cti(m of ipa(,r-related objects m the [brm of triples: (domain-object. 
mapping- object, range-object). Three diflm-(m~ (hqinitions of abstraction primitives are pre(tefined 
based on a set of basic mapping objects. The abstra(:tion prmfitives in- clude classification / mstantiation 
t member), aggrega-tion / decomposition (member) and generalization / spe- cialization (subclass). Cb~sification 
is modeled bv mere- ber mappings, each of which relates ato.uic or (Oml)osite objects; aggregation is 
also modeled by member maly-pings, each relating two or more class objects: gener-alization is by subclass 
inapt)rags, each relating two or more class objects. The abstraction primitives are pri-marily for associating 
objects with each other. All in- formation including data and recta-data, abstractions, operations, and 
constraints are treated unifornflv as ob- jects. To illustrate, an Employee class object can be speci- 
fied by the following set of triples: {Employee, member, meta-class) (Employee, name. String) {Employee, 
age. Integer} (Employee, address. String) {Employee, work-for. Company) Here, meta-class is a system 
l)redefined (lass obj(,ct which contains all class objects and member is a l~re(lefined abstraction primitive. 
Name, age, aud address are user- defined mapl)ing obj(,(ts which ,elar(, the Employeeclass object to 
the predefitwd ('lass obj('('t,- of String, Integer, and String respectiw,lv. Employee a[>o imti(ates 
a .~vln- bolic name to its old. Company is another ('ht.~s object defined by another set of similar triples 
and is related to Employee via the mapping object work-for. The user-defined mapping objects, name, age, 
address, and work-for, could be viewed as attributes of the class object Employee in c'onventional database 
terminology. An Employee instance object can be specified by a similar set of triples: (John, member, 
Employee) (John. name, "John") <John, age, 28) (John, address, "Los Angeles"} (John, work-for. IBM) 
Again, John indicates a symbolic name to its old. As shown, each meta-data (class} object is specified 
in the same manner as an instance object. .4 3DIS database could be viewed graphically by a 3 dimensional 
(aD) geometric representation. The three axes in the aD space represent the domain, mapping, and range 
objects. This is illustrated in Figure 1. All objects appear on both the domain and range axes. The mapping 
axis holds only mapping objects. Each rela-tionship is represented by a point in the 3D space. ~anqe 
~leccJ A -~ it" /* $~ ram. Stt ~ng>    ,ZY2 o  Figure 1: Three Dimensional Information Space Query 
specification in 3DIS is based on two geomet- ric components: line and plane components. Each 3DIS query 
is specified by a list of sub-queries: {(D con- stramt, M constraint, R constraint)....}. Each sub- query 
is composed of constraints: (D constraint, M con- straint, R constraint), indicating the constraint for 
each of the three dimensions. Each constraint can be a pred- icate, or the wildcard matching pattern 
of "'?" svmbol, A line component is specified with a "?" symbol in place of one of the constraints. Similarly, 
a plane com- ponent is specified with two "'?" symbols in place of two constra, nts. A "-'~ symbol in 
place of anv constraint de- notes no infbrmation on that particular dimension. It is analogous to 0 in 
analytic geometry. Therefore. (- -. -) denotes no information at all three dimensions. corresponding 
to the origin of analytic geometry. We illustrate query specification in 3DIS with a few examples. A 
query: (John, work-for, ?/ corresponds to a line containing all Company that John works for. This is 
indicated as line I in Figure 1, All points in plane A i:, Figure 1 indicate all objects related to the 
Employee class object. This is specified by a plane component: (Eml)loyee, ?, '?). Similarly. all points 
in plane B in- di('ate all objects related to the object John which is specified by a similar plane component: 
(John. ?, ?). ...... Figure 2: Evolution of recta-data objects in 4DIS  3.2 The 4DIS model Supporting 
temporal dimension tor meta-(lata and data units can be easily achieved due to the extremely flexi- ble 
modeling power of the 3DIS model. We extend the 3DIS model by a tourth temporal dimension, called the 
dimension of time (T). Each point along the temporal dimension represents a chronon object. The old of 
each chronon object is denoted by its time value, We term the resulting model, a 4DIS model. In a 4DIS 
data- base, each 3DIS relationship, raut,~-, i.e, a three-valt|ed tuple, will be associated with a chronon 
object fi'om the temporal dimension, mdicatiug the relationship between two objects at that moment in 
time. Each relation-ship, r4D~S, in a 4DIS database is thus a four-valued tu- pie, (domain-object, mapping-object, 
range-object, chronon-object}, i.e., a member of D x M x R x T. We note that when an object evoh-es over 
time, it is its relationships with other objects that evolve, not the object itself since its old is 
time invariant. Each snap- shot of an object could be characterized by the closure of its relationships 
with other objects with respect to a specific chronon. For instance, at chronon t~, the definition ot' 
the Per- son class object might be modeled by the following re- lationships closure: (Person, member, 
meta-class, tl) (Person, name. String. t t) (Person, age. Integer, t~) (Person, address, String. t t) 
Similarly, the definition of the objec~ John at (:hronon tt might be modeled by: (John. member, Person. 
tl> (John. name, "'John". tt> (John, age, 3, t~ ) (John, address, "'Los Angeles", t 1) Since an object 
could be of arbitrary granularity such as a class object or instance object, our -IDIS u|odel allows 
the semantics of time to be integrated with any arbitrary object naturally. Thus, nwta-data evoh|tion 
and data evolution could be moth,led uniformly m the same framework. The idea of recta-data ex'olution 
is depicted in Fig- ure 2. Figure 2 ilh|strates three snapshots of the Per- son class definition. In 
tire first snat)shot, the Person class object has the name, address, and age relationslfips defined. 
When it evolves to ttw second snapshot, the addressrelationship is dropped whih, the phone relation- 
Figure 3: Evolution of instance objects in 4DIS ship is added. Finally, in the third snapshot, the phone 
relationship evolves and changes from relating the Per- son object to Integer to relating the Person 
object to String. Data evolution through the temporal dimension is similar. The idea of data evolution 
is illustrated in Fig- ure 3 which depicts three snapshots, modeling the evo- lution of the object John. 
In the first snapshot, John is a member of the Person class object. In the second snapshot, John becomes 
a member of Student and fi- nally, John becomes a member of Employee. As another example, the age of 
John evolves from 3 to 18 to 28 in the three snapshots depicted. In Figures 2 and 3, the evolution of 
an object is modeled by the evolution of its relationships with other objects. The temporal prop- erty 
of a relationship is indicated by its set of snapshots over the 4-dimensional space, which is expressed 
as a sequence of 3-dimensional space projected on the planar paper. This evolution is indicated by the 
dashed line (a) and (b) in Figure 3. The temporal evolution of an object is thus, modeled by its relationships 
closure with other objects at different chronons. To illustrate, let us denote the three chronons of 
the three snapshot databases in Figure 3 as tl, t2, and ta respectively. At tl, John will be characterized 
by the following relationships closure: (John, member, Person, tl} (John, name, "John", tl) (John, age, 
3, tl) At t2, since tile member and age relationships of John has evolved. John will be characterized 
by: (John, member, Student, t2> (John, name, "John", e~) (John, age, 18, t.2) Notice that since the relationship 
name of the object John has not changed, it does not need to be duplicated at the snapshot captured in 
chronon t2. In other words, its relationship with the temporal dimension does not change. This is indicated 
by the dashed line (e) in Fig- ure 3. This is in contrast with other systems in which all information 
of an object have to be duplicated even if one attribute of the object evolves. This is captured by an 
integrity constraint in the 4DIS model that all points existent in chronon t l will continue to exist 
in the fol- lowing chronons. This is known as the until-changed semantics [5]. Similarly. at ta, John 
will be characterized by: (John. member, l~nlph)yee, t~) (Johm name, 'John", t ~) (John. age, 28, t,a) 
 Functions may be used to relate between attributes on any two dimensions. For instance, the age of the 
Employee class object could be designed as a flmetion of the chronon object, T, i.e., (tEmplovee, age, 
f(T)}. In another design, age could be d~'fined as a function of the birthday relationship of tile Eml~loyee 
object, i.e., (Employee. age../(birthday)). Once again, the function can be used to nlodel an imegritv 
constraint ml a 4DIS database, which may be iml)lemented using a trigger mechanism. In order ~o express 
tile fact that the age of an Employee object is a function of timv. we can define the following meta-tupte: 
(Employee, age, . -Oct-18-1970, . ), where "." denotes tile current rinle chronon, This tuple expresses 
the fact that the current age of the employee is equal ~o tile curreht rim,. a C[ll'(HIOn, nlintls the 
birthday chronon. Oct-t8-197(}. Here the function f(T) is T -Ocr-18-1970. It is important ~o note ~hat 
our -tD[S model sub- sumes conventional snapshot database models. Bv ig- noring the fourth dimension, 
we obt, ama 3D[S database which represents a conventional snapshot database. Fur-ther notice that since 
the tetnporal dimension is associ- ated with the aD space, any object within rim 3D space could potentially 
evolve over tithe, This i,- in contrast with existing temporal database systems m which an at- tribute 
has to be drawn l~ioin a special temporal domain in order for its temporal property to be maintained 
in the database. 3.2.1 The Temporal Dimension An advantage of treating chronon a~ an object is the flexibility 
in supporting both valid mM transaction tem-poral dinlensions ill our 4DIS model. To support trans-action 
dine, a chronon object is associate([ with a 3D[S triple, raors, automatically when th(, relationship 
Is cre- ated, i.e., the relatioaship between r.;,ts m,d a chronoa object is determined by the 4DIS database 
system auto- matically if transaction time is supported. \Vhen ,":~.o',_s is modified, i.e., the relationship 
between two objects is changed, a new copy of the relationship ~s generated with a different chronon 
obje('t as.~ociated. No explicit versioning is nlade in the 4DIS model. All tuples ever inserted are 
maintained in tin, system, indexed on tim temporal attribute for efficiency. Consider a mapping object, 
m, which relates object x to object y at chronon tl, i.e., a relatiol~ship (x, m !1, ti> exists in the 
4D space, When the relationship be-tween ac and .q is changed such that m now maps x to object z at chronon 
ta, the relationship (x, ,L =. t.,,} will be generated m the 4D space automatically. A (hronon is normally 
a point in tiznt,. With ~he UTZtZl-~:han.qed semantzcs, it would be sut~i('len:. This can be the de- 
fault interpretation of 4DIS tuph,.,. However. 4DIS can be more flexible if it also supports colnpo>ite 
chronon. which may represent an interval in time, or a set of in- tervals in time. Then the semantics 
of until-changed can be modeled with interval chronons. Unlike the domain, map, and range diinensions, 
the /empot'al dimension is senl-infinlte, rallgillg frolu (} tt) -r" "Yd.. ullder t he ;-L'-;h/llllp-lion 
of a finite universe. These ar*' demJted a.~ "-" and "'~c" respectively. A user ~an model Ihe ulvil-changed 
sematn:icb explicitly as follows. First, (x, m y, [+ tl. ~c -!) > created. When the tuple evolves, it 
is modified to (~.. m .q, [+ t,,t.a -]) and a new tuple (x, m z, [+ t~,~o -]) is added to the 4DIS. The 
two intervals [+ tl,t~ -] and [+ t~, ~c -] are known as the validity duration of the tuptes, indicating 
the transaction time during which the values of the ~uple m'e considered to be valid. A limita- tion 
of treating chronon as an object is that only linear time model could be supported. However, we believe 
that linear time model is adequate in nmdeling most real-world applications. To support valid time, the 
relationship between a 3DIS triple and a chronon object will have to be de- fined by users to indicate 
the time at which the relation- ship between the two objects starts to be valid. Since chronons are treated 
as objects, its relationship with a 3DiS triple can be easily specified in a manner similar to ~t~e definition 
of relationships among class or instance obiects. For instance, to indicate the age of John is 30 since 
January 1, 1997, one could specify the four-valued relationship (John, age, 30, Jan-l=1997) in the 4D 
space. where "Jan-l-1997" is an anonymous chronon object, created implicitly by the system. Alternatively, 
the tu- ple can be specified as (John, age, 30, first-day-of-1997>, where "first-day=of-1997" is a chronon 
object created explicitly by (first-day-of=1997, member, chronon, Jan- 1-1997), Similarly, interval chronon 
objects may be cre- ated like (year-of=1997, member, chronon, [+ Jan-l-1997, Dec-31-1997 +]) or (year-of-1997, 
member, cbronon, [+ Jan-l-1997. Jan-l-1998 -]). In a sense, valid time is like user-defined time, where 
the time attribute is inserted by the user. Unlike user-defined time, which is not in-terpreted by the 
database system, valid time in 4DIS is drawn from the set of chronon objects and is understood an<l manipulated 
by the 4DIS system. To model explicitly an evolution in valid time under the ul~til-changed semantics, 
the named chronon objects should be used. The changes at valid time t~ and t2 call be associated with 
interval objects Tl and Te, with initial values: (TI. member, chronon, [+ tl, oo -]) and (T~, member, 
chronon, [+ t2, oo -]). Also, (x, m y, Tt) is created first. It is then modified so that the tuple <x, 
m z. T,) is inserted, and the chronon object 7"1 is modified to (T~, member, chronon, [+ tt, t~ -]). 
The intervals [+ t~. t_, -] and [+ t._,,oo -] are the validity duration in this case. indicating the 
valid time during which the tuple are m existence. To model the evolution of John's age as a function 
of time. ~lle following meta-tuple can be defined: (John, age. 30 + -Jan-l-1997, ). Alternatively, 
since the age of every person can be computed similarly, we can use the tbllowing meta-tuple to give 
a general definition of age: (7, age,. ?R: R + . -T, ?T: ), where R and T are meta-tup[e variables instantiated 
to any matching ruple The value after ":" will be the generated value ¢,f the new tuple front the meta-tuple 
and the matched tul~le. As tinw evolves, this meta-tuple represents many impLi(:it tuples. It is more 
diHicult to support bitemporal applications m 4DIS, since the 4DIS model only has one temporal at- tribute 
for each tuple. Only either transaction or valid time can be represented with that attribute. A possi- 
bh, implementation is to generate a transaction time to associate with each tuple created under the valid 
time model. As a result, the transaction time becomes a hid-den fifth dmwn.-ion m,t direcrh-v>iblr ~, 
u.sm'. This is a sligh~ modification to the 4DIS nmdeI >upporting only tran.baction rime, which <'all 
I)e modeled in the new scheme by having the fourth dimensional temporal at-tribute equal to the hidden 
transaction time. as gener-ated by the system. To support all three densities of chronon: discrete, dense, 
and continuous, in the temporal dimension of 4DIS is straightfbrward. Discrete and dense chronon densities 
could be easily incorporated in either the valid or transaction temporal dimensions. For discrete time 
chronon, a duration between two c|u'onons will br repre- sented as an integer value such as 1 second 
or I millisec- ond whereas a duration will be repr(,s(utte(l i> a ral;io-nal number in dense time chronon. 
R.arumal numbers can be represented by a pair of imegers: the numera-tor and the denominator. When ilnt)h'menration 
is con- cerned, rational numbers can be approximated bv float- ing points reasonably well. Continuous 
chmmm density is only meaningful in valid time. simv huplementation- based transaction time is discrete 
ill ItatlU'~'. To support continuous chronon, a continuous fum:tio~ S" should be defined to map the 4DIS 
tuples into a 3DIS snapshot for each chronon: 5c: F4DIS ~ raDIX.  3.2.2 The 4OIS Query Language The 
specification of queries is ba,sed on a simple query- by-example (QBE) like syntax [9], by extending 
the query language defined for the 3DIS model [l]. As in 3DIS, each 4DIS query is specified by a list 
of sub-queries: { (D constraint, M constraint, R constraint. T constraint}, ,-}. Each sub-query is a 
four-valued constraint: (D constraint, M constraint, R constraint. T constraint), indicating the constraint 
for each of the {bur different dimensions. This {bur-valued constraint m~tation {'or query specification 
of a 4DIS databa,se is an extension to that of a 3DIS database. Each constraint can be a predicate, or 
the wildcard matching parrrrn of "'.'". %Ve use "'." to denote the current clnonon when it is specitied 
as a constraint in the the temporal dimension..3tltPl'lla- nvely, we allow a 4DIS query to miss out rile 
(onsuamt in the temporal dimension, which is equivah,nr ro "-". Each sub-query will return a mini-world 
of the data- base, satisfying the constraints in tl,e sub-query. The mini-worlds of different sub-queries 
will be .joined to-gether like a relational 'join" operator. One could spec- ify a variable to a constraint 
which will be used for uni- fication as in QBE for relating attributes. The results of a query could 
be re-structured with i-ill operation simi-lar to "projection" tot viewing purpose. The resulting structure 
might no longer be a mini-workt with the four dimensions, namely, domain, mapping, range, and time. The 
syntax of the query language is defined in Fig- ure 4. Note that all symbols in the Backus Naur Form 
like "'(", "{", "'.'" attd "'[+'" are tertu.itta[ symbols. The ternmtals like < car > and < atom > (orl't,spond 
tO their associated meanings in a ralber >traik, htlbrwm'd manner. Each chronon nl}tv b(' lhlnled (refl,rrmg 
to a < chronon_oid >) or anonymous. Eacl, anonymous chronoIl may refer to a single point in time. or 
an in-terval of time, or a set of intervals. To project information on a specific dim¢,n~ion, we use 
operators Pick-D. Pick-M. and Pick-R a.-p,oposed m [1]. The semantics of the operator> ,m' ~imilar to 
thuse m [1]. The tuples in the query are organized like a relation with tbur attributes, and a projection 
operation rr i,~ lwrformed on the selected attribute. We also extend the language with another Pick-T 
operator to project on the temporal dimension. Since chronons are temporal in nature, they are handled 
differently. We treat chronons as sets, so that they could also be operated using con- ventional set 
operators. Furthermore, time intervals are defined. Inclusive intervals are defined with the [+ and +] 
pairs, and exclusive intervals are defined with the l- and -! pairs, so that [+ tt, t2 -] represents 
the set of chronons fl'om and including tl up to but excluding t2. Thesr two notations correspond to 
the [ ] and ( ) no- tations in representing numerical intervals. The use of chronon and set of chronon 
intervals delimit the 4DIS to a subspace, i.e.. a "'sequence" of snapshot databases, on which the projection 
is made. Finally, we introduce the generalized Pick operator that will project any at-tributes out of 
a set of joined tuples in any order, so as to structure a set of tuples as the result for a query. This 
Pick operator is used in formatting the final result of a query. Since the result of each 4DIS sub-query 
is a mini-4DIS database (or a 4-attribute relation), multiple sub- queries could be composed together 
with the set oper- ators: intersect, union, and difference, in a similar spirit to their counterpart 
in relational algebra [9]. After a projection on one dimension, the result will be a set of domain, mapping, 
range, or chronon objects. The pred- icate can be expressed with the operators in and out to select the 
object to be used in the next step. The in and out operators are respectively equivalent to the relational 
operators belong and not belong, with sim-ilar flavor with the in and not in relational operators in 
SQL. Other than the set operators, the list of mini- 4DIS databases can be joined together, based on 
com-mon variables, in a QBg-style. The selected attributes of the result from the "join" will be finally 
projected out bv the generalized Pick operator. Similar to aDIS, query specification in 4DIS could be 
based on lzne and plane components. W'e extend these components bv a space cornponent. As in 3DIS, a 
line component is specified with a "'?" symbol in place of one of the constraints. Similarly, a plane 
component is spec- ified with two "'?" symbols in place of two constraints. A space component is therefore 
specified with three .,9,, symbols in place of three constraints. A "-" symbol in place of a constraint 
along the domain, map, or range dimension denotes no information on that particular di- mension. It is 
analogous to 0 in analytic geometry. A "" " symbol m place of a constraint along the time di- mension 
denotes the beginning of time and (-, -, -, -} denotes no intbrmation at the beginning of time. 3.3 
Examples We will illust,i, rr tt,e query language with several exam- ph,s ill this section. Example 1 
: A query which retrieves the current age of the object John could be specified bv a line component: 
{ (John, age, '?. -) }, or simply by omitting the temporal dimension as: { (John. age. ?} }. < querq 
"2 ::= < ptol~ct.~,, > { < .sub_querydist > } < suh_querqdz.st > ::= < .sub_q.vr~l_l.~t .> , < s.ub_query 
> { < .sub_quvrg > < sub_q'uerp > ::-- < .sub_q.uvrq > union < .sub_query > i < ,stzb_qttvvq > intersect 
< .'~ub_quev!] > : < ~¢lb-(l*ll't'tJ > minus < su.b_qttery > ( < .~lzb_quev:q > ) < ,si~agle.query > 
< .szrz.qle_quer.q > ::= ( < D_c'oz~.,l > , < .'U_co'nat > , < ]{_co*l.sl > . < T_const > ) ! ( < D_r:ott,~t 
> . < l[_¢'ot~.~t > , < [¢_const > / < D_const > ::= < ('.OIt,Stl'(lLIt~ > < M_con.st > ::: ~ C'Ol).~411'()llll 
"5> < R_const > < T_cottst > ::---- < ( hronotl > ' < lzttle_itzl e.v~lal, > < con,slrgtznt > ::= 7 i 
2 < v.r > ? ~ vor > [ < pre(hc.Le > ] } - ~, < atom > < predic:ole > ::= -< pm d~r.l~ > a~d .. pv¢.d&#38;,ale 
> < prvdicale > or < predicate > [ not < l)t'~'(/l('ltll "- ( < predicate > ) < rctr > in < .wt~qh_.tt 
> i < i;(zr > OUt < .m~tqle_u, tt > ] < ru, r > < rel.p > < olom. > < single_rttt > ::= Pick-D ( < .s.t;_qttcr.tj 
> ) ! Pick-M ( < .sub_qu~..rg > [ Piek-R ( < sub_query > ) < szngle_att_T > ::= Pick-T ( ~ .sub_query 
> ) < time_z~zterral > ::= < ltt~l~ _/;~lct't'ol > union < time_inter'.al > ! < Ltzz. _zz*&#38;'rro/ 
> intersect < time_znlerval > I < l~lllt'_lll~ l'l'(tl > minus < ~irrte_lnterl;al > : ( < lZllle_lfltcl't'(lt 
-> ) ' [- < ,hr ........ -:- < .hro,mn > +] : [- < ('h ronon > < chronon > -] [ [. < oh,,( ...... ~ > 
, < ,.h,o,.m > +] ! [~ < chronon > < chronon >-] I ? < ,',.r > [ < ,',, > in < single_att_T > ] I ? < 
oar > [ < vat > out < single_att_T > ] [ ~< ('hl't;ltotz > DC < projection > ::= Pick ( < ~.'ar_l~.~L 
> ) < vat_list > ::= < v(tr_/i.st > , < t.'(zr > t < vat > < chronon > ::= < chro~tun_oid > i < ('hronon.list 
> < chronon_list > ::= < chro'non_li.st. > union < chronon_ual > I < chronon_val > < ehrorto~q,_val > 
::= < C]I.I'OIIOII_COII,S~ > [ [- < chro.o'.._('o~.sl > . < chronon_co..st > -] [ [- < ('hro.o~l_(o..~t 
"> . < chrorton_cen~.sl > ,-] ] [.- < chro.o._co.,st > . <" hronon_con.al > -1 { [-'- < ~hro~ot,_~ ot*.,,l 
> . .-. roltot~_r'on.sl > +] Figure 4: Backus Naur Form of query language Tuples of various range objects 
mapped to domain ob-ject John via age will be returned at now. i.e., "'." Here the temporal dimension 
is [eft, out and it represents ~t snapshot query, operating on the mo,.t ~.ulrolH >ilapsho[ of the 4DIS 
datab~se which may be considered its a sire* ple 3DIS database. Notice that convenri~maI snapshot queries 
work without ~tnv tno(lifi('~ttiou in 4DIS. [] Example 2: To retrieve the definition of the Employee('hk~s 
ol)ject at t l, one could specify a t)l~llle ('OIIII)O1HHH: { (Employee, ?..', t i > }. There is a patteru 
utatc[ting .~cheme ;.t[ottg [ tl~.' .1[ ~tnd R dimensions. Sample resuh will be: (Employee. member, meta-class, 
tl> (Employee, name, String. t 1 > (Employee. age. Integer, t~) (Employee. address. String. t t> (Employee. 
work-for. Company. t l).  In this query, all four-wflued tuptes of domain oh.jeer Employee at chronon 
t~ will be returued [3 Example 3: To obtain the ul('ra-data evoluti~m ~,f' Employee ,-lass object, the 
tbllowing space component ('ouhl ].' u~ed: {(Employee. '.' ?. '?) }. Example 4: To retrieve the ~tddre.~.- 
of John at t t ¢~r at t ~, one could apply union on two line components: {(,]ohu, address, ?, tt> union 
(John, address, ?, ta>}. This query returns the address of John at tl and his addres.~ at t:~. If the 
time interval [+ tt, ta +] is used as tlw T constraint, all places where John lived during the period 
[rom t l to ta inclusively will be returned, n Example 5: Predicates can be included in the sttb-queries, 
sim- itar to those in the 3DIS model. Predicates are ac-tually well-formed formulae, involving some matching 
varlable,~. The following line component returns those obWcts living m Los Angeles or Long Beach at ~: 
{(7, address. ?X [ X = "'Los Angeles" or X = "Long Beach" ], el)}. Tiw previou.~ query could be specified 
a.s an union of two line (omponents. without using predicates: {(?. address, "Los Angeles", tl) union 
 ('?, address. "Long Beach", tl)}. \\Tithotlt query optimization, the second expression is not preferable, 
since it involves the evaluation of two different queries, followed by a union on the result. The fir>t 
expres,~ion only requires the evaluation of one query U>mg p,.cdicates, the union in Example 4 can be 
re-plowed I,v a union of the two time chronons tt and ta defimng the T constraint component in the query 
This more preDrable form is as follows: {(John, address. ?, t~ union t3}}, Queries could also be nested. 
This allow., the results of one query to be used i~, another query specification. To obtain all Employee 
objects living m Los Angele.- or Long Beach at chronon tl, one could specify the follow- ing nested line 
components: {(?Y [ Y in Pick-D((?, member, Employe.e, it>)], address. ?X [ X = "Los Angeles" or X = 
"Long Beach" ]. t~>}. [] Example 6: As a last example, to obtain only the name and age information for 
all instance objects belonging to tlw Em- ployee class object at chronon t~. it is ueeessarv to utilize 
the Pick operator: Pick(Y,Z) {(?X, member, Eml)loyee, it), (?X. name. '?Y. tt}. (?X, age. ?Z, tt)}. The 
first sub-query retrieves all instance objects uf Em- ployee at chronon t~. The second sub-query will 
be eval- uated against the instance ob,jec~s resulted from the first sub-query for matching: it returns 
the tt&#38;tne mtbrtuation of the instance objects. The third sub-query returns the age information. 
The two attributes of interest. Y. and Z, will be structured bv the Pick operator to form a set of result 
tuples after a kind of "'join" operation on the three sub-queries. An alternative way to specif~" this 
query will be the initiation of a nested query as in Ex- ample 5. [] It is important to HOle that a high 
level query lan-guage such as TSQL [12] ('ould still be provided flu users. The four-valued constraint,- 
specifications are very sim- ilax to the body of a Prolog [3] clause in requiring the named variables 
to be matched. As a result, the order of the specifications should not affect the set of results re-turned, 
but will affect the efficiency of query evaluation. Critical here are the evaluation strategies for efficient 
transforming a high level query into a correct set of four- valued constraints specifications. The order 
of eva[ua+ lion sequence of the sub-queries will have a very strong impact on the execution efficiency. 
[{elevant resear('h results from parallel evaluatimt of Prolog ~md logi(' lan- guages such as ED£ {13] 
would be beneficial irate.   Conclusion and Current Research Directions In this paper, we propose 
a 4DiS'temporal model which provides temporal support fin hoth meta-data amt data units. Temporal operation.- 
can thin, be evaluated against both meta-data and data units in a unified manner. Conventional snapshot 
database couhl also be modeled naturally as a special case of a 4DIS database: this allows both temporal 
and snapshot queries to be supported uniformly in the 4DIS framework. Flexible query spec- ification 
technique is also illustrated in the context of 4DIS. We aa'e working on a 4DIS storage manager accom-panying 
with the 4D|S model. To +uhieve reasmlable performance, related objects shouhl be properly chlb-tered 
within the same disk page. In the 3DIS model, this problem is comparatively easier. Recall that a plane 
for a particular object t~erpendicnlar to the domain axis in the 3D sp~u'e indicates all objects related 
to the domain object. A disk page cmlhl I)e alh,cuted fin' em'h plane normal to the domain axis. Each 
disk page thu~ con-rain,, all relationships of a particular object. In the 4DIS model, we m'ed to investigate 
additional techniques to cluster the pages ~hat are related via the temporal di-mension as well. Perhaps 
what is more interesting is to.establish a hybrid technique that will dynamically dlange the clustering 
of the objects based upon the query access patterns. For instance, if snapshot queries are performed 
more often, (;he clustering of objects in the physical pages should adapt in order to provide more efficient 
access to the cnrrent snapshot of the database. Since proper benchmark ~br temporal databases is still 
an open research issue, we are planning to use a modified version of SEQUOIA benchmark [11] for eval- 
uating the performance of the 4DIS system. The SE-QUOIA benchmark is designed specifically for geograph- 
ical information system applications, which we feel to represent a major class of temporal applications. 
The response time of conventional snapshot queries on the 4DIS system will be compared with those from 
other conventional snapshot databases. This quantifies the overhead of incorporating the temporal dimension 
in the 4DIS system.  References <RefA>[11 <SinRef><author>H. Afsarmanesh </author>and <author>D. McLeod</author>. <title>The 3DIS: An Ex- tensible, Object-Oriented 
Information Management En- vironment</title>. <journal>A CM Transactions on Office Information Systems</journal>, <volume>7(4)</volume>:<pages>339-377</pages>, 
<date>October 1989</date></SinRef>. i2! <SinRef><author>P, Bernstein</author>, <author>V. Hadzilacos</author>, and <author>N, Goodman</author>, <title>Con-currency Control and Recovery in Database 
Systems</title>. <publisher>Addison-Wesley</publisher>, Reading, <location>Massachusetts</location>, <date>1987</date></SinRef>. [31 <SinRef><author>W.F. Clocksin </author>and<author> C.S. Mellish. </author><title>Programming 
in Prolog</title>.<publisher> Sp.-inger-Verlag</publisher>, <location>Heidelberg</location>, <date>1981</date></SinRef>. i4i <SinRef><author>D. Fishma6</author>, <author>D. Beech</author>,<author> H. Cate</author>,<author> E. Chow</author>,<author> T. Connors</author>, 
<author>T. Davis</author>,<author> N. Derrett</author>, <author>C. Hoch</author>, <author>W. Kent</author>, <author>P, byngbaek</author>, <author>13. Mahbod</author>, <author>M. Neimat</author>, <author>T. Ryan</author>, and<author> M. Shan</author><title>. Iris: 
An Object-Oriented Database Management System</title>. <journal>ACM 7'ran.~actions on Office Information Systems</journal>, <volume>5(1):</volume><pages>48- 
69</pages>, <date>..January 1987</date></SinRef>. 5 (;. <SinRef><author>Ozsovoglu</author> and <author>R. Snodgrass</author>. <title>Temporal and Real-lhme Databases: A Survey</title>. <journal>IEEE 
7~'ansactions on Knowledge and Data gngzneermy</journal>, <volume>7(4)</volume>:<pages>513-532</pages>, <date>August 1995</date></SinRef>. :6 <SinRef><author>N. Pissinou</author> and <author>K. Makki</author>. 
<title>A Unified Model and .Methodology For Temporal Object Databases</title>.<journal> Inter-ruzlzonal ,Journal of lntelhgent 
and Cooperative Infof malzoTt ,b'ystern,~,</journal> <volume>2(2):</volume><pages>201 -223</pages>, <date>1993</date></SinRef>. {7; <SinRef><author>N. t/escher </author>and <author>,\. l;rquhart</author>.<title> Temporal 
Logic </title><publisher>Springer-\ertag</publisher>, <date>1971</date>. </SinRef>"~, .\. Si. (' <SinRef><author>Ying. </author>and <author>D..McLeod</author>. <title>On Using Historical Up- dine lnformaoon 
for Instance Identification in Federated l)alabases</title>. <booktitle>In Proceedinqs of lnternattonal Conference on Cooperative 
lnforrnatzor~ Systems</booktitle>, pages <pages>68-77</pages>, <date>t996</date></SinRef>. 191 .\. <SinRef><author>Silberschatz</author>,<author> H.F. North</author>, and <author>S. Sudarshan</author>.<title> Data-ba.~e 
System Concepts</title>. <publisher>XlcGraw-Hill</publisher>, <location>New York</location>, <volume>third </volume>edition, <date>1996</date></SinRef>. '10! <SinRef><author>H. Snodgrass </author>and <author>1..-\h:~. </author><title>Temporal 
Databases</title>. <journal>IEEE ('omputer</journal>. [9(9E35~--12, <date>1986</date></SinRef>. 111 <SinRef>3.1. <author>Slonebraker</author>..<author>I. Frew</author>, <author>K. Gardels</author>. and <author>3. Meredith</author>, 
<title>The Sequoia 2000 Storage Benchmark</title>.<booktitle> In Proceedings of th~ .4CM SI(;MOI) Internat:onal Conference on Man-awment 
of l)ata</booktitle>, <pages>pages '2 l l</pages>,<date> [993</date></SinRef>, '2 ,\.<SinRef> <author>l'ansel, 3. Cliffi)rd. S. (india, S. Jajodia</author>, <author>A. Segev</author>, and <author>R. Snodgra,ss. </author>
<title>Temporal Databases." Theory</title>, <journal>De-~zyu. and Implementation</journal>. <publisher>Benjamin Cummings</publisher>, <date>1993</date></SinRef>. ;L (' <SinRef><author>Zaniolo</author>. <title>The 
Logical Data Language (LDL): An in- tegrated appruach to logic and databases</title>. <tech>Technical Re- port STP-LD-?,</tech><pages>28-91</pages>. 
<publisher>MCC</publisher>, <date>199l</date></SinRef>.  
</RefA>			
