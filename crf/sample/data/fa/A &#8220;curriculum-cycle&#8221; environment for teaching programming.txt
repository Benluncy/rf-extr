
 A Curriculum-Cycle Environment for Teaching Programming Spires Mancoridis, Ricl~ard C. Holt, David A. 
Penny Department of Computer Science University of Toronto Abstract There are a number of programming 
languages and tools available to educators for teaching programming to un­dergraduate computer science 
students. Although ef­forts have been made to integrate these languages and tools into programming environments, 
these environ­ments generally do not have all of the ingredients that would make them useful at all levels 
of a typical under­graduate curriculum. Current technology used in most undergraduate courses is suitable 
for teaching students how to code in a par­ ticular programming language. Software development tools 
for activities other than coding such as require­ ments analysis, design, maintenance, and so on, are 
not provided. In addition, most programming languages in current use cannot be used in both beginner 
and ad­ vanced courses. We describe a curriculum-cycle environment for teaching programming, called Object-Oriented 
Turing (OOT), and elaborate on the pedagogical experience of using 00T at all levels of our university 
s undergradu­ ate curriculum. 1 Current Practices We shall refer to the curriculum-cycle as three cate­gories 
of undergraduate computer science courses that require students to write programs. The following item­izes 
these categories and lists some typical courses found in each: Permission to copy without fee all or 
part of this material is granted provided that the copies are not made or distributed for direct commercial 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. ACM-24thCSE-2/93 -lN, USA 01993 ACM 0.89791 
.566.6 /93/0002 /0015,,. $1 .50 Introductory: basic programmmg, data structures.  Intermediate: programming 
languages, software en­gineering.  . Advanced: operating systems, compilers. Courses in each of these 
stages require students to write programs using languages, such as Pascal and C, and tools, such as editors 
and compilers. There are three major problems with the current state of technology of programming languages 
and tools used in undergradu­ate courses: 1. A lack of tool integration, which is the case in the Unix 
environment but not in PC! environments such as Borland s Turbo systems, makes software development tedious 
and error prone. A well known error due to the lack of tool integration is when users, unknowingly, edit 
the same source file under two editor sessions and lose code after saving both files. Integrated environments 
are designed to prevent such inconveniences. 2. The lack of tools for programming activities other than 
coding. Environments like Turbo provide good sup­port for writing code, with integrated tools for editing, 
compiling, debugging, and so on, Educators, however, are beginning to recognize that programming involves 
more than writing code. Hence, the emphasis on soft­ware engineering [1] and object-orientation [9] in 
under­graduate curricula. As a result, educators are beginning to use programming environments in conjunction 
with software development CASE1 tools such as Excelerator  [2] in their courses [3]. 3. The proliferation 
ofprogrammzng languages and tools used in the curriculum-cycle . The diverse nature of undergraduate 
curricula in computer science demands a wide range of programming language support. Students are exposed 
to a variety of programming languages such as Pascal for introductory programming, Modula-2 for concurrent 
programming, C for systems programming, and Smalltalk or C++ for object-oriented programm­ing. The proliferation 
of programming languages, en­vironments, and CASE tools in undergraduate curricula 1Computer Aided Software 
Engineering. impose an overload of syntax on both educators and stu­dents. Our limited teaching time 
is wasted introducing new syntax and not new concepts. A solution to these problems requires an environment 
that provides a wide range of language support under a common syntax, combined with an integrated collection 
of coding and CASE tools. Such an environment could be used as a curriculum-cycle tool for teaching pro­gramming 
at all levels of an undergraduate curriculum in computer science. 2 A Curriculum-Cycle Teach­ing Environment 
For the instructional purposes of our university, we needed a programming environment that could be used 
in many courses of our undergraduate curriculum. This environment would have to be simple enough to be 
used by students in introductory classes, yet sophisticated enough to be used in courses involving systems 
and object-oriented programming. The environment would have to combine the efficiency and conceptual 
simplicity of a Turbo environment, while supporting programming language and tool facilities needed across 
the curricu­lum. We believe that ingredients of a successful environment for teaching programming must 
include: Broad Language Support  Integrated Tools  Consistent User-Interface  Efficient and Portable 
Implementation  With these ingredients in mind, we designed and imple­mented the 00T (Object-Oriented 
Turing) program­ming environment [7]. In the following sections we will discuss how 00T satisfies our 
criteria for a successful teaching environment. 2.1 Broad Language Support For an environment to be versatile 
enough to be used at all levels of an undergraduate curriculum, it must support a programming language 
that is easy enough for beginners to use, yet powerful enough to develop sophisticated software using 
structured, systems, and object-oriented methods. Turing [4] is the programming language supported by 
the OOT environment. It is a high-level programming language that is well suited for teaching programming 
as well as developing industrial-strength soft ware. Tur­ing is versatile enough to be used at all levels 
of the curriculum-cycle while preserving syntactic continu­ity. For introductory courses, Turing has 
all of the features of Pascal as well as modules, string handling facilities, type-safe variant records, 
and dynamic arrays. Turing s unobtrusive syntax and simplicity provides the power and expressiveness 
of Pascal and the simplicity of BA-SIC. For intermediate courses, Turing has features for teach­ing concurrency 
and object-oriented programming. For concurrency, students can use language supported moni­tors. For 
object-oriented programming, Turing provides classes, inherit ante, and polymorphism. Finally, Turing 
can be used as an alternative to C for systems programming in advanced courses. The lan­guage has all 
of the features of C while encouraging safe and reliable programming style. It is important to note that 
we are not discouraging ed­ucators to teach students about other programming lan­guages and tools. We 
believe that this should be done in specialized courses, such as topics in programming lan­guages [5], 
found in almost all undergraduate curricula in computer science. These courses will teach students about 
languages and tools used in industry without in­terfering with the teaching of concepts. 2.2 Integrated 
Tools The 00T system is an integrated collection of program­ming tools. This integration eliminates various 
prob­lems associated with coordinating many stand alone software development tools. Figure 1 shows the 
00T tools as they are used in the operating systems course. The program being executed is the MiniTunis 
operating system. The complete OOT system currently supports ten integrated tools: 1. The Control Panel 
is used to control the overall 00T system activities. This tool has pull-down menus used for specifying 
global system parameters and for access­ing help files, as well as a feedback area used for con­veying 
information to users. 2. The File Viewers represent Unix files that may be edited and run. 3. The Directory 
Viewer indicates to users their location in the Unix directory structure and also allows them to navigate 
through it. It is also an integral part of the  on-line help and documentation system. For example, 
when a user requests help, the Directory Viewer changes to the Unix directory containing files that will 
provide the wanted information. 4. The Error Viewer displays error and warning mes­sages generated from 
attempting to run illegal Ikring programs. When the user clicks on a message, 00T l@ml his module is 
in charge of implementing vlrt al memory spaces. 6 Virtual #emery space 1s an abstraction formed OC a 
number of different real physical ,emory spaces. When a usev process I-. s, it is under the illusion 
that its [emot-y space 1s contiguous. Inu cal 1 that mau alter or look at a virtual memoru swce must 
go through his module. ­ / % 1s l it ttgo ttyl tty2 tty3 TIN ITUNIS bodul e Memory init sh get :y 
Lmmrt var Comguter. var F i le. SUs echo cat cd r-m futll ql data export ( %B I 5tatus. SpaceNum. SpaceOffset. 
Qdd.ess. 01 locate. Clone, Deallocate. 1I ChangeProgram. \J I ReadFile. ,-.. WriteFIle. RunUser  I 
S?wu Sw-ctXlklf.XClcae --d--e SlL9u.&#38;( ..:spacelkln, wal--:st.sum) Spuamnl Sp.e.orfwc t­ mall-/. 
IU.KflTE Illlc..A.c e new mused Space. If -ass, s is its rambm. ti.nm Qaiun Cc&#38;.: 1 -r-spa {b Mnl 
.tlncabd Famrr*a­ Eaalrs.1. nc4r0m*--no . . *-, ~ done. W ibr=il. -/ I Figure !: This figure is a snapshot 
of the OOT environment executing the MiniTunis operating system used by our fourth year undergraduate 
students. On the top left corner resides the Control Panel. Under this is an OOT File Viewer containing 
MiniTunis source code for its MEMORY module. Under the File Viewer is the [nterfacc Viewer which shows 
the interfaces and comments associated with the interfaces of the MEMORY module. The CIOT Directory Viewer 
is at the top right corner and contains a list of files that make up the MiniT[inis operating system 
Below the Directory Viewer is the Software Landscape Viewer which graphically depicts the structure of 
M iniTlir]is. The central window, labelled ttyO, is a run-time window which shows the output generated 
by running a MiniTunis process. bringsup the file containing the error with the offend­ ing line highlighted. 
5. The Run-time Displays exhibit both textual and graphical output generated by Turing programs. A sin­gle 
program can create any number of these run-time windows and can concurrently display output on all of 
them. The Turing language supports convenient graph­ics routines for drawing lines, boxes, ovals, and 
so on. 6. The Execution Viewer displays a run-time view of the stack of calls and the currently executed 
line of code. This tool is integrated with the File Viewer allowing users to select a procedure or function 
call on the stack and show its source code. 7. The Object-Oriented Turing compiler is used to com­pile 
programs written in the Turing language. 00T pro­grammers need not specify dependencies between source 
files of the system under development because OOT pro­vides implicit compilation and linking for them. 
The OOT compiler uses import listsz in the source code to resolve these dependencies automatically. The 
en­vironment records any changes to the source code and recompiles only the files that were modified 
since the last compilation as well as all of the files that depend on these files. With this implicit 
make, OOT program­mers are freed from the complexity of using traditional (make tools. 8. The Software 
Landscape Viewer is used as a CASE tool. It allows users to create designs consisting of enti­ties and 
relationships. These designs can be created and explored using a visual direct manipulation metaphor 
[8]. Analysis documents and source code can be at­tached to these entities. This facility is used to 
inte­grate system design, documentation, and code. Hence, the Software Landscape tool can be used not 
only for specifying high-level designs, but also to help compre­hension during software maintenance. 
 9. The Interface Viewer automatically extracts infor­mation from Turing source files that is used to 
display the interfaces of modules and classes. In figure 1, the MEMORY module interface is being displayed 
on the left hand side of the screen. The right part of this win­dow contains the comment associated with 
the Allocate entry point of the MEMORY module. 10. The Class Browser uses both the Software Land­scape 
Viewer and the Interface Viewer to allows users to navigate and explore the system s reusable class library. 
 The implementation architecture of OOT allows for the easy addition of new tools. In the future we 
may add tools for source code version control, and requirements analysis. 2Names declared outside of 
the module that are accessed inside of the module.  2.3 Consistent User-Interface An important strength 
of the 00T system is its con­sistent user-interface. To the user, 00T consists of a number of windows 
easily identifiable by variations in their colour, size, screen position, and titles. Following the Macintosh 
[6] philosophy of user-interface design, we made the 00T user-interface convenient for novices and experts. 
Keeping in mind that 00T will be used throughout the curriculum-cycle , it enables expert students to 
use fast control key sequences for high-frequency operations, as opposed to slower but conceptually simpler 
mouse selection interactions typi­ cally used by beginner students. It also provides various means of 
feedback to users via dialog boxes, windows, and a designated feedback area. The rich set of menus and 
help facilities supported by 00T reduces the short term memory load of novice users and increases their 
speed of learning. This feature may also aid more expe­ rienced users who have not used the system for 
a while and have forgotten some of its short cuts . The 00T environment has many on-line teaching aids 
such as help, demonstrations, sample programs, and a complete language reference manual. It also has 
a collection of documents and source files for teaching concepts such as concurrency, object-oriented 
program­ming, graphics, and programming in-the-large. 2.4 Efficient and Portable Implementa­tion Apart 
from being efficient, a curriculum-cycle envi­ronment would have to be portable to several machines, 
It is common for universities to use different machines for their introductory and advanced courses. 
For ex­ample, introductory courses may use personal comput­ers while intermediate and advanced courses 
would use Unix machines. Also different departments, who may want to use the system, may have different 
computers. At our university, for example, the faculty of engineer­ing teaches introductory programming 
courses running 00T on their Unix MIPS workstations whereas the ver­sion of 00T used by the computer 
science department runs on Unix Sun workst at ions. The 00T system features a high-speed pseudo-code 
compiler. This pseudo-code is stored in the primary memory of the computer and not in the form of an 
ex­ecut able file on disk. This allows the compiler to be machine-independent and hence more portable. 
We use the X-windows system to enable our implemen­tation to be ported to any machine running X-windows. 
We are currently thinking of developing PC and Macin­tosh versions. Pedagogical Experience gramming language 
facilities and lack tools for software At our university the OOT environment has been used to teach programming 
in courses ranging from introduc­tory computer science to programming languages and operating systems. 
A great deal of time and effort is saved by using the same environment during the com­plete curriculum. 
Students in the introductory courses appreciate both the language and the easy to use environment much 
in the same way Turbo users do. Shielded from the complexity of having to use several losely-coupled 
tools, beginners are able to concentrate on the important task of learning the concepts behind programming. 
The 00T environment was successfully used in an ad­vanced course in operating systems. The program­ming 
assignments involved modifying and extending the source code of a scaled down version of a Unix-like 
op­erating system called MiniTunis. Under 00T, compilation is an order of magnitude faster than conventional 
compilers and linkers. Initial compile and linking of the fifteen-thousand line MiniTunis sys­tem requires 
only fifteen seconds. Recompilation and linking of modified modules, such as the main driver, is essentially 
instantaneous. From a software engineering perspective, the operat­ing systems class benefits from the 
Software Landscape Viewer and Interface Viewer. These tools are used by students to navigate through 
the design, documenta­tion, and source code of a complex software system. Finally, the 00T environment 
s multiple run-time win­dows were used to make powerful visualizations of con­currency by showing the 
simultaneous execution of sev­eral processes under separate windows.  Conclusions In this paper we have 
defined four ingredients that make up a successful curriculum-cycle environment for teaching programming: 
 Broad Language Support  Integrated Tools  Consistent User-Interface  Efficient and Portable Implementation 
 Most currently used programming environments in the undergraduate curricula do not fulfill all of these 
ingre­dients. In particular, they do not support broad pro­development activities other than coding. 
Our idea was to produce a programming environment that could be used for as many courses in the curri 
cu­lum as possible. We developed the OOT environment as an integrated set of tools to support coding 
activities, a good user interface, and an efficient implementation. To this we added broad language support, 
a portabble implementation and tools for software development ac­ tivities other than coding. A curriculum-cycle 
programming environment bene­fits both educators and students. Educators, with the support of integrated 
tools, are able to focus on teaching concepts rather than syntax and commands. Students learn more by 
using better methods and tools, and by avoiding syntactic trivia.  References <RefA>[1] <SinRef><author>CLIFTON, J. M. </author><title>An 
Industry Approach to the Soft­ware Engineering Course</title>. <booktitle>SIGCSE Bulletin </booktitle><volume>23, 1 </volume>(<date>March 1991</date>), <pages>296-299</pages></SinRef>. [2] 
<SinRef><author>CORPORATION, I. T. Excelerator</author>. In <title>Proceed­ings Computer-aided Software Engineering Sympo­sium </title>(<location>Andover, 
Massachusetts</location>, <date>June 1987</date>)</SinRef>. [3] <SinRef><author>GRANGER, M. J. </author><title>The Impact of Computer-Aided Software Engineering on Student 
Perfor­mance</title>.<booktitle> SIGCSE Bulletin </booktitle><volume>23, 1 </volume>(<date>March 1991</date>), <pages>62--71</pages>. </SinRef>[4] <SinRef><author>HOLT, R. C.</author>, AND <author>CORDY, J. R. </author><title>The Turing 
Pro­gramming Language</title>. <journal>Communications of the ACM </journal><volume>31, 12 </volume>(<date>December 1988</date>), <pages>1410-1423</pages></SinRef>. [5] <SinRef><author>KING, K. N. </author><title>The 
Evolution of the Programming Languages Course. </title><booktitle>SIGCSE Bzdletin </booktitle><volume>24, 1 </volume>(<date>March 1992</date>), <pages>213-219</pages></SinRef>. [6] <SinRef><author>MACINTOSH, 
A. </author><title>Human Interface Guidelines: The Apple Desktop Interface</title>. <publisher>Addison-Wesley Publish­ing Company</publisher>, Reading, 
<location>Massachusetts</location>, <pages>1987</pages></SinRef>. [7]<SinRef> <author>MANCORIDIS, S.</author> <title>A Visual Programming Environ­ment for Object-Oriented Turing</title>. 
<location>Master s the­sis</location>, <institution>Department of Computer Science, University of Toronto</institution>,<date> 1992</date></SinRef>. [8] <SinRef><author>SHNEIDERMAN, B. </author><title>Destgnmg 
the user inier­face: strategies for efiective human-computer inter­action</title>. <publisher>Addison-Wesley Publishing 
Company</publisher>, Read­ing, <location>Massachusetts</location>, <date>1987</date>. </SinRef>[9] <SinRef><author>TEMTE, M. C. </author><title>Let s Begin Introducing the Object­3Several 
other universities have adopkd, or are in the process Oriented Paradigm</title>. <booktitle>SIGCSE Bullettn </booktitle><volume>23, 1 </volume>(<date>March </date>
of adopting, the 00T environment. 4 Similar enthusiasm was found by a group of high-school stu-<date>1991</date>), 
<pages>73-77</pages></SinRef>.</RefA> 
			
