
 A Data Model and Architecture for Hypermedia Database Visualization Robert Steven Owor Department of 
Computer Science and Software Engineering 307 Dunstan Hall Auburn University, Auburn AL 36849 630-527-1696 
Email: oworrob@eng.auburn.edu ABSTRACT In this paper, a proposal is made for a data model and architecture 
which facilitates the use of a 3D graphical user interface to navigate and query hypermedia and database 
systems. Currently there exist no integrated virtual environments that combine the visual strength of 
3D, with the powerful query features of databases and the navigation flexibility of hypermedia systems. 
A model and architecture in which hyperlinks are treated as data relationships (which can be normalized) 
embedded with data manipulation and programmable 3D interfaces is presented. The model is based on a 
combination of object oriented databases and VRML as the 3D interface. Categories and Subject Descriptors 
 H.5.2 [User Interfaces], I.3.7 [Three Dimensional Graphics]: Design, Human Factors. General Terms: Design, 
Human Factors. Keywords: Information Visualization, 3D User Interfaces, Databases, Queries, VRML, Hypermedia. 
 1. INTRODUCTION Hypermedia Database Visualization (HDV) is an area of inquiry that lies at the intersection 
of Information Visualization and Human Computer Interaction. Information Visualization encompasses techniques 
for presenting data using pictorial, graphical, audio, video and textual means to aid comprehension and 
assimilation. Areas for which Information visualization applications have been developed include: Large 
Information Spaces;  Algorithms;  Software Engineering;  Databases;  Permission to make digital 
or hard copies of all or part of this work for personal or classroom use is granted without fee provided 
that copies are not made or distributed for profit or commercial advantage and that copies bear this 
notice and the full citation on the first page. To copy otherwise, or republish, to post on servers or 
to redistribute to lists, requires prior specific permission and/or a fee. Web3D 02, February 24-28, 
2002, Tempe, Arizona, USA. Copyright 2002 ACM 1-58113-468-1/02/0002 $5.00. Data Mining;  Multi-User 
Interaction and Collaboration.  Human Computer Interaction seeks to improve the ways in which people 
and machines interact by the use of design principles that focus on usability, affordance, ergonomics, 
recognition and applicability. HDV is the application of visualization techniques and visual interfaces 
to the problem of data definition, manipulation, and navigation in a hypermedia database. 2. THE NEED 
FOR HYPERMEDIA DATABASE VISUALIZATION Traditional database searches are handled by the use of structured 
queries. This means that users must be familiar with SQL syntax and semantics. There have been many implementations 
of SQL which hide syntax details from users by presenting SQL conjunctive and disjunctive forms combined 
with some form of keyword input. Nonetheless, users are still faced with the inflexibility of these constructs. 
Even for users with a fair knowledge of SQL, the formulation of queries on a day-to-day basis to extract 
data from a database is a mentally involving exercise. There is thus a need to develop more flexible 
and easier query interfaces. Users are unaware of each other even in multi-user databases. It would be 
beneficial if users searching an information space were aware of each other s presence because interacting 
with each other has the potential to assist information seeking behaviors. Users who have more experience 
with the information space and/or specialized knowledge can assist others by either directly responding 
to their queries or by pointing searching users to the right place. This kind of scenario is not possible 
with current database interface designs. Vital database information such as meta data, database catalogue, 
transaction log and the database dictionary are not readily available and may be in forms difficult to 
immediately collate even for Database Administrators. Information Visualization of such vital database 
components can greatly aid not only the efficiency of information organization but also their presentation 
and interpretation. Changes in shapes, sizes, colors and positions can be associated with changes in 
the status of meta information, transaction logs, data dictionaries and database catalogues. Traditional 
text-based database interfaces perform poorly when large amounts of data need to be presented. Large 
relational databases make it difficult to present all the information contained in tables without the 
use of some visualization techniques. Even after a query has been issued to select a subset of the information, 
it is often difficult to present the information except as a table of results. The use of visualization 
techniques such as cone trees [10], fish eye views [19] and other three-dimensional representations [18, 
21, 15, 5] may aid in the presentation of large sets of returned results. Current databases are typically 
structured as flat files. This means that complex data objects cannot be easily viewed or manipulated. 
Object oriented database technology addresses this problem only partially. While encapsulation, re-usability 
and the hierarchical arrangement of the data are well supported by object orientation, object visualization 
is not. A database containing the components of a vehicle may very well have all the relationships well 
defined but may not present how the components link together visually. A visual display of the interconnections 
among the components can greatly enhance the value of information contained in the database. Traditional 
databases do not provide well developed browsing capabilities. It is not possible to view related data 
in traditional databases as a set of one to one, one to many and many to many links. The capability of 
navigating from table to table is done via primary keys and indirectly through foreign keys. A mapping 
of relationships from the database to user-browsable hyperlinks affords this capability. This provides 
new ways to navigate through relationships in databases. This browsing capability enhances the power 
of a database by allowing users to see and extract relationships without the explicit use of structured 
query statements. Hypermedia systems such as the World Wide Web (WWW) have query and search engines which 
return extremely large result sets. Even with additional refinement techniques, the result sets quite 
often remain very large. Additionally, the result sets are displayed out of context requiring the user 
to manually click through a large number of links before finding relevant information. While these limitations 
are being addressed by the provision of better meta data and advanced search algorithms, there is still 
a need to determine ways by which users can quickly visualize the information space they are in and move 
quickly to an area of relevance to them. The unstructured nature of WWW-like hypermedia systems makes 
it difficult to do more than just return static results. It is not possible to accurately filter out 
information based on strict database attribute criteria. Hyper queries tend to return results based on 
keywords and categories of information stored in a web page. This limitation deprives users of the capability 
of doing more precise queries like any, all, at least and at most. This limitation will continue as long 
as hypermedia systems remain unstructured. Information visualization techniques can provide approximate 
road maps in this area. The use of color coding, similarities and shapes are some of the techniques that 
could highlight data that have degrees of similarities not otherwise easily discernible. While databases 
have developed advanced techniques for the management of updates, hypermedia systems still need to be 
updated manually whenever there is a change. DHTML [20] and XML [11] address this issue but there is 
still much to be done. The distributed and unstructured nature of the World Wide Web almost guarantees 
that consistent updates cannot be guaranteed. The use of visual techniques to signal updates can notify 
users interested in particular information spaces of changes taking place without necessarily guaranteeing 
total update consistency across the entire information space. Some browsers now ask users whether they 
wish to be notified of updates on pages which they save in their book marks. While this is a step forward, 
it is really an ad-hoc solution. 3. PROBLEM DEFINITION The paper focuses on techniques for hypermedia 
database visualization that leverage the strengths of hypermedia and information visualization in order 
to: Provide more flexible and easier query interfaces to users;  Allow users to find information using 
a mix of querying, browsing and exploring;  Allow users to interact with, and benefit from, the explorations 
of other users active in the database;  Facilitate more comprehensible presentation of not only the 
content but also the structure (e.g. interconnections, similarities) of information;  Support compact 
and efficient presentation of large query results;  Increase user awareness of information context (e.g. 
availability of other similar or related information), information status (e.g. recent updates) and use 
context  (e.g. which other users are accessing the information). Hypermedia database visualization 
systems need a data structured model for the obvious reason that these systems are a special form of 
databases and the issue of data models is one of the main research areas in hypermedia technology. From 
the architectural perspective, it is important to isolate the data model as a separate layer because 
of three reasons, namely: To enable the building of diverse applications and presentation services on 
a single hypermedia database.  To provide data independence in the system by making the logical level 
independent of the physical level thus facilitating system portability.  To provide the definition mechanism 
to partition information in a systematic way for distributed data environments.  Object-oriented database 
management systems in principle meets all the requirements for modern-day hypermedia database visualization 
systems. These requirements include: openness and distribution, support for collaborative work or sharing, 
data integrity and correctness, dynamic search and query, support for composite nodes, versioning, multimedia, 
extensibility and re­usability. Additionally, the hypermedia database visualization model needs to support 
the following features: A graphical user interface with browsers and overview diagrams to help the users 
to navigate through large amounts of information scattered over, possibly interconnected, networks by 
activating links and to read contents of nodes. It is the opinion of the author that a 3D user interface 
meets this requirement.  An authoring system with tools to create and manage nodes (of multiple media) 
and links.  Hidden information retrieval mechanisms (such as keyword searches, author searches, etc.) 
so that users find information by moving in the 3 dimensional space without issuing language specific 
queries.  A hypermedia engine to manage information about nodes and links.  A storage system which 
can be an object relational DBMS.  A system to support collaborative information navigation and mutual 
user presence awareness. This feature is also well supported by a 3D user interface.  4. DATA VISUALIZATION 
USING 3D SPACE In constructing, a 3D interface to the HDV system, each database object in the database 
is mapped to the 3D scene. For each of these relationships a one-to-one, one-to-many or many-to-many 
relationship hyperlink is implemented. Each hyperlink may be either a static, meta or dynamic link. A 
static link simply relates two database objects. A meta link provides information about a database object 
while a dynamic link has SQL and/or other programs embedded within it to enable increased functionality 
of the database object. At a minimum, each database object has a corresponding object in the 3D scene 
which we call a visual object. Each of the visual objects meet the following requirements. The set of 
objects chosen should be general enough to model all possible database objects. The set should be finite 
and as small as is necessary to model all possible database objects. Each object must have a specific 
purpose.  Each object should offer affordances with respect to the information it represents and/or 
the actions a user can execute on it.  Each object must have a unique structure and functionality. 
 The interface should incorporate semantic and physical landmarks to guide the user.  Navigation consists 
of standard 3D virtual environment controls for motion in the x y z plane as well the use of mouse clicks. 
The visual interface must provide a way to limit the number of objects displayed in order to avoid both 
system and cognitive overload.  5. THE HDV SYSTEMS ARCHITECTURE The hypermedia database visualization 
system requires a client/server architecture to implement the features listed above. Conceptually, the 
architecture components are identified as follows: A web server to implement the architecture over the 
web.  A database server to store and manage data objects and multiple users.  A communications manager 
to handle the traffic among users and between the user and the database.  Storage for the visual objects 
mapped to database objects.  A collaboration server to manage collaboration among users.  A set of 
programs which map database objects to a visual objects.  A set of programs that lay out visual objects 
on the user s screen.  A set of programs which translate user actions in a 3D visual environment into 
programs executed in the database.  A set of programs which manage results returned from a query. When 
the result set is large, the program caches the results, only returning subsets of the information at 
a time.  A set of programs which manages client side presentation of information using a 3D interface. 
  Figure 1 below shows the general structure of the HDV Client/Server architecture.  Figure. 1: General 
Architecture of the HDV Client/Server System  The HDV server contains the main components of the system 
such as the database, the graphics objects library, the web server, and the communications manager. HDV 
Clients contain a minimum set of programs to enable the display and manipulation of the 3D interface. 
 Fig. 2: Server side Architecture of the HDV system 5.1 Server Side Architecture The Server side architecture 
consists of the following components: the Database Server (DS), the Communications Manager CM), the Information 
Profiler and Landscaper (IPL), the Query Translator (QT), the Session Cache (SC), the Collaboration Server 
(CS) and the Graphics Object Library (GOL). Figure 2 shows a detailed diagram of the Server side architecture. 
The function of the Database Server is to store all the hypermedia and object relational data about the 
system. The database maintains all the data relationships, the add, update and delete semantics, the 
access and security rights to data, the concurrency control, transaction management and recovery services 
associated with the data stored in it. The Server receives SQL queries and responds back with a set of 
results. It also ensures consistency when multiple users access the database simultaneously. The Database 
Server receives queries from the Query Translator and returns the results to the Information Profiler 
and Landscaper. The Database Server resides on the HDV server but this need not be the case (e.g. it 
is possible for the Database Server to be distributed). The Communications Manager handles all traffic 
between the server and clients of the HDV system. This traffic to the Communications Manager is just 
a series of packets moving from one client through the server to another. The Communications Manager 
handles all TCP/IP, HTTP and FTP connections required by the HDV Server and clients. The Communications 
Manager handles traffic requests from the Graphics Object Library, the Information Profiler and Landscaper, 
the Collaboration Server and the Information Visualizer. The Information Profiler and Landscaper (IPL) 
are actually two sets of programs (written in VRML/Java/C++) which work together to manage the mapping 
of database objects to visual objects and the display of the visual objects. The description below explains 
the operation of the Information Profiler and Landscaper When a user navigates through the HDV system, 
they traverse hypermedia links inside the database. When a user clicks on a visual object, a variable 
within the IPL program stores information about the type of that click. There are three types of hyperlinks 
as discussed in chapter 3 namely: Meta Click A meta click results in a direct hyperlink to meta information 
about the object that is clicked. The Information Profiler program requests the Landscaper program to 
display the meta information. The Landscaper program displays meta information.  Static Click A static 
click results in a direct hyperlink to another object in the database. The Information Profiler program 
sends this request to the Landscaper program to display this information. A static click is straightforward. 
The Landscaper program reads the mapping table from the Information Profiler, gets the visual objects 
parameters from the Graphics library and sends this via the Communications Manager for display at the 
HDV client side.  Dynamic Click A dynamic click results in the execution of program embedded SQL statements 
(via the Query Translator) which returns a set of results from the database. The results are received 
by the Information Profiler which requests the Landscaper to display the results. The Landscaper reads 
the mapping table form the Information profiler , collects visual object parameters from the Graphics 
Object library and passes them to the HDV client via the Communications Manager.  Dynamic clicks are 
much more complex to handle than meta and static clicks. If the set of results returned is small, the 
Information Profiler simply requests the Landscaper to display the results. If the result set is large 
however, the Information Profiler does two things: First it notifies the session cache to hold some of 
the results. Secondly it informs the Landscaper that the result set is large and there will be further 
display requests. The Information Profiler signals the Session cache for more information periodically 
until all the results have been displayed. The Query Translator is a set of programs (written in Java/C++/SQL) 
which are used by the Information Profiler to build a query based on parameters passed to it by the Information 
Profiler. This query is passed on to the database via the Information Profiler. Examples of Query translation 
include the connection of a user to the database, select statements, joins etc. The Session Cache serves 
as an intermediate store and manager of returned results. The Session Cache is activated when a large 
number of results are returned from the Server to the Client. The Session Cache is managed by the Information 
Profiler and Landscaper. The Collaboration Server is a set of programs which enable multiple users of 
the HDV system to see and communicate with each other. At the moment, the Collaboration Server is implemented 
as a simple email and chat server. It is possible to implement a more robust Collaboration Server which 
manages audio, video and avatar collaboration in this environment. The Graphics Objects Library (GOL) 
is a set of 3D and 2D objects which are used in the display of the HDV system. The GOL is used by the 
Information Landscaper to display results as requested by the Information Profiler. 5.2 The HDV Client 
 The HDV client communicates with the HDV system via a network. When a user logs on to the HDV system 
they see a 3D interface to the HDV system. The user can then navigate, browse and issue queries to the 
Server. The user may also save information gathered from the HDV system so that during another session, 
they can retrieve information from a previous session. The Client consists of the Information Visualizer 
and a Web Browser. The figure below shows the Client side architecture of the HDV system. The Information 
Visualizer manages the display of the 3D user interface on the client side. Its functions include reception 
of visual object descriptions, data and meta data, queries and collaboration information. It is a subset 
of the Information Profiler and Landscaper, the Session Cache and the Graphics Objects Library. The Information 
Visualizer displays the 3D interface and enables the user to connect and interact with the HDV system 
via a web browser. A subset of each of the main programs on the server resides on the client in order 
to minimize traffic over the network. Fig 3: Client Side Architecture of the HDV System 5.3 System Implementation 
 An HDV Client/Server system has been implemented at Auburn University s Intelligent and Interactive 
Systems (IIS) Laboratory. The system is implemented using an Oracle database Server running an Apache 
Web Server on a Windows NT platform. The 3D user interface for the HDV system was implemented in VRML. 
SQL and Java code are embedded in VRML to implement dynamic 3D objects which interact with the database. 
At this moment the system is still single user. Work is underway to make the system multi-user by incorporating 
a chat server within the system. Figures 4 and 5 illustrate the current state of the system. In the first 
diagram, a navigable 3D image of the Auburn University computer science department is shown. The second 
image illustrates the results of clicking on the first image to allow a user to navigate into a faculty 
member s office.  Fig. 5: Office view of the HDV system implemented at Auburn University.  6. PROBLEMS 
IDENTIFIED AND SOLUTIONS FOUND One of the major problems encountered in this research was how to integrate 
3D types into databases. 3D data types involve a third dimension which current databases do not support. 
It was therefore necessary to include 3D data types in a separate graphics library and call them via 
a reference ID similar to a foreign key. It entailed creating a table of graphics objects which could 
then be associated with other data types which identified key attributes needed to define different objects 
in the database The second major problem was navigation from the 3D world back into the database. Once 
an object in the database was represented as a 3D object, how could queries be issued to return results 
in 3D format? This necessitated the transformation of query results into 3D formats which could be displayed 
in the 3D scene. In a sense the query power of SQL had to be expressed within the scope of a finite number 
of 3D objects. The third problem related to scaling. Given that sometimes, the result set was larger 
than could be represented in a 3D scene, how was this to be managed? In the current implementation, 3D 
graphics are used to contain larger set results using caching. Further clicks produce further details. 
 7. FUTURE WORK The implementation of the HDV system involved a cross disciplinary approach. Furthermore, 
it was difficult to integrate database technology with 3D technology. Databases do not support the data 
types used for 3D applications. Database technology should support Data types used for 3D applications. 
VRML too requires further extensions. It is not easy to integrate programming language capabilities within 
VRML. There needs to be easier ways than the current call interface provided under Java. There is a need 
to standardize the look and feel of 3D interfaces in much the same way 2D Graphical user interfaces have 
been standardized. This will make it easier for developers of 3D user interfaces to quickly develop applications. 
 8. REFERENCES <RefA>[1] <SinRef><author>Ark, W.S.</author>,<author> Dryer, D.C, </author><author>Selker,T, </author><author>Zhai, S</author>, <title>Representation matters: The effect of 
3D objects and a spatial metaphor in a graphical user interface</title>, <tech>IBM Research Report RJ10090 </tech><publisher>IBM Almaden 
Research Center </publisher><date>1998</date></SinRef>. [2] <SinRef><author>Wendy Ark D. </author><title>Christopher Dryer Ted Selker Shumin Zhai Landmarks to Aid Navigation 
in a Graphical User Interface</title>, <booktitle>Proc. of Workshop on Personalized and Social Navigation in Information 
Space</booktitle>, <publisher>IBM Almaden Research Center</publisher>, <date>1999</date></SinRef>. [3] <SinRef><author>Barrilleaux Jon</author>, <title>3D User Interfaces with Java</title>, ISBN <url>1884777902</url>, 
<date>August 2000</date></SinRef>. [4] <SinRef><author>M. Benedikt</author>, <title>Cyberspace: Some Proposals</title>, In <booktitle>Cyberspace: First Steps</booktitle>, <publisher>MIT Press</publisher>, pp. 
<pages>273-302</pages>, <date>1991</date></SinRef>. [5] <SinRef><author>S. Benford </author><author>et al</author>, <title>Experience of using 3D graphics in database visualization</title>, <institution>Computing 
Department, Lancaster University</institution>, <tech>Technical Report CSCW/3/1994</tech>, <date>October 1994</date>.<url>ftp://ftp.comp.lancs.ac.uk/pub/vds/</url> 
</SinRef> [6] <SinRef><author>S. Benford </author>and <author>J. Mariani</author>, <title>Populated Information Terrains: Virtual Environments for Sharing Data</title>, 
<tech>Research report CSCW/4/1994</tech>, <publisher>Centre for Research in CSCW, Lancaster University</publisher>, <date>1994</date>. <url>ftp://ftp.comp.lancs.ac.uk/pub/reports/1994/CSCW.4.94.ps.Z </url>
</SinRef>[7] <SinRef><author>Steve Benford</author>, <author>Dave Snowdon</author>, <author>Chris Greenhalgh</author>, <author>Rob Ingram</author>, <author>Ian Knox </author>and <author>Chris Brown</author>, <title>VR-VIBE: A Virtual 
Environment for Co-operative Information Retrieval</title>, <journal>Eurographics</journal> <volume>95</volume>, <date>30th August - 1st September</date>, <location>Maastricht, 
The Netherlands</location>, pp <pages>349-360</pages></SinRef>. [8] <SinRef><author>J. Boyle</author>, <author>S. Leishman</author>, <author>J. Fothergill </author>and <author>P. Gray</author>, <title>Development of a 
Visual Query Language</title>, <publisher>Aberdeen University</publisher>, <tech>Research Report</tech>, <date>1993</date>. <url>http://www.biochem.abdn.ac.uk/~john/vlq/vlq.html </url></SinRef>
 [9] <SinRef><author>S.K. Card </author>and <author>A.H. Henderson Jr</author>., <title>A multiple virtual workspace interface to support user task switching</title>, 
<title>Proceedings of the CHI+GI 1987 (Toronto, April 5-7). </title><publisher>ACM</publisher>, <location>New York</location>, pp. <pages>53-59</pages>, <date>1987</date></SinRef>.  [10] <SinRef><author>S.K. Card</author>, 
<author>G.G. Robertson</author> and <author>J.D. Mackinlay</author>, <title>The Information Visualizer: An Information Workspace</title>, <publisher>Xerox Palo Alto 
Research Center, </publisher><tech>Research Report</tech>, <location>Palo Alto, California </location><pages>94304</pages>, <date>1991</date></SinRef>. [11] <SinRef><author>Ethan Cerami</author>, <author>Simon St. Laurent</author>, 
<title>Building XML Applications</title>, <publisher>Computing McGraw-Hill</publisher>, <date>1June 1999, </date>ISBN: <url>007134116</url></SinRef>. [12]<SinRef> <author>M. Chalmers </author>and <author>P. 
Chitson</author>, <title>Bead: Explorations in Information Visualisation</title>, <booktitle>Proceedings of SIGIR 92, published as a special 
issue of SIGIR forum</booktitle>, <publisher>ACM Press</publisher>, pp. <pages>330-337</pages>, <date>June 1992</date></SinRef>. [13] <SinRef><author>M. Chalmers</author>, <title>Design perspectives in visualising 
complex information</title>, <booktitle>Proceedings of IFIP 3rd Visual Databases Conference</booktitle>, <location>Lausanne, Switerland</location>, <date>March 
1995</date>. <url>http://www.ubs.com/research/ubilab/Publications/Cha95.html </url></SinRef>[14] <SinRef><author>M.A. Clarkson</author>, <title>An Easier Interface</title>, 
<journal>BYTE</journal>, <date>February 1991</date></SinRef>. [15] <SinRef><author>A. Colebourne </author><author>et Al</author>, <title>Populated Information Terrains: supporting the cooperative 
browsing of on-line information</title>, <tech>Research Report CSCW/13/1994</tech>, <publisher>Centre for Research in CSCW</publisher>, <location>Lancaster 
University</location>, <date>1994</date>. <url>ftp://ftp.comp.lancs.ac.uk/pub/reports/1994/CSCW.13.94.ps.</url> Z </SinRef>[16] <SinRef><author>Diehl S</author>, <title>Distributed 
Virtual Worlds: Foundations and Techniques Using VRML</title>, <journal>Java, CORBA</journal>, <publisher>University of Saarland, Saarbrucken</publisher>, 
<location>Germany</location>, ISBN <url>3-540-67622-4</url>, <date>2001</date></SinRef>. [17] <SinRef><author>Andeas Dieberger</author>, <author>Andrew U. Frank</author>, <title>A City metaphor for supporting 
navigation in complex information spaces</title>, <journal>Journal of Visual Languages and Computing</journal>, <date>1998 </date>(<volume>9</volume>), pp. <pages>597-622</pages></SinRef>. 
[18] <SinRef><author>K.M. Fairchild</author>,<title> Information Management Using Virtual Reality-Based Visualizations, in Virtual Reality: 
Applications and Explorations </title>, <editor>Alan Wexelblat </editor>(ed.), <booktitle>Academic Press Professional</booktitle>, <location>Cambridge, MA</location>, ISBN 
0<isbn>-12­745045-9</isbn>, pp. <pages>45-74</pages>, <date>1993</date>. <url>http://panda.iss.nus.sg:8000/kids/fair/webdocs/viz/viz-1.html </url></SinRef>[19] <SinRef><author>G.W. 
Furnas</author>, <title>Generalized fisheye views</title>, In <booktitle>Proceedings of the ACMSIGCHI 86 Conference on Human Factors in 
Computing Systems</booktitle>, pp. <pages>16 - 23</pages>, <date>1986</date></SinRef>. [20] <SinRef><author>Danny Goodman</author>, <title>Dynamic Html: The Definitive Reference</title>,<publisher> O Reilly 
&#38; Associates</publisher>, <date>1998</date>, ISBN: <isbn>1565924940</isbn> </SinRef>[21] <SinRef><author>G. Walker</author>, <title>Challenges in Information Visualization</title>, <journal>British 
Telecommunications Engineering Journal</journal>, Vol. <volume>14</volume>, pp. <location>17­25</location>, <date>April 1995</date>. <url>http://www.labs.bt.com/innovate/informat/infovis/index.htm</url></SinRef></RefA> 
 
			
