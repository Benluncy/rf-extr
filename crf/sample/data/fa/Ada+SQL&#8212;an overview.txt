
 Ada+SQL -An Overview Arthur V. Lopes Universidade Luterana do Brasil Rua Inhandui 303, Ap. 204 90.820-170 
Porto Alegre, FIS - BRAZIL +55 (51) 241 3903 avl @ zaz.com.br intuitive environment from which the user 
has easy access 1. ABSTRACT to an editor, compiler, interpreter and other tools. Ada Ada+SQL is a programming 
environment for Ada capabilities available cover about 90% of the core language 95 extended with basic 
SQL single user specification. In addition, a set of packages have been capabilities. It incorporates 
a very fast compiler added to easy programming tasks such as screen and 2D and interpreter, with debugging 
options, library basic grap~cs operations. A MS-DOS console controlled generator and browser, syntax 
template editors, by the PE carries out compilation and execution of programmer wizard, two-dimensional 
graphics, programs, including SQL commands. The compiler and SQL interactive interface and hypertext 
interpreter are assembled into one independent 32 bits program. Therefore, it is also possible to compile 
and run  documentation on the environment, Ada 9S and programs from the MS-DOS command prompt. Previous 
 SQL. Several implementation aspects are versions were dislributed over many Internet hosts across discussed. 
dozens of countries and hundreds of several types of 1.1 Keywords institutions accounting many thousands 
of f~p Ixansfers from Compilers, interpreters, programming environments, whom valuable feedback was received. 
These versions were relational databases, computer education known as AVLAda9X and later AVLAda95. Ada+SQL 
is programmed in ANSI C and visual C++ and contains over 2. INTRODUCTION 190,000 lines of code and results 
from the sole work of the Ada+SQL is programming environment (PE) aimed to author. The executables run 
under both Windows 95/98 and novice Ada and SQL programmers that has been in NT 4.0 platforms with at 
least four MB of available RAM. development since November of 1993. The PE is an Six MB of disk space 
are needed to store the Ada+SQL re, w__._ m mx I ............................... llilllll-ll ....... 
II1 .......... I1 ...................................................................................................................................................................................... 
mm E,. Edit muad SQL Teems Library .Q.ptien, Template, Decumentatien V4indew Help F:I-dFI[~ with &#38;~bs.T~xt_IO; 
u~ Ada. Text_ZO~ proc~sdu~ Ada__SQL_Ew~xpl~ is m ~in ~eN~t~ table Students (Id (Long_Intogmr) ,Cour~o_Id 
(Integer) .Sex (Character) ,Nax~ (String(l..30))); insert into Studonts(10101998, I010, 'M' , "Monitz 
Taxaguizo" ) : in~rt into Students(10201998, 1010, 'F', "E1iea Cruzetaizen"); alter table Studsnte add 
GPA (Float): ~le=t ~ from Stud~nte order by Nax~ aeoendin~; | v ~nd &#38;da__~Exa~ple; ~gu~ 1 -The 
Ada+SQL Programming En~nment installed distribution files. Three 3IA disks are used to store the Ada+SQL 
distribution version. 3. PROGRAMMING ENVIRONMENT Permission to make digllal or hard copies of all or 
part or this work for The PE is a windows multiple document interface personal or daesmom use Is granted 
wahoot tee provided that copies are not made or distributed for profit or commercial advantage and that 
copies application named E95. The S_QLmain menu option will be bear this notice and the full citation 
on the first page. shortly described below. Figure 1 shows one activation of To copy otherwise, to republish, 
to post on servers or to redistnbute to lists. E95. requires prior specific permission and/or a fee. 
SIGAda'99 10/99 Redondo Beach. CA. USA (~ 1999 ACM 1-58113-127-,5/99/0010...$5.00 One editing window 
shows an Ada program that uses SQL SQL create command has been extended with Ada 95 types. commands. 
As can be seen the Ada 95 programming The program output for figure 1 is shown in figure 2. language 
has been extended with SQL commands and the ID COURSE_ID SEX NAME GPA 10201998 101O F Elisa Cruzstaizen 
0.00 10101998 i010 M Monitz Tamaguizo 0.00 Figure 2 - Output of Program Ada_SQL_Example This allows the 
user to either write Ada code intermixed set of SQL commands interactively from the PE. with SQL commands, 
as shown in figure 1, or to execute a ~1 Com,n,m~ -C.iimind ( s } -, ............................. I 
 -I~p~ Ill ~kI~ IK II lllIi~ IIIIIII~I(1) llI~'~III' I~ CIWI~II I~ If( I Ill I I lllIIIII loll II ~III~ll 
liI~Ii O.II ~ I IOlIl!llI ]LOll IIIIl CIII~I,II.II I.II , ~ ~ Figure 3 SQL Command Dialog Box - A specialized 
dialog box, activated from the SQL main SQL syntax template dialog box. Figure 4 shows the SQL menu option, 
allows the specification and execution of SQL Select Command Syntax Template dialog box. The Append commands. 
This dialog box is shown in figure 3. To assist to command area push button may be used to append the 
on the specification of basic SQL commands a set of push formatted dialog contents to the SQL Command 
dialog box buttons (.Â¢.reate, insert, update, select, delete, alter and Command(s) editing area. drop) 
are a, These syntax templates are available to assit novice programmers to code basic SOLcommands. There 
are a set of 60 Ada 95 syntax templates dialog boxes to assit novice programmers to code the language 
constructs. ! i| . . . . . . . . . . . . . . [  I I . . . . . Figure 4 . - . . . . . . . . . . . . . 
. lrmul-. . . . . SQL Select Command Syntax Template I)ialo w Box . . .  4. COMPILER STRUCTURE Compiler 
components include the usual basic modules such that scanner, parser, symbol table management, error 
handling, and intermediate code generation. Besides these components a library module keeps track of 
source files and the program units they contain. The library manager tells the compiler the source file 
that contains a given program t, nit such that a package. A source file may contain any number of program 
units. For instance, when a compilation A finds a with clause that refers to a package P, the compilation 
makes a pause with the current source file, a. A new compilation, B, is started to process source file, 
b, which contains package P. When compilation B concludes, then compilation A resumes now accumulating 
the program units stored in source files b and partially a. Therefore, no intermediate code is ever stored. 
Only source code is used. 4.1 Scanner Lexical analysis operates mostly under parser's conlrol. Some 
subprograms belonging to predefined packages also use some scanner operations at run-time. To increase 
compiler speed, the entire source file is read into a memory buffer by one low-level input system call. 
A token look- ahead buffer of varying length is used to provide the parser with a means of inspecting 
the source code in order to identify specific language constructs. Examples of such constructs are aggregates 
and SQL commands. The use of context clauses and generic units cause the parser to switch its focus 
among a number of source files. Subprograms that store all scanner information into its local storage 
are used to deal with this problem. The scanner parameters are then initialized with the information 
needed to compile the new coming compilation and the parser is then called to act on it. When the parser 
returns these subprograms restore the scanner information with the previously saved local storage allowing 
the parser to resume its work with the source file that caused this type of action. 4.2 Parser Syntax 
analysis is performed by a recursive descendant parser (k) where k stands for any number of look-ahead 
tokens. As pointed out before, language constructs such as aggregates and SQL commands require a number 
of look- ahead tokens in order to be identified properly. SQL commands are parsed by context. SQL commands 
may be also coded anywhere an Ada statement is allowed. As mentioned before, instantiation of generic 
units cause the parser to save the scanner state and redirect its input to the generic unit components 
making text replacements among generic formal parameters and generic actual parameters. Internal code 
generated is associated with information on both source file and line number that originated each instruction 
(see figure 7). When either a compile or run- time error is detected this information is used to report 
the exact error location. The SQL select command was extended to allow, as an option, the inclusion of 
a block statement. Each time a select command retrieves data, that satisfy a where clause when present, 
the block statement is executed. 4.3 Symbol Table The symbol table uses a nested hash table scheme. Each 
compiler instance contains a global hash table. Program units such that packages, main programs and SQL 
tables are common entries within this scope. These types of entries have descendant hash tables. For 
instance, a descendant hash table for a procedure will contain all elements that belong to its declarative 
part. Figure 6 shows the symbol table representation considering the compilation for the code fragment 
within figure 5. An outer square represents a scope. Each scope contains 20 fields. Only two of these 
fields are being shown: the father and the bucket vector. The father field stores a pointer to the ancestor 
scope. Each bucket entry points to a linked list of table entries that share the same hash value. Figure 
6-(a) shows the entries Ada and ST. A full symbol table entry contains 65 fields from which many are 
pointers into other data structures. Only two of these fields are being shown:/d and son. The id field 
stores the characters that represent the symbol. Names, all forms of literals and temporaries are common 
symbol table entries. The son field stores a pointer into its descendant scope for entries like packages 
subprograms and records. Figure 6-(b) shows the descendant scope for procedure ST. Figure 6-(c) shows 
the descendant scope for package Ada. Experiments have shown that this structure is responsible for part 
of the compiler speed. w~:h Ada.Text_IO; uee Acla.Text_IO; pEOC~Et ST ~S ~=yIMn Date As .t'm~O~l. Month 
: Integer; Day : Integer; Year : Integer; and z~=ozdl fumatLom Fat (N : Integer) zotuxm Long_Integer 
is 1~gLn Figure 5 -Fragment of an Ada 95 Program 159 father ^ I Ud Son eaR Ada ~fathe father // 
 Id ... So~ Id ... Son /1"--'Â°1 I-I- Fat i bucl~ (~ / bucket bucket 0o) (c) Figure 6 - Partial Symbol 
Table Representation Pre-defined package specifications are only stored within Examples of three operand 
instructions are related to the the symbol table when refereed. first, last, length and range attributes. 
Four operand instructions are used to implement SQL constructs such as 4.4 Error Handling the one shown 
in figure 8, part (b). Inslruction number 48 A simple sUrategy is used for dealing with errors. Once 
an shows an intermediate instruction that implements the error is detected it is reported and the compiler 
terminates. where clause shown in part (a), Over one thousand messages are used in both English and H 
n~*- 16 ~lJ g Eil,* L6 Ei~,a, 32 Ba,J Portuguese. Two external programs are used to format and __ CodaJ 
Sm=ceYb ]lOpCo. SÂ°u~Â°':rile Opesmsdl display the error messages. I 4.5 Intermediate Code 82~1~ 16~ 
32]~1 32J~U The intermediate code is based on a set of 166 instructions. Figure 7 shows the layout for 
the five types of instructions. I oo.1,oo,-I Calls for built-in subprograms use a set of one-operand 
(o)Two Op ~.w.d~ instructions. Each actual parameter generates a push 81B~I~ 16 B~i~ ~0 IB~a ~12 'IP.~- 
~l~l~ address instruction. An additional push address instruction is used for a function's return value. 
The actual subprogram i oool0-,ol call use a one-operand instruction. The operand field, for c~'rlme 
c~eanm~ this instruction, contains the memory address of the built-in i~ 16 l~ta 32~ 33g~ ZI~ 33~ subprogram. 
Unconditional branches, enter block, leave block, return and other specialized instructions use only 
one operand. Assignment statements, conversions, goto if true instructions use two operands. Figure 7 
- IAy-out of Intermediate Instructions select ~ from Grades where ~s ~e no~ in ("AP", "IN" ) ; (a)Select 
Command Inst, uc~on# / Souzcefile# //.__-. Source line# 44 0 ? I_SOL_OPEN_WRITE $Select I 724168 45 
0 7 I SQL SELECT START NOTAS $Index GRADES 1 46 0 ? I SQL_EOF $ Index_GRADES_I goto 60 47 0 7 I_SQL_READ 
HOTAS $'rndex GRADES .1 48 0 7 I_SQL_IS_IN_SET OBS $SQL SET IS IN m 1 $SQL SET is in 1 1 49 0 7 I SQL 
NOT $SQL SET is in 1 go~o 58 50 0 7 I_SQL ADD_ONE $Select: I QI| 57 O ? I_SQL_MRITE $Selec~ 1 58 0 7 
Z_SQL._NEXT GRADES $1ndex GRADES 1 59 0 7 I DIRECTGOTO 46 (b) Intermediate Code Figure g - Intermediate 
Instructions 4.6 Graphics Basic two-dimensional graphics allows the following operations: window creation 
and des.laction, line. text~ pixel, ellipse and circle. It uses the Windows MFC CDialog and CDC classes 
from a console application. Other complementary MPC classes are also used. These resources and related 
types are accessed from Ada programs by using the implementation-defined package Windows_2D. 5. INTERPRETER 
The symbol table and the intermediate code represent any set of compiled program units. This representation 
together with a non empty set of run-time stacks are used by the Ada+SQL abstract machine which is implemented 
by an interpreter. Each task and protected units have their own stack. The tasking model implementation 
uses a round robing scheduler. The user can change the quantum as a way of experimenting different concurrent 
program behavior. When a dead state is detected among a set of tasks these tasks are placed in the abnormal 
state and the exception Tasking_Error is raised. The stack model is used as the run time storage management 
strategy. Two exceptions are the allocation of dynamic memory, requested explicitly by the programmer, 
and the occurrence of unconstrained arrays. For instance, the bounds of an unconstrained array declared 
within a subprogram may be taken from parameters. Only when such subprogram is executed the array storage 
area is allocated. These arrays make use of descriptors that point to memory allocated from the heap. 
Special memory controls are used to avoid memory leaks when a block containing such arrays leaves the 
stack. Aria 95 and SQL commands are interpreted as the same level. The current version treats tables 
as independent disk files with special headers that contain information on tuple utilization. 6. Aria 
95 &#38; SQL CONSTRUCTS Most core conslructs of Ada 95 are operational. Variant parts, access to subprogram 
definition, dynamic dispaÂ¢l~ng, abstract types and subprograms, named array aggregates, user-defined 
assignment and finalization, requeue statements, asynchronous "ansfer of control, shared variables, praginas 
and a number of attributes are cons~'uets under implementation. SQL commands available are create, insert, 
update, select, delete, alter and drop. 7. DOCUMENTATION Full hypertext documentation is provided on 
the environment, the Ada 95 Referenc~ Manual V. 6.0, SQL. In addition, a tutorial on basic Ada 95 is 
also provided. The E95.I-ILP compressed file is accessed from within the PE and also fTom the winhelp 
utility program. 8. PERFORMANCE Running the compiler/interpreter on a COMPAQ Presario 300MHz under Windows 
98 with 502 Ada source files, where some sources contain more than one program unit, with a total of 
61,000 LOC.s takes less than two minutes to compile and interprete. A few of these programs use delay 
statements which increased the overall elapsed time. 9. CONCLUSIONS AND FUTURE WORK Ada+SQL has been 
used as a tool to assist novice programmers enrolled in Data Smlcmres and Concurrency classes for several 
years at undergrsduate CS programs in the "Universidade Luterana do Brasil" located in the cities of 
Canoas and Gravataf both within the state of Rio Grande do Sul, Brazil. Students' reactions indicate 
that Ada+SQL has been helpful to them. Future work will continue to implement additional Ada 95 and SQL 
consu'ucts as well as improving the PE. Special attention is being given to incorporate some Visual Basic 
features that could make its usage easier as well as CGI capability. Version 3.0 of Ada+SQL will be distributed 
upon request for a limited period of time. 10. REFERENCES <RefA>[1] <SinRef><author>Hawryszkiewycz, I. T.</author> <title>Database Analysis 
and Design</title>. <institution>Science Research Associates</institution>, <date>1984</date></SinRef>. [2] <SinRef><author>Bradley, J.</author> <title>File. Data Base Techniques</title>. <publisher>CBS College 
Publishing</publisher>, <date>1982</date>. </SinRef>[3] <SinRef><author>Date, C. J. </author><title>An Introduction to Database Systems</title>. <publisher>Addison Wesley</publisher>, <date>1977</date>. </SinRef>[4] <SinRef><author>Date, 
C. J. </author>and <author>Darwen, Hugh</author>. <title>A Guide To Sql Standard</title>. <publisher>Addison Wesley</publisher>, <date>1996</date>. </SinRef>[5] <SinRef><author>Ladanyi, H.</author> <title>Sql Unleashed; 
The Comprehensive Solutions Package With Cdrom</title>. <publisher>Sams</publisher>, <date>1997</date></SinRef>. [6] <SinRef><author>Lopes, Arthur V.</author> '<title>2ntrodu~o ~t Programaf~o 
coin Ada 95</title>," Ed. <publisher>ULB R.A</publisher>, <date>1997</date></SinRef>. [7] <SinRef><author>Lopes</author>, <author>Arthur V. </author>"<title>Estruturas de Dados para Constru~o de Software," 
Volume <volume>1</volume> - "Nfvel B~ico</title>," Ed. <publisher>ULBRA</publisher>, <date>1999</date></SinRef>. [8] <SinRef><author>Lopes, Arthur V.</author> "<title>Estruturas de Dados para ConstruqAo 
de Software," Volume <volume>2</volume> -"Nfvel Intermedi(trio</title>," Ed. ULBRA, <date>1999</date></SinRef>. [9] <SinRef><author>Freeze, Wayne</author>. <title>The Sql Programmer's 
Reference, With Cd</title>. <publisher>Ventana Press</publisher>, <date>1998</date></SinRef>. [10] <SinRef><title>Ada 95 Reference Manual</title>. <publisher>Intermetrics</publisher>, Inc., <location>Cambridge, 
Ma</location>, <date>1995</date>. <institution>ANSI</institution>f<note>ISO-8652:1995</note>. </SinRef>[ll]<SinRef><title>Ada 95 Rationale -The Language -The Standard Libraries</title>. <publisher>Intermetrics, 
Inc.</publisher>, <location>Cambridge, Ma</location>, <date>1995</date></SinRef>. [12] <SinRef><author>Bacon, J. </author><title>Concurrent Systems</title>,<publisher> Addison-Wesley</publisher>, <date>1996</date>. </SinRef>[13]<SinRef><author>Ben-Ari, M.</author> <title>Principles 
od Concurrent Programming</title>, <publisher>Prentice-Hall</publisher>, <date>1982</date>. </SinRef>[14]<SinRef><author>Cormen, T. H. </author>et al. <title>InUroduetion to Algorithms</title>. 
<volume>15</volume> ed. <publisher>McGraw-Hill</publisher>, <date>1995</date>. </SinRef>[15]<SinRef><author>Aho, A.V. </author>et al. <title>Data Structures and Algorithms</title>, <volume>28</volume> ed. <publisher>Addison-Wesley</publisher>, 
<date>1987</date>. </SinRef>[16]<SinRef><author>Aho, A.V., </author><author>Sethi, R.</author> and <author>Ullman, J. D. </author><title>Compilers, Principles, Techniques, and Tools</title>. <institution>Addison 
Wesley</institution>, <date>1985</date>. </SinRef>[17]<SinRef><author>Aho A.</author> and <author>Ullman, J. D. </author><title>The Theory of Parsing, Translation and Compiling</title>. <publisher>Prentice-Hall</publisher>, 
<date>1972</date>. </SinRef>[18] <SinRef><author>CJries, D. </author><title>Compiler Conslruction for Digital Computers</title>. <publisher>John Wiley &#38; Sons</publisher>, <date>1971</date></SinRef>. [19]<SinRef><author>Fisher, 
C. N. </author>and <author>LeBlanc, R. J. </author><title>Crafting a Compiler</title>. <publisher>Benjamin Cummings</publisher>, <date>1988</date></SinRef>. [20] <SinRef><author>Hopcroft, J. D</author>., <author>Ullman, 
J. D. </author><title>Introduction to Automata Theory, Languages and Computation</title>. <publisher>Addison Wesley</publisher>, <date>1979</date>. </SinRef>[21]<SinRef>Harvey<author>, T. 
J. </author>and <author>Cooper, K. D. </author><title>Compiler-Controled Memory</title>. <booktitle>In Proceedings of the 8 th International Conference on 
Architectural Support for Programming Languages and Operating Systems</booktitle>, <publisher>San Jose</publisher>, <date>October 1998</date>, pp. <pages>2-11</pages>, 
<volume>volume 33, number 10</volume>. <publisher>ACM Press</publisher>, <date>1998</date></SinRef>. [22] <SinRef><author>Sebesta, R. W., </author><title>Concepts of Programming Languages,3" Ed.</title> 
<publisher>Addison-Wesley</publisher>, <date>1996</date></SinRef>.</RefA> 162   
			
