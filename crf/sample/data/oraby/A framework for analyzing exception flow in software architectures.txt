
 A Framework for Analyzing Exception Flow in Software Architectures * Fernando Castor Filho Patrick 
H. S. Brito Cec´ilia Mary F. Rubira Institute of Computing, Institute of Computing, Institute of Computing, 
State University of Campinas State University of Campinas State University of Campinas P.O. Box 6176, 
13084-971 P.O. Box 6176, 13084-971 P.O. Box 6176, 13084-971 Campinas, SP, Brazil Campinas, SP, Brazil 
Campinas, SP, Brazil  fernando@ic.unicamp.br patrick.silva@ic.unicamp.br cmrubira@ic.unicamp.br ABSTRACT 
WepresentAereal,aframeworkfor analyzingexception.ow in architecture descriptions. Aereal works as a customizable 
architectural-level exception handling system that can be further constrained or have some of its rules 
relaxed. Since di.erentarchitecturalstyleshavedi.erentpoliciesforexcep­tion .ow, Aereal makes it possible 
to specify rules on how exceptions .ow in a given style and to check for violations oftheserules. Asenabling 
technologies,AerealusesAlloy, a .rst-order relational language, ACME, an interchange lan­guage for architecture 
description, and their associated tool sets.  Categories and Subject Descriptors D.2.2 [Software Engineering]: 
Design Tools and Tech­niques; D.2.11 [Software Engineering]: Software Archi­tecture General Terms Design, 
Reliability  Keywords exception handling, architecture analysis, architecture doc­umentation 1. INTRODUCTION 
The concept of software architecture [26] was proposed in the last decade to help software developers 
to cope with the growing complexity of software systems. According to * Supported by FAPESP/Brazil under 
grant 02/13996-2. Supported by the Specialization in Software Engineering course, IC/UNICAMP. Partially 
supported by CNPq/Brazil under grant 351592/97-0. Permission to make digital or hard copies of all or 
part of this work for personal or classroom use is granted without fee provided that copies are not made 
or distributed for pro.t or commercial advantage and that copies bear this notice and the full citation 
on the .rst page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires 
prior speci.c permission and/or a fee. WADS 2005, May 17, 2005, St. Louis, MO, USA Copyright 2005 ACM 
1-59593-124-4/05/005 ...$5.00. Clements andNorthrop[7],software architectureisthestruc­ture of the components 
of a program/system, their interre­lationships andprinciples andguidelinesgoverning theirde­sign and 
evolution over time. The architecture of a software system represents the decisions that should be made 
.rst in itsdesign. Thesedecisionshavealargeimpactonthecapac­ity of the system to meet its intended quality 
requirements, such as reliability, security, availability, and performance, among others. Software architectures 
are described formally using archi­tecturedescriptionlanguages, orADLs[17]. Althoughthere is a considerable 
diversity concerning the features available in existing ADLs, all of them share the same conceptual ba­sis 
whose main elements are components(loci of computa­tion ordatastores),connectors(lociofinteractionbetween 
components), and con.gurations(connected graphs of com­ponents and connectors that describe architectural 
struc­ture)[17]. Software architecturesdescribedin anADL can be analyzedby tools,in ordertoverify thatthe 
architecture satis.es some desired properties of the .nal system. For in­stance,Wright[2]descriptionscanbe 
analyzedtocheckfor interface compatibility and deadlock freedom. Automated and semi-automated analysis 
of software architectures are valuable tools for helping developers in the construction of dependable 
systems. Exception handling [8] is a well-known mechanism for structuringforward errorrecoveryinsoftwaresystems 
andis implementedby many mainstreamprogramming languages. These languages allow developers to de.ne exceptions 
and the corresponding handlers. When an error is detected, an exception is raised and the runtime system 
of the language automatically searches for the appropriate handler and ac­tivates it. The handler is 
then responsible for putting the system back in a coherent state. Since exception handling is an application-speci.c 
technique, it complements other techniques for improving system reliability, such as atomic transactions, 
and promotes the implementation of very spe­cialized and sophisticated error recovery measures. An exception 
handling system (EHS) helps in the con­struction of reliable software by constraining the way excep­tions 
and exception handlers may be used in a given lan­guage. For instance, the EHS of Java detects unhandled 
exceptions at compile-time, unless the developer states that this check should notbeperformed(by declaring 
the excep­tion unchecked). In order to provide developers with even more guarantees, some authors have 
proposed static analy­sis tools that collect information regarding exceptions in a given system and further 
constrain the EHS of the underly­ingprogramminglanguages. Forinstance,Jex[22] collects exception .ow 
information from Java programs and checks if exceptions are caught by subsumption1 . We say that an 
exception is architectural if it is raised within an architectural component but can not be handled by 
theraising component. Such exceptionscrossthebound­aries between architectural components, that is, the 
archi­tectural exceptions that .ow between two components are part of the interaction protocol to which 
the two compo­nents adhere. In recent years, many approaches combining software architectures and exceptionhandling[6, 
10,12,23] have been proposed for increasing the dependability of soft­ware systems. This is a natural 
trend since the architecture ofasoftwaresystemhasalargeimpact onasystem squality attributes, such as 
reliability, and architectural exceptions indicate that architectural components have failed. These works 
do not, however, address the important problem of describing and analyzing architectural exceptions, 
and re­lating them to architectural components. One approach that o.ers potential bene.ts to developers 
of dependable systems is to combine ADLs and exceptions. By extendingformal architecturedescriptionswithinforma­tion 
about exceptions, developers (i) document their deci­sionsabout architecturalexceptionsbetter,(ii) maketheir 
assumptions about the EHS of the language(s) that will be used during system implementation explicit, 
and (iii) are able to check inconsistencies between the architecture de­scription and the assumed EHS. 
In order for this approach to be generic enough, it must comprise software architec­tures based on multiple 
architectural styles. An architec­tural style de.nes a vocabulary of types of design elements which are 
part of a family of architectures and the rules by which these elements are composed[9]. Well-known ex­amples 
areClient/Server andBlackboard[26]. Since archi­tectural styles dictate how components in an architecture 
interact, they also de.ne the way exceptions .ow between components[6]. In this paper we present the 
Aereal (Architectural Ex­ceptions Reasoning and Analysis) framework. Aereal allows developers to extend 
architectural descriptions with infor­mation about exceptions and how these exceptions .ow be­tween architectural 
elements. These extended descriptions adheretotheconstraintsimposedby theemployed architec­tural styles 
and are automatically analyzable. The frame­work works as a .exible architectural-level EHS. Developers 
may de.ne rules that further constrain the EHS or disable some oralloftheprede.ned rules. AerealusestheACME[9] 
ADL andtheAlloy[13]speci.cation language asenabling technologies. This work is organized as follows. 
Section 2 provides some background information on exception handling, Al­loy, and ACME. Section 3 describes 
the main features of Aereal. Section 4 reviews some related works. The last sec­tion presents concluding 
remarks and points out directions for future works.  2. BACKGROUND 2.1 Exception Handling 1An exception 
E is caught by subsumption if it is caught by a catch clause that targets a supertype E of E. Whenaprogrambehaves 
accordingtoitsspeci.cation,its activity is said to be normal. When the program presents deviations from 
its speci.cation, its activity is said to be abnormal or exceptional, since it is expected that these 
de­viations occur only rarely. It is possible that errors be in­troduced in the system state due to the 
exceptional activity of the system. Exception handling [8] is a mechanism for structuring the exceptional 
activity of a program, so that errors can be more easily detected, signaled and handled. Thesetofexceptions 
andexceptionhandlersinaprogram de.ne its exceptional activity. When an error is detected in a program, 
an exception is generated, or raised. If the same exception may be raised in di.erent parts of a program, 
it is possible that di.erent handlers are executed. The choice of the handler that is executed depends 
on the exception handling context (EHC) where the exception was raised. An EHC is a region of a program 
where the same excep­tions are handled in the same manner. Each context has an associated set of handlers 
that are executed when the corre­sponding exceptions are raised. An exception raised within an EHC may 
be caught by one of its handlers. If the excep­tion is handled, normal activity of the program is resumed. 
Otherwise, an exception is signaled in the enclosing context. This exception can be a new exception or 
the one that was originally raised. In the latter case, the exception is said to be propagated to the 
enclosing context. Typical examples of EHCs in object-oriented languages are blocks, methods, and classes. 
For an architectural EHS, contexts are usually de.nedby components,connectors, and con.gurations[6]. 
 2.2 ACME ACME[9]wasdevisedtowork asboth aninterchangelan­guagefor architecturedescription and anADL.Itprovidesa 
simple structural framework for representing architectures, togetherwith aliberal annotationmechanism. 
Thelanguage does not impose any semantic interpretation of an architec­tural description, but simply 
provides a syntactic structure to which semantic semantic descriptions can be associated. This semanticinformation 
can then theinterpretedby tools. ACME supports the de.nition of four distinct aspects of architecture. 
The .rst is structure, the organization of a system into its constituent parts, components, connectors, 
and attachments between these elements. The second is properties of interest, syntactic structures to 
which seman­ticinformationcanbe associated and analyzedbytools. The third aspect is constraints, guidelines 
for how the architec­ture can change over time. The last is types and styles, de.ning classes and families 
of similar architectures. Figure 1 presents part of the ACME de.nition of the Client/Server architecturalstyle. 
InACME,styles arecalled families. The ClientAndServerFam family in the .gure de­.nes two types of components, 
ClientT and ServerT (Lines 6 and 9), and one type of connector, CSConnT (Line 13). Each componenttypehasexactly 
oneport(Lines7 and 10). The ServerT component also has an integer property indi­cating the maximum number 
of concurrent requests a server component is capable of handling. CSConnT has two roles, onefortheclient 
and onefortheserver(Lines14 and15). Moreover, it de.nes a constraint indicating that connectors ofthistypehaveexactly 
tworoles(Line 16). Architectural modelinginACMEis supportedbyAcmeS­tudio[25]. AcmeStudiois an architecturedevelopment 
en­vironment that lets one de.ne new architectural styles and 01: Family ClientAndServerFam = { 02: 
Port Type ClientPortT = { ... } 03: Port Type ServerPortT = { ... } 04: Role Type clientSideRoleT = { 
... } 05: Role Type serverSideRoleT = { ... } 06: Component Type ClientT = { 07: Port sendRequest : ClientPortT 
= new ClientPortT; 08: } 09: Component Type ServerT = { ... } 10: Port receiveRequest : ServerPortT = 
new ServerPortT; 11: Property max-concurrent-requests : int; 12: } 13: Connector Type CSConnT = { 14: 
Role clientSide : clientSideRoleT = new clientSideRoleT; 15: Role serverSide : serverSideRoleT = new 
serverSideRoleT; 16: invariant size(self.roles) == 2; 17: } 18: } Figure 1: ACME de.nition of the Client/Server 
style. model systems which instantiate these styles using an intu­itive graphical user interface. The 
environment includes a constraintsolver[20]thatchecksif an architecturesatis.es the constraints de.ned 
by the styles it uses.  2.3 Alloy Alloy[13]is alightweight modeling languagefor software design. It 
is amenable to a fully automatic analysis, us­ing theAlloyAnalyzer(AA)[14], andprovidesavisualizer for 
making sense of solutions and counterexamples it .nds. Similarly to other speci.cation languages, such 
as Z, Alloy supports complex data structures and declarative models. In this work, we have used version 
3.0 of Alloy. InAlloy,models are analyzedwithinagivenscope, orsize. The analysis performed by the AA 
is sound, since it never returns false positives, but incomplete, since the AA only checks things up 
to a certain scope. However, it is complete up to scope; the AA never misses a counterexample which is 
smaller than the speci.ed scope. As pointed out by the Alloy tutorial [14], small scope checks are still 
very useful for .nding errors. Aereal is based on Alloy instead of other formal speci.­cation languages 
mainly due to the nature of the properties we want to verify. These properties have the form a sys­tem 
with X components, Y connectors, and Z exceptions never violates predicate P . Before choosing Alloy, 
we have examined two formalisms that support automated model­checking andhavematuretoolsupport:timed-automata[15] 
and CSP [11]. Both fall short on our requirements be­cause they do not allow complex types to be associated 
to events. Additionally, CSP does not have a separation be­tween process types and instances [2]. Alloy 
in particular and model-checkingapproachesin generalcomplementtech­niques and toolsforformaldevelopmentbased 
onthenotion ofre.nement,such asB[1]. Aproposalforcombiningthe strengthsofB andAlloy ispresented elsewhere[19]. 
Some additional reasons for choosing Alloy were: (i) it is a very simple language whose semantics is 
based on .rst­order relationallogic;(ii) its syntaxis easy tolearnforde­velopersusedto object-orientedlanguages;(iii) 
both struc­tural(components and connectors) anddata(exceptions) el­ementsmay bemodeled astyped entities;(iv) 
thegraphical counter-examples produced by the AA are easier to under­stand, at least for small systems, 
then execution traces.  3. THE AEREAL FRAMEWORK Aereal is a framework for modeling and analyzing excep­tion 
.ow in software architectures. It works as an extensible EHS and allows developers to model exceptions 
in architec­ture design while taking into account the features of speci.c architectural styles. The use 
of Aereal in architecture-based development involves the following activities: 1. De.ning how exceptions 
.ow between architectural el­ements(components and connectors)foreach architec­tural style used in the 
architecture description. This information is speci.ed by de.ning new architectural styles, called exceptional 
styles, that complement the traditional (i.e. Client/Server, Layered) ones. Here­after we call the latter 
normal styles. 2. Specifying the Exception Flow View of the software architecture. This view depicts 
the components that catch or signal exceptions (called exceptional compo­nents), as wellas special connectors 
indicating excep­tion .owbetweenthesecomponents(exception ducts). Developers also de.ne the exceptions 
that are used in their design and specify subtyping relations between these exceptions. 3. Composing 
the architecture description with the ex­ception .ow view, producing an architecture descrip­tion extended 
with information regarding exceptions (or simplyextended architecture description). 4. Analyzing structural 
constraints, that is, checking if the constraints de.ned by the exceptional styles are violated. 5. 
Generating an Alloy speci.cation from the extended architecture description.  6.Analyzing exception.owbased 
onthegeneratedAlloy speci.cation. Figure2illustratesthemaincomponents ofAereal. Inthe .gure, ovals represent 
artifacts and rectangles with rounded corners represent activities. Some of the ovals are dashed to indicate 
that they are either part of the infrastructure of the framework or generated automatically. An Aereal 
speci.cation consists of a set of ACME descriptions. One of these descriptions speci.es the components 
and connectors view of the system[4]. Another one speci.es the exception .ow view of the architecture. 
The remaining descriptions specify exceptional styles. The de.nition of the exceptional activity and 
theACME architecturaldescriptioninFigure2 are assumed toexist andbeproduced aspartofthesoftware development 
process being used. Figure 3 shows a high level components and connectors viewofthe architectureof anInternetBanking(IB) 
system. Inthe.gure,components and connectors arerepresentedby rectangles and circles, respectively. The 
architecture of the sytem adheres to the Client/Server architectural style. In the rest of this section, 
we use the IB system to make the presentation of Aereal more concrete. 3.1 Designing with Aereal Architecture-based 
development with Aereal starts with an ACME description of the system s software architecture. Although 
otherADLscouldbeemployed,somereasonshave madeuschooseACME:(i) itfocuses onthestructureofthe  Figure 
2: Overview of the Aereal framework. system;(ii)ithaspowerful constructsforde.ning new archi­tecturalstyles;(iii) 
itisextensibleby theuse ofproperties; and(iv)ithasmaturetoolsupport. SinceACMEisboth an ADL and an interchange 
language, developers may employ other ADLs for modeling speci.c aspects of the system and then translate 
these speci.cations to ACME, so that they can be used with Aereal. De.ning exceptional styles. Aereal 
uses special-purpose architectural connectors to model exception .ow between components. These connectors, 
called exception ducts, are unidirectional point-to-point links through which only ex­ceptions .ow. Exception 
ducts may be re.ned by develop­ers when new exceptional styles are de.ned. In this man­ner, the speci.cs 
of each architectural style may be taken into account. The idea that simple point-to-point connec­tions 
are suitable general-purpose abstractions for model­ing style-independent communication between architectural 
components was proposed by Mehta and Medvidovic [18]. We have tailored this idea to our speci.c needs. 
This struc­tural perspective on exception .ow was adopted because it is intuitive to architects (who 
are used to thinking in terms of components and connectors), compatible with well­established views onwhatexception.owis[8], 
and easy to integrate with the concept of architectural style. Aerealprovidesabasic architecturalstyle(anACMEfam­ily) 
that is used for creating new exceptional styles. This style, called SingleExceptionFam, de.nes the basic 
building blocks of an exceptional style without overly constraining the way these blocks may be combined. 
Developers create a newexceptionalstyleby extending(creating asubtype of) SingleExceptionFam and extending 
its basic elements, Ex­ceptionalComponent (the supertype of all exceptional com­ponents) and ExceptionalConnector 
(the supertype of allex­ceptionducts). Itispossibletocreatemanydi.erent excep­tional styles for a single 
normal style and use some or all of them in an architecture description. Figure 4 presents a partial 
de.nition of the Exception- InternetBankingServer Figure 3: Architecture of a simple Internet Banking 
system. alClientAndServerFam ACME family. ExceptionalClientAnd-ServerFam imports two other families, 
SingleExceptionFam and ClientAndServerFam (Lines 1 and 2). ExceptionalClien­tAndServerFam de.nes two 
types of exceptional components, ExceptionalClientT and ExceptionalServerT (Lines 5 and 9), corresponding 
to clients and servers, respectively, and one type of exception duct, ExceptionalCSConnT (Line 13). Ex­ceptionalClientT 
de.nes a single port, of type CatcherPortT (Line 6),indicatingitcatches exceptions. ExceptionalServerT 
alsode.nesasingleport, oftype SignalerPortT (Line 9), in­dicating that it signals exceptions. The invariants 
in lines 7 and 11 guarantee that ExceptionalClientT and Exception­alServerT have no other ports. SingleExceptionFam 
de.nes the port types SignalerPortT and CatcherPortT. Specifying the exception .ow view. After specifying 
the necessary exceptional styles, the developer creates an exception .ow view for the architecture description. 
The starting point for this view is the de.nition of the system s exceptional activity. The latter is 
the result of using a soft­ware development methodology, such as MDCE [24], that includes activities 
for describing the ways in which compo­nents may fail, the exceptions that represent these failures, 
and the handlers that deal with the exceptions. The exception .ow view comprises the components from 
the architecture description that may signal or catch excep­tions and exception ducts connecting these 
components. It adheres to one or more exceptional styles, depending on the normalstylesusedinthe architecturedescription. 
Thetypes of all the elements in the exception .ow view are de.ned by the exceptional styles it adheres 
to. Usually, unlike exceptional components, exception ducts are connectors that do not exist in the normal 
architecture description. They are orthogonal to regular connectors in the sense that they do not necessarily 
follow the same rules for message/data passing and transfer of control. For in­stance, an exception duct 
between components that adhere to the Publisher/Subscriber style may or may not indicate transfer of 
control, depending on the semantics of the ap­plication. In our approach for exception .ow analysis, 
this is not of utmost importance because we are not modeling system behavior. Moreover, even though a 
set of compo­nents in a Publisher/Subscriber architecture may communi­cate through a single normal connector, 
there may be sev­eral exception ducts between these components, depending on how the components may fail 
and who is responsible for handling exceptions. The exception .ow view of the IB system only uses the 
exceptional Client/Server style, de.ned by ExceptionalClien­tAndServerFam, since only the Client/Server 
style is used in the architecture description. It is important to notice, how­ever, that many architectural 
styles could have been used, both normal and exceptional. The exception .ow view also speci.es the types 
of ex­ 01: import families\SingleExceptionFam.acme; 02: import families\ClientAndServerFam.acme; 03: 
Family ExceptionalClientAndServerFam extends TopologyBasedExcFam, 04: ClientAndServerFam with { 05: Component 
Type ExceptionalClientT extends ExceptionalComponent with { 06: Port catchesPort : CatcherPortT = new 
CatcherPortT; 07: invariant size(self.ports) == 1; 08: } 09: Component Type ExceptionalServerT extends 
ExceptionalComponent with { 10: Port signalsPort : SignalerPortT = new SignalerPortT; 11: invariant size(self.ports) 
== 1; 12: } 13: Connector Type ExceptionalCSConnT extends ExceptionalConnector with {} 14: ... 15: } 
Figure 4: Partial de.nition of the Exceptional Client/Server style. 01: import families\ExceptionalClientAndServerFam.acme; 
02: System ExceptionalNetbanking : ExceptionalClientAndServerFam = 03: new ExceptionalClientAndServerFam 
extended with { 04: 05: Component InternetBankingServer : ExceptionalServerT = 06: new ExceptionalServerT 
extended with { 07: Port signalsPort : SignalerPortT = new SignalerPortT extended with { 08: Property 
raises : Set{} = {RequestNotProcessedException}; 09: Property signals : Set{} = {RequestNotProcessedException}; 
10: }; 11: }; 12: ... 13: Connector ExceptionalCSConnT0 : ExceptionalCSConnT = 14: new ExceptionalCSConnT 
extended with { 15: ... 16: Property catches : Set{} = {RequestNotProcessedException}; 17: Property signals 
: Set{} = {RemoteException}; 18: Property exceptionMappingFrom : Sequence<> = 19: < RequestNotProcessedException 
>; 20: Property exceptionMappingTo : Sequence<> = < RemoteException >; 21: }; 22: }; Figure 5: Exception 
.ow view of the IB system. ceptions that exceptional components and exception ducts signal and catch. 
If an architectural element catches ex­ceptions, it is speci.ed if these exceptions are handled by the 
element or propagated to other elements. Similarly, if an architectural element signals exceptions, it 
is speci.ed if these exceptions are raised by the element or if it is just propagating an exception it 
has caught. This information is added to the exception .ow view by assigning values to some ACME properties 
de.ned by SingleExceptionFam and therefore inherited by all exceptional styles. Figure5 showspart oftheACMEde.nition 
oftheIB sys­tem s exception .ow view. Line 9 speci.es that the Internet-BankingServer component may signal 
an exception called Re­questNotProcessedException. This exception is raised by the componentitself(Line8). 
Lines 16-20specify thatwhenthe ExceptionalCSConnT0 connector catches exceptions of type RequestNotProcessedException, 
it translates them to excep­tions of type RemoteException. The latter are then signaled by the connector. 
Analyzing structural constraints and exception .ow. Structural constraints are evaluated after an extended 
ar­chitecture description is generated. This description is pro­duced by the Composer tool, which is 
provided by Aereal. TheComposerreadsthe architecturedescription andtheex­ception .ow view and updates 
the former with information regarding exceptions de.ned by the latter. This organiza­tion promotes separation 
of concerns at the architectural level, since the architecture description does not refer to the exception 
.ow view, and the two exist as separate design artifacts and are composed automatically. After generating 
the extended architecture description, the developer uses AcmeStudio to check if any of the con­straints 
de.ned by the exceptional styles is violated. This avoidsawkward situations,such asaClient/Server architec­ture 
where exceptions .ow from clients to servers and not the other way around. To analyze how exceptions 
.ow in the architecture, it is necessary to generate an Alloy speci.cation corresponding to the extended 
ACME description. Since generating the Alloy speci.cation manually is a di.cult and error-prone activity, 
Aereal provides a tool which automatically trans­lates an extended ACME description to Alloy. This tool, 
called Converter, may generate an Alloy speci.cation that comprises the whole architecture or just part 
of it. This feature is desirable, for instance, when an architecture has too many components and connectors 
and analyzing it as a whole is too expensive. The developer selects the constraints that de.ne the EHS 
when the Alloy speci.cation is generated. By default, these constraints de.ne an EHS very similar to 
Java s, with the additional rule that exceptions can not be caught by sub­sumption. Some of these constraints 
may be ignored if an EHS thatimposeslessconstraintsisdesired. Moreover, new checkscanbe addedby writing 
theappropriateAlloypredi­cates and assertions. These checks comprise additional con­straints on the EHS 
and application-speci.c invariants. Bydefault,all exceptions aresubtypesof AerealException. It is possible 
to specify in Alloy a type hierarchy for the ex­ceptions. For instance, if one wants to use Java s exception 
type hierarchy, one can de.ne a Throwable type (an Alloy signature) and make all exceptions used in the 
application inherit from it. This type hierarchy is then taken into ac­count when exception .ow is analyzed. 
If no exception type hierarchy and no checks beyond the default ones are neces­sary,noknowledge ofAlloyisrequired 
tousetheframework. The developer uses AA to analyze exception .ow. AA checks if the generated speci.cation 
violates any of the con­straints of the EHS or application-speci.c invariants. If the AA detects a constraint 
violation, it generates a counterex­ample with a con.guration of the system for which the vio­lated constraintdoesnothold. 
Otherwiseit noti.estheuser that the system may be valid. In this phase, architectural styles are not 
taken into account. It is assumed that they have been checked during structural constraints analysis. 
Figure 6 shows a counterexample generated by the AA when we analyzed exception .ow in the Alloy speci.cation 
of the IB system. This counterexample indicates that the generated Alloy speci.cation violates some rule 
of the EHS de.ned by Aereal. The error has been detected because we have modi.ed the exception .ow view 
of the IB system (Figure 5) so thatInternetBankingServer signals RequestNot-ProcessedException but does 
not raise it.  4. RELATED WORK Architectural Analysis and ADLs. Some works have focused on formally 
characterizing architectural styles and usingthem asabasisfor analysisofsoftware architectures[9, 27]. 
Aereal builds upon these works but focuses on the analysis of architectural exceptions. To the best of 
our knowledge, this is an aspect of software architecture that has not been addressed in the literature. 
 Figure 6: A counterexample generated by AA. SomeADLssuchWright[2] andRapide[16],whichtar­get the speci.cation 
of system behavior, have many inter­esting features and could be used to analyze exception .ow in architecture 
descriptions. However, these languages fail to address some important requirements. For instance, it 
is not possible to de.ne a type hierarchy for events in Wright. Hence,itis notpossibleto checkif a component 
catches ex­ceptions by subsumption. Moreover, Rapide does not sup­portthenotionof architecturalstyle. 
Althoughthelanguage allows certain styles to be simulated, this is not possible in all the cases [21]. 
Finally, using these ADLs and associ­ated tools to analyze exception .ow in software architec­tures would 
require that developers specify the EHS to be supported from the ground up, a cumbersome and daunting 
task. Architectural exceptions. In recent years, several works proposing the use of exception handling 
at the architectural leveltobuilddependablesystemshave appearedintheliter­ature. Basset al[3]reportthat,during 
thedevelopment of an air-tra.c control system, a system with extremely high dependabilityrequirements,it 
was necessary todevise a new architectural view that explicitly represented the .ow of ex­ceptions between 
components in the system. The concept ofidealizedC2 component[10]de.nesastructurefor asso­ciating exception 
handlers to architectural components that adheretotheC2 architecturalstyle[28]. Castoretal[6]have re.ned 
the notion of idealized C2 component and proposed an architecturalEHS andimplementationinfrastructure 
ad­dressing the speci.c concerns of component-based systems. None of the aforementioned works focuses 
on the analysis of exception .ow at the architectural level. Moreover, they do not provide means for 
de.ning how exceptions .ow in di.erent architectural styles. Exception .ow analysis. Manytechniques and 
toolshave been proposed to help developers in understanding excep­tion .ow in software systems. Most 
of them perform static analysis of source code and generate information about un­caughtexceptions and 
thepossiblecausesfortheexceptions thathandlerscancatch. Robillard andMurphy[22]present a brief survey 
of these techniques and tools. Our work is di.erent from existing approaches mainly because it focuses 
on architecturalexceptions andthein.uenceof architectural styles on how they .ow. Furthermore, instead 
of extending or constraining the EHS of an existing language, Aereal de­.nes the whole EHS and makes 
it possible for developers to extended it or constrain it according to their needs.  5. CONCLUSIONS 
AND FUTURE WORK InthispaperwepresentedAereal,aframeworkfor analyz­ing exception.owinsoftware architectures. 
Aerealworks as a .exible architectural-level EHS; developers can add or re­move constraints to the EHS 
according to their needs. Due to its combination of ACME and a structural approach for representing exception 
.ow, it is possible to de.ne how ex­ceptions are propagated in a style-speci.c manner. This is apowerfulfeaturesincedi.erent 
architecturalstylesusually impose di.erent constraints on how components communi­cate. Moreover, Aereal 
completely separates the exception .ow view of a software architecture from its normal compo­nents and 
connectors view, and provides tools to compose theseviews automatically. Thisfeaturepromotesbetterun­derstandability 
and maintainabilitybecauseconcernsdonot get cluttered in a single architecture description. Our most 
immediate future work is to assess the usability and usefulness of Aereal. At the present moment, we 
are modeling a simple control system using three di.erent ap­proaches:(i) alayered architecture;(ii) 
an architecturethat combineslayered,client/server, andpublisher/subscriber ar­chitecturalstyles; and(iii) 
aC2 architecture. Thisexercise aims to evaluateifAereal canbe used to represent exception .owifdi.erent 
modelingapproaches areused. Moreover,we are also using the framework to model part of a real bank­ing 
system. This case study is being conducted within the organization that is building the system. Insystemswhereunits 
ofcomputation(threads,processes, components) cooperate in order to achieve a common goal, exception handling 
is much more complicated than in tra­ditional systems. If multiple exceptions are signaled con­currently, 
they must be handled in a coordinated manner to guarantee that the state of the system remains consis­tent, 
because it can not be assumed that these exceptions areindependent[5]. TheEHSde.nedbyAereal stilldoes 
not support the speci.cation of concurrent exceptions. This is a limitation of the design of the framework 
and not of the abstractionusedforrepresenting exception .ow(excep­tion ducts). We intend to extend the 
underlying system representation used by Aereal so that systems that require concurrent exception handling 
can be represented and ana­lyzed.  6. ACKNOWLEDGMENTS Wewouldliketothank the anonymousreferees,whopro­vided 
many interesting comments and suggestions.  7. REFERENCES <RefA>[1] J. P. Abrial.The B-Book Assigning Programs 
to Meanings. Cambridge University Press, 1996. [2] R. Allen and D. Garlan. A formal basis for architectural 
connection. ACM TOSEM, 6(3):213 249, July 1997. [3] L. Bass et al. Air tra.c control: Acase study in 
designing for high availability. In Software Architecture in Practice, chapter 6. Addison-Wesley, 2nd 
edition, 2003. [4] L. Bass et al.Software Architecture in Practice. Addison-Wesley, 2nd edition, 2003. 
 [5] R. H. Campbelland B. Randell. Error recovery in asynchronous systems. IEEE TSE, SE-12(8):811 826, 
1986. [6] F. Castor Filho et al. An architectural-level exception-handling system for component-based 
applications. In Proceedings of the LADC 2003, LNCS 2847. Springer-Verlag, October 2003. [7] P. C. Clements 
and L. Northrop. Software architecture: An executive overview. Technical Report CMU/SEI-96-TR-003, SEI/CMU, 
February 1996. [8] F. Cristian.Dependability of Resilient Computers, chapter 4-Exception Handling. BSP 
Professional Books, 1989. [9] D. Garlan et al. Acme: Architectural description of component-based systems. 
In Foundations of Component-Based Systems, chapter 3. 2000. [10] P. Guerra et al. An idealized fault-tolerant 
architectural component. In Proceedings of WADS 2002, May 2002. [11] T. Hoare. Communicatingsequential 
processes. Communications of the ACM, 21(8):666 677, 1978. [12] V. Issarnyand J. P. Banatre. Architecture-based 
exception handling. In Proceedings of the 34th HICSS, 2001. [13] D. Jackson. Alloy: A lightweight object 
modeling notation. ACM TOSEM, 11(2), April 2002. [14] D. Jackson. Alloy home page, 2004. Available at 
http://sdg.lcs.mit.edu/alloy/default.htm. [15] K. G. Larsen, P. Pettersson, and W. Yi. UPPAAL in a nutshell. 
International Journal on Software Tools for Technology Transfer, 1997. [16] D. Luckham et al. Speci.cation 
andanalysis of system architecture using rapide. IEEE TSE, 21(4):336 355, April 1995. [17] N. Medvidovic 
and R. N. Taylor. A framework for classifying and comparing architecture description languages. In Proceedings 
of FSE/ESEC 97, September 1997. [18] N. R. Mehta and N. Medvidovic. Composing architectural styles from 
architectural primitives. In Proceedings of ESEC/FSE 03, September 2003. [19] L. Mikhailov and M. Butler. 
An approach to combining B and Alloy. In ZB 2002 Formal Speci.cation and Development in Z and B, pages 
140 161, 2002. [20] R. Monroe. Capturingarchitecture design expertise with armani. Technical Report CMU-CS-96-163, 
CMU School of Computer Science, 1998. [21] E. D. Nitto and D. Rosenblum. Exploiting adls to specify architectural 
styles induced by middleware infrastructures. In Proceedings of the 21st ICSE, May 1999. [22] M. P. Robillardand 
G. C. Murphy. Static analysis to support the evolution of exception structure in object-oriented systems. 
ACM TOSEM, 12(2):191 221, April 2003. [23] A. Romanovsky, P. Periorellis, and A. F. Zorzo. Structuring 
integrated web applications for fault tolerance. In Proceedings of the 6th IEEE ISADS, pages 99 106, 
2003. [24] C. M. F. Rubira et al. Exception handling in the development of dependable component-based 
systems. Software Practice and Experience, 2005. To appear. [25] B. Schmerland D. Garlan. Acmestudio: 
Supporting style-centered architecture development. In Proceedings of the 26th ICSE, May 2004. [26] M. 
Shaw and D. Garlan.Software Architecture: Perspectives on an Emerging Discipline. Addison-Wesley, 1996. 
[27] B. Spitznageland D. Garlan. Architecture-based performance analysis. In Proceedings of the 10th 
SEKE, 1998. [28] R. N. Taylor et al. Acomponent-and message-based architectural style for GUI software. 
In Proceedings of the 17th ICSE, April 1995.</RefA>  
			
