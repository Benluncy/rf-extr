
 A Peer-to-Peer Architecture for Multi-Path Data Transfer Optimization using Local Decisions Mugurel 
Ionut Andreica Eliana-Dina TÃ®rsa Nicolae Tapus Politehnica University of Bucharest Politehnica University 
of Bucharest Politehnica University of Bucharest Splaiul Independentei 313, 060042 Splaiul Independentei 
313, 060042 Splaiul Independentei 313, 060042 Bucharest, Romania Bucharest, Romania Bucharest, Romania 
(0040)722803022 (0040)744126523 (0040)722803022 mugurel.andreica@cs.pub.ro eliana.tirsa@cs.pub.ro nicolae.tapus@cs.pub.ro 
ABSTRACT Data management (data retrieval and processing) performance in large-scale distributed systems 
(e.g. Grids, distributed databases, content delivery networks) is directly dependent on the efficiency 
and reliability of the communication architecture. The communication layer is responsible for transferring 
data between multiple source-destination pairs or for gathering the data from multiple sources to the 
processing nodes. In this paper we propose a peer-to-peer communication architecture for optimizing the 
efficiency, load balancing and reliability of the data transfers in the system, making local decisions 
only. We also present simulation-based experimental evaluation results.  Categories and Subject Descriptors 
C.2.1 [Computer-Communication Networks]: Network Architecture and Design distributed networks, network 
topology; C.2.4 [Computer-Communication Networks]: Distributed Systems distributed applications, distributed 
databases General Terms Algorithms, Performance, Design, Reliability.  Keywords peer-to-peer, communication 
architecture, local decisions, data transfer optimization, self-organizing topology. 1. INTRODUCTION 
Large-scale distributed systems, like distributed databases, Grids and content delivery networks, store 
and process large amounts of data. As data is stored on multiple nodes of the system, the first stage 
in performing any data processing is the data retrieval: data is brought to the processing node(s), where 
it is temporarily stored (during the processing stage). Although this step is rather trivial in small 
systems or when only small amounts of data are transferred, Permission to make digital or hard copies 
of all or part of this work for personal or classroom use is granted without fee provided that copies 
are not made or distributed for profit or commercial advantage and that copies bear this notice and the 
full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute 
to lists, requires prior specific permission and/or a fee. WDDDM 09, March 31, 2009, Nuremberg, Germany 
Copyright 2009 ACM 978-1-60558-462-1/09/03 $5.00. it can become a significant performance bottleneck 
when large volumes of data are transferred simultaneously within the system (because the same network 
resources may be utilized by multiple data transfers, although enough resources are available at other 
places within the system or at different times). In this paper we address the (multi)point-to-point data 
transfer issue in large-scale distributed systems. We aim to improve both the efficiency and reliability 
of the data transfers in a scalable manner. The scalability condition implies that we cannot maintain 
a global view of the entire system, nor can we make centralized decisions. The proposed solution must 
use only local decisions based on local views of the system. In order to meet these requirements, we 
propose a peer-to-peer communication architecture, where the peers have identifiers which are mapped 
into a multidimensional geometric space. In Section 2 we describe the application interface of the proposed 
communication architecture. In Section 3 we present the main features of the peer-to-peer system and 
its topology. In Section 4 we discuss in detail the message routing algorithm. In Section 5 we present 
simulation-based experimental results. In Section 6 we discuss related work and in Section 7 we conclude. 
 2. THE APPLICATION INTERFACE The nodes composing the distributed system will be organized into a peer-to-peer 
architecture. Each peer will be connected to a small set of neighbors, which will represent (almost) 
all the local information available to the peer. The peer-to-peer topology will play the role of the 
communication layer for the distributed application (database, scientific simulation, and so on). Each 
peer provides a communication interface to the application, which is composed of three functions: sendMessage(message, 
source id, destination id, communication flow id)  sendData(data id, source id, destination id, [communication 
flow id])  retrieveStatus(communication flow id)  The arguments of the sendMessage function have the 
following meaning. The message is a data identifier of some data stored on the node identified by source 
id (e.g. location address of the data and number of bytes). If an application performs a sendMessage 
call on a peer X, this peer will send a message to the peer identified by the source id and let it know 
that it should send the corresponding data to the peer identified by the destination id. The communication 
flow id is used in order to specify that two messages are part of the same communication flow. For instance, 
in order to transfer all the required data from a source to a destination, the application will split 
the data into messages (of possibly different sizes) and perform a sendMessage call for each message. 
Once a message reaches the destination peer, this peer will send an acknowledgement back to the source 
peer. The acknowledgement will follow the reverse path of the corresponding message. When an application 
performs a sendData function call on a peer X, this peer announces the peer Y identified by the source 
id that the data identified by the data id must be transferred to the node identified by the destination 
id. The transferred data is located on peer Y. Internally, peer Y will generate a communication flow 
identifier flowid (or use flowid= communication flow id, if this optional argument is given), will split 
the data into multiple messages and will perform a sendMessage call for each message; it will use the 
same communication flow identifier flowid for each sendMessage call. The major difference from the previous 
approach is that the (upper-level) application does not bother itself with splitting the data into messages. 
This process is delegated to the communication layer. The communication flow identifier flowid is returned 
to peer X, which then returns it to the application, in order to keep track of the status of the data 
transfer. The retrieveStatus function returns status information regarding the data transfer identified 
by the communication flow id argument. A call retrieveStatus(flowid) must be made to the same peer X 
to which the corresponding sendData call which returned the flow identifier was made (or to which a sendMessage(*,*,*, 
flowid) call was made). Actually, status information is maintained only on the source and destination 
peers. The peer X on which the call(s) were made maintains an association between the communication flow 
identifiers of the calls performed on it and their corresponding source and destination peers. Thus, 
peer X will retrieve the status from the source and destination peers and return it to the application. 
The destination peer will maintain receiving information (the total number of received messages and the 
total number of received bytes). The source peer will maintain the total number of sent messages and 
bytes, and feedback information, like the total number of received acknowledgements.  The multipoint-to-point 
capabilities of the architecture can be used if an application performs multiple sendMessage calls from 
several sources to the same destination using the same communication flow identifier. Although the messages 
may originate from different sources, intermediate nodes will consider that two messages with the same 
communication flow identifier are sent to the same destination and, thus, will perform common routing 
optimization decisions.  3. THE PEER-TO-PEER ARCHITECTURE The peer-to-peer architecture must have the 
following properties: every peer must know only a small subset of other peers  using local decisions 
only, we must be able to reach any peer Y, starting from any (other) peer X  every peer must make message 
routing decisions based on local information only (i.e. information which can be obtained from its neighbors 
or from itself)  In order to provide all these properties, every peer will be assigned the coordinates 
of a point in a d-dimensional space. Actually, every peer will generate its own coordinates, using d 
different hash functions. The arguments of the hash functions can be any combination of IP address, MAC 
address, time of day, application-specific information, randomly generated information, and so on. By 
using hash functions on a large enough number of bits, we can expect, with a high probability, that the 
set of coordinates of each peer will be unique. Every peer X will periodically broadcast its existence 
to all the peers which are located at most BR=2 hops away from X in the peer-to-peer topology (BR is 
the broadcast radius). Every peer X will maintain a set I(X) containing the peers Y which broadcasted 
their existence to X during the past Tlimit,1 seconds. Periodically, based on the peers in the set I(X), 
peer X will choose its set ND(X) of desired direct neighbors. For each peer Y in ND(X), peer X will initiate 
a new connection to Y (or will mark the connection as desirable and announce this to peer Y, if such 
a connection is already open). We denote by N(X) the current set of direct neighbors of a peer X. If 
a connection from X to a peer Y in N(X) has not been marked as desirable by any of the two peers (X and 
Y) during the past Tlimit,2 seconds, the connection will be closed. It should be obvious that the sets 
of peers I(X) and the structure of the peer-to-peer topology are co-dependent. The set I(X) depends on 
the current structure of the topology and the structure of the topology changes based on the information 
in I(X). We also draw attention to the fact that the connections we speak about are only logical connections. 
From an implementation point of view, they may correspond to one or several (open) TCP connections between 
the same pair of peers X and Y, or to UDP based communication. We left the part concerning the way a 
peer X chooses its neighbors from the set I(X) unspecified. This is because we want to construct a general 
framework and allow the possibility of using any neighbor selection method. However, the chosen method 
must create a topology which satisfies the 3 properties we mentioned. We will present several neighbor 
selection methods next and then we will describe the joining and leaving process of the peers. 3.1 Neighbor 
Selection Methods A desirable property of a neighbor selection method is to be convergent, i.e. considering 
that no new peer joins the system and no old peer leaves the system, after a finite amount of time every 
peer X should reach a state where it will not change its set of neighbors N(X) anymore. Let s denote 
by co(X,j) the jth coordinate assigned to peer X. In the first method, for every dimension j (1=j=d), 
every peer X sorts the peers Y in I(X) according to co(Y,j). Then, peer X splits the peers Y from I(X) 
into two sets: A(X,j) contains the peers Y with co(Y,j)=co(X,j) and B(X,j) contains those peers Y with 
co(Y,j)>co(X,j). Peer X will connect to jth the K=1 peers Y from each set A(X,j) and B(X,j), whose coordinates 
are closest to co(X,j) (thus, at most 2Â·K such peers). We call this method the Independent Dimensions 
method. A second method (the Hyperplanes method) consists of choosing a set of H hyper-planes passing 
through the origin of the geometric coordinate system. These hyper-planes define Q regions in the dÂ­dimensional 
space (all the points in the same region are in the same half-space relative to each hyper-plane). Each 
peer X translates itself to the origin and classifies all the peers Y in I(X) according to the regions 
in which they are located, relative to the peer X. The desired neighbors of peer X are the (at most) 
K=1 closest peers from each of the Q regions (closeness is measured using a distance function like, for 
instance, the L1, L2 or L8 norm). Another method is based on computing the local Voronoi diagram, using 
any distance function (e.g. any Lp norm, 1=p=8).  Peer X computes the (d-dimensional) Voronoi diagram 
of the points assigned to the peers in the set EI(X)=I(X) . {X}. We define by Vlocal(X,Y) the Voronoi 
cell of a peer Y from EI(X). The set of desired neighbors of peer X is composed of those peers Y in EI(X) 
such that Vlocal(X,Y) touches (is adjacent with) Vlocal(X,X). This method stabilizes after a finite amount 
of time and every Voronoi cell Vlocal(X,X) converges towards the Voronoi cell Vglobal(X) of the point 
assigned to peer X, where Vglobal(X) is computed by considering all the peers in the system (not just 
those in EI(X)). This Local Voronoi method has several advantages upon other methods, but the computation 
of the Voronoi diagram in d=3 dimensions is a tedious task. Other methods, based on distributed geometric 
spanner construction [4], can also be used.  3.2 Joining and Leaving When a peer X joins the system, 
it must know at least one other peer which is part of the system. The peers it initially knows form the 
initial set I(X). Based on this set, peer X chooses an initial set of neighbors N(X). From now on, peer 
X is within the system and will gradually change its neighbors until the topology stabilizes. When a 
peer X leaves the system, it will no longer broadcast its existence to the neighboring peers (located 
at most BR hops away from X). Thus, after Tlimit,1 seconds from the moment X leaves the system, no other 
peer will consider X as a potential (direct) neighbor.  4. THE MESSAGE ROUTING METHOD A critical part 
of the proposed peer-to-peer communication architecture is the message routing method. Let s assume that 
a message msg destined to a peer Y has currently reached a peer X.Y. Peer X must choose one of the peers 
in N(X) to forward the message to it. All the proposed neighbor selection methods made use of a distance 
function dist, which was either one-dimensional or multi-dimensional. Peer X will compute the set Closer(X,Y) 
which consists of all the peers Z in N(X) such that dist(Z,Y)<dist(X,Y) (i.e. the distance between the 
peer Z and the destination peer Y is smaller than the distance between the current peer X and peer Y). 
For the Local Voronoi method, the distance function is the d-dimensional Lp norm used when computing 
the (local) Voronoi diagram. In the case of the Independent Dimensions method, the source peer chooses 
a (random) dimension j (1=j=d) for every message msg. The value of j is sent along with the message. 
Then, the distance function (for the message) is the 1D distance function distj(U,V)=|co(U,j)-co(V,j)|. 
After computing the set Closer(X,Y), peer X must choose the next peer Z from this set. In subsection 
4.1 we discuss several peer selection methods. Thus, the message eventually reaches the destination Y 
step by step, because the distance from the current peer X to Y constantly decreases. The correctness 
of the routing method is based on the fact that the peer-to-peer topology is in a stable state. However, 
we note that in some real-life situations peer arrivals and departures may occur constantly. As soon 
as a message msg reaches its destination Y, peer Y will send an acknowledgement to the source peer S. 
Every peer Z maintains a table T(Z) with the message identifiers of the messages which peer Z forwarded 
(or received). For each message identifier mid, peer Z stores in T(Z, mid) the neighbor X from which 
the message (with identifier mid) was received. Thus, the acknowledgement will follow the reverse path 
of the message, from peer Y to peer S. Note that when the size of a table T(Z) exceeds a given threshold, 
the oldest entries from T(Z) are deleted (this way, the memory consumption on any peer Z is bounded). 
Peer S may assign a timeout to each message it sends. If it does not receive the corresponding acknowledgement 
within the chosen time interval, it may decide that the message was lost and may resend the message. 
The acknowledgement mechanism can be used for improving the reliability of the data transfer. Note that 
because a routing decision is made for each message, two messages from the same communication flow can 
be routed along different paths. Thus, the destination must have the ability to order the received messages 
in their correct (logical) order (information regarding this order can be sent within the message). 
4.1 (Next) Peer Selection Methods The simplest method of choosing a (next) peer Z from the set Closer(X,Y) 
is to select Z randomly (thus, every peer in Closer(X,Y) can be selected with the same probability). 
Another simple method consists of choosing the peer Z with the smallest value of dist(Z,Y) (i.e. the 
peer which is closest to Y, according to the distance used). However, we are interested in a method which 
provides traffic load balancing. For each peer X, every neighbor Z of X, and every communication flow 
identifier flowid of a message that was routed through X, we maintain the value tavg(X, Z, flowid), representing 
the average duration between the time moment when a message msg of the flow flowid was forwarded from 
X to Z (message forwarding time) and the time moment when the corresponding acknowledgement was received; 
we consider only the last (at most) Q=1 messages of the communication flow flowid forwarded from X to 
Z when computing tavg(X, Z, flowid). If some of the past Q messages were forwarded from peer X to peer 
Z but the corresponding acknowledgements were not yet received, we will consider an estimate of the difference 
between the moment when the message was forwarded and the moment when the acknowledgement should be received. 
We will consider the previous Q =1 flowid message acknowledgements received from peer Z and compute a 
statistical measure RT of the time differences corresponding to these acknowledgements (e.g. RT could 
be the maximum value or the average value). Then, we set the estimated values to max{RT, PrÂ·(current 
time message forwarding time)}, where Pr=1 is a real number which can be constant or can be computed 
based on the history of the previously received acknowledgements and on the number M of messages for 
which acknowledgements have not been received, yet. When selecting the peer Z to which a message from 
the communication flow flowid should be forwarded, we assign a weight P(W)=1.0/tavg(X,W,flowid) to every 
peer W in Closer(X, Y). If no message of the flow flowid has been forwarded from peer X to a neighbor 
W, we consider tavg(X,W,flowid) as the average of the tavg(X, U, flowid) values of the neighbors U to 
which at least one such message was forwarded. If no message of the flow flowid was forwarded to any 
of peer X s neighbors, then we set P(W)=1.0 for every peer W in Closer(X,Y). Afterwards, we compute SP=the 
sum of the values P(W) of the peers W in Closer(X,Y). We assign a probability Prob(W)=P(W)/SP to every 
peer W in Closer(X,Y). Each peer W in Closer(X,Y) is chosen as the next peer to receive the message with 
a probability equal to Prob(W). Thus, peers W with a lower value of tavg(X, W, flowid) are more likely 
to be chosen. We call this method the weighted probabilistic method. If we choose the peer Z in Closer(X,Y) 
with the largest value Prob(Z), we call it the weighted greedy selection method. If too many flows pass 
through a peer X, the peer may choose to drop some of the information regarding these flows.   5. EXPERIMENTAL 
EVALUATION We developed a time step-based simulation framework where each time step corresponds to a 
fixed period of time (we chose 1 time step=50 milliseconds). Only the Independent Dimensions neighbor 
selection method, the weighted probabilistic next peer selection mechanism (with RT=the maximum value, 
Pr=1 and Q=2) and point-to-point data transfers were considered. The connection bandwidths were randomly 
chosen between 1 MB/sec and 5 MB/sec. We considered the connections to be independent of each other, 
although in real-life situations they may be correlated, as they may use common network infrastructure. 
The latency of each connection was chosen to be 1 time step. We first tested individual data transfers 
between the same two peers for d=2,3; we used 100 peers, BR=3 and K=1, ,5, and we sent 1000 messages 
of 100 KB each. Fig. 1 presents the total number of messages received after every simulation step, for 
d=2; the results are similar for d=3. As a general rule, for a fixed value of d, we noticed that as the 
value of K increases, the total data transfer duration decreases (with some exceptions). Moreover, for 
fixed K, the total transfer time decreases as d increases. We also performed a cross-fire test with 15 
peers (d=K=2 and BR=3) and 2 data transfers between disjoint pairs of peers. At first, the transfers 
were run independently. Afterwards, they were run simultaneously. Each data transfer consisted of 10.000 
messages of 10 KB each. Fig. 2 shows the number of received messages as a function of the number of simulation 
steps. We noticed that, when run together, the completion times of the data transfers increased by similar 
factors (of 1.35 and 1.40, respectively), proving the fairness (and load balancing) of the system for 
both transfers. 6. RELATED WORK Optimizing the data transfer efficiency of a distributed data management 
application is an important issue in large-scale distributed systems and, as a consequence, it was considered 
in many papers. A data transfer optimization technique for Grids based on a peer-to-peer architecture 
and the Bittorrent protocol was described in [9]. An agent-based peer-to-peer architecture for data transfers 
(but for wireless sensor networks) was proposed in [8]. Optimization of media flows in peer-to-peer overlays 
using a distributed approach was considered in [2]. Many applicationÂ­level peer-to-peer multicast architectures 
were proposed. They use either a single multicast tree, like Scribe [7], or multiple trees [3]. A peer-to-peer 
multi-path communication framework using a 1D space and the lexicographic distance between the peer s 
names was presented in [1]. Other proposed techniques consist of protocol-level [5] and application-level 
[6] optimizations. 7. CONCLUSIONS AND FUTURE WORK In this paper we presented a peer-to-peer architecture 
for multiÂ­path data transfer optimization, using only local decisions. The architecture is modular and 
some of its components (the neighbor selection method and the next peer selection method) can be replaced 
easily. The architecture was evaluated using simulationÂ­based experiments and the results are promising. 
As future work, a performance comparison between multiple neighbor selection 1200 1000 800 K=1 K=2 600 
K=3 K=4 400 K=5 200 0 1 31 61 91 121 151 181 211 241 271 301 331 361 391 421 451 481 511 541 571 601 
 Figure 1. Messages Received over Time (d=2; K=1, ,5). 12000 10000 8000 Transfer 1 (single) Transfer 
2 (single) 6000 Transfer 1 (cross-fire) Transfer 2 (cross-fire)4000 2000 0 1 47 93 139 185 231 277 323 
369 415 461 507 553 599 645 691 737 Figure 2. Cross-Fire Data Transfers (d=2; K=2). methods and next 
peer selection methods has to be made, in order to better understand the behavior of the system. We also 
intend to study the correlation (if any) between the size of a message of a communication flow and the 
flow s completion time. 8. REFERENCES <RefA>[1] Andreica, M. I., Legrand, I. C., and Tapus, N. 2007. Towards 
a Communication Framework based on Balanced Message Flow Distribution. In Proc. of the IEEE Intl. Conf. 
on Computer as a Tool (Warsaw, Poland, September 2007). EUROCON 2007. IEEE Press. [2] Argyriou, A., and 
Chakareski, J. 2008. Distributed Optimization of Media Flows in Peer-to-Peer Overlay Networks. In Proc. 
of the IEEE Global Telecomm. Conf. [3] den Burger, M., Kielmann, T., and Bal, H. E. 2005. Balanced Multicasting: 
High-Throughput Communication for Grid Applications. In Proc. of the ACM/IEEE Conf. on Supercomputing. 
[4] Farshi, M., and Gudmundsson, J. 2005. Experimental Study of Geometric t-Spanners. Lecture Notes in 
Computer Science 3669, 556-567. [5] Kelly, T. 2003. Scalable TCP: Improving Performance in Highspeed 
Wide Area Networks. ACM SIGCOMM Computer Communication Review (April 2003) 33, 83-91. [6] Radic, B., 
Kajic, V., and Imamagic, E. 2007. Optimization of Data Transfer for Grid Using GridFTP. In Proc. of the 
29th Intl. Conf. on Information Technology Interfaces. ITI 2007. [7] Rowstron, A., Kermarrec, A. M., 
Castro, M., and Druschel, P. 2001. Scribe: The Design of a Large Scale Event Notification Infrastructure. 
In Proc. of the 3rd Intl. Workshop on Networked Group Communication. [8] Shakshuki, E., Hussain, S., 
Matin, A.W., and Matin, A.R. 2006. Agent-based Peer-to-Peer Layered Architecture for Data Transfer in 
Wireless Sensor Networks. In Proc. of the IEEE Intl. Conf. on Granular Computing. IEEE Press. [9] Zissimos, 
A., Doka, K., Chazapis, A., and Koziris, N. 2007. GridTorrent: Optimizing Data Transfers in the Grid 
with Collaborative Sharing. In Proc. of the 11th Panhellenic Conference on Informatics (Patras, Greece, 
May 2007). </RefA> 
			
