
 A New Placement Algorithm for the Optimization of Fault Tolerant Circuits on Reconfigurable Devices 
Luca Sterpone Niccolo Battezzati Massimo Violante CAD Group - Politecnico di Torino Dipartimento di 
Automatica e Informatica {luca.sterpone, niccolo.battezzati, massimo.violante}@polito.it ABSTRACT Reconfigurable 
logic devices such as SRAM-based Field Programmable Gate Arrays (FPGAs) are nowadays increasingly popular 
thanks to their capability of implementing complex circuits with very short development time and for 
their high versatility in implementing different kind of applications, ranging from signal processing 
to the networking. The usage of reconfigurable devices in safety critical fields such as space or avionics 
require the adoption of specific fault tolerant techniques, like Triple Modular Redundancy (TMR), in 
order to protect their functionality against radiation effects. While these techniques allow to increase 
the protection capability against radiation effects, they introduce several penalties to the design particularly 
in terms of performances. In this paper, we present an innovative placement algorithm able to implement 
fault tolerant circuits on SRAM-based FPGAs while reducing the performance penalties. This algorithm 
is based on a model-based topology heuristic that address the arithmetic modules implemented on the FPGA 
reducing the interconnection delays between their resources. Experimental evaluations performed by means 
of timing analysis and fault injection on two industrial-like case studies demonstrated that the proposed 
algorithm is able to improve the running frequency up to the 44% versus standard TMR-based techniques 
while maintaining complete fault tolerance capabilities. Categories and Subject Descriptors B.2 Arithmetic 
and Logic Structures  General Terms Algorithms, Reliability, Experimentation  Keywords Placement algorithm, 
Reliability, Single Event Upset, Redundancy techniques, FPGA. 1. INTRODUCTION Avionics and space applications 
operate in harsh environments characterized by the presence of ionizing radiation such as alpha particles, 
atmospheric neutrons and heavy ions [1]. These radiation may induce non destructive loss of information 
within Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or 
a fee. WREFT 08, May 5, 2008, Ischia, Italy. Copyright 2008 ACM 978-1-60558-093-7/08/05 $5.00. an integrated 
circuit provoking Soft Error (SE) effects. The occurrence of SEs is an important consideration in designing 
fault tolerant circuits in order to tune dependability, performances and the whole cost of the system. 
Considering programmable logic devices, such as SRAM-based Field Programmable Gate Arrays (FGPAs), SEs 
may affect both the memory elements used by the design the FPGA implements and the FPGA s configuration 
memory [2] [3]. In details, if an upset affects the combinational logic in the FPGA, it induces a memory 
cell transition in one of the LUT s cells or in the cells that control the routing. This transition, 
also called bit-flip, has a permanent effect, and it is correctable only at the next load of the configuration 
memory. The configuration memory of SRAM-based FPGAs totally controls the mapped circuit, therefore any 
change of the configuration memory cells due to an high charged particle hitting the silicon device area 
may induce a modification of the original circuit s behavior. In the past years, several fault tolerance 
methods have been proposed in order to mitigate the effects of SEs in the configuration memory of SRAM-based 
FPGAs. On one side a possible solution to this problem is to use radiation-hardened FPGA, however these 
devices are much more expensive that Commercial-Off-The-Shelf (COTS) FPGAs. Viceversa, the viable solutions 
are represented by two methodologies: the reconfiguration-based techniques and the redundancy-based approach. 
The reconfiguration-based methods, aiming at restoring as soon as possible the proper values into the 
configuration bits after a SE happened [4], are a viable solution to detect and remove the upset within 
the configuration memory. However, this approach does not offer a complete immunity to the SE s effects, 
thus masking techniques, such as redundancy-based ones avoiding the SE s effects propagation to the circuit 
s outputs, are needed [5] [6] [7]. These techniques are deployed through Triple Modular Redundancy (TMR), 
where three identical replicas of the same circuit work in parallel while the outputs are produced by 
comparing and majority voting their signal. TMR is a mandatory hardening technique for SRAM-based FPGAs 
since memory elements, routing resources and logic resources are all sensitive to SEs and thus redundancy 
must be adopted for all of them. Although TMR techniques are drastically reducing the effects of SEs 
within the configuration memory of SRAM-based FPGAs, recent works have demonstrated that some criticalities 
are still not protected from these techniques [8] and reliability-oriented place and route algorithms 
(RoRA) are needed to physically map the circuit on the FPGA s resources in such a way to guarantee complete 
robustness against the SE s effects within the FPGA s configuration memory [9]. Although effective, this 
technique introduces high degradation in terms of operational frequency to the implemented circuit, since 
circuits hardened with TMR and RoRA become respectively 40% and 50% slower on the average versus their 
original versions [9]. The operational frequency reduction nullify the high performance offered by this 
devices, it is therefore mandatory the development of techniques able to implement fault tolerant circuits 
without reducing the speed of the implemented circuits. The main contribution of this paper is the development 
of a new placement algorithm able to map fault tolerant circuits according to the TMR design techniques 
on SRAM-based FPGAs optimizing the circuit s frequency up to 44% on the average with respect of TMR approaches 
[7]. The proposed algorithm is based on a model-based topology heuristic that address the arithmetic 
modules implemented on the FPGA. The delay of the interconnection between these resources are reduced 
thus minimizing the critical paths of the circuit physically mapped on the FPGA architecture. The main 
novelty of the proposed algorithm lies in the technique used to address the physical placement of the 
resources that, differently from other investigated approaches, does not rely only on the netlist model 
of the implemented circuit but directly on the topology organization of the circuit elements physically 
interconnected on the SRAM-based FPGA device. In order to evaluate the effectiveness of the developed 
placement algorithm we selected two real case study and we performed two sets of experiments. The first 
one consisted in estimating the maximum delay of the circuit s critical paths comparing different solution 
adopting TMR and the proposed placement algorithm. The second one consisted in evaluating the fault tolerance 
capability with respect to the SE s effects by performing several fault injection campaigns injecting 
bit-flip within the FPGA s configuration memory. For the considered circuits we improve the running frequency 
up to the 45% versus standard TMR-based hardening techniques while maintaining SE-effects immune capabilities. 
The paper is organized as follows. Section 2 summarizes the related works on the techniques that can 
be adopted to mitigate the effects of SEs in SRAM-based FPGAs. Section 3 introduces the topological model 
we developed for describing the FPGA architecture. Section 4 proposes the placement optimization algorithm 
we developed. Timing analysis and fault injection experiments are described in Section 5. Finally, Section 
6 draws some conclusions and future works. 2. PREVIOUS WORKS Considering the radiation environment where 
space or avionics applications operate, it has been calculated that worst-case SE rates on an average 
orbit ranges from 0.13 SEs per hour under a quiet sun to 4.2 SEs per hour under a peak upset rate [10]. 
Several SE mitigation techniques have been proposed in the past years. The simplest approach consists 
in periodically rewriting the configuration memory (scrubbing) [11]. This approach introduces a limited 
overhead corresponding to the circuitry needed to control the configuration memory loading process. The 
occurrence frequency of scrubbing operations is determined on the basis of the expected SE rate computed 
on the basis of a figure predicting how often a SE may appear in the FPGA configuration memory. Another 
method based on partial reconfiguration capability, allow reconfiguring only a userÂ­selected portion 
of the configuration memory while letting the remaining unchanged [4]. This technique reads one configuration 
memory frame at a time, and compares it with the expected one, which is stored in an error-free off-chip 
memory. When a SE is detected, only the faulty frame is rewritten. Redundancy-based techniques aim at 
masking the propagation of SE effects to the circuit outputs, and all the approaches are based on the 
hypothesis that only one replica in the system is faulty. Two examples of these techniques are Triple 
Modular Redundancy (TMR) [7] and Duplication With Comparison with Concurrent Error Detection (DWC-CED) 
[12]. TMR is an attractive solution for SRAM-based FPGAs because it introduces full hardware redundancy 
in the user s combinational and sequential logic, the routing, and the I/O pads [4]. The basic concept 
behind the TMR architecture is that a circuit can be hardened against SEs by designing three copies of 
the same circuit and building a majority voter on the outputs of the replicas. An extension of TMR implementation, 
based on the experiences gained by the FPGA vendors in the past years, is today available by automatic 
tool [13]. If applied on an high-level description of the circuit, these techniques may suffer the effects 
introduced by single SE in the FPGA s configuration memory. Therefore, redundancy techniques are generally 
coupled with reliability-oriented place and route algorithms in order to make complete SE immune circuits 
[14]. These techniques, while effective from the fault tolerance point of view present several drawbacks. 
Hardening the logic resources through TMR causes severe increase in the number of logic (at least 3 times 
of the original ones) and in the number of I/O pins and provokes a drastic performance s reduction of 
the obtained hardened circuit. In order to reduce the pin count an approach has been proposed in [12]. 
This approach combines duplication with comparison (DWC) with a concurrent error detection (CED) machine 
based on time redundancy that works as self-checking block. Although this fault tolerant technique aims 
to reduce the number of I/O pads and power dissipation, it still does not reduce the drastic performance 
degradation introduced by the added logic resources. The approach we developed in this paper is a novel 
solution in increasing the performance capabilities of fault tolerant circuits implemented on SRAM-based 
FPGAs. The algorithms acts at the physical level reading a native circuit description of the logic and 
interconnection resources. It optimizes the interconnection lengths by reducing the distance between 
the logic modules implemented on the FPGA architecture and thus minimizing the critical paths of the 
physically implemented circuit. 3. THE SRAM-based FPGA ARCHITECTURE A Field Programmable Gate Array 
consists of an array of logic blocks that can be interconnected selectively to implement different designs. 
An FPGA logic block is typically capable of implementing many different combinational and sequential 
logic functions. Today, commercial FPGAs use logic blocks that are based on transistor pairs, basic small 
gates such as two-input NANDs or exclusive ORs, multiplexers, Look-up tables (LUTs) and wide-fanin AND-OR 
structures. An FPGA routing architecture incorporates wire segments of varying length that can be interconnected 
via electrically programmable switches. The distribution of the length of the wire segments affects directly 
the density and performance achieved by an FPGA. The SRAM-based FPGA generic model used in this work 
is shown in figure 1.a. The resources in a SRAM-based FPGA that are used to implement a circuit can be 
described by resorting to a routing graph where graph s vertices model logic blocks and switch boxes, 
while graph s edges model wiring segments. As described in figure 1.b, the routing graph has two vertices: 
logic vertices that model the FPGA s logic blocks, and routing vertices that model the input/output ports 
of each switch box. Wiring segments  (b) Figure 1. Generic FPGA architecture model (a) and the correspondent 
routing graph (b). 3.1 Voter Architectures When TMR hardening techniques are used, the circuit s logic 
may include voter s architecture. This architectures are called voter partition logic and are defined 
as all the logic resources (both sequential and combinational) and interconnection resources located 
between two voter s structures. Considering the TMR scenario described in figure 2, a voter partition 
logic consists in the logic domains Dj with j . {1,2,3} comprises between voter structures Vi and Vi+1. 
 Figure 2. The TMR voter partition structures. The TMR voter partitions are particularly critical when 
the placement issue is considered since they introduce a congestion on the routing interconnections. 
The developed algorithm treats the voter architecture as macro in order to prevent routing congestion. 
 3.2 Arithmetic Units Modern SRAM-based FPGA devices support the design of embedded arithmetic cores 
for general purpose operations such as high parallelism multiplications or floating-point units. These 
units are synthesized accurately in order to optimize their operational speed and computational precision. 
Unfortunately, when these units are placed and routed on the FPGA physical layout, they may lost their 
optimized characteristics due to the logic and routing congestion. In particular, when TMR hardening 
techniques are adopted, the topological characteristics of the programmable interconnections may drastically 
degrade the delay of each single routing path thus decreasing their computational speed. The developed 
placement algorithm is able to address the routing and logic delay of the arithmetic units following 
a set of arithmetic rules and by modifying their placement positions within the FPGA s logic programmable 
array. The arithmetic rules consist of a set of physical macros that are implemented by the placement 
algorithm with respect to the circuit s functionalities.  4. THE PLACEMENT ALGORITHM /*Phase 1*/ read_native_circuit_description() 
generate_routing_graph() L = reading_logic_vertex() V = reading_logic_voter() D = reading_TMR_domains() 
 for each logic vertex i . L MDi = create_manhattan_distance (i)/*Phase 2*/M_space = create_performance_metric 
(MD)A_macrosj = read_arithmetic_rules (L)Macro_SETj = Ã¸ /*Phase 3*/do until .E(M_space) < min_delay v_place_optimizer 
(M_space ,D, MDi, L, V, A_macrosj) { /*Place Macros*/ mark_estimated_voter_space(V) if Macro_SETj = Ã¸ 
do until .E(M_space) < min_delayfor each L . A_macrosj with max(MDi)RR = available_reliability_rules(D)FP 
= find_free_location()place(L,FP)update(MDi)update(Macro_SETj)else move_macro (Macro_SETj)/*Place Logic*/for 
each L not included in A_macrosjRR = available_reliability_rules(D)FP = find_free_location()place(L,FP)update(MDi)} 
Figure 3. The flow of the proposed placement optimization algorithm (V-Place) The developed placement 
algorithms (V-Place) is based on an analytical-method which is implementing a graph architecture embedding 
a metric geometry of the regular architecture of the FPGA physical layout. The proposed algorithm directly 
considers the routing delays with respect to the FPGA routing interconnections architecture embedding 
a Manhattan distance heuristic. The algorithm is based on the routing graph presented in the previous 
section. The routing graph embeds interconnection s delay measured in terms of number of routing switches 
on the FPGA routing layout. The flow of the proposed algorithm is divided in three phases: in the first 
phase V-Place computes an analytical metric of the distance in terms of total interconnection for each 
input and output signals of a given logic resources, secondly it constructs a metric space for computing 
the FPGA performances. The third phase consists in the optimization of the position of each logic resource. 
The optimization is performed accordingly to the arithmetic rules and may include three different placement 
organization: voters structure, arithmetic core or general purpose logic. The flow of the proposed algorithm 
is illustrated in figure 3.  5. EXPERIMENTAL RESULTS In order to estimate the improvements and the effectiveness 
of the proposed algorithm, we evaluated two parameters of the circuit placed with the V-place algorithm: 
the SEs sensitivity and the speed. The improvements of the latter are shown by timing analysis and, at 
the same time, fault injection campaigns proof that the proposed algorithm does not affect the fault 
tolerance of the circuit itself. Two real-case designs have been used to perform the experiments: a CORDIC 
processor core, usually exploited for real-time calculations of trigonometric functions and vector magnitude, 
and a 24x24 parallel multiplier. Both of them have been hardened using the Xilinx XTMR tool [13] to provide 
a full tolerance against single SEs. We ran fault injection experiments on a Xilinx Virtex-II XC2V1000-FG456 
device which is characterized by 10,240 available Look-Up Tables (LUTs), 10,240 Flip-Flops (FFs) and 
324 Input-Output Blocks (IOB) and whose configuration memory is composed of 4,082,592 bits. Tab. 1 summarizes 
the circuits characteristics for this specific device, in terms of occupied LUTs, FFs and IOBs. Tab. 
1 Circuits characteristics Circuit LUTs [#] (%) FFs [#] (%) IOBs [#] (%) CORDIC core 6,258 (61) 2,478 
(24) 303 (93) Parallel Multiplier 3,597 (35) 0 (0) 288 (88) 5.1 Fault Injection Results We performed 
two kinds of fault injection campaigns in order to evaluate the effects both of the single effect and 
of the SEs accumulation. A first experiment has been performed using the Xilinx ISEÂ­generated version 
of the two circuits. In particular we injected 1000 faults applying 1000 random test patterns per fault. 
The results show that the X-TMR tool successfully hardened the circuits against single SEs; indeed no 
failures have been detected. Then we performed the same experiment on the circuits re-placed with the 
proposed approach and the fault injection report shows that no failures have been produced. We can thus 
conclude that the proposed algorithm does not threaten the circuit s fault tolerance. A second campaign 
has been performed in order to evaluate the SEs accumulation effects. We injected random faults, accumulating 
them until a failure appears on the circuit s outputs and then restoring the correct state of the FPGA 
configuration memory, for a total of 1000 SEs per circuit. Tab. 2 summarizes the results of this second 
campaign, in terms of mean number of accumulated SEs before a failure appears on the circuit s output. 
Tab. 2 Fault injection results for SEs accumulation Circuit Mean number of accumulated SEs before failure 
ISE-generated version Re-placed version CORDIC core 16 17 Parallel multiplier 31 46 The results show 
that different placement can modify the mean number of SEs need to produce a failure on the circuit s 
outputs. This means that it is possible to improve the fault tolerance of a circuit simply modifying 
its placement.  5.2 Timing Analysis We evaluated the performance capability of the placed circuits using 
vendor s tool in order to estimate the delay of the critical paths within the circuit. The results we 
obtained are reported in Tab. 3 where we shown the delay of the critical path of each hardened circuit 
(TMR and V-Place) with respect to the unhardened version (Plain). The V-Place algorithm is able to optimize 
the delay of the maximum critical path up to the 44% with respect to the TMR version, thus increasing 
the operational frequency of the implemented circuit. As the reader can notice, the delay introduced 
by V-Place algorithm with respect to the plain circuits is less than the 4% in the worst case. Tab. 3 
Timing Analysis Comparison Circuit Plain [ns] TMR[ns] V-Place [ns] CORDIC core 5.230 9.702 5.404 Parallel 
Multiplier 6.993 7.599 7.245  6. CONCLUSIONS In this paper we presented a new placement algorithm called 
V-Place able to implement fault tolerant circuits according to the TMR design techniques on SRAM-based 
FPGAs. Experimental results demonstrated that V-place may optimize the circuit s frequency up to 44% 
with respect to TMR approaches while maintaining complete immunity to SE s effects. Future activities 
are oriented on the evaluation of the performances on more complex designs mapped on different FPGA families 
and on the investigation of the effects of different placement solutions with respect to the circuit 
s fault tolerance. 7. REFERENCES <RefA>[1] JEDEC standard JESD89, Measurement and Reporting of Alpha Particles 
and Terrestrial Cosmic Ray-Induced Soft Errors in Semiconductor Devices, Aug. 2001. [2] M. Ceschia, A. 
Paccagnella, S. C. Lee, C. Wan, M. Bellato, M. Menichelli, A. Papi, A. Kaminski and J. Wyss Ion Beam 
Testing of ALTERA APEX FPGAs , NSREC 2002 Radiation Effects Data Workshop Record, Phoenix, AZ, USA, July 
2002. [3] R. Katz, K. LaBel, J.J. Wang, B. Cronquist, R. Koga, S. Penzin and G. Swift, Radiation effects 
on current field programmable technologies , IEEE Transactions on Nuclear Science, Vol. 44, Issue 6, 
Part 1, Dec. 1997, Page (s) : 1945 1956 [4] Xilinx Application Notes XAPP216, Correcting Single-Event 
Upset Through Virtex Partial Reconfiguration , 2000 [5] S. Habinc Gaisler Research, Functional Triple 
Modular Redundancy (FTMR) VHDL Design Methodology for Redundancy in Combinational and Sequential logic 
, www.gaisler.com [6] P. K. Samudrala, J. Ramos, S. Katkoori, Selective Triple Modular Redundancy (STMR) 
Based Single-Event Upset (SEU) Tolerant Synthesis for FPGAs , IEEE Transactions on Nuclear Science, Vol. 
51, No. 5, Oct. 2004. [7] C. Carmichael, Triple Modular Redundancy Design Techniques for Virtex FPGAs 
, Xilinx Application Notes XAPP197, 2001. [8] L. Sterpone, M. Violante, S. Rezgui, An Analysis Based 
on Fault Injection of Hardening Tecniques for SRAM-based FPGAs , IEEE Transactions on Nuclear Science, 
Vol. 53, Issue 4, Part 1, August 2006, pp. 2054 2059. [9] L. Sterpone, M. Violante, A new reliability-oriented 
place and route algorithm for SRAM-based FPGAs , IEEE Transactions on Computers, Vol. 55, Issue 6, Junes 
2006, pp. 732 744. [10]M. Wirthlin, E. Johnson, N. Rollins, M. Caffrey and P. Graham, The Reliability 
of FPGA Circuit Designs in the Presence of Radiation Induced Configuration Upsets , Proceedings of 11th 
Ann. IEEE Symposium on Field-Programmable Custom Computing Machines, pp. 133 142, 2003. [11]P. Brinkley, 
A. Carmichael, C. Carmichael, SEU Mitigation Design Techniques for XQR4000XL , Xilinx Application Notes 
XAPP181, 2000. [12]F. Lima Kanstensmidt, G. Neuberger, R. Hentschke, L. Carro, and R. Reis, Designing 
Fault-Tolerant Techniques for SRAM-based FPGAs , IEEE Design &#38; Test of Computers, Nov- Dec 2004, 
pp. 552 562. [13] TMRTool User Guide , in Xilinx User Guide UG156, 2004 [14] M. Sonza Reorda, L. Sterpone, 
M. Violante, F. Lima Kastensmidt, L. Carro, Evaluating different solutions to design fault tolerant systems 
with SRAM-based FPGAs , The Journal of Electronic Testing: Theory and Applications, Kluwer Academic Publisher, 
Vol. 23, No. 1, February, 2007, pp. 47 54. </RefA> 
			
