
 Some text in this electronic article is rendered in Type 3 or bitmapped fonts, and may display poorly 
on screen in Adobe Acrobat v. 4.0 and later. However, printouts of this file are unaffected by this problem. 
We recommend that you print the file for best legibility. ANo-Busy-WaitBalancedTreeParallelAlgorithmicParadigm 
. UziVishkin Abstract Supposethataparallelalgorithmcanincludeanynum­berofparallelthreads.Eachthreadcanproceedwith­outeverhavingtobusywaittoanotherthread.A 
threadcanproceedtillitstermination,butnonew threadscanbeformed.Whatkindofproblemscansuch restrictivealgorithmssolveandstillbecompetitivein 
thetotalnumberofoperationstheyperformwiththe fastestserialalgorithmforthesameproblem? Intriguedbythisinformalquestion,weconsideredone 
ofthemostelementaryparallelalgorithmicparadigms, thatofbalancedbinarytrees.Themaincontribution ofthispaperisanewbalanced(notnecessarilybinary) 
treeno-busy-waitparadigmforparallelalgorithms;ap­plicationsofthebasicparadigmtotwoproblemsare presented:buildingheaps,andexecutingparalleltree 
contraction(assumingapreparatorystage);thelatter isknowntobeapplicabletoevaluatingafamilyofgen­eralarithmeticexpressions. 
Forputtingthingsincontext,wealsodiscussour \PRAM-on-chip"vision(actuallyasmallupdatetoit), presentedatSPAA98. 
1Introduction Forwarm-up,westartwiththefollowingexample. 1.1Example:ParallelSummation Thesummationproblemisconsidered.Twosimilarpar­allelalgorithms,bothguidedbyabalancedbinarytree, 
. SupportedbyNSFgrant9820955.UniversityofMaryland. E-mail:vishkin@umiacs.umd.edu arepresented.Thesecondalgorithm,whichislesssyn­chronous,demonstratesaparadigmfor\no-busy-wait" 
parallelalgorithms.Thisparadigmisusedinlatersec­tionsfortwono-busy-waitparallelalgorithmswhichare abitmoreinvolved. 
GivenanarrayA[1:::n]ofnumbers,wewishtofnd theirsumA(1)+A(2)+:::+A(n).Letusassume withoutlossofgeneralitythatn2kforsomeinte­gerk.Consideracompletebinarytreestructure.The 
heightofanodeinthetreeisthelengthofitslongest directedpathtoaleafofthetree.Usingacommon binarytreerepresentation,locationsn:::2n;1inan 
arrayBofsize2n;1aretheleavesofthetree.(That is,A(i)occupiesB(n;1+i)fori1:::n.)The parentofnodeiisnodebi/2c.Theleftchildofnodei 
isnode2i.Therightchildofnodeiisnode2i+1. Wediscusstwoparallelalgorithms:asynchronous algorithmandalesssynchronousone.Bothalgorithms 
computethesamethings:foreverynodeofthetree theyfndthesumoftheleavesinthesubtreerootedat thenode. ThesynchronousalgorithmThestandard\PRAM 
textbook"solutionforthesummationproblemworks inlognsteps.Thefrststepoperates(inparallel)on nodesatheight1inthetree.Foreachsuchnode,the 
sumofitstwoleafchildreniscomputed.Stepioperates onnodesatheighti,addingforeachitstwochildren. Thiscanbesummarizesasalayer-by-layerlock-step 
approach,whichrequireslognsteps.Timecomplexity: ThenumberofstepsisO(logn)eachtakingO(1)time. Workcomplexity:Thetotalnumberofoperationsis 
O(n). Theless-synchronousalgorithmTherewillbea threadforeachnodeofheight1inthebinarytree. Wewillalsohaveagatekeeperforeverynodekwhose 
heightis2,orhigher.Thegatekeeperwillensurethat thesumofthenodeiscomputedafterthesumofboth itschildrenisready.Thegatekeeperisimplemented 
usingan\enabling"counter,denotedE(k).E(k)isini­tializedto0.Athreadibeginsatitsnodeofheight 1.Afteraddingitstwochildrenleavestoproduce 
SUM(i),itwillperforma\prefx-sumoperation"rel­ativetoE[PARENT(i)].Fornow,ifsufcestoknow thattheprefx-sumoperationrevealstothethreadif 
itwasthefrstchildofPARENT(i)todothat.Ifit was,thethreadterminates.However,ifitwasthesec­ond,thethreadwillproceedtoaddthetwochildren 
ofPARENT(i).Thenitwilladvancetoitsparent (i.e.,PARENT(PARENT(i)))andsoon.Thethread whichcomputesSUM(1),thesumfortheroot,ends 
thecomputation. Timecomplexity:Thenumberofoperationsinthe longestthreadisO(logn).Workcomplexity:Theto­talnumberofoperationsoverallthreadsisO(n).In 
otherwords,thetimeandworkcomplexitiesofthetwo algorithmsarethesame. Wediscussnextsomesignifcantdiferencesbetween 
thetwoalgorithmswhicharenotcapturedbythestan­dardPRAMmeasurementsoftimeandworkcomplex­ity.(i)Totalnumberofthreads.Usinga\language­based"description,thesynchronousalgorithmwould 
useone\thread"pernodeofheight1,orhigher.That is,foreachlevelofthetree,startingataheightof1,the synchronousalgorithmspawnsasmanythreadsasthe 
nodesofthatlevelandthenjoinsthembeforeproceed­ingtothenextlevel.Thisisnearlydoublethenumberof threadsintheless-synchronousalgorithm(onepernode 
ofheight1).Notethat:(a)thesetimeandworkmea­surementsdonotcountthreads;and(b)useofasymp­toticcomplexitymeasurementswouldhavehiddenthe 
diferenceinthenumberofthreadsevenifwedid.In thesameveinasymptoticmeasurementsalsohidesdif­ferencesintimeandworkbetweenthetwoalgorithms. 
(ii)Synchronization.Wewillneedtofurtherarticu­latewhatwemeanbysynchronization.Observethat: (1)ThenumberofSpawn-Joinpairsinthesynchronous 
algorithmislog2n,whileintheless-synchronousone thereisonlyoneSpawn-Joinpair,and(2)anypossi­bleorderofsummationsinthesynchronousalgorithm 
isalsopossibleintheless-synchronousone,butnotvice versa;thatis,therearesummationorderswhichcan happenintheless-synchronousalgorithmbutnotinthe 
synchronousalgorithm.Item(2)providesacriterion fordeterminingwhenonealgorithmislesssynchronous thananother.Thiscriterion,however,ismeaningful 
onlyiftwoalgorithmsperformasufcientlysimilarset ofoperations. SummaryForthepurposeofthispaper,wehighlight 
thefollowingthingsintheparallelsummationexam­ple.(1)Intheless-synchronousalgorithm,eachthread couldcontinuefromstarttofnishwithouthavingto 
everbusywaitforanotherthread.(2)Thebalanced binarytreestillimposedsomeorderonthesummation instructions.(3)Thetwoobservationsonsynchroniza­tioninthepreviousparagraph.(4)Thepartofanalgo­rithmwhichisencompassedwithinasingleSpawn-Join 
pairissaidtobeno-busy-wait.Whenawholealgorithm isencompassedwithinasingleSpawn-Joinpair,itisa no-busy-waitalgorithm. 
1.2Background AmotivatingcontextOnemotivatingcontextfor thispaperistheExplicitMulti-Threaded(XMT)paral­lelcomputingframeworkwhichcouldbesummarized 
asa\PRAM-on-chip"vision.Lookingtotheforth­coming\Billiontransistorchipera",thefollowingques­tionhasbeenattractinggrowingattention.Thereturns 
onaddingmoreon-chipmemorywillsoonerorlater starttodiminish;whattodothenwithallthishard­ware?XMTisaparallelcomputingapproachwhich 
seekstominimizeparallelcomputingoverheadsbyim­plementingafewprimitivesdirectlyinhardwareand relyingonthepracticallyunlimitedon-chipcommuni­cationbandwidth(asexplainedin[DL99]).Fromthe 
programming/algorithmicpointofview,whichisthe maininterestofthecurrentpaper,XMTseekstohar­nessPRAMalgorithmicswithitsmostvaluedattribute: 
programmability.Toreconcileefcientarchitectureim­plementationandPRAMprogrammability,aparallel algorithmsdesignerwillwritecodeusingcertainparal­lelprogrammingconstructs. 
Weuseasimple-mindedsingle-programmultiple-data(SPMD)language-basedversionofthePRAM modelsimilarto[VDBN98].Aprograminthemodel 
proceedsbyalternatingbetweenrunningaplurality ofparallelthreads(parallelstate)andrunningasin­glethread(serialstate).A(preferred)programming 
stylepermitseveryparallelthreadtorunfromitsin­ceptiontillitsterminationwithouthavingtoeverbusy waitforanyotherthread.Threadscaninteract,butan 
independenceofordersemantics(IOS)amongparallel threadsisused;thatis,anyorderinwhichtheinterac­tionamongthethreadsoccursisvalid.Theexecution 
oftheparallelprogram(i.e.,schedulinginstructionsfor execution)willofcoursehavetoabidebytheordercon­straintsofsuchaprogram.But,theprogrammingstyle 
seekstoimposefewconstraintsoninstructionschedul­ing.Althoughnotexplicatedhere,thiswillallowthe executingcomputingsystemarelativelyhighdegreeof 
freedomforoptimizingperformance. Asinglethreadtypicallyexecutesastandardse­rialprogram.Itcanswitchtoparallelstateusinga 
Spawncommandwhichspecifesanumberofthreads tobespawned.Eachthreadisaserialprogramwhich runstillitterminates(ataJoincommand).Onceall 
threadsterminatetheprogramswitchesbackintoserial state.Thereareafewdiferencesbetweenathreadand astandardserialprogram:(i)Thethreadcanhavelo­calmemory(similartoregistersinastandardassembly 
language).(ii)Allthreadshaveasharedmemory.(iii) Threadsmayinteract:(1)Athreadmayincludeprefx-sumcommandsoftheformPS(a,s),whereaisalocal 
variableofthethreadandsisasharedvariable(called base).Theprefxsumcommandmeansthefollowing atomicoutcome:(a)s:s+a,and(b)a:s, 
wheretherighthandsidemeansthevaluesofaands priortothecommand.Incaseaisasinglebit(thebase scanbeageneralinteger),XMTassumesunittimeex­ecutionwithrespecttoPScommandswithrespectto 
thesamebase.Thisassumptionisbasedonacertain hardwaregadget.Theprefx-sumcommandoftenfacil­itatesno-busy-waitsamongconcurrentthreads.Itre­mainstobeseenhowefcientlyourvarioususesofthe 
prefx-suminstructionwillendupbeingimplemented. (2)Writesintoasharedmemoryvariableeitherfollow theArbitraryCRCWPRAMconvention(whereifsev­eralthreadstrytowriteintothesamesharedmemory 
locationanarbitraryonesucceedsandwedon'tknow inadvancewhichone)oruseaprefx-sumcommand. Nonestingofthreadsisallowed. 
PerformancemeasurementsWemeasurethree thingsinanalgorithm,ofwhichthefrsttwohavebeen standardforPRAMalgorithms.(i)Wforwork.The 
totalnumberofoperationsperformedoverallthreads. (ii)Tfortime.Thelongestserialchainofoperations. Amongconcurrentthreadsthelongestthreadispicked 
forthechain.Theunderlyingassumptionbeingthat allparallelthreadscanprogresssimultaneously.(iii)S forsynchronizations.OneapproachistocountSpawn-Joinpairs(plusthenumberofserialsteps).Thesecond 
approachisrelative.Itprovidesapartialorderamong algorithms,bycomparingordersofexecutionthatthey allow(asdemonstratedforparallelsummation). 
DiscussionAssumethatsynchronizationisloosely defnedasthearrangementofeventstoindicatecoin­cidenceorcoexistence.Synchronizationintheabove 
virtual(orsynthetic)language-basedmodelisnotex­plicitandactuallyappearstoberatherrelaxed.Since therearenobusy-waitsamongconcurrentthreads,their 
coexistenceduringexecutionisactuallynotrestricted. (However,withineachthreadseparatelytheexecution ofitsinstructionsmustrespectserialsemantics,which 
meansthatout-of-orderexecutionofinstructionswithin athreadmustrespectdependencesamongthoseinstruc­tions.) 
Attheexecutinghardwarelevelsomehardwareparts willgounusedforsometime.TheXMTschedulingof threadstothreadcontrolunits(TCUs),orprocessors, 
in[VDBN98]followsastandardgreedyapproachwhich startsbyfllingupallTCUslots.Then,assoonas someprogramthreadsterminate,newprogramthreads 
areassignedtotaketheirplace.Towardstheendof aSpawn-Joinexecution,therearenomoreunassigned programthreadsandthefeweractiveprogramthreads 
remainthemoreTCUslotsbecomeunused.Thenum­berofactivethreadsgoesdowntooneandstaysatone untilanewSpawncommandisreached.Thisexplains 
why,undersomeassumptions,countingthenumberof Spawn-Joinpairscouldalsoprovideagoodfrstapprox­imationforevaluatinghardwareunderuse.Formore, 
seetheSchedulingLemmain[VDBN98]. PreviewInthenexttwosectionsweconsidertwo problems.(i)Buildingheaps,whichisastandardprob­lem(see[CLR90]).And,(ii)treecontraction,whichisa 
basictechniqueinparallelalgorithmics(see[ADKP89], [CV88a],[KD88],[MR89],[MR91],and[RMM]);these referencesalsodescribeaconsiderablenumberoftree 
contractionapplications. Section4attemptstoputthemaincontributionin context.Werecognizethelimitsofthequantitative 
reduced-synchronymodelasitappliesonlyto\Spawn­Join"parallelalgorithmsbutdoesnotextendtoones thatuseForkcommands.Thepartialordercriterion 
ismoregeneral.Beforedoingthat,ageneralparal­lelprogrammingmethodology,whichisinlinewith theExplicitMulti-Threaded(XMT) 
\PRAM-on-chip" vision,isreviewed.Thisisfollowedbyanexample whichdemonstratesthegapbetweenthetworeduced­synchronymodels. 
2BuildHeap 2.1Basics Thebasisforthealgorithmdescribedinthecurrent sectionistheserialbuild-heapalgorithminChapter7 
of[CLR90]. The(binary)heapdatastructureisanarray A[1:::n]ofnumbers(orelementsfromatotallyordered domain)thatcanbeviewedasacompletebinarytree 
ofnnodes.Theparentofnodeiisnodebi/2c.Theleft childofnodeiisnode2i.Therightchildofnodeiis node2i+1. Aheapshouldalsosatisfytheheapproperty: 
A[PARENT(i)].A[i]. SupposethatanarrayBofsizenisgivenasan input.TheBuildHeapproblemistopermutetheele­mentsofBsothatBsatisfestheheapproperty. 
Theserialalgorithmworksbyiteratingaprimitive calledHeapify.TheinputforHeapifyisasubtreerooted atsomenodei.Nodeimayhaveupto2children.The 
subtreesrootedateachofthemareassumedtoeach satisfytheheapproperty. Heapifyworksasfollows.Itstartsatnodei.Its 
basicstepfndsthelargestkeyamongnodeiandits children.IfthelargestkeywasatnodeiHeapifytermi­nates.Otherwise,itexchangesthekeyatnodeiwith 
thelargestkeyandadvancestothechildjthathadthe largestkey.Thisendsthebasicstep,whichrequires O(1)operations.Heapifythenappliesrecursivelythe 
basicsteptonodej.Clearly,thenumberofbasicsteps thatHeapify(i)appliesisupperboundedbythelength ofthelongestpathfromitoaleafinitssubtree(the 
heightofitssubtree). Theserialbuild-heapalgorithmworksbyseriallyit­eratingHeapifyforallnon-leafnodesofthebinarytree. 
So,forexampleifniseventheniterateHeapifyn/2 timesforin/2downto1. 2.2No-Busy-WaitBuildHeap Weshowaparallelbuild-heapalgorithmwithjustone 
Spawn-Joinpair.Thatis,S1. Thefollowingsimpleobservationisimportantfor understandingtheasynchronousalgorithm. 
Observation.TheprimitiveHeapify(fromtheserialal­gorithm)canapplytoanodeafteritschildrenhave \cleared"(thatisheapifyhasbeenappliedtothem). 
TheasynchronousBuildHeapalgorithm­overviewTherewillbeathreadforeachnodeof height1inthebinarytree.Thatis,anodewhosechil­drenareallleaves.Wewillalsohavean\enabling" 
counterforeverynodekwhoseheightis2,orhigher. ThecounterisdenotedE(k)forenablingandisinitial­izedto0.So,forexample,ifniseven,andn/2isodd, 
therewillbeparallelthreadsforlocationsn/2downto (n+2)/4andacounterE(k)fork.(n;2)/4. AthreadiwillbeginbyapplyingHeapifytoitsnode 
exactlyasintheserialalgorithm.Then,itwillperform aprefx-sumoperationrelativetoE[PARENT(i)].Ifit wasthefrstchildofPARENT(i)todothat,thethread 
terminates.Ifitwasthesecond,thethreadwillproceed toexecuteHeapifyonPARENT(i).Theniswillad-vancetoitsparent(i.e.,PARENT(PARENT(i)))and 
soon. TimecomplexityWeseekanupperboundonthe lengthofthelongestthread.Thatthreadmayrequire acalltotheHeapifyprimitiveateachlevelofthetree. 
Eachcallrequireuptoasmanybasicstepsastheheight ofthenodeathand.So,thelongestthreadrequires O(log 2 n)operations.ThisisT,theparalleltime. 
WorkcomplexityWeshowthatthetotalnumberof operationsoverallthreadsisO(n).Eachtimeabasic stepoftheHeapifyprimitiveisperformedwechargethe 
nodetowhichHeapifyapplies(notthenodeatwhich thebasicstepisapplied)$1(oneDollar).Toestablish thatthetotalnumberofbasicstepsdoesnotexceed 
nweputinitially$2ateachofthen/2non-leaves ofthetree.Anamortizedanalysiscannowproceedby induction.Theinductivestepwillassumethatupon 
completingaHeapifyatanodeofheighth,atotalof $hremainatthatnode.Itsparentwillinherittherefore atotalof$2hfromitstwochildrenandaddtoitits 
own$2foratotalof$2h+2.ApplyingHeapifytothe parentrequiresatmosth+1basicstepsandtherefore atleast$h+1ofthe$2h+2couldbelaterforwardedto 
theparentofthatparent.Thisconcludestheinductive step.Sofar,thisisnotnew:thesameanalysisapplies totheserialalgorithmaswell.Theonlyoperationsper­formedbytheparallelthreadswhicharenotmatched 
bysimilaroperationsintheserialalgorithmrelatesto theEvariables.Therearenearlyn/4suchvariables andeachisaccessedtwicebyaprefx-suminstruction. 
Thisaddsn/2prefx-sumoperationstothecomplexity oftheserialalgorithm.Thetotalworkwillthereforebe O(n). 
SynchronizationThenumberofSpawn-Joinpairs aboveisonewhichjustifestheattributeno-busy-wait. Itshouldbeclearthatwewentaheadandpresenteddi­rectlyalesssynchronousalgorithm.Therudimentary 
synchronousPRAMalgorithmthatwestartedoutwith (andwhichhasnotbeenpresented)shouldbeobviousto thereader.ItraninO(log 
2 n)lock-stepsanditswork andtimecomplexitieswerethesame.Itshouldalso beclearwhytheno-busy-waitBuildHeapalgorithmis 
\lesssynchronous". SpeedupThespeedupofaparallelalgorithmisthe ratiobetweenactualparallelrunningtimeandthese­rialrunningtimeofthebestserialalgorithm.IfWis 
veryclosetoWser,thetotalnumberofoperationsof theserialalgorithm,goodspeedscanbeexpected.The ratioW/Wofallalgorithmspresentedinthecurrent 
ser paperisupper-boundedbyaconstant.Anexperimental follow-uponthisworkshouldtrytogetacloserevalu­ationofthisconstant.However,asthisworkdoesnot 
includeanexperimentalcomponent,weavoidelaborat­ingonthispoint. 3TreeContraction ThebalancedtreeparadigmTheSummationand 
theBuildHeapalgorithmsfollowasimilarparadigm. Thecomputationadvancesfromtheleavesofabalanced binarytreetotheroot.Ateachnodevofthetree, 
thethreadwhichreachesvfrstterminatesandtheone whichreachesvsecondproceeds. Paralleltreecontractionalgorithmsreceivedconsid­erableattention.Inthenextsection,weshowanunsuc­cessfulattemptforhowtoextendournewno-busy-wait 
balancedtreeparadigmtoparalleltreecontraction;this willbefollowedbyasuccessfulattempt. ConsiderarootedbinarytreeTwhereeachnode 
haseithertwochildren-aleftchildandarightchild­orisaleaf,andletxbealeafofT.Assumethatthe roothastwochildren,andatleastoneofthemhastwo 
children.Wewilldefnetherakeoperationforleaves whoseparentisnottheroot.Letxbealeaf,letybe itsparent(alsocalledthestemofleafx)andubethe 
parentofy,andlettheotherchildofy(whichisalsothe siblingofx)bez.Applyingtherakeoperationtoleafx meansthefollowing:deletexandyandhavezbecome 
achildofuinsteadofy.SeeFigure1.Applyingthe rakeoperationtoaleafxofthebinarytreeT,whose parentisnottherootyieldsatreewhichisstillbinary. 
uu rake x z y x z Figure1:Arakeoperation Aserialtreecontractionschemeappliesrakes inseveralstepsuntilthetreeTbecomesa3-nodebi­narytree(whichconsistsofaroothavingtwoleavesas 
children). Parallelrake.Applyingtherakeoperationinpar­alleltoseveralleavesisconsideredlegalaslongasthe 
followingtwoconditionshold:(i)notwooftheraked leaveshavethesameparent(stem);and(ii)theparent ofastemcannotbeitselfthestemofaleafwhichis 
concurrentlybeingraked.Notethatapplyingalegal parallelrakeoperationtoleavesofthebinarytreeT yieldsatreewhichisstillbinary. 
3.1FirstAttemptAtParallelTreeContraction Aparalleltreecontractionschemeappliesrounds oflegalparallelrakesuntilthetreeTbecomesa3-node 
binarytree.Paralleltreecontractionisanimportant paradigminparallelalgorithms.Specifyingtheexact orderofrakeoperationsgivesaparalleltreecontrac­tionalgorithm.Wecitedaboveseveralsuchknown 
algorithms. Efcientparalleltreecontractionalgorithmshave typicallyreliedonapreparatorystage.Duringthat 
stage,datatoenableschedulingofrakeoperationsare computed.TheEulertourtechniquehasbeenthemain toolforcollectingthesedata.TheEulertourtechnique 
isinturnbasedonparallellistranking. Asbackground,averysimpletreecontractional­gorithmwhosenumberofroundsislogarithmicinthe 
numberofleaves,andissimilarto[ADKP89]and [KD88],ispresented.SupposeThasnleavesandsup­posethattheyarenumberedfrom1toninthesame 
orderinwhichtheyarevisitedin(say)adepth-frst searchofT. TherakingsstageThemainiteration,inwhichthe actualrakingsaredone,follows: 
MainIterationPickLodd,thesubsetoftheleavesL consistingoftheodd-numberedleavesofthebinarytree. LetLleftbeallleavesinLoddwhichareleftchildrenof 
theirparents. Step1ApplyparallelrakestoallleavesinLleft,with theexceptionofaleafwhoseparentistheroot. 
Step2ApplyparallelrakestoallleavesinLodd;Lleft, withtheexceptionofaleafwhoseparentistheroot. Step3L:Leven. 
Werepeatthemainiterationuntila3-nodebinarytree isreached. ComplexityThemainiterationisrepeatedlogn times,andsinceeachleafisnotrakedmorethanonce, 
thistakesatotalofO(n)operationsandO(logn)time. Thecurrentpaperaddressesthefollowingquestion: towhatextentisalesssynchronousalgorithmpossi­ble?However,wehavenotsucceededtoderiveano­busy-waitalgorithmfromtheaboverakingstage.The 
problemisthatsteps1and2aboverequiresuspending \threads".Seealsothecommententitled\Revisiting thefrst(unsuccessful)attempt"attheendofthisab­stract. 
3.2ANo-Busy-WaitApproach Wewillshowawayforimplementingtherakingstage usingthebalancedtreeparadigmandtherebyaccom­plishthedesiredno-busy-waitproperty.However,we 
wereabletodothatonlybydeviatingconsiderablyfrom theabovetreecontractionalgorithm.Infact,inorder todothatourstartingpointwasaratherdiferenttree 
contractionalgorithm.Thepaper[CV88a]1 showshow tousea\centroiddecomposition"ofatreeinorderto frstderiveanO(log2 
n)timetreecontractionalgorithm; italsoshowshowtouseaso-calledacceleratedcentroid decompositionforanO(logn)timealgorithm.Inboth 
casestheworkisO(n). LetSIZE(v)bethenumberofnodesinthesub­treeofTrootedatv.Thecentroidlevelofv, denotedCLEVEL(v),is 
2 dlogSIZE(v)e.Clearly, eachnodevhasatmostonechildusuchthat CLEVEL(u) CLEVEL(v).The centroidpath ofnodevisthelongestdirectedpath,passingthrough 
v,whereallthenodesonthepathhavethesamecen­troidlevel.Thetailofthepathisthenodewhichhas 1 Whatcorrespondstotherakingoperationisdefnedabit 
diferentlyin[CV88a]. 2Thebaseofalllogarithmsinthepaperistwo. nochildreninthepathandtheheadofthepathisthe 
nodewhoseparentisnotinthepath.SeeFigure2. Eachcentroidlevelmayhaveseveraldisjointpaths.The partitionofthenodesintocentroidpathsiscalledthe 
centroiddecompositionofT. Figure2:Centroidpathatleveli+1 Wealreadyexplainedwhatwemeanbyapplyingthe rakeoperationtoaleafofthetree.Givenanon-leaf 
nodeofthetreethathasachildwhichisaleaf,wesay thatweapplyarakeoperationtothenodewhenever weapplyittoitsleafchild.Ifthenodehastwoleaf 
children,applyrake(symbolically)tooneofthem.No confusionwillarise. Formotivationpurposeitwillbeusefultofrstde­scribeasynchronousO(log2 
n)timetreecontractional­gorithmwhichissimilartotheO(log2 n)timealgorithm in[CV88a].Theideaistofrstapplytherakeopera­tionstothenodesofcentroidlevel2,thencentroidlevel 
3andsoon.Sinceeachcentroidlevelconsistsof(dis­joint)paths,thiscouldbedoneforallpathsinparallel, asfollows.Rakeoddnumberednodesineachpath; 
thenrakeoddnumberednodesintheremainingpath, andrepeatinuptoO(logn)rounds. Wenowproceedtodescribeourno-busy-wait 
O(logn)roundsrakealgorithmusingthebalancedtree paradigm.TheideaistobuildabalancedtreeBwhich willguidetherakeinstructionsinawaywhichisremi­niscentofthelesssynchronousalgorithmsintheprevi­oussections. 
DeterminingtheparentinBForeachinternal (non-leaf)nodeofT,weshowhowtodetermineits parentinB.Consideracentroidpathatleveli+1. 
Lettbeitstailandditshead.Incasethecentroid pathhask>1nodes,theideawillbeto\partially order"thenodeswithinthepathinabinarytreeform. 
Denotethenodesofthepathv1,v2,:::,vkwherev1 is tandvkisd.Lets1,s2,:::,sk,respectively,denote SIZE(v1),SIZE(v2),:::,SIZE(vk),respectively.We 
specifynexthowmostnodesinthecentroidpathdeter­minetheirparentinB.Ascanbeseenlater,determin­ingtheparentsoftandonemorenodeofthecentroid 
pathrequiresmoreattention.Considerthebinaryrep­ resentationofs1,s2,:::,sk,andletai,2ik,denote the(indexofthe)mostsignifcantbitinwhichsiand 
si;1 difer.Foreachai,2 ik,fndthesmaller amongitstwonearestlargerelements.Thatis,frst fndthetwonearestelementsamonga2,:::,athatare 
largerthanai(ifsuchexist):theleftnearestlargerele­mentaj >a(withj.i)andtherightnearestlarger k i elementaf 
>a(withf>i);second,amongthese itwofndtheonewhichissmaller;denoteitbybi.Node biwillbetheparentofnodeaiinB.Twonodesinthe 
centroidpathareyetwithoutparents.Nodetandthe nodeviwhoseaivalueisthelargestfor2ik.The parentofviistandtheparentoftisPARENT(vk).A 
nodeinthecentroidpathmayhaveupto3childrenin B.Twofromthecentroidpathitselfandonethrough itschildwhichisoutsideitscentroidpath. 
LemmaLethlognbeanon-negativeintegerand letvbeanodeinTforwhichhC;LEVEL(v). LetH(h)denoteanupperboundontheheightofvin 
B.ThenH(h)H(h;1)+2. CorollaryH(i)2i;3.ThisissinceH(2)1 andthereisequalityifn4. Timecomplexity:Thenumberofoperationsinthe 
longestthreadisO(logn).Workcomplexity:Thetotal numberofoperationsoverallthreadsisO(n). Synchronization.Therakingaboveisdoneusinga 
singleSpawn-Joinpair. CommentInviewofthekindofsuperscalararchi­tecturesthatwehaveseeninrecentyearsandtheir 
\hunger"forinstruction-levelparallelism(ILP),wenote aninterestingpropertyofthetreecontractionalgo­rithm(andpossiblyotherapplicationsofthebalanced 
treeparadigm).Supposethatnotonlythenodecur­rentlyvisitedbyathreadisreadyforprocessing,but alsothenodewhichisitsparent.Inthiscase,some 
\look-ahead"contractioncouldbeusedtocutfurther theprocessingtimebywayofmoreILP. ThepreparationstageFollowing[CV88a],wenote 
thatallthedataneededfortherakingalgorithmcould befoundthroughsimplereductiontoparallellistrank­ingalgorithms,usingtheEulertourtechniquewithone 
exception:thecomputationoftheright(andleft)near­estlargerelements,whichisisaninterestinginstanceof theallnearestsmallervalues(ANSV)problem[BSV93]. 
PracticalXMTlistrankingtechniqueshavebeendis­cussedin[DS99].Wehavenothingnewtoaddabout thisstagebeyond[CV88a]and[DS99]. 
Ano-busy-waitparallelalgorithmforourANSV problemWereferthereaderto[BSV93]forback­groundandPRAMalgorithmsfortheANSVproblem. 
Next,wejumpdirectlytotheno-busy-waitalgorithm. Givenareanarrays1,s2,:::,skofsizek,wherethesi values,k,ai,2ik,andnareallasabove.Forsim­plicityweassumethatlognisanintegerwhichdivides 
k.Wepartitionthearrayofsizekintok/lognblocks ofsizelogneach.Eachblock\defnes"athread.First, thethreadfndsthelargestaiinitsblock(byserially 
visitingthelognelements),denotedab.Second,inlogk stepstherightnearestlargerelementofab,denotedax, isfound;thisisdoneusingbinarysearch;eachbinary 
searchstepcomprisesofcomparingabwiththemost signifcantbitinwhichsbandsidiferforsomei>b. Theunderlyingobservationisthattheminimumvalue 
overtheintervalab+1,ab+2:::aisthe(indexofthe) i;1 mostsignifcantbitinwhichsbandsidifer.(Notethat thisobservationistheonlydiferencebetweenthegen­eralANSVproblemandtheinstanceconsideredinthe 
currentpaper.) Third,thethreadcontinuesto\merge"elementstothe rightofab(producingtheirrightnearestlargerelement) 
withelementsfromaxandtoitleft(producingtheir leftnearestlargerelement).Followingeachroundof thismergethelengthoftheintervaldecreasesbyone 
anditsmaximumelementiscomputed(again,basedon theaboveobservation).Themergingwillstoponcethe valueofthemaximumelementexceedsthevalueofany 
oneofitsendpoints.(Ofcourse,ifaxbelongtothe successiveblockofab,themergingwillendwhenthe workontheintervalisfnished.)Thesame(oranother) 
threaddoessomethingsimilartothesecondstagefor fndingtheleftnearestlargerelementofab,denoteday andthenproceedstoamergingstage.Thisendsthe 
descriptionofathread. CorrectnessLemma.Foreveryai,2ik,exactly oneofthethreadswillfnditsrightnearestlargerel­ement(ifexists)anditsleftnearestlargerelement(if 
exists). ApplicationsoftreecontractionThemostknown applicationsareinthedomainofexpressiontreeeval­uation.Thecasewhereonlyadditionsandmultiplica­tionareallowedcanbegeneralizedtoallowingdivisions. 
Treecontractionworksalsoforseveralgraphproblems, suchasminimumvertexcover,whichhavealineartime leaves-to-rootserialalgorithmforinputswhicharetrees. 
See[ADKP89],[CV88a],[KD88],[MR89],[MR91],and [RMM]fortheseandothertreecontractionapplications. Revisitingthe.rst(unsuccessful)attemptSim­plyrunningoncethesynchronousrakingstage(inatyp­icaltreecontractionalgorithm)wouldyieldabalanced 
tree.Thebalancedtreeparadigmcouldhavethenbeen applied.However,inthecurrentpaperwedidnotallow addingoneroundofsynchronousrakingtotheprepa­rationstage.Thiscouldhaveneverthelessmadesense 
forrecomputationsofthesameexpressiontree. 4AnXMTProgrammingMethodology OneoftheSPAAreviewersaskedtoseeamethodol­ogywhichwouldextendbeyondrelativelysimpleand 
concreteexamples.Sections4.2and4.3trytoaddress that.But,frst,wesawaneedtoextendthealgorith­micmodelbyallowinganestedforkinstruction.This 
isanewelementforXMT.Second,wepresentthepro­grammingmethodology.Wechosetodothatbyway ofanalogytothe\parallelarchitectureprogramming 
methodology"inthebook[CS99].Modelingofreduced synchronyisdiscussedinSection4.3. 4.1AddingForktotheXMTmodel 
WeextendthealgorithmicmodelbyallowingtheFork instructionintheXMTSPMDlanguage-basedmodel. ThebasicXMTmodel,in[VDBN98],allowedswitch­ingfromserialstatetoparallelstateusingaSpawn 
instruction,butdidnotallownestingofSpawninstruc­tions.TheForkinstructionallowsanexistingthread toforkofanotherthreadandproceed.Theprogram 
fortheforkedthreadwillbethesameSPMDprogram asoftheforkingthread.Theforkingthreadwillini­tializetheneededdatafortheforkedthread.While 
possibleimplementations,evenattheleveldiscussedin [VDBN98],arebeyondthescopeofthecurrentpaper, wenotethat:(i)thefgureofthenumberofthreads 
currentlyexecutedunderthecurrentSpawn-Joinpair willbeincremented(usingprefx-sums);(ii)theforking threadwillassignanIDtotheforkedthread(again, 
usingprefx-sums);theforkedthreadwillbeexecuted whenitsturnwillarrivebasedonitsID;(iii)execution ofthecurrentSpawn-Joinpairendsonceallthethreads 
initiatedbytheoriginalSpawncommand,orthrough achainofForkcommands,terminated.Enhancing XMTusingnestableForkcommandslookstotheau­thorpreferabletotwoalternativeoptions:(i)leavethe 
XMTmodelwithoutnesting,and(ii)nestingofSpawn commands(asproposedintheEMTmodelmentioned in[VDBN98]);thereasonsbeingthatimplementation 
couldusemechanismssimilartothebasicXMTSpawn, andsimpleprogramming(andefcientimplementation) ofmanymorealgorithmsbecomespossible.Morework 
isneededtoevaluatethisassessment. 4.2TheProgrammingMethodology in[CS99].The\parallelarchitectureprogramming 
methodology"in[CS99]wasdesignedforreducingdata access,communicationandsynchronizationcostforcur­rentmulti-processors.Asdescribedin[CS99],itcom­prisesnotonlyaparallelprogrammingmethodologybut 
alsoperformanceevaluation.Thebookpreviewsthe methodologyinitsChapter2.2.Thejobofcreatinga parallelprogramfromasequentialoneconsistsoffour 
steps:(i)decompositionofthecomputationintotasks; (ii)assignmentoftaskstoprocesses(thebooksrefers toprocessesandthreadsinterchangeably);(iii)orches­trationofthenecessarydataaccess,communicationand 
synchronizationamongprocesses;(iv)mappingorbind­ingofprocessestoprocessors.Thebookalsocomprises abroadexperimentalevaluationofvariousprograms 
thathavebeendevelopedusingthismethodology;it focusesontwomainmeasurements:(i)Speedupsofpar­allelprogramsonp-processormachinesrelativetothe 
performanceofthesameprogramswhenrunonama­chineemployingoneprocessor.(ii)Comparisonrelative totheprogram'sperformanceonap-processorPRAM 
model.Thebookreasonsthatthefrstmeasurement conveystheoverallsuccessinparallelizingaprogram, whilethesecondconveysdifcultiesduetothecostof 
communication(ascommunicationcostsareabstracted awayinthePRAMmodeling). TheproposedprogrammingmethodologyThe 
analogousmethodologyfortheExplicitMulti-Threaded (XMT)approachisfundamentallydiferent(asillus­tratedinthesecondcolumnofFigure3).Infact,it 
startswithconsideringwhichalgorithmtopick,andhas twomoresteps:(i)step-by-stepparallelism:reducethe stepcountofthealgorithmbyexecutingineachstepas 
manyparalleloperationsaspossible(inasynchronous, step-by-stepPRAM-likemanner).(ii)threading:as­ signmentofoperationstothreads;longthreadsare 
soughtto reducesynchronizationandtoincrease locality.Therestistobedoneautomaticallybythe XMTsoftwareandhardwarecomponents. 
Thecurrentpaperquantifedtheextenttowhichthe balancedtreeparadigm{themaincontributionofthe currentpaper{helpedthethreadingefort.However, 
whiletheprogrammingmethodologyisdescribedabove ingeneraltermswedon'tseeageneralwayforquan­ tifyingthethreadingefort.TheDAGsearchexample, 
presentedlater,demonstratestheproblem. PARALLEL PROGRAMMING METHODOLOGIES Parallel Computer Architecture 
XMT assignment orchestration  Figure3:Culler-Singh'sParallelComputerArchitec­tureprogrammingmethodologyversustheXMTone. 
TheLevelofParallelismdenotedPis(foranILP architecture)thenumberofinstructionswhoseexecu- tioncanoverlapintime.Pcannotexceedtheprod­uctofthenumberofinstructionsthatcanbeissuedin 
oneclockwiththenumberofstagesintheexecution pipeline.(Thepopulartext[HP96]statesinp.330 that\realistichardwaresupportthatmightbeattain­ableinthenextfveto10years"[from1995,whenthat 
textcameout]includes\Upto64instructionissuesper clockwithnoissuerestrictions";so,astandard5-or 6-stagepipelineleadstoPexceeding300.Itishardto 
guesswhy,inspiteofthisstatement,Phasonlymoder­atelyincreasedsince1995;perhaps,thisisbecauseven­dorshavenotfoundawaytoharnesssuchanincrease 
forcostefectiveperformanceimprovementofexisting code.) Ourtypicalmeasurement(in[VDBN98])hasbeen speedupsonanXMTexecutionmodelrelativetothe 
performanceofthefastestserialprogramforthesame problem(whichcouldbecompletelydiferentthanthe parallelprogramexplored)onasingleprocessor.The 
singleprocessorsinglethreadILPexecutionmodelis similartotheintra-threadILPofasingleXMTthread. See[VDBN98]. 
4.3ImplicationforModelingReducedSyn­chrony AddingnestedForkcommandstoXMTmakescount­ingthenumberofSpawn-Joinpairs(plusthenumber 
ofserialsteps)farlessrelevant.Itleavesusonlywith thepartialordercriterion(ofSection1.1)forevaluating 
synchronization.Asindicated,thiscriterionismean­ingfulonlyiftwoalgorithmsthatperformasufciently similarsetofoperationsarecompared.Thefollowing 
example,togetherwiththelatercommentontheliter­ature,demonstratethatthemodelingproblemsarenot limitedtoXMT. 
Example:Searchofdirectedacyclicgraphs(DAGs). GivenaDAG,considertheproblemoffndingthelength ofitslongestpath,countingedges.Arathernatu­ral\topologicalsort"algorithmwillfrstinitializean 
INDEGREEcounterofeachvertextothenumber ofitsincomingedges.Then,thealgorithmwillstart with\processing"inparallelallverticeswhichhave 
noincomingedges(i.e.,whoseindegreeis0initially). Processingavertexvmeansthefollowing:foreach edge(v,w)whosetailisvandheadisw(i.e.,(v,w) 
isanoutgoingedgeofvandanincomingedgeofw) \decrement"INDEGREE(w);onceINDEGREE(w) isdecrementedto0,vertexwisalsoprocessed.Incor­poratingpathlengthcomputationintothetopological 
sortalgorithmisstandard. Programmingalternatives:(1)[CLR90]showshowa (serial)depth-frstsearchcouldbeusedtoimplement 
suchanalgorithm.(2)ASpawn-Joinparallelap­proachcouldstartinafrststagewithaSpawnto processall(theoutgoingedgesof)theverticeswhose 
INDEGREEis0.Asecondstageprocessesallver­ticeswhoseINDEGREEwasdecrementedto0inthe frststage,andsoon. Theabovetopologicalsortdescriptionsuggestsstarting 
aSpawnateachvertextobeprocessed.Sincethiscould behardtoimplement,severalalternativescanbecon­sideredsuchastheonethatfollows.(3)UseSpawnto 
instructprocessingalltheverticeswhoseINDEGREE is0.OncetheINDGEREEofanyothervertexis decrementedto0,startprocessingthatvertex;thein­structtoprocesssuchvertexstartswithasinglethread; 
usingrepeatedforkingathreadwillbecreatedforeach ofthe,say,doutgoingedgesofthevertex;toreducepar­alleltime,wewilluseastandard\balancedbinarytree" 
ofheightlogdtoguidetheforkings;thatis,thefrst threadwillForkanotherthread;eachofthetwothreads willForkathread,theneachofthefourthreadswill 
Forkathread,andsoon,untilwegetdthreads.Note thatprogram3isfullyencompassedwithinoneSpawn­Joinpair.However,therequirementthatthreadster­minatepriortoprocessingavertex,tobefollowedby 
laterstartingotherthreadsisaformofsynchronization. Thefollowingcommentonmodelingreducedsynchrony fortheaboveDAGssearchprogramselaboratesfurther: 
CountingSpawn-Joinpairsisstillvalidforcomparing thesynchronizationrequirementsinprograms1and2 above.However,onlythepartial-ordercriterioncould 
helpforcomparingthesynchronizationrequirementsin programs2and3oralternativessimilartoprogram3. LiteratureWaystocontrolparallelexecutionhaveat­tractedconsiderableattentionsinceatleasttheearly 
1960s.Forthesakeofbrevity,wereferthereaderto p.148in[AG94],whichreviewsthemultiprocessinglit­eratureandgivestheneededbackgroundfortheways 
describedinthecurrentpaper. FutureworkItwillbeinterestingtodevelopmorere­ducedsynchronyparadigms,suchasthebalancedtree 
paradigmpresentedinthecurrentpaper.Themod­elingpartofthisworkhadonemainpurpose:help quantifythereducedsynchronyaspectofthebalanced 
treeparadigm.Wealsoshowed,theabovepartialor­dercriterionispotentiallyveryusefulwhenconsider­ingalternativesduringthethreadingstageinthepro­posedprogrammingmethodology.However,forcom­paringprogramsthatresultedfromalgorithmswhich 
aresufcientlydiferentnewmodelsmaybeneeded. AcknowledgementHelpfulcommentsbyOmer Berkman,VincenzoLiberatore,JoeNuzmanandthe 
SPAAreviewersaregratefullyacknowledged. References <RefA>[AG94] G.S.AlmasiandA.Gottlieb.HighlyPar­allelComputing.Benjamin/Cummings, 
1994. [ADKP89]K.N.Abrahamson,N.Dadoun,D.A. Kirkpatrick,andT.Przytycka.Asim­pleparalleltreecontractionalgorithm.J. 
Algorithms,10(2):287{302,1989. [BSV93] O.Berkman,B.SchieberandU.Vishkin. Optimaldoublylogarithmicoptimalpar­allelalgorithmsbasedonfndingallnear­estsmallervalues.J.ofAlgorithms 
14:344{370,1993. [CV88a] R.ColeandU.Vishkin.Theaccelerated centroiddecompositiontechniqueforop­timalparalleltreeevaluationinlogarith­mictime.Algorithmica,3:329{348,1988. 
[CLR90] T.H.Cormen,C.E.LeisersonandR. L.Rivest,IntroductiontoAlgorithms, McGraw-Hill,1990. [CS99] D.E.CullerandJ.P.Singh.ParallelCom­puterArchitecture.MorganKaufmann, 
1999. [DL99] W.J.DallyandS.Lacy.VLSIArchitec-ture:Past,Present,andFuture,Proc. AdvancedResearchinVLSIConference, 
Atlanta,March1999. [DS99] S.DascalandU.Vishkin.Experi­mentswithlistrankingforExplicit Multi-Threaded(XMT)instructionpar­allelism(extendedabstract).InProc. 
3rdWorkshoponAlgorithmsEngineer­ing(WAE'99),London,U.K.,July1999. [Gi93] P.B.Gibbons.AsynchronousPRAMal­gorithms.InSynthesisofParallelAl­gorithms,J.H.Reif(editor),Morgan­Kaufmann,1993,957{997. 
[HP96] J.L.HennessyandD.A.Patterson.,Com­ puterArchitecture-AQuantitativeAp­ proach,2ndEdition.Morgan/Kaufmann. 
1996. [KD88] S.R.KosarajuandA.L.Delcher.Opti­malparallelevaluationoftree-structured computationsbyranking.InProc. 
ofAWOC88,LectureNotesinCom­puterScienceNo.319,pages101{110. Springer-Verlag,1988. [MR89] G.L.MillerandJ.H.Reif.Paralleltree 
contractionpart1:fundamentals.Ad-vancesinComputingResearch,Vol5,47{ 72,1989. [MR91] G.L.MillerandJ.H.Reif.Paralleltree 
contractionpart2:furtherapplications. SIAMJ.Computing20(6),1128-1147, 1991. [RMM] M.Reid-Miller,G.L.MillerandF.Mod­ugno.Listrankingandparalleltree 
contraction,J.H.Reif(editor),Morgan­Kaufmann,1993,115{194. [VDBN98]U.Vishkin,S.Dascal,E.Berkovichand 
J.Nuzman.ExplicitMulti-Threading (XMT)bridgingmodelsforinstruction parallelism(extendedabstract).InProc. 
SPAA'98,1998.Forgreaterdetailseethe extendedsummaryunder www.umiacs.umd.edu/~vishkin/XMT/.</RefA>  
			
