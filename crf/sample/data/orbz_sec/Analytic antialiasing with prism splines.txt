
 Analytic Antialiasing with Prism Splines Michael D. McCool. Computer Graphics Laboratory, University 
of Waterloo ABSTRACT The theory of the multivariate polyhedral splines is applied to an­alytic antialiasing: 
a triangular simplex spline is used to represent surface intensity, while a box spline is used as a .lter. 
Their con­tinuous convolution is a prism spline that can be evaluated exactly via recurrence. Evaluation 
performance can be maximized by ex­ploiting the properties of the prism spline and its relationship to 
the sampling grid. After sampling, digital signal processing can be used to evaluate exactly and ef.ciently 
the sampled result of any analytic spline .lter in the span of the box spline basis used as the original 
analytic .lter.  1INTRODUCTION Splines are most often used in computer graphics as modelling prim­itives. 
However, their powerful approximation and signal process­ing properties can also be used to advantage 
in the representation and processing of image intensities. A long-standing problem in computer graphics 
is aliasing: the appearance of jaggies, Moir´e patterns, and other undesirable arti­facts caused by undersampling. 
Under the assumptions of linear systems theory, aliasing can be eliminated by convolving the im­age with 
a low pass .lter before sampling [16]. For images, doing such .ltering exactly requires a multivariate 
integration, which is not only often analytically dif.cult but requires a representation of the image 
as a generalized function de.ned over the real plane. The multivariate polyhedral splines provide a mechanism 
for both the representation of the image and the exact analytic computation of the convolution. Polyhedral 
splines are formed from sums of multivariate piece­wise polynomial basis functions de.ned by the projection 
of n­dimensional convex polyhedra (or more correctly, polytopes) into m-dimensional space, with m:n. 
Some examples are given in Figure 1. Polyhedral spline basis functions are generalizations of the univariate 
B-spline basis functions; the latter can be viewed either as projections of simplicesyor (in the uniform 
case) hyper­cubes. An important property of the polyhedral splines is the fact that convolving two polyhedral 
spline basis functions is equivalent to projecting the Cartesian product of the two de.ning polytopes. 
*Department of Computer Science, University of Waterloo, Waterloo, Ontario, Canada N2L 3G1, (519) 888-4567 
x4422, mmccool@cgl.uwaterloo.ca http://www.cgl.uwaterloo.ca/ mmccool/ yA simplex is a generalized triangle, 
de.ned as the convex hull of n1 points in R n.See Gr¨unbaum [10]. Permission to make digital/hard copy 
of part or all of this work for personal or classroom use is granted without fee provided that copies 
are not made or distributed for profit or commercial advantage, the copyright notice, the title of the 
publication and its date appear, and notice is given that copying is by permission of ACM, Inc. To copy 
otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission 
and/or a fee. &#38;#169;1995 ACM-0-89791-701-4/95/008 $3.50 This elegant convolution property can be 
used to derive .ltering al­gorithms for analytic antialiasing. Our result advances the state of the art 
by providing not only high quality analytical antialiasing but also a connection to a variety of useful 
spline techniques. Polyhedral spline techniques can also po­tentially be extended to other rendering 
tasks that require multivari­ate integration. AB C D Figure 1: Some sample polyhedral spline basis 
functions and maps of their discontinuities. Multivariate generalizations of B-spline ba­sis functions, 
polyhedral spline basis functions are projections of n­dimensional convex polytopes. On the left (A,B) 
we show two box splines, which are projections of hypercubes. The prism splines on the right are formed 
by (C) convolving a triangle with a segment (a degenerate 1D box spline) and (D) a square (a 2D box spline). 
 2BACKGROUND AND PRIOR ART Both antialiasing and polyhedral splines have had a long history of development 
in their respective subdisciplines. Here a short review of the relevant theory is given, along with some 
highlights of the literature. 2.1 Analytic Antialiasing We review only analytic or near-analytic antialiasing 
techniques here, and assume the reader is familiar with the linear theory de­scribing the causes of aliasing 
[16]. Approximate supersampling and subdivision techniques for antialiasing are also important, but are 
beyond the scope of this paper, as are speci.c techniques for texture antialiasing. We also only consider 
linear convolutional an­tialiasing, although other, nonlinear approaches are possible [12]. Feibush, 
Levoy and Cook [6] proposed a table based near­analytic antialiasing technique that could .lter constant 
shaded polygons with radially symmetric .lter functions. This approach was based on the precomputation 
of antialiased triangles and the decomposition of general polygons into summations of triangles. Grant 
[9] generalized this technique to antialiased motion blur, us­ing a tetrahedral decomposition of space-time. 
Area sampling, as proposed by Catmull [2], was the .rst truly an­alytic antialiasing technique. Area 
sampling clips polygons to the extent of each pixel and weights the contribution of each polygon to the 
pixel by its clipped area. This technique can only support constant shaded polygons and box .ltering, 
and is not entirely suc­cessful at removing aliasing artifacts. By scaling the .lter, Catmull could approximate 
motion blur but without proper interpenetration or occlusion. Extensions of area sampling include beam 
[11] and cone sampling [1], which are generalizations of ray tracing. Duff [5] extended Catmull s approach 
by replacing the area com­putation with a contour integral. He also describes several opti­mizations 
that exploit the coherence of scan-conversion. In theory, Duff s technique can handle any .lter function 
and any intensity variation as long as the required integrals are computable. How­ever, both Duff and 
Catmull s techniques require potentially expen­sive clips to the boundaries of each pixel. Finally, Max 
[13] proposed a hybrid scanline technique which an­alytically antialiases one dimension and supersamples 
in the other.  2.2 Polyhedral Splines Only a short sketch of the relevant polyhedral spline theory is 
possi­ble here. The reader is referred to the references [4, 8, 14] for more information. Polyhedral 
spline basis functions are based on projections of n­dimensional convex polytopes into n-dimensional 
space. Simplices lead to simplex splines, hypercubes lead to box splines, and in.nite polyhedral cones 
lead to cone splines. The cone splines are a gen­ n eralization of the truncated power functions [max(xF0)]used 
in univariate B-spline theory. nm If 2is an mXnprojection matrix that maps Rto Rand B m is a convex n-dimensional 
polytope, then at the point x2Rthe value of the polyhedral spline MB(xj2)is givenzby -1 MB(xj2) voln-m2xB. 
Here we use the set-valued inverse 2-1,where 2-1 xis an (n-m)­dimensional af.ne subspace given by fz:x2zg; 
thus the value of a polyhedral spline at a point is equal to the (n-m)-dimensional volume of the slice 
of the de.ning polytope that projects to that point. Polyhedral splines satisfy the following recurrence 
[8] which is a generalization of the de Boor recurrence for univariate B-splines. Let the convex n-dimensional 
polytope Bhave sfaces Bieach of dimension n-1. Let each face Bihave normal ni,and let bibe any point 
in the plane of Bi.Then Bilies in the af.ne subspace given n by all points ysuch that ni.(bi-y)0.Let 
z2Rbe any point that satis.es x2zwith x2R m.Then s X (n-m)MB(xj2) ni.(bi-z)MBi(xj20 i). i=1 Here 20is 
a projection of 2to the plane of Bi. i Box splines are projections of the unit hypercube n Xni=1[0F1]; 
they have the following property, which is reminiscent of the recursive convolutional de.nition of the 
uniform univariate zThis is an informal de.nition. Formal de.nitions are based on a test function ¢from 
a given continuity class and the distributional identity RR MB(xj3)¢(x)dx=¢(3z)dz. mn RR B-splines: 
M0(x) 8(x); Z 1 M (xj2) M (x-Tej2ne)dT. n n.1nn 0 Here 2nerefers to the removal of the column vector 
efrom 2. nn The column vectors eof the projection matrix 2can be interpreted i as the directions in 
which the spline is smeared during each step of the above recursion. Often, these direction vectors will 
be repeated, in which case we say eis of multiplicity ji. It should be noted that i the m-dimensional 
uniform tensor product B-spline basis is a box spline with only munique direction vectors; the multiplicity 
of each direction vector determines the order of the spline in that direction. A simpler evaluation recurrence 
can be derived speci.cally for box splines. Assume that there are runique vectors e22, each i with multiplicity 
ji. Choose mvectors eF...Fefrom 2that j1 jm form a basis of R m, and invert this basis to .nd zsuch 
that x2z, P m with x e; set the remaining n-melements of zto k=1zjkjkn zero and index them with fjkgm+1. 
Now the recurrence is given by (n-m)M n (xj2) m X zjkM n.1 (xj2nejk) k=1 m X +(jjk-zjk)M(x-ej2ne) n.1jkjk 
k=1 n X +jjkM n.1(x-ejkj2nejk). k=m+1 The recursive convolution property satis.ed by box splines is 
an instance of an important general theorem. If MF(xjF)and MG(xjG)are polyhedral splines, then their 
convolution is a poly­hedral spline derived by forming the Cartesian product of the poly­topes Fand Gand 
concatenating the projection matrices: MF(xjF)*MG(xjG) MFG(xj[FFG]). When Fis the interval [0F1]and 
Gis a unit hypercube, the convo­lution property of the box splines given above develops. However, if 
the polytopes Fand Gare of different types, a hybrid is formed. A prism spline is a hybridization of 
a simplex spline and a box spline. 3PRISM SPLINE EVALUATION Simplex splines can support the approximation 
of functions de.ned on arbitrary triangular grids [3, 7]. Images that arise in rendering can be cast 
in this form by tessellation of curved objects, geometric hid­den surface removal, and .nally subdivision 
of any non-triangular polygons. Gouraud shading corresponds to the use of linear inter­polation and can 
be evaluated with a sum of three linear simplex splines. A linear simplex spline is the projection of 
a tetrahedron into two dimensions. If two corners of the tetrahedron project to a single vertex of a 
triangle, a function results which has a triangu­lar support, is zero at the corners corresponding to 
the projections of the single vertices of the tetrahedron, and ramps linearly up to the remaining double 
vertex corner. By mapping the extra vertex of the tetrahedron to each corner of a triangle in turn we 
derive the ba­sis functions for linear interpolation. Gouraud shaded triangles will provide the examples 
we will use in our results. Other choices, in­cluding higher order simplex splines, are also possible. 
Once the image function has been described as a summation of simplex spline basis functions, it can be 
.ltered by convolving each simplex spline with a box spline .lter. The .ltered image is thus a summation 
of prism splines. An evaluation recurrence for a prism spline can be derived by slicing a higher-dimensional 
box spline [14]. This is convenient be­cause the box spline already has a simple evaluation recurrence 
and we can avoid a derivation of the prism spline recurrence from .rst principles. However, the basic 
recurrence is too expensive, so in Section 3.2 we give several techniques for optimizing the recurrence 
statically and dynamically. Term reuse is particularly important, but we also give incremental algorithms 
which are especially useful in the context of a renderer. 3.1 Prism Spline Recurrence We can evaluate 
a prism spline by slicing a box spline of one higher dimension by a hyperplane. Consider Figure 2. Let 
wbe the last element of each three-dimensional direction vector (i; a three­dimensional box spline is 
described by a matrix 8of ndirection vectors (iarranged as column vectors. Relative to the slice w1, 
direction vectors describing a simplex spline emanate from the ori­gin to the plane w1, while direction 
vectors describing box spline .lters are parallel to this plane and have w0. Figure 2: A prism spline 
can be interpreted as a slice of a box spline. Here the derivation for a constant triangle and a box 
.ltered constant triangle are shown as particular slices of a box spline. Direction vec­tors from the 
origin to the plane de.ne the triangle, while direction vectors parallel to the plane de.ne the .lter. 
Given a matrix 2of ntwo-dimensional direction vectors ede­ i scribing a box spline .lter and a set Vof 
k+1two-dimensional points vjdescribing the vertices of a simplex spline, form the m+ 1Xn+k+1matrix 8as 
follows: ee vv 1 k+1 81 ...n .... 0011 Choose a basis Zof m+1linearly independent vectors from 8, and 
compute zZ -1[xF1]Tfor x2R m. Then a recurrence for the (n+k)th order prism spline Pn+k(xj2FV)is given 
by (n+k-m)Pn+k(xj2FV) X ziPn-1+k(xj2neiFV) e 0]T2Z i X +(ji-zi)Pn-1+k(x-eij2neiFV) e 0]T2Z i X + jiPn-1+k(x-eij2neiFV) 
e 0]T62Z i X + zjPn+k-1(xj2FVnvj). v 1]T2Z j Suppose that we wish to render an image with antialiased 
Gouraud shaded, i.e. linearly interpolated, triangular primitives. We will begin with constant triangles, 
.lter them, and then gener­alize to triangular linear interpolation basis functions. With 8111[(1F(2F(3],let 
M111(xFyFw)M3(xFyFwj8111). The subscript 111is used to indicate the unit multiplicity of each of the 
direction vectors (i[viF1]T . P111(xFy)M111(xFyF1) de.nes an un.ltered constant triangle. Convolution 
of this triangle with a tensor product B-spline for the purposes of .ltering is accom­plished by adding 
the appropriate direction vectors with w0: M111nn(xFyFw)  nn ee xy M111(xFyFw)*M x 2n 0 0 M 3 2n(xj[8F(nF(n])F 
xy where e[1F0]Tand e[0F1]Tare packed into (xand (y xy and each is repeated ntimes. Slice this .ltered 
box spline to obtain a .ltered triangle: P111nn(xFy)M111nn(xFyF1). Finally, we repeat each of the vectors 
de.ning the corners of the triangle in turn to obtain symmetric basis functions for a .ltered linear 
interpolant: P211nn(xFy), P121nn(xFy),and P112nn(xFy). A two-dimensional version of this process is shown 
in Figure 3. Figure 3: In the upper row, the constant and linear interpolation ba­sis functions in one 
dimension are derived by slicing a two dimen­sional box spline. By adding direction vectors parallel 
to the plane of the slice, we can .lter these basis functions, as shown in the lower row. The zjkfactors 
used in the recurrence are coordinates relative to each of the possible choices of direction vectors. 
In order to com­pute the zjkneeded in each term of the recurrence, we have to invert ten (5choose 3) 
3X3matrices. However, most of these inverses are trivial as a consequence of the special form of(yand 
(x. If only one of these vectors is chosen in a given basis, then the correspond­ing inverse computes 
coordinates of a point relative to an edge of the triangle. If two are chosen, coordinates are evaluated 
relative to the corner of a triangle, and the transformation amounts simply to a translation. The one 
non-trivial inverse involves (1, (2,and (3but this is simply an evaluation of the barycentric coordinates 
of a point within the triangle v1v2v3, and can be evaluated through Gouraud interpolation. As with Gouraud 
interpolation, the zjkcoordinates for every choice of three basis vectors from 8can be updated incrementally; 
in addition to the standard barycentric coordinates, six other coordi­nate systems de.ned relative to 
the edges need to be updated. The corner coordinates are so inexpensive to compute that incremental update 
is normally not advantageous. A problem can arise if an edge of a triangle is perfectly (or nearly) horizontal 
or vertical; one of the edge coordinate systems will col­lapse. The theoretically justi.ed solution is 
to set the offending term of the recurrence to zero, as the corresponding transformed polytope has zero 
volume. At polytope edges (which project to discontinu­ities in the spline) it is also important to evaluate 
only one of the incident faces. This can be accomplished by treating the supports of the lowest level 
constant box splines as semi-open.  3.2 Recurrence Optimization Simply following the prism spline evaluation 
recurrence blindly will lead to a combinatoric-time algorithm unsuitable for a render­ing system. Fortunately, 
because of the form of the vectors (xand (ythe recurrence is redundant and the following optimizations 
can be made: 1. Terms can appear more than once in the evaluation tree. By sharing terms the tree can 
be converted into a directed acyclic graph (DAG), resulting in a polynomial-time algorithm. 2. Many 
terms in the recurrence are zero for any given evalua­tion point. This can be exploited dynamically by 
checking the current evaluation point against the convex support of the sub­spline. 3. If a prism spline 
is sampled on a grid de.ned by some of its direction vectors, terms in previous recurrence evaluations 
can be reused. This leads to incremental algorithms. 4. Only two of the basis functions P211nn, P121nn,and 
P112nn need to be evaluated and combined with P111nn, which would be part of either recurrence tree anyway. 
 5. The two remaining basis functions share many of the same re­currence terms, and can be evaluated 
simultaneously. 6. Recurrence terms and coordinate system evaluations from adjacent primitives can be 
reused, particularly along shared edges. 7. A decomposition of the underlying sliced box spline into 
a dif­ference of truncated power functions (cone splines) leads to an incremental algorithm that eliminates 
the need to remem­ber terms from previous recurrences. Unfortunately, this opti­mization risks some numerical 
instability and precludes most other optimizations. 8. Terms of the form P001.k, P010.kand P100.kcan 
be eval­uated as tensor product B-splines. Likewise, terms of the form P011.0, P101.0, P110.0, P0110k, 
P1010k,and Pcan  1100k be evaluated using univariate B-splines. Unfortunately, for higher orders of 
.lters both kinds of terms become relatively sparse. 9. Finally, recurrence terms can be evaluated and 
statically opti­mized of.ine. A code generator can be used to de.ne the inner loop of the scan convertor. 
Some of these optimizations are in con.ict. For example, simul­taneously applying both support culling 
(2) and the cone spline op­timization (7) is not worthwhile, because cone splines have semi­in.nite support. 
Likewise, not all these optimizations lead to the same increase in performance. Some attempt has been 
made to present the most useful optimizations .rst in the list above. In the following sections some 
additional discussion is given to the most useful but less obvious optimizations: recurrence term reuse 
(1), support culling (2) and incremental algorithms (3). 3.2.1 Recurrence Term Reuse The recurrence 
for the prism spline is similar to the de Boor recur­rence for the univariate B-splines. The latter is 
an ef.cient evalua­tion technique because of the existence and reuse of repeated terms. Consider Figure 
4, which shows an application of the de Boor re­currence to evaluate a segment of an order nB-spline 
curve. This algorithm is O(n 2)because of the shared terms; without sharing, it would be O(2n). Now consider 
Figure 5, which shows the recurrence for the prism spline P11111. The recurrence graph is no longer planar, 
but we see that some sharing does occur. For higher orders of .lter, the sharing becomes even more important. 
4-x x-2 4-x 3-x f[0] f[1] 01234 Figure 4: Points on B-spline curves can be evaluated using an O(n 
2)triangular algorithm. The evaluations shown are for the seg­ment of a uniform cubic B-spline over x2[3F4). 
Dashed lines show how a sample at the same joint-relative position, x+12 [4F5), can be evaluated incrementally 
in only O(n)time. The lin­ear weights at each level of the recurrence are shown here without normalization 
factors. The code generator implements term reuse by recording the ex­istence and name of every term 
as it is generated during a postorder traversal of the recurrence tree. This record is called a memo 
table. When a term is needed, the table is .rst checked to see if it has al­ready been computed. To implement 
sharing of terms between the recurrences for the prism splines P211nnand P121nnthe memo ta­ble is simply 
not cleared between the generation of terms. 3.2.2 Support Culling At a given point in the interior 
of the spline typically only a few terms in the recurrence are non-zero. In Figure 5, the non-zero terms 
for an evaluation point are emboldened. We can reduce the amount of work we have to do considerably if 
we can quickly determine which terms are non-zero. The supports of all subsplines are convex, and are 
intersections of a .nite number of halfspaces. The borders of these halfspaces, in turn, are translates 
of an even smaller number of lines. In the case of the tensor product prism spline, three lines are due 
to the edges of the triangle and two are the result of eand e. xy Point-against-convex-support tests 
can be implemented ef.­ciently with outcodes. First, the evaluation point is tested against each halfspace; 
the result (in or out) is stored as a bit in an integer. Figure 5: The recurrence tree of a prism spline 
evaluated at the point indicated with a dot is shown, with non-zero recurrence terms em­boldened. Note 
that shared faces are evaluated twice and that any particular point in the support of the spline only 
involves a limited subgraph of the recurrence tree. These tests can also take advantage of the redundancy 
that exists in the speci.cation of the halfspaces. Halfspaces that are just translates of one another 
can reuse partial results from previous tests, perhaps even short-circuiting later evaluations. Before 
each recurrence term is evaluated, the outcode integer is masked and compared to a bit pattern unique 
to that term. If the bit pattern does not match, the evaluation point is not inside the support of the 
term, and evalua­tion can be avoided. The interior of the triangle is a special case. Here we can drop 
back to simple linear interpolation (in the context of a linearly inter­polated prism spline) because 
in the absence of edge effects a lin­ear function is reproduced under convolution with a symmetric .l­ter. 
Of course, the interior of the triangle vanishes if the minimum dimension of the triangle is smaller 
than the .lter diameter.  3.2.3 Incremental Algorithms Figure 4 shows another optimization in the evaluation 
of the uni­form univariate B-spline: a new sample can be generated in O(n) time if it is spaced at a 
unit distance from the last sample and a subset of the old recurrence terms are recalled. Something similar 
can be done for the prism spline. The exis­tence of eand eresult in many recurrence terms shifted by 
1 in xy xand y. Rather than regenerate these shifted values, the unshifted values can be recalled from 
the last recurrence evaluation. Initial­ization requires setting recurrence terms outside the support 
of the spline to zero. Terms can be recalled for both xand y. This requires storage for an entire scanline 
of partial results and the resulting data move­ment may degrade performance. Scanline incremental algorithms 
remember terms only from the very last evaluation. This limits the performance improvement, but results 
in much less memory use and .ts in quite nicely with scanline rendering.  4DIGITAL POSTPROCESSING The 
prism splines only allow analytic .ltering with box spline ba­sis functions, including as a special case 
the tensor product B-spline basis functions. This is in fact suf.cient to support all analytic .l­ter 
functions that can be expressed as splines relative to these bases, because of the relationship (f(x)*¢(x))(i)f[i]*(B(x)*¢(x))(i). 
 which depends only on the linearity and shift-invariance of con­volution. Here *is continuous convolution, 
*is discrete convolu­tion, ¢(x)is an input signal, and f(x)is a .lter function de.ned by P f(x)f[i]B(x-i)relative 
to a basis function B(x). i No approximations are necessary. If we apply a digital .lter with coef.cients 
f[i]to samples of B(x)*¢(x)at the integers, we will achieve exactly the same result as if we had originally 
applied the .lter f(x)analytically to ¢(x)and then sampled the result at the in­tegers. Since we have 
made no assumptions in the above regarding the dimension of the parameter space, this result also applies 
in mul­tiple dimensions. The result actually applies to any shift-invariant basis function but is most 
useful in the context of a tensor product B-spline basis because of its separability. Useful analytic 
.lters with in.nite support relative to the separa­ble tensor product B-spline basis can be represented 
with ef.cient univariate recursive digital .lters. Recursive .lters reuse old output values to obtain 
in.nite impulse responses with a .nite amount of arithmetic. For example, the inner loop of a causal 
recursive .lter with input sequence g[i]and output sequence f[i]is j1 m XX f[i];ajg[i-j]+bkf[i-k]for 
iincreasing. j=j0 k=1 An anticausal .lter runs in the opposite direction: j1 m XX f[i];cjg[i-j]+dkf[i+k]for 
idecreasing. j=j0 k=1 A linear .lter has m1and so recycles only one output value. A quadratic .lter 
recycles two output values with m2. The fundamental spline and the smoothing spline bases are useful 
alternative antialiasing .lters and can be generated with cascaded causal and anticausal recursive .lters 
[15] with m1and m2 respectively. Fundamental splines interpolate their control points. A recursive .lter 
for converting the control points of a fundamental spline to those for an equivalent B-spline can be 
found by inverting the rela­ *bn c tionship g[i]f[i][i].Here the g[i]are the samples to interpo­ n c 
 late and the discrete centered B-spline basis bn c[i]B(i)with Bn cn-n c (x)B(x+n/2).Let b[i]be the convolutional 
inverse of bn c [i]; it can be generated with a pair of linear causal/anticausal recursive digital .lters 
applied to an impulse 8[i]. Each of these re­cursive .lters only needs to recall one past output value. 
The sequence b -n c[i]when used as the control points for an or­der nB-spline gives the order nfundamental 
spline basis function. This function converges to the sinc function as the order nincreases, and is an 
excellent approximation to the perfect low-pass .lter. If we reconstruct the image with a tensor product 
B-spline as well and ap­ply the fundamental spline .lter twice, we in theory achieve a min­imum least-squares 
representation of the geometric image. Unfor­tunately, this representation rings excessively. Let ¢(x)be 
a signal and g(x)an order 2rspline approximation. The smoothing splines are de.ned as the spline functions 
that min­imize the linear functional Z dr2 g(x) 2(gF¢)(g(x)-¢(x))2 +Adx. dxr R for any positive integer 
rand positive real parameter A. Smoothing splines can be implemented with a pair of quadratic recursive 
.lters that need only remember two past output values. The parameter A controls the balance between the 
.t and the smoothness of the spline, thus providing some control over ringing. If we reconstruct g(x) 
with a fundamental spline rather than a B-spline basis, then A0 corresponds to the perfect least-squares 
reconstruction of ¢(x). These digital .lters can be applied to the output of any antialias­ing system 
that can compute an adequately accurate result relative to a spline basis .lter kernel. However, these 
.lters operate by en­hancing high frequencies. Approximate techniques, i.e. stochastic sampling, often 
hide noise at high frequencies, so enhancement will decrease the signal-to-noise ratio. Images generated 
through ana­lytic antialiasing will not suffer from this problem.  5RESULTS Our prototype implementation 
scan converts one primitive at a time and sums it into a frame buffer. This approach precludes sharing 
of recurrence terms along edges, and assumes that hidden surface removal has already been performed. 
The primitive scan conver­tor supports independent recurrence evaluation at each pixel as well as both 
scanline and xyincremental evaluation. Tensor product B­spline .lters of orders one (box) through four 
(cubic) were imple­mented. A .nely striped sphere tessellated into triangles was used as a test model. 
Use of a sphere permits hidden-surface removal with only back-face culling. The sphere was shaded at 
the vertices of each tri­angle with a Phong lighting model, and each triangle was Gouraud shaded. A point-sampled 
rendering of this model is given in the right half of Figure 6 at a resolution of 200X200. xOn average, 
a triangle covers 2.54pixels in this image over the support of the sphere. To control the reconstruction 
kernel and minimize postal­iasing and halftone interference artifacts, all images have been en­larged 
with a cubic B-spline reconstruction kernel to the resolution of the device.1 Several aliasing artifacts 
are obvious: Moir´e patterns due to the stripes meeting the sampling grid at an angle, jaggies along 
the edges of the stripes, Moir´e patterns at the silhouette due to foreshort­ening, and .nally similar 
problems at the pole of the sphere. In Figure 8 the test case has been rendered with .rst through fourth 
order tensor-product B-spline .ltering. Even the .rst order box .lter, corresponding to area sampling, 
is a signi.cant improve­ment. The cubic .lter essentially eliminates aliasing artifacts, but does result 
in some blurring of the image. To resolve the blurring problem, digital postprocessing can be applied. 
In Figure 7, quadratic and cubic fundamental spline ba­sis functions were used as the antialiasing .lters. 
A double appli­ xAn enlarged 50X50rendering is also shown on the left. 1Unfortunately, space restricts 
us from enlarging these images as much as we would like. Please consider examining the electronic versions 
on the CD-ROM for a critical comparison. cation of the corresponding digital .lter, in conjunction with 
the ap­propriate order of reconstruction kernel, results in a perfect least­squares .t of the output 
image to the geometric input. Unfortu­nately, this image (not shown) suffers from excessive ringing, 
occa­sionally going out of gamut. In Figure 9, the result of a regularized least-squares .lter is shown 
for various values of Aand r2.This .lter tends to the double cubic fundamental .lter as Atends to 0, 
but is controllable. At A0.05, this .lter results in a very high level of quality. 6PERFORMANCE The 
performance of the prism spline evaluation algorithm is pro­portional to the number of terms in the recurrence 
tree that need to be evaluated for each output pixel. The evaluation of each term is roughly proportional 
to one Gouraud interpolation, discounting data movement costs against overlap in the computation of the 
blending factors. Table 1 compares the number of recurrence terms for unopti­mized recurrences, scanline 
(x) incremental recurrences, xyincre­mental recurrences, recurrences with and without term reuse, and 
cone spline (truncated power function) recurrences. We did not im­plement zero term culling. Our .rst 
observation is that unoptimized recurrences are com­pletely unreasonable. Therefore any practical implementation 
must consider some form of optimization. Term reuse is the most straight­forward and least complex optimization 
to implement, and results in major savings. We also note that the number of terms in the cone spline 
is the same as the number of terms in the xyincremental eval­uation. This is to be expected, actually. 
Finally, we observe that the xyincremental evaluation uses about a third of the terms required by the 
scanline (x) incremental evaluation. This has to be balanced against the greater data movement in the 
xyincremental algorithm. In our implementation, the two variants of the incremental algorithm performed 
almost identically. These numbers need to be taken in context. A non-adaptive supersampling algorithm 
on a jittered 8X8grid would require (roughly) 64times as much computation as point sampling, and would 
still only be an approximation. A 3rd order xyincremental prism spline algorithm requires 84terms but 
would compute an ex­act, noise-free answer. We also need to emphasize that this is a pro­totype implementation; 
more optimizations remain to be exploited. 7FUTURE WORK The polyhedral spline framework can be extended 
in many direc­tions: Other polyhedral spline .lter functions ...  Better intensity approximants ... 
 Motion blur using tetrahedral decomposition [9] ...  Antialiased line and volume elements ...  Approximation 
of penumbra ...  Ef.cient execution also needs to be further addressed. Imple­mentation of the zero-cull 
optimization and sharing of terms be­tween adjacent primitives should result in another order of magni­tude 
improvement in performance. Implementation of the zero cull optimization should consider the hierarchical 
nesting of the supports of each of the subsplines. To implement interprimitive term shar­ing, hidden-surface 
removal needs to be closely tied to evaluation of the primitives so information about the relationships 
between prim­itives can be maintained. Terms in Optimized Recurrences nOptimization Number of Terms P211nnP121nnP112nn 
P111nn 1 none 29 29 29 6 2 none 669 669 669 148 3 none 12875 12875 12875 2539 4 none 224961 224961 224961 
39112 1 x incr 20 20 20 5 2 x incr 287 287 287 78 3 x incr 3020 3020 3020 712 4 x incr 28251 28251 28251 
5750 1 xy incr 13 13 13 4 2 xy incr 101 101 101 34 3 xy incr 487 487 487 142 4 xy incr 2149 2149 2149 
538 1 reuse 19 13 13 6 2 reuse 107 54 54 53 3 reuse 343 172 172 195 4 reuse 829 325 325 504 1 reuse, 
x incr 14 9 9 5 2 reuse, x incr 60 27 27 33 3 reuse, x incr 149 58 58 91 4 reuse, x incr 293 105 105 
188 1 reuse, xy incr 10 6 6 4 2 reuse, xy incr 32 13 13 19 3 reuse, xy incr 62 22 22 40 4 reuse, xy incr 
100 33 33 67 1 cone, no reuse 13 13 13 4 2 cone, no reuse 101 101 101 34 3 cone, no reuse 487 487 487 
142 4 cone, no reuse 2149 2149 2149 538 1 cone, reuse 10 6 6 4 2 cone, reuse 32 13 13 19 3 cone, reuse 
62 22 22 40 4 cone, reuse 100 33 33 67 Table 1: Number of terms in various optimized linear and constant 
prism spline recurrences. Also shown are the number of terms in the cone spline recurrence which could 
be used to evaluate the prism spline at some loss in stability. When reuse is enabled we merge the trees 
for the linear prism spline basis functions; the constant prism spline P111nntree is a subtree of the 
P211nntree. Since we only need the P211nn, P121nn,and P111nnterms to form a basis for lin­ear interpolation, 
add the number of terms under the P211nnand P121nncolumns to determine the total number of recurrence 
terms required.  8CONCLUSIONS An analytical antialiasing technique based on the theory of poly­hedral 
splines has been presented. Using the convolutional proper­ties of the polyhedral splines, we can derive 
evaluation recurrences for triangular simplex splines convolved with box spline .lters. We study and 
give results for a linearly interpolated triangle convolved with a tensor product B-spline .lter. Several 
optimization tech­niques are given which are essential to an ef.cient implementa­tion. Through digital 
signal postprocessing, the effect of any .lter spanned by shifted linear combinations of the basic box 
spline .lter can be evaluated. If the .lter is a tensor product B-spline then uni­variate recursive .lters 
can be used to evaluate a regularized least­squares .t of a spline reconstruction to the underlying geometrically 
de.ned image. 9ACKNOWLEDGEMENTS This research was conducted while I was a Ph.D. student under the capable 
supervision of Eugene Fiume at the Dynamic Graphics Project at the University of Toronto. I am indebted 
to Eugene and to all the people at DGP for providing such a stimulating and pro­ductive environment. 
DGP is supported by the National Science and Engineering Re­search Council of Canada and by the Information 
Technology Re­search Centre. My Ph.D. work was supported by an NSERC Post­graduate Scholarship. REFERENCES 
<RefA>[1] Amanatides, John. Ray Tracing with Cones. Computer Graphics (SIGGRAPH 84 Proceedings), 18(3):129 
135, July 1984. [2] Catmull, Edwin E. A Hidden-surface Algorithm with Anti­aliasing. Computer Graphics 
(SIGGRAPH 78 Proceedings), 12(3):6 11, August 1978. [3] Dahmen, Wolfgang, Charles A. Micchelli, and Hans-Peter 
Seidel. Blossoming Begets B-spline Bases Built Better by B­patches. Math. of Comp., 59(199):97 115, July 
1992. [4] de Boor, Carl, Klaus H¨ollig, and Sherman Riemenschneider. Box Splines. Academic Press, 1994. 
[5] Duff, Tom. Polygon Scan Conversion by Exact Convolution. In Jacques Andr´e and Roger D. Hersch, editors, 
Raster Imag­ing and Digital Typography, pages 154 168. Cambridge Uni­versity Press, 1989. [6] Feibush, 
Eliot A., Marc Levoy, and Robert L. Cook. Synthetic Texturing using Digital Filters. Computer Graphics 
(SIG-GRAPH 80 Proceedings), 14(3):294 301, July 1980. [7] Fong, Philip and Hans-Peter Seidel. An Implementation 
of Multivariate B-spline Surfaces over Arbitrary Triangulations. In Proceedings of Graphics Interface 
92, pages 1 10, May 1992. [8] Goodman, T. N. T. Polyhedral Splines. In Collection: Com­putation of Curves 
and Surfaces (Puerto de la Cruz, 1989), volume 307 of NATO Adv. Sci. Inst. Ser. C: Math. Phys. Sci., 
pages 347 382. Kluwer Acad. Publ., Dordrecht, 1990. [9] Grant, Charles W. Integrated Analytic Spatial 
and Temporal Anti-aliasing for Polyhedra in 4-space. Computer Graphics (SIGGRAPH 85 Proceedings), 19(3):79 
84, July 1985. [10] Gr¨unbaum, Branko. Convex Polytopes. John Wiley &#38; Sons, 1967. [11] Heckbert, 
Paul S. and Pat Hanrahan. Beam Tracing Polygonal Objects. Computer Graphics (SIGGRAPH 84 Proceedings), 
18(3):119 127, July 1984. [12] Kajiya, James T. and Mike Ullner. Filtering High Quality Text for Display 
on Raster Scan Devices. Computer Graphics (SIGGRAPH 81 Proceedings), 15(3):7 15, August 1981. [13] Max, 
Nelson L. Antialiasing Scan-line Data. IEEE Computer Graphics and Applications, 10(1):18 30, January 
1990. [14] McCool, Michael D. Analytic Signal Processing for Computer Graphics using Multivariate Polyhedral 
Splines.PhD the­sis, University of Toronto, Department of Computer Science, 1995. Also available as Technical 
Report CS-95-05 from the University of Waterloo, Department of Computer Science, or from ftp://dgp.utoronto.ca:/pub/mccool 
[15] Unser, Michael, Akram Aldroubi, and M. Eden. B-spline Signal Processing. IEEE Transactions on Signal 
Processing, 41(2):821 848, February 1993. [16] Watt, Alan and Mark Watt. Advanced Animation and Render­ing 
Techniques. Addison-Wesley, 1992. </RefA> Figure 6: Point sampled 200X200and 50X50test images, recon­structed 
with a cubic B-spline kernel.   Figure 8: Test model analytically .ltered with tensor product B­spline 
.lters, orders one through four.  
			
