
 AN INTERNETWORK MESSAGE STRUCTURE Jonathan B. Postel USC / Information Sciences Institute I. Introduction 
and Overview 2. System Organization The focus of this paper is the provision of computer-aided message 
services between users of computers in a multinetwork environment. An assembly of interconnected networks 
is called an internetwork. The task at hand is to provide an internetwork computer message service. 
The reason for concern with an internetwork message service rather than local network message services 
is that the utility of a message service is strongly related to the number of potential correspondents. 
For this reason it is very important that a message service be developed that has the potential to interconnect 
or interwork with a variety of local networks and message service environments. It can be expected that 
a large number of message services will arise with some general aspects of equivalent functionality 
and some will have a few unusual, possibly unique, features. Certainly there will be many distinct user 
interface models for the human interaction with message systems. For these reasons the internetwork 
message system suggested here is based on the assumption of a standard for the internal machine-oriented 
representation of a message and the assumption that a variety of user interface programs will be available. 
 The proposed system provides for the transmission of messages composed of a rigidly defined and structured 
set of command information fields and an arbitrarily defined and structured message content. Within the 
content may be transmitted text, facsimile, graphics, or voice data. This paper is based on a more detailed 
proposal for an internetwork message system [I]. This research is supix)rted by the Advanced Research 
Projects Agency under Contract No. DAHC15 72 C 0308, ARPA Order No. 2223. The views and conclusions in 
this study are the author's and should not be interpreted as representing the official opinion or policy 
of ARPA, the U.S. Government or any other person or agency connected with them. This message system 
model takes the view that the message service can be divided into two activities: message reading and 
composition, and message delivery. The message reading and composition is an interactive activity in 
conjunction with a User Interface Process or UIP. The message delivery activity may be carried out by 
background processes called Message Processing Modules or MPMs. The internetwork message system is concerned 
with the delivery of messages between MPMs throughout an interconnected system of networks. It is assumed 
that many types of UIPs will exist. The model of operation is that the message delivery protocol is 
implemented in an MPM process. The MPMs exchange messages by establishing full duplex communication 
and sending the messages in a fixed format. The MPMs may also communicate other information by means 
of commands. A message is formed by a user interacting with a UIP. The user may utilize several commands 
to create various fields of the message and may invoke an editor program to correct or format some or 
all of the message. Once the user is satisfied with the message it is submitted for transmission by placing 
it in a data structure shared with the MPM. The MPM discovers the unprocessed input data (either by 
a specific request or by a general background search), examines it, and, using routing tables, determines 
which outgoing link to use. The destination may be another user on the sane host, one on another host 
in the same network, or a user in another network. In the first case (another user on this host) the 
MPM places the message in a data structure shared with the destination user, where that user's UIP will 
look for incoming messages. In the second case (the user on another host in this network,) the MPM transmits 
the message to the MPM on that host. That MPM then repeats the routing decision and, discovering the 
destination is local to it, places the messages in the data structure shared with the destination user. 
 In the third case (the user on a host in another network) the MPM transmits the messages to an MPM 
 in that network if it knows how to establish a t CH1405-0/79/0000-0001500.75 ~ 1979 IEEE connection 
directly to it; otherwise the MPM transmits the message to an MPM that is "closer" to the destination. 
An MPM might not know of direct connections to MPMs in all other networks, but it must be able to select 
a next MPM to handle the message for each possible destination network. An MPM might know a way to establish 
direct connections to each of a few MPMs in other nearby networks, and send all other messages to a 
 particular "big brother" MPM that has a wider knowledge of the internet environment. An individual 
network's message system may be quite different from the internet message system. In this case, intranet 
messages will be delivered using the network's own message system. If a message is addressed outside 
the network, it is given to an MPM, which then sends it through the appropriate gateways via internet 
procedures and format to (or toward) the MPM in the destination network. Eventually, the message gets 
to an MPM on the network of the recipient of the message. The message is then sent via the local message 
system to that host. When local message protocols are used, special conversion programs are required 
to transform local messages to internet format when they are going out, and to transform internet messages 
to local format when they come into the local environment. Such transformations potentially lead to 
 information loss. The internet message format attempts to provide features to capture all the information 
any local message system might use. However, a particular local message system is unlikely to have 
features equivalent to all the possible features of the internet message system. Thus in some cases 
the transformation of an internet message to a local message will discard some of the information. 
For example, if an internet message carrying mixed text and speech data in the body is to be delivered 
in a local system which carries only text, the speech data may be replaced by the text string "There 
was some speech here". Such discarding of information is to be avoided when at all possible, and to 
be deferred as long as possible; still, the possibility remains that in some cases it is the only reasonable 
thing to do. The MPM calls on a reliable communication procedure to communicate with other MPMs. In 
most cases, this is a Transport Level protocol such as the TCP [2]. The interface to such a procedure 
conventionally provides calls to open and close connections, send and receive data on a connection, and 
some means to signal and be notified of special conditions (i.e., interrupts). The MPM receives input 
and produces output through data structures that are produced and consumed respectively by user interface 
(or other) programs. 3. Specifications There are several aspects to a distributed service to be specified. 
First, there is the service to be provided; that is, the characteristics of the service as seen by 
its users. Second, there is the service it uses; that is, the characteristics it assumes to be provided 
by some lower level service. And third, there is the protocol used between the modules of the distributed 
service. UIP UIP \ / \ / \ Service Interface / ----+ .-- \ / + ........ รท + ....... --4- I Module 
I <--Protocol--> I Module 1 \ / + ............ . ......... --รท , I Communication Service S , i รท 
...................... W Message Service Figure I. The User/Message Service Interface The service 
the message delivery system provides is to accept messages conforming to a specified format, to attempt 
to deliver those messages, and to report to the user on the success or failure of the delivery attempt. 
This service is provided in the context of an interconnected system of networks and may involve relaying 
a message through several intermediate MPMs utilizing different communication services. The Message/Communication 
Service Interface The message delivery system calls on a communication service to transfer information 
from one MPM to another. There may be different communication services used between different pairs of 
MPMs, though all communication services must meet the following service characteristics, It is ass~ned 
that the communication service provides a reliable two-way data stream. Such a data stream can usually 
be obtained in computer networks from the transport level protocol, for example, the Transmission Control 
Protocol (TCP) [2]. In any case, the communication service must provide: Logical connections for two-way 
simultaneous data flow of arbitrary data (i.e., no forbidden codes). Data is delivered in the order sent 
with no gaps. Simple commands to open and close the connections, and to send and receive data on the 
connections. A way to signal and be notified "out-of-band" (such as TCP's urgent) is available so that 
some messages can be labeled "more important" than others. Controlled flow of data so that data is not 
transmitted faster than the receiver chooses to cons~ne it (on the average). Transmission errors are 
corrected without user notification or involvement. Complete breakdown on communication is reported to 
the user. The Message-Message Protocol The protocol used between the distributed modules of the message 
delivery system, that is, the MPMs, is a small set of commands conveying requests and replies. These 
commands are encoded in a highly structured and rigidly specified format. MPMs are processes using some 
communication service. A pair of MPMs which can communicate reside in a common interprocess communication 
environment. An MPM might exist in two (or more) inter process communication environments, and such an 
MPM might act to relay messages between MPMs in the environments. UIP UIP \ / \ / \ / / I i'lPtl I 
(--Protocol--> MPM <--Proto,:ol--~ i ~PM I +-'~'-+ +/ \+ * I ........... + + ....................... 
รท + .......................... + ICommunication Service ~1 JCommunicali~fl S=rvico BI + ....................... 
รท + .......................... + Message Service with Internal Relaying Figure 2.  The transfer of 
data between UIPs and MPMs is conceived of as the exchange of data structures which encode messages. 
The transfer of data between MPMs is also in terms of the transmission of structured data. A message 
is a structured data object represented by a particular kind of typed data elements. This is how a message 
is presented when transmitted between MPMs or exchanged between an MPM and a UIP. Within an MPM (or a 
UIP), a message may be represented in any convenient form. + ..... + DATA + ..... + USER-->I UIP I-->STRUCTURES-->~ 
MPM l-->other + ..... + + ..... + + ..... + MPMs i 1 +--I Z Iรท ..... รท +--I I L + .... + ..... 
+ DATA ~ ....+ other-->l MPM I-->STRUCTURES-->I UIP I-->USER MPMs + ..... + + ..... + + ..... + +--I 
I Iรท ..... รท +--I I Message Flow Figure 3.  Relation to ~her Protocols The following diagr~ illustrates 
the place of the message protocol in the protocol hierarchy: + ...... รท+ ..... รทรท ....... +รท ..... 
+ + ..... รท ITelnetl I FTP S I Messagel IVoice: ... Z รท ...... + + ..... รท + ....... + + ..... + + 
.... \ I / L : + ..... รท รท ..... รท รท .... Host i TCP I I RTP : ... L I รท ..... รท รท ..... รท รท .... 
 4 @ Gate~y ~ Internet ~tagr~ Protocol 4 @ + F Network Z Local Network Protocol รท + Z Protocol 
Relationships Figure 4. The message protocol interfaces on one side to user interface progr~s and on 
the other side to a reliable transport protocol such as TCP [2]. The internet datagr~ ~otocol is defined 
in [3]. Other application level protocols are defined in [4].  ~erview of Message Structure A message 
is composed of three parts: the identification, the command, and the doc~ent. ~ch part is in turn c~posed 
of message objects. The identification part is c~posed of a transaction n~ber assigned by the originating 
MPM, and the internet host n~ber of that MPM. The command part is composed of an operation code, an 
argument list, the destination mailbox, and a trace. The trace is a list of the MPMs that have handled 
this message. The document part is composed of a header and a body. The message delivery system does 
not depend on the contents of the document part, though a standard document header is specified. The 
following sections define the representation of a message as a structured object composed of other objects. 
Objects in turn are represented using a set of basic data elements.  Message Structure <message> ::= 
( <id>, <command>, <document> ) <id> ::= ( <tn>, <ihn> ) <tn> ::= The transaction number. <ihn> ::= The 
internet host numbers. <command> ::= ( <mailbox>, <trace>, <operation>, <arguments> ) <mailbox> ::= 
The destination address. <trace> ::= A list of all the MPMs that handled this transmission. <operation> 
::= The name of the operation to be performed, e.g., deliver a message or verify a mailbox. <arguments> 
::= The parameters needed to carry out an operation. <document> ::= ( <header>, <body> ) <header> ::= 
The header of the document. <body> ::= The body of the doctm~ent.  Commands There are only a few commands 
defined: Deliver: Deliver the associated document to the address in the mailbox. Acknowledge: The message 
with the identifier in the argaments was delivered with the outcome indicated in the arguments. Probe: 
Verify that the mailbox is a valid destination. Response: Confirms (or denies) the validity of the mailbox 
in the argument.  Documents The document consists of a header and a body. The header is a set of fields 
and their values. The body is a list of arbitrary data elements. In most cases, the body will be a series 
of text strings. The header consists of a set of named items, each having a text string value. The following 
is the standard header: Name example value DATE 1979-O4-15-14:03-08:00 SENDER Mamie@ISIE FROM Jon Postel 
<POSTEL@ISIB> TO Dave Crocker <DCrocker.of. UDEE@FWDR> CC Danny@ISIB SUBJECT Our Meeting These are the 
basic header items; a great variety of other header items can be used in addition, for example, see [5]. 
 Objects There are many objects used in the message system. The most commonly used are: Answer A 
yes or no answer to a question. Encoded as a BOOLEAN element. Arguments A list of other objects which 
are the arguments of a command. Encoded as a LIST element. Mailbox The address of a user. Encoded as 
a PROPLIST element. The name value pairs of the mailbox are : name value description IA internet address 
NET network name HOST host name USER user name Operation The name of the operation or command. Encoded 
as a TEXT element. Trace A list of the MPMs which have handled this message, identified by their ihns. 
Encoded as an LIST element. Ihn The internet host namber, a 32-bit quantity. Encoded as an INTEGER 
element. Tn The transaction number unique to a particular  4 message from a particular source MPM. 
Encoded as an INDEX element.  Elements Messages are encoded into a set of typed data elements. The 
following elements are defined: BOOLEAN Boolean values are encoded in a two-octet element. The first 
octet is the type code, and the second octet is the value: 0 for false and I for true.  INDEX Index 
is a three-octet element which encodes a small nonnegative integer number. The first octet is the type 
code, and the next two octets are the 16-bit number.  INTEGER Integer is a five-octet element which 
encodes a 32-bit twos-compl~nent integer. The first octet is the type code, and the following four octets 
are the data.  BITSTR Bit Strings are encoded in a variable-length element. The first octet is the 
type code, the next three octets are a bit count, and the following octets contain the data. The last 
octet is filled out with zeros if the bit string is not an integral number of octets in length. TEXT 
 Text strings are encoded in a variable-length element. The first octet is the type code, followed by 
the text octets themselves. The text is ASCII characters. These basic elements may be combined with 
two structuring elements: LIST Elements may be formed into lists, which may include lists. A list element 
is a type code octet followed by a three-octet length count, followed by a two-octet item count, followed 
by the octets of the elements in the list. PROPLIST A property list of name-value pairs may be created. 
It is a variable-length element consisting of a type code, a three-octet length count, a one-octet pair 
count, and a set of name-value pairs. Each pair consists of a one-octet name count, a two-octet value 
count, and the name and value data octets. 4. Examples and Scenarios .......................... The 
scenario for a message transmission begins with a user interacting with a UIP to compose a message, an 
activity which may involve the use of a text editor. When the user is satisfied with the composition 
of both the message body and the message header, the user tells the UIP to "send" the message. To send 
a message, the UIP formats the message into a message data structure of objects and elements and presents 
it to an MPM. Upon receipt of a message the MPM examines the command section to determine the action 
to be taken. In many cases, the message is to be delivered to another MPM, specified in the mailbox. 
 To deliver a message to another MPM, an MPM consults a routing table and forwards the message along 
the path indicated by the table. When an MPM receives a message and determines from the mailbox that 
it is the destination MPM, it delivers the document to the UIP, and forms an acknowledgment message addressed 
to the originating MPM. When the source and destination MPMs are (logically) in direct communication 
(i.e., use the same conmnunication environment), the delivery of a message will simply be the exchange 
of a "Deliver" and an "Acknowledge" command. When the destination is not in the same communication 
environment as the source, the message must be relayed via intermediate MPMs. A detailed example is given 
below. Generally speaking, the source MPM sends a "Deliver" command to the intermediate MPM. The intermediate 
MPM adds its identity to the trace and forwards the command to (or toward) the destination. The destination 
MPM delivers the message and sends an "Acknowledge" co~nand to the message originating MPM via the intermediate 
MPMs. Message Format Example Suppose we want to send the following message: Date: 1979-03-29-I 1:46-08:00 
 From: Jon Postel <Postel@ISIB> Subject: Meeting Thursday To : Dave Crocker <DCrocker@Rand-Unix> CC: 
Memie Dave : Please mark your calendar for our meeting Thursday at 3 pm. --ion.  It will be encoded 
in the structured format. The following will present successive steps in the top-down generation of this 
message.  1. <message> 2. ( <id>, <command>, <document> ) 3. ( ( <tn>, <ihn> ), ( <mailbox>, <trace>, 
<operation>,  <arguments> ), ( <header>, <body> ) )  4. ( ( 37, 167772404 ),  ( ( IA: 167772359, NET: 
arpa, HOST: rand-unix, USER: DCrocker ), ( 167772404 ), DELIVER, ( ( REGULAR ) ) ), (( Date: 1979-03-29-11:46-08:00, 
From: Jon Postel <Postel@ISIB>, Subject: Meeting Thursday, To: Dave Crocker <DCrocker@Rand-Unix>, CC: 
Msmle ) ), ( ( Dave: Please mark your calendar for our meeting Thursday at 3 pro.  --ion. ) ) ) 
S. LIST( id LIST( INDEX=37, INTEGER=IS7772604 ), command LIST( PROPLIST( IQ: 167772359, NET: arpa, mailbox 
HOST= rand-unix, USER: OCrocker ), Irate LIST( INTEGER=IS7772604 ), op~rat,on TEXT:"DELIVER" argum.~nts 
LIST( LIST( TEXT="REGULRR" ))), documenl LIST( header PROPLIST( DQTE: 1979-03-29-11:46-08:((', FROM: 
Jon Poe(el ~PostelยขiS]B>, SUBJECT: ~eeting Thursdag, TO= Dave Crocker <OCrocKer(Fand-Unix>, CO: Mamme 
) , bed 9 LIST( TEXT= "Dave: Please mark ~our calendar lop our meeting Thursdag at 3 F'". --ion." ) 
) ) Delivery and Acknowledgment Example The following is four views of the message during the successive 
transmission from the origihation MPM, through a relay MPM, to the destination MPM, and the return of 
the acknowledgment, through a relay MPM, to the originating MPM. ........................... ; ......... 
; ....................................... sanding .--> originating --> relay --> dest.~btio~ ---> recoivi~g 
I=ser (1PM MPM I1P i~l user 4 3 orlgln.~ting .--e'~lay <--dostin,:,~ie~l ttPM i'IPM MPtl .......................................................................... 
 Transmission Path Figure 5.  I. Between the originating MPM and the relay  MPM. LIST( id LIST( INDEX?37, 
INTEGER=IS77724@4 ), comma,~d LIST( PROPLIST( In: 167772359, NET: arpa, mailbox HOST: rand-unlx, USER: 
OCrock:er ), trace LIST( INTEGER=lG7772404 ), op,.)r L~ ( ion TEXT="DELIVER", ar (i tJ I;In n | s LIST( 
LIST( TEXT="REGULQR" ))), (Iocum~,n t LIST( headr, r PROPLIST( DATE: 1979-03-29-11:4B-0~:00, FROM: Jon 
Postel .Postel(ISIB~p SUBJECT: M~eting Thursdav, TO: Oave Crocker *OCrocK(rCR~d--Ur~ix>t CC: Mamle ), 
bed 9 LIST( TEXT= "Dave= Please mark' uour cal(Id~r for our meeting Thursday ~t 3 ptl. --jon.") ) ) 
 2. Between the relay MPM and the destination MPM. LIST( id LIST( INDEX=37, INTEGER=I67772404 ), ยขommahd 
LIST( PROPLI3T( IQ: 167772359, NET: arpa, mailbox HOST= ralld-unixj USER: DCrocWer ), (race LIST( ;NTEGER=IB777240&#38;, 
 ]NTCGER=i6777224G ), op~lration IEXT="DELIVER", arguments LIST( LIST( TEXT="REGULgR" JJ), document 
LIST( hoarl(~r PROPLIST( DnTE: 1979-03-29-11:46-0&#38;:00, FROM: Jon Poetel .Postel~]S]~ SUBJECT: Meeting 
Thursda~!~ TO= Dave Crocker .OCrock~lER~,rd--Unix>~ CC= Hamie ) , body LIST( TEXT= "Oave: Please mark 
gour cah.~dar (0r our meetlng Thursda~j at 3 pth --ion." ) ) ) 3. Between the destination MPM and the 
relay MPM. LIST( id LIST( INDEX*I993, INTEGER=I6777235~I ), command LIST( PROPLIST( IR= 16777240~, mailbox 
USER= :::HPM* }, trace LIST( INTEOER=I07772359 ), oporotion TEXT."@CKNOWLEDGE", arquments LIST( LIST( 
INDEX=37, rid INTEGER=I6777240~ ), LIST( INTEGER=10777240~, trail INTEGER=IB777224E,, INTEGER=i6777235ยฃ~ 
). &#38;l~WGr BOOLEAN-TRUE, roason LIST( TEXT="OK" ), how-delivered LIST( TEXT="ACCEPT" ) , error-list 
LIST( INDEX=O, TEXT="No Errors"} ) ), document LIST( ) ) 4. Between the relay MPM and the originating 
MPM. LIST( id LIST( INDEX=I993, INTEGER=1677723S~ ), command LIST( PROPLIST( lg: 167772404, mailbox 
USER= ~MPM~), trace LIST( INTEGER=I67772359 INTEGER=167772246), operation TEXT="ACKNOWLEDGE", arguments 
LIST( LIST( INDEX=37, t~d INTEGER=i677724~4 ), LIST( INTEGER=16777240~, trail INTEGER=I677722~6, INTEGER=I6777235~I 
), ~n~or SOOLERN=TRUE, roa~on LIST( TEXT="DK" ), hew-delivered LIST( TEXT="ACCEPT" ) , error-list LIST( 
INDEX=O, TEXT-"No Errors"} } }, document LIST( ) ) 5. Conclusions and Summary The outlines of an Internetwork 
computer message system have been presented. The system uses type-encoded data elements to represent 
message objects which are organized into list structures. Messages formatted in this way may be transmitted 
between Message Processing Modules (MPMs) using a variety of underlying interprocess communication systems. 
 It is claimed that the typed and structured format is better suited for the provision of message capabilities 
beyond plain text. The inclusion of Facsimile, Graphics, and Speech information in messages will be important 
in the near future. This system provides a framework for the development of advanced message system 
features such as enciphering, accounting, and routing. An independent research teem is constructing 
a system with very similar goals and features at the XEROX Pale Alto Research Center [6]. References 
 <RefA>[I] Postel, J., "Internet Message Protocol, m USC/Information Sciences Institute, IEH 85, RFC 753, March 
1979. [2] Postel, J., "Transmission Control Protocol -Version 4," USC/Information Sciences Institute, 
IEN 81, February 1979.  [3] Postel, J., "Internet Datagrem Protocol - Version 4," USC/Information Sciences 
Institute, IEN 80, February 1979. [4] Feinler, E., and J. Postel, eds., ARP~T Protocol Handbook, Network 
Information Center, NIC 7104, SRI International, Henlo Park, CA, January 1978. [5] Crocker, D., J. Vittal, 
K. Progran, and D. Henderson, "Standard for the Format of ~PA Network Text Messages," RFC 733, NIC 41952, 
21 November 1977. [6] Levin, R., and M. Schroeder, "Transport of Electronic Messages Through a Network," 
Teleinformatics 79, Boutmy and Danthine (eds.), pp29-33, North Holland Publishing Company, 1979.</RefA>  
			
