
 A DECOMPOSITION SOLUTION TO THE QUEUEING NETWORK MODEL OF THE CENTRALIZED DBMS WITH STATIC LOCKING 
 Alexander Thomasian I and In Kyung Ryu Dept. of Electrical Engineering-Systems University of Southern 
California Los Angeles, CA 90089 ABSTRACT The effect of concurrency control methods on the performance 
of computer systems is analyzed in the context of a centralized database with a static lock request policy, 
i.e., database transactions should acquire all locks before their activation. In the lock conflict model 
the L locks required by each transaction are uniformly distributed over the N locks in the database. 
The computer system is modelled as a queueing network. Two scheduling policies for transaction activation 
are considered: FCFS with and without skip. In each case the scheduling overhead for scanning the blocked 
transactions is taken into account. The number of transactions to be scanned is limited by a window size 
parameter. The system is analyzed using a hierarchical decomposition method, where the highest level 
model yields the mean user response time. The results of the approximate solution are validated using 
a detailed simulation, which shows that the analysis based on no resampling of locks is quite accurate 
and outperforms the simplified analysis with resampling of locks in accuracy. The effect of varying the 
values of parameters such as transaction size, granularity of locking, scheduling discipline for transaction 
activation, scheduling overhead, and window size on system performance is investigated. I. INTRODUCTION 
 Work in the area of performance analysis of concurrency control mechanisms in database systems is in 
its preliminary 'stages. The limited number ;Present address: Performance Modeling Center, Burroughs 
Corp., Santa Aria CA 92704 Permission to copy without fee all or part of this material is granted provided 
that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice 
and the title of the publication and its date appear, and notice is given that copying is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specific permission. of studies using simulation and analytic Queueing Network Models-QNM's have led 
to conflicting conclusions on several occasions mostly due to differences in modelling assumptions and 
the values of parameters used in obtaining quantitative results. In addition, a large number of interesting 
cases and situati ons have not been analyzed. In this paper we develop and analyze a detailed QNM of 
a centralized DBMS with 2PL (two-phase locking) scheme [Eswa76]. The hierarchical decomposition method 
[Cour77] is used to analyze the system. From the viewpoint of the multilevel modelling approach of DBMS's 
proposed in [Sevc81], this work presents a breakdown of the highest modelling level for computing user-oriented 
performance measures such as mean response time. A top-down approach is used to identify the intermediate 
performance measures required for the final goal. Our interest is in analytical modelllng rather than 
simulation because of the acceptable accuracy of QNM's in performance evaluation of computer systems 
and their low cost compared to simulation. However, we do not preclude the use of simulation at some 
levels of the hierarchical model, such as to obtain the probability of lock conflicts. A purely analytic 
model was adopted in this paper and simulation was used for validation purposes. Concurrent transaction 
processing in a DBMS is a means of improving system performance and resource utilization. Several undesirable 
situations may occur if concurrent access to the database is not properly controlled. These undesirable 
situations include, loss of updates, non-repeatable reads , etc. [Eswa76, Date83]. To avoid the occurrence 
of these undesirable situations and to preserve the consistency and integrity of the database a concurrency 
control mechanism should be implemented. Locking according to 2PL is commonly used for implementing concurrency 
control in centralized databases. We assume that all locks required by a transaction are known a priori 
(before the transaction is executed) and all locks are acquired before a transaction is activated- static 
lock request policy [PotiS0] and released upon transaction completion. &#38;#169; 1983 ACM 0-89791-112-1/83/008/0082 
$00.75 82 Previous research in modelling database systems to which transactions reference the items 
in a can be classlfied into the two major categories of centralized and distributed databases. The field 
of modelling centralized databases is more mature and can be further classified to the modelling of systems 
with static and dynamic locking, and optimistic concurrency control [Mena82]. Ries and Stonebraker have 
reported on extensive simulations of systems with static and dynamic locking to study the effect of granularity 
of locking [Ries77, Ries79]. Studies dealing with dynamic locking were reported in [Iran79, Shum81, Thom82b]. 
Potier and Leblanc analyzed a database system with static looking with a hierarchical model [PotiS0]. 
An iteratlve solution method was used in [Ga1182] to analyze a centralized database with static locking. 
Performance studies of distributed database systems were reported in [Moli79, Dant80, Naka81, Gall82]. 
 In what follows, we first describe the model of the computer system. A multilevel hierarchical decomposition 
method is described in Section 3 to analyze the model. In Section 4 we validate the system and carry 
out a limited parametric study of system behavior. Finally, we s,,mm~rize the contributions of this paper 
and compare it with previous work. 2. DESCRIPTION OF THE MODEL We are concerned with the processing 
of transactions accessing a database on a multiprogrammed computer system. The resource requirements 
of transactions as far as the database is concerned are described by the lock conflict model in Section 
2.1. The computer system model for transaction processing is specified by a QNM in Section 2.2. 2.1. 
Lock Confl~ct As in most studies of concurrency control mechanisms the database is modelled as a collection 
of D resources called (data) items. Each transaction accesses n items (a parameter which determines transaction 
size). The items are locked by the transactions in exclusive mode before being accessed. This assumption 
leads to pessimistic results since it precludes the potential for concurrent processing of read-only 
transactions. Locks can be associated with individual records, pages, relations or an entire database. 
The granularity of locking is determined by the number of items associated with each lock. The granularity 
of locking varies dramatically across various DBMS's (see [Ries79] and [Date83] for some examples). 
Hierarchical locks have been proposed for systems handling both small and large transactions [Ries79]. 
A single level locking system is considered in this paper with N locks such that there are D/N items 
per each granule associated with each lock. The granularity of locking (N) will be varied to study its 
effect on the probability of conflict and performance. Few experimental studies have been conducted 
to determine the spatial reference pattern according database [Smit78]. It can be concluded that items 
referenced by a transaction are clustered in several localities and sequentiality of access is an inherent 
characteristic of most database systems. Due to the absence of an agreed upon reference pattern and mathematical 
tractability requirements (for analytic studies) rather naive reference patterns have been considered 
by most researchers, which are summarized in [Lang82]. We assume that the n items referenced by a transaction 
are uniformly distributed over D items in the database. The mean number of locks required in this case 
is:  L=N'¢I-CD'~/N))/¢~) ¢I) It follows from the random reference pattern, that the L lock requests 
are uniformly distributed over the N locks in the system. To summarize, each transaction is characterized 
by n: the number of items accessed, and L: the number of locks required. Equation (I) can be used to 
determine L for given database parameters: D: the number of items in the database and N: the number of 
locks. The analysis of the lock conflict model in Section 3.4 is based on these assumptions. 2.2. ComDuter 
System Model Transactions originate at a set of user terminals. Depending on the number of active terminals 
an infinite-source or a finite-source transaction arrival model is appropriate. In the former case the 
arrival process is Poisson with a known average arrival rate. In the latter case the number of active 
terminals and the mean user think time are known. The computer system has the central-server model with 
a CPU and three disks as shown in Figure 2.1. The maximum Multiprogramming LeveI-MPL of the computer 
system limits the number of active transactions (denoted by J) to M such that J/J~. Transactions pending 
activation due to the MPL constraint or due to lock conflicts are held in the pending queue. At the completion 
of a transaction and the release of its locks, the transactions in the pending queue are scanned for 
activation. We consider and compare the performance of the system when the scheduler has a FCFS with 
and without skip policy as in [Brow77]. In the former case the scheduler concludes its scan after the 
first conflict, while in the latter case the scheduler continues its scan of all transactions in the 
 pending queue. The scheduling overhead is taken into consideration. We limit the number of transactions 
in the pending queue by introducing a second closed model (in addition to the closed model of multiprogrammed 
computer system) for eligible transactions. The number of eligible transactions V is such that V~W, where 
W, called the maximum window size, determines the number of transactions in the pending queue to be V-J 
(where J is the current MPL). For obvious reasons MIW. When the number of transactions exceeds W, they 
are enqueued in the primary queue 83 Eligible ................................ transactions ] , . 
(includes active I ~ transactions) I I / ~ I I completions Primary queue Pending queue I l ( I | Active 
J/j4transactl°ns 0 > Constraint due to Hax-HPL Constraint due to window size (W) Figure 2.1 The model 
of static looking system. (see Figure 2.1). When a transaction completion occurs, such transactions are 
admitted from the primary queue into the pending queue in FCFS order. Transactions in the pending queue 
which cannot be activated due to lock conflicts with currently active transactions or due to the maximum 
MPL constraint are not allocated any locks by the scheduler. For this reason deadlocks cannot occur, 
but indefinite postponement is a possibility with the FCFS with skip scheduler in a heavily backlogged 
system. The maximum window-size constraint has the advantage that transactions which have been in the 
pending queue are implicitly prioritized by being eligible for activation and are not bypassed by the 
transactions in the primary queue. The variation in transaction response time is expected to decrease 
at the possible cost of a small increase in mean response time (when scheduling overhead is small compared 
to the processing requirements of transactions, see discussion in next paragraph). The scheduling overhead 
increases with the increase in the number of transactions to be scanned. The proper choice of W can be 
used to ascertain that the system performance does not degrade under heavy external load with a FCFS 
with skip scheduler. Note that the value of W should be adequately high to allow the computer system 
to operate near its peak potential MPL. If W=M only one transaction is considered for activation upon 
transaction completion, which is the case reported in [Poti80]. To simplify the discussion, the multiprogrammed 
computer system (innermost block in Figure 2.1) is assumed to satisfy a product-form solution [Lave83]. 
A certain number of standard assumptions need to be made for this to be true as follows. The queueing 
discipline at the CPU and disks are Processor Sharing-PS and FCFS respectively and the processing times 
at the disks are exponentially distributed. There is a single chain (job type) and its expected total 
loadings (service requirements) are as follows: k per data item access: Xk, Ilk/K, where K is the number 
of devices in the computer system in Figure 2.1. Since each transaction makes n data accesses, the 
useful loadings per transaction are X k = n'xk, llk_~K. 2. Loading for lock release overhead at device 
k is Yk" Since each transaction requests and releases L locks then  Yk = L'Yk' 1~kiK.  3. Loadings 
due to transaction scheduling overhead. These loadings are not fixed and are a function of the number 
of active transactions (J) and the number of eligible transactions (V). The loading at device k, ~(J,V) 
can be  expressed as a function of the loading per transaction per lock at device k: z and the mean 
number of scanned lock~ L(J,V) as: Zk(J,V) = L(J,V)'z k (see Section 3.3). In summary the transaction 
loadings at the devices are given by Bk= X k + YK + Zk(J'V)' llk_~K. The closed QNM for £he multiprogrammed 
computer system model should be analyzed for all possible combinations (J,V), such that l~J~min(V,W) 
and IIVIW. 3. ANALYSIS OF THE MODEL An analysis of the model described in Section 2 based on the hierarchical 
decomposition method [Cour77] is presented. The analysis is carried out in five levels as shown in Figure 
3.1 and reported in the following five sections. The computations should be carried out in the reverse 
order of their presentation following the flowchart in Figure 3.1.  3.1. Level Zero: User Response Model 
 The last stage of analysis deals with computing user response times when processing transactions in 
the computer system. At this modelling level the computer system is specified by its mean throughput 
as a function of number of eligible transactions: T(V), IIVIW. Since the arrival process was assumed 
to be Markovian (a Poisson process or a quasi-random process) the behavior of the system can be represented 
by a one-dimensional birth-death process and analyzed easily to compute the mean response time [Lave83]. 
The mean response time has three components: waiting time in the primary queue, waiting time in the 
pending queue, and the mean processing time in the active phase. The latter two components (in addition 
to the mean throughput) should be computed at level one for IIV~W. 3.2. Eligible Transaction Model 
 This stage of analysis entails in the I. Loading for useful processing at device computation of T(V), 
the mean system throughput 84 PV(J)'Tv(J)= ~ Pv(k)'Rv(k,J) lIJ~mln(V,M) (3) Levels ÷ .................................................. 
+ kEK I Database model: Compute mean number of locks (L) I reque=ted by each database transaction. 
I where PV(J) is the steady state probability of Sj and K denotes the set of states which have  iiiiiiiiiiiiiiiiiiiilIiiiiiiiiiiiiiiiiiil/il; 
 transitions to Sj. Solving the set of linear Lock conflict model: Compute the probability density function 
for the number of activated transactions from the pending queue when a completion occurs. Also determine 
scheduling overhead: Zk(J,V),llk!K. 3:  = illiiiiiillllliiiiiii Active transactlcn model: Compute 
mean througput 1 TV(J) of multiprogrammed computer system for 4~. liJ~min(V,M),;IVIWby solving model 
for closed I QNM. I equations we can proceed to compute the parameters required at the previous level. 
 min(V,M) TCV)= ~ PvCJ)'Tv(J) llVlW (4) J=1 The mean processing times for active transactions can be 
computed by as a weighted sum of mean processing times in different states (by Little's law: J/Tv(J) 
for S(J)): 2111111 iSlliSlIiiilliilli3311111111 I: Eligible transaction model: Compute mean system 
1 throughput T(V), when 1~VIW transactions are #~ available for prooesslr~ by solving correspondlngl 
Markov chain model. 0: User response mode!: Com~ute mean user response 1 time by solving ~irth-death 
model for transactionl arrivals and departures. I .................................................. 
+ Figure 3.1 The levels of ,hierarchical decomposition solution. with V eligible transaction. Due to 
the maximum window size constraint the system should be solved for I~VIW. Increasing W may result in 
degradation in performance (throughout) due to the increased scheduling overhead as noted in section 
2.2. Furthermore, even when scheduling overhead is small compared to the processing requirements of transactions, 
increasing W beyond a certain point (W = 2M for the database parameters used in our studies) does not 
improve performance (throughout) significantly. In Section 4.6 we study the effect of window size on 
system throughput. In order to compute the throughput T(V) we consider a system with V eligible transactions. 
The number of active transactions in such a system is J, where lIJ~min(V,M). The behavior of the system 
for fixed V can be represented by a Markov chain, whose states correspond to J. The rate of exiting state 
J, denoted by Sj, is simply TV(J) , the throughput of the computer system in processing J transactions 
when there are V-J transactions in the pending queue. The computer system throughput depends on V because 
of scheduling overhead (see Section 3.3). The transition rate from Sj to S I where J-1~I.~mln(V,M) is 
given by: RV(J,I)=P~(J,I)'Tv(J) (2) where P[(J,I)= Prob [after a transaction completion at Sj the 
system transits to S I when V transactions are eligible]. The probabilities are computed at level three 
(see Section 3.4). The balance equations for the steady state probabilities are: mln(V,M) R(V)= ~ J'Pv(J)/T(J) 
;IVIW (5) J=1 The mean waiting time for pending transactions is: min(V,M) W(V)= ~ (V-J)'pv(J)/Tv(J) 
lIVIW J=1 As noted earlier, the computations at required TV(J) and Pt(J), which are Section 3.3 and 
3.4 respectively. (6) this level computed in 3.3. Level 2: Solution of the ONM of Computer System 
 The mean system throughput of the computer system TV(J) is computed for 1~J~min(V,M), I~V~W. This computation 
can be carried out efficiently, since we have assumed that the QNM has a product form solution with a 
single job type whose loadings are: Bk(J,V) = Xk+Yk+Zk(J,V) I~J<_~K (7) The loadings for scheduling 
overhead: Zk(J,V) are computed approximately at this point by obtaining the mean number of locks scanned 
for scheduling. The overhead will be computed separately for the case when we have a FCFS without skip 
and with skip scheduler. The number of locks scanned for an activated transaction is simply L, while 
the mean number of locks scanned for a rejected transacted when I transactions are already active is 
estimated as follows L Q(I,V)= ~ q'Prob[confllct at q'th lock request q=1 given that transaction rejected] 
L q.Prob[conflict at c'th lock recuest] = ~ Prob[transaction rejected] q=1 _ L (N-I'L~/t N -q--~'1 
q'CI'L)ICN-q+1)" q-1 ' 'q-1 ) (8) (I-(N-~'L)) The number of activated transactions when Sj -~ S I is 
I-J+1. Special care should be taken when the 85 Job scheduling is terminated due to the maximum MPL 
restriction or lock depletion, in which case the highest target state can be S H such that H:min(V,M,~/LJ) 
The mean number of locks scanned completion from Sj with V transactions can therefore be expressed as 
follows: H-I-1P~(J'I){(I-J+I)'L+Q(I'V)}L(J,V)=I__~=j= +P~(J,H)'(H-J+I)'L} (9) at a job available 
 (10) For the FCFS with skip scheduling discipline, all the pending transactions are scanned for activation 
unless the scan is terminated due to the MPL restricted or lock depletion as specified by H is (9). We 
make two simplifying assumption as follows: I. From the total of V-J+I transactions available for scanning 
after a transaction termination I)12 transactions are average, i.e., half of transactions after completion 
were scanned. at Sj only (V- scanned on the the unactivated a transaction 2. The mean number of locks 
scanned for a rejected transaction is computed using (8) at the point when there were (J+I-1)/2 active 
transactions, i.e., the midpoint of transaction activation during the current scheduling cycle. The 
mean number of locks scanned can be expressed in this case as : H-I L(J, V) =I~J_IPV{ (I-J+1) "L+(V-I) 
 Q((J+I-1)/2,V) } (11) +PVt(J , H) { ( H-J+I ) "L+(V-H)I2"Q((J+H-I)/2,V) } The ioadings for scheduling 
overhead for the FCFS without and with skip disciplines can be computed using L(J, V) as given by (10) 
and ( 1 1 ) respectively. Zk(J, V) =L(J,V)" z k 1.~k ~K (12) The closed QNM can be solved for MPL=J, 
using one of the available computational algorithms[Lave83]. 3.4. Level ~: Cemnutin~ the Transition 
 The transition probabillties P~(J,I) (defined in Section (3.2)) are computed in this section. The analysis 
is carried out twice under the following two assumption: I. Resampling of locks. The locks requested 
by pending transactions are resampled each time the transaction is checked for activation. This rather 
standard assumption used in a different context in [Brow77] obviously simplifies the analysis. 2. No 
resampling of locks. The more sophisticated analysis makes note of the fact that transactions already 
in the pending queue are blocked due to locks held by active transactions. A new transaction that is 
admitted into the pending queue (after a transaction is completed) is treated differently in this analysis. 
 The system is analyzed for the FCFS with skip and without skip policies. The probabilities in the following 
two sections are computed for I~VIW, however, the index V is elided to simplify the notation. 3.4.1. 
Transition Probabilities with Resampllng of Locks The probability of transaction activation can be obtained 
easily as follows: PS(J) = Prob [a transaction can acquire all of its locks given that J transactions 
are active] = (N-~'L) / (2) (13) There are V -J + 1 transactlons in the pending queue after a transaction 
terminates in Sj including the new transaction replacing the completed transaction under the window size 
constraint). Define Pa(k,J)= Prob [activating k transactions when a completion occurs at Sj] This probability 
for the FCFS with skip queueing disciplines is: V-J+I V-J+I V-J+I k Pa(k,J) = ~ ~ " " " ~ ( W Xq)Yik 
(14) ii=I 12=ii+I Ik=ik_1+1 q=1 where Xq= Prob [ic-i c 1-I transactions waiting and In'th ~ on~" activated 
given that (3-I)+(q-I) transactions are active] =(1-Ps(J+q-2))lq-lq-1+1"pa(J+q-2) (15) and Prob [all 
transactions after Ik,th have Yik= to wait given that J-1+k transactions are active] =( I-Ps (J- 1+k) 
) V'a+ik+ I (16) 86 For the FCFS without skip scheduling discipline, Pa(k,J) is obtained by: I( q=i 
PS(J÷Q-2))'(I-Ps(J÷k-I)) Pa(k,J)= for k<V-J÷1 (17) ~q=1Ps(J+q-2) for k=V-J+1 The transaction probability 
from Sj to Sj+ k I is given in either case due to the restrlcti~n of maximum MPL by: I Pa(k,J) for J+k-1<M 
Pt(J,J+k-1)= (18) V-J+I Pa(m,J) for J+k-1=M m=M-J+1 Note that the above computation should be carried 
out for I~V~W. 3.4.2. Transition Probabillties without Resampllng of Locks Three steps are considered 
in computing the transition probability from Sj. Step 1: An active transaction completes its execution 
releasing L locks. A temporary state transition occurs from Sj to Sj_ I. Step 2: k waiting transactions 
are activated obtaining their locks from the L locks released by the completed transaction. The transition 
probability from Sj 1 to Sj_I÷ k is denoted by Pa(J-I,J-1÷K)-where OU..~n(L,V-J). Step 3: The newly 
introduced transaction is checked and it can be activated from Sj_I+ k with Ps(J-1÷k). A transaction 
which is currently blocked in the pending queue due to the fact that k out of L locks required by it 
are currently taken is waiting for one transaction when k=1 and possibly more transactions when k>1. 
It follows: Pe(i,k,J)= Prob [a transaction in the pending queue is waiting for no more than i out of 
J active transactions given that the k locks required by the transaction are taken] for L~k and i/k 
 for i=k=J (19) otherwise In addition: Pf(l,k,J)= Prob [a transaction in the pending queue is waiting 
for exactly i out of J transactions given that k locks required by the transaction are taken] I Pe(i,k,J)-Pe(i-l,k,J) 
for I>I (20) =LPe(1,k,J) for i=I To compute the unconditional probability Pg(i,J)= Prob [a transaction 
in the pending queue is waiting for exactly i transactions out of J transactions] we first compute the 
probability that a blocked transactions waits for k locks at Sj. According to the hypergeometrlc distribution: 
 N-J'L .(J~L) /(~) Pd (k'J)=( L-k ) (21) Uncondltloning on k it follows: L Pg(i,J)= ~ Pd(k,J)'Pf(i,k,J) 
(22) k=i The value of the following probability can also be obtained easily: PW(J) = Prob [a transaction 
in the pending queue has to wait at Sj]  = 1-(N-J'L)/ (~) (23)J =i=~I Pg(i,J) We have not attempted 
to prove the second equality (identity), which has been verified to hold numerically. A transaction in 
the pending queue should have waited for only one transaction to be activated at the completion of a 
single transaction. Pc(J)= Prob [a transaction in the pending queue at Sj was waiting only for the just 
completed transaction] = Pg(1,J)l(J'Pw(J)) (24) The q+1'st pending transaction to be activated should 
not have been blocked by the additional locks allocated to the q transactions activated before it. Define 
 Ps(q,J)= Prob [a transaction is activated from the pending queue during scan at Sj following q transactions] 
 It follows from the fact that locks requested by transactions are independent: Ps(q,J)= Prob [transaction 
not blocked by the remaining J-1 active transactions] 87 Prob [transation not blocked by the q activated 
transactions at this scan] =Pc(J)°(N-(J'~+I)'L)I(N-(J~ I)'L) (25) The probability Pa(k,J) that k transactions 
are activated are given by (14) for the FCFS with skip policy, where Xq and Yik are computed using Ps(q,J) 
 as given by (25) rather than (13), and the upper index of summation is V-J rather than V-J+I. Since 
the newly introduced transaction has not waited for active transactions, the transition probability from 
Sj to Sj_I+ k is given by: =9| Pa(J,J'1)'Pw (J-l) for k=0 (26) Pt(J'J-1+k) ~ Pa(J'J-2+k)'(1-Pw(J'2+k)+ 
 Pa(J,J-1+k)'Pw(J-1+k) for I~J~_~L We also need to apply the restriction due to maxlmumMPL as in (18). 
 For the FCFS without skip policy, only the transaction at the head of the pending queue at J < H=min 
(V,M,[N/LJ) has been blocked due to lock conflict. The transition probability can be computed as follows: 
 -I-Ps2(J) for J<H and k=O 1-Psi(J) for J=H and k=0 Pt(J,J-1+k) Psi(J) for J=H and k=1 (27) k Ps2(J)'(~ 
Ps1(J+q-1))'(1-Ps1(J+k)) q=2 for J<H,k~1, and J+k-1<H k Ps2(J)'(U Ps1(J+q-1)) -q=2 for J<H, J+k-1=H 
 where Psl(J) : Ps(J) as given in (13) and Ps2(J) = Ps(0,J3 in (25) 3.5. Comnutin~ The Mean Number of 
Lock ~eouests In the analysis in the previous section we assumed that each transaction requires a fixed 
number of locks denoted by L. The value of L is computed using (2.1) as given in Section 2.1. 4. VALIDATION 
RESULTS AND DISCUSSION OF SYSTEM PERFORMANCE Simulation studies to validate the accuracy of the multilevel 
solution in Section 3 and a set of experiments to investigate the performance of DBMS's under different 
parameter settings and scheduling disciplines are reported here. The simulation program was used to 
validate the accuracy of results for level I-3 of the multilevel solution (see Figure 3.1) and especially 
the lock conflict model. No results pertaining to level zero are reported in this paper. The results 
at level zero are affected by an additional error due to the introduction of level one (eligible transaction 
model), which was in fact introduced to reduce the solution cost. The accuracy of the solution depends 
on the system reaching equilibrium between transaction arrival/departure instants. Such an approximation 
was used in [Thom82a] and shown to be satisfactorily accurate. The exact solution was obtained in that 
case by solving the set of global balance equations for the Markov chain representing transaction arrivals 
and departures. Such an approach can in fact be used to replace levels zero and one in Figure 3.1 by 
single level, at a significant increase in cost as in [PotiS0] for a database transaction processing 
system with U = 10 user terminals. The number of states increases rapidly and is O(U3), limiting its 
usefulness to small systems. In what follows, we first define the parameters for the test case. A summary 
of validation results and comments about the accuracy of the solution methods are then given. We proceed 
to discuss the effect of scheduling discipline, granularity of locking, transaction size, scheduling 
overhead, and window size.  4.1. Parameters for the Test Case A database with D = 128 data items was 
used in simulation. The number of items accessed by each transaction n was set to 4, 8, 16 and 32 to 
investigate the effect of transaction size. Table 4.1 shows the mean number of locks requested per transaction 
(L) for a given n and N (number of locks). The rounded value of L was used in the analytic and simulation 
studies. ,~-T~ ....,P-T-; ....,,,',,,-,,, ,-,,,- i I i i i I t I 4 i 1.000 [ 1.881 i 2.75" I 3.3"2 
i 3.680 i 3.860 I 3.953 I 4.000 [ 8 [ 1.000 i 1.99" I 3.629 I 5.339 i 6.957 i 7.359 [ 7.780 I 8.000 
 116 I 1.000 I 2.000 I 3.972 I 7.18, I 10.68 J 13o37 I 15.06 I 16.00 132 1 1.000 i 2.000 i ,.000 i 7.9"3 
I I,.52 I 22.0, I 28.09 I 32.00 ~............................................................ Table 
4.1 L for random placement for different values of n and N ( The rounded value of L is actually used 
). The central-server model depicting the computer system was shown in Figure 2.1 and consists of a 
single CPU and three disks. Processing requirements of transactions on devices (as explained in Section 
2.2) are given in Table 4.2. The lock release and scheduling overheads are expressed as a fraction of 
useful processing (F) at the CPU and one of the disks in the system, which contains the lock management 
table. The value of F is varied to investigate the effect of overhead on the behavior of the system. 
 The maximum MPL of the computer system is M=5, the maximum window-size used in conjunction with FCFS 
with skip discipline is W=2M, while W=M for the FCFS without skip discipline (since W>M would not affect 
results). 88  Loa~i~s, :k Yk ! =k i '~ _ i i IDevLce(k) ~i (per access) (per lock) I (per lock) ........................................................ 
 CPU I 0.005 I 0.005"F I O.005"F ........................................................ Disk 1 I 0.005 
I 0.005"F l 0.005"F ........................................................ i Disk 2 l 0.005 ~ 0.0 
l 0.0 , ........................................................  Disk 3 I 0.005 I o.o I 0.0 ........................................................ 
4" Table ~1.2 Processing requirements of transaction on devices. Due to space limitations, we only compare 
the mean system throughput as obtained by the decomposition method (using the lock conflict models with 
and without resampling) and simulation for validation purposes. The hierarchical nature of our model 
lends itself to a hierarchical validation ( from bottom to top), such that inaccuracies at each level 
can be rectified by adopting a more accurate model at the appropriate level. In this manner modelling 
inaccuracies are not allowed to propagate to higher levels, where the tracing of the source of inaccuracy 
is more difficult. More detailed validation results will appear in [RyuI83]. ~.2. VBlidation In this 
section we validate the accuracy of the decomposition method by comparing mean system throughput obtained 
by the analysis versus the simulation results as given in Table ~.3, ~.~, ~.5, and ~.6 for different 
parameter settings as appe&#38;ring in the captions of each table. The three consecutive numbers for 
each parameter setting correspond to the results obtained based on the lock conflict model with resampling 
of locks, no lock resampling, and simulation. The throughputs given for simulation are the mean values 
with relative half-widths about the mean of less than 5% at 90% confidence interval. The lock conflict 
model with no resampling is more accurate than the resampling model as would be expected. The resampling 
model gives optimistic results and consistently overestimates the mean system throughput. ~.3. The Effect 
of Schedulin~ Disciol~es The following discussion is based on the results of the lock conflict model 
without resampling. Table ~.3 and ~.~ give the mean throughput for small transactions (n=~) for various 
granularities of locking and window sizes. The improvement in performance due to the FCFS with skip 
policy with respect to the FCFS without skip policy is small when the granularity of locking is coarse 
and the window size is small. A fine granularity of locking and a larger window size allows the FCFS 
with skip scheduler to take better advantage of the potential concurrency in the system. The improvement 
in performance is 35% for W=10 and N=128. When the scheduling overhead is non-zero, e.g., 89 +....................................................... 
. ' ~ F=O.O (no overhead) i T'-~ ..... ,-";; .... T'-~ .... T-%; .... :,-";;~ .... I I I I ........ 
.--........÷ ......... .- ........ .. ........ I I 12.50 I 12.50 I 12.50 I 12.50 I 12.50 I 1 I 12.50 
I 12.50 I 12.50 I 12.50 I 12.50 I I 12.50 I 12.50 I 12.50 I 12.50 I 12.50 I [ 13.~0 I 13.92 i 15.89 17.55 
I 18.65 I 2 I 13.~0 ~ 13.92 I 15.89 17.55 : 18.65 I J 13.33 I 13.92 l 15.79 17.50 ~ 18.72 t ._ + I I 
111.24 15 -2/1 19.03 21.90 I 23.45 I 3 I lt= .2ti 15.17 18.29 20.77 I 22.51 I I 14.05 15.10 18.08 20.~9 
I 22.42 .............................................. =' I 15.01 16 .LI1 21.38 25.01 i 26.91 i 4 t 15.01 
16.25 20.12 23.10 ~ 25.2 ti I 14.98 15.92 19.56 22.62 I 25.18 ................................................#_ 
,-~ + ÷ I 15.71 I 17JI1 I 23.05 27.31 I 29.51 5 I 15.71 I 17.18 ~ 21.55 2a.89 J 27.29 I 15.~7 I 16.84 
: 20.65 24.21 I 26.60 *- *- ................................................ + ÷ + I 16.34 18.25 2L28 
~ 28.86 I 30.63 6 I 16.34 17.96 22.69 I 26.27 I 28.60 I 15.82 17.~2 21.95 ~ 25.43 ] 28.7~ ................................................+.. 
,-÷ + + I 16.89 [ 18.93 I 25.2~ i 29.80 I 31.02 7 I 16.89 ] 18.61 I 23.62 I 27.32 I 29.~1 [ 16.29 I 17.8~ 
~ 22.36 I 2'6.69 I 29.32 ................................................+_ .~-÷ ÷ + I 17.37 I 19.~8 
25.99 30.35 31.16 8 I 17.37 I 19.16 2~.39 28.13 29.91 I 16.67 I 18.25 23.2~ 2'7.58 30.47 I 17.79 I 19.92 
I 26.61 I 30.67 I 31.21 9 1 17.79 I 19.16 I 25.0~ I 28.75 I 30.25 ,' 16.96 I 18.25 : 23.68 I 28.1~ I 
30.71 , ................................ + ÷ + * .................. ÷ ' I 18.15 I 20.29 27.1~ 30.87 I 
31.23 10 i 18.15 I 20.00 25.59 29.23 I 30-49 ° ' ' I 17.30 : 19.16 2~.~8 28.61 I 30.7~ ' ........................................................ 
Table 4.3 Mean system throughputs for the FCFS wltb skip dlseipllne and n=~ for different values or £ranularlty 
or locking(L) and window slze(W). (Resampl1~ / no resampllng lock confllct model / slmulatlon) ~_ ...................................................... 
 I I F:0.O (no Overhead) :~;T-; ..... 7;; .... T;; .... - ;; .... T";;;- ]w : i l , , ........................................... 
J 12.50 12.50 12.50 l 12.50 12.50 1 12.50 12.50 12.50 I 12.50 12.50 12.50 12.50 12.50 J 12.50 12.50 13.40 
13.92 15.89 17.55 18.65 I 2 13.~0 13.92 15.89 17.55 18.65 I 13.47 1Ll.01 16.05 17.58 18.58 [ l 13.99 
17.09 20.71 23.01 I 3 I 13.9~ 16.33 19.03 21.35 l I 1~.01 16.22 19.00 21.26 I..... + *- ] 13.99 17.30 
22.~2 l 26.08 I 4 13.9~I 16.36 19.38 I 22.43 ] 13.89 16.~ 19.31 l 22.~6 .~. ÷-+- I..... + ................................. 
 j 17.31 23.12 28.21 5 16.36 19.~5 22.8~ ] 16.36 19.66 22.86 ._ ...................................................... 
+ Table 4.Zz Same as Table 4.3 except FCFS without skip discipline. FRO.2 as given in Table ~.5 and ~.6, 
the system throughput can actually decrease when the FCFS with skip discipline is adopted (compare values 
for F=0.2, N=128, n=32 in both cases). 4.4. The Effect of Granularity of Locking and Transaction Size 
The mean system throughputs given in Table 4.5 and 4.6 are the basis of this discussion. Note that increasing 
W beyond W=5 results in improving the perfor~ance of the FCFS with skip discipline in Table 4.5.  
 ,,,,,,,',,,,,__,',,,,_ I 1 12.50 ~ 6.250 I 3.125 I 1.563 I 11.91 I 6.098 I 3.086 1 1.553 I 1 I 12.50 
I 6.250 I 3.125 J 1.563 I 11.91 I 6.098 I 3.086 I 1.553 J I 12.50 [ 6.250 I 3.125 I 1.563 I 11.91 I 6.098 
I 3.086 I 1.553 I J 12.50 ~ 6.250 I 3.125 J 1.563 J 11.36 J 5.952 I 3.049 J 1.543 ] 2 I 12.50 I 6.250 
I 3.125 I 1.563 I 11.36 I 5.952 J 3.0,9 I 1.5,3 I I I 12.50 I 6.250 I 3.125 I 1.563 I 1i.36 I 5.952 I 
3.0,9 I 1.5"3 I I 12.50 J 6.250 I 3.125 I 1.563 I 10.87 I 5.682 I 2.976 1.52, I ~ 12.50 I 6.250 ~ 3.125 
~ 1.563 I 11.91 I 5.682 ~ 2.976 1.52~ I I 12.50 ~ 6.250 I 3.125 ~ 1.563 I 11.91 I 5.682 I 2.9"/6 1.52~ 
......................,--+-~-~ +-,-<.. +-.- ........................... I 15.71 I 6.250 I 3.125 J 1.563 
J 12.26 I 5.556 I 2.87, 1.~188 1 8 ] 15.71 ~ 6.250 I 3.125 I 1.563 I 12.26 I 5.556 I 2.87~ I ~188 l I 
15.71 ~ 6.250 I 3.125 I 1.563 I 12.02 I 5.556 I 2.87~ 1.JI88 __~+. .... ~- ...... 4- .... +.--.-..,-..... 
+. ...... +- ...... +. ..... I 17.,1 I 6.280 I 3.125 I 1.563 I 12.50 I ,.717 I 2.7"7 I 1.zi29 16 I 17.18 
J 6.280 I 3.125 ] 1.563 I 12.31 I ,.717 I 2.7,7 I 1.z~29 I 16.8~ I 6.278 I 3.125 ] 1.563 I 11.96 I ,.902 
I 2.7~7 I 1 ~29 --T;; oT" ' ;.;;;T;To; T;.;;; -T;;; TL T 32 I 21.55 7.551 I 3.125 1.563 I 15.72 i 5.689 
2.~168 I 1.37, I 20.85 7.11"0 I 3.125 1.563 I 15.09 I 5.6"3 2.559 l 1.3711 ..... +_ ..... ,_ ...... +. 
...... +_ ...... +- ...... ,- ...... +_ ...... +. ..... I 27.31 9.2~8 I 3.171 1.563 I 20.92 I 6.79, 
I 2.382 1.271 6~ ~ 2~.89 8.965 ~ 3.171 1.563 I 18.56 J 6,560 I 2.382 1,271 I 211.21 8.756 I 3.171 1.563 
I 18.08 ~ 6.,21 I 2.1167 1.299 I 29.51 I 10.86 I 3.603 I 1.563 I 23.29 I 8.912 I 2.6~17 I 1.209 128 I 
27.29 I 10.9, I 3.595 I 1.563 ~ 20.86 I 8.102 I 2.6,1 1 1.209 I 26.60 I 10.67 I 3.568 I 1.563 I 20.59 
I 7.881 I 2.662 I 1.251 .................................................................. Table ".5 
Mean throughputs with the FCFS with skip discipline with M=W=5. ~_ ........ 0:o ~L o===;; ...... - ........... 
03 .............  ',,,",,,,',,,",',_ I 12.50 I 6.250 ~ 3.125 J 1.563 11.90 6.098 I 3.086 1.553 1 I 
12.50 I 6.250 I 3.125 I 1.563 11.90 6.098 J 3.086 1.553 I 12.50 J 6.250 t 3.125 t 1.563 11.90 6.098 I 
3.086 1.553 12.50 I 6.250 3.125 I 1.563 11.36 t 5.952 ~ 3.0,9 I 1o5"3 2 12.50 I 6.250 3.125 t 1.563 11.36 
f 5.952 I 3.0"9 I 1.5"3 12.50 J 6.250 3.125 I 1.563 11.36 I 5.952 I 3.0Zl9 J 1.5"3 " 12.50 6.250 I 3.12~ 
I 1.563 10.87 ~ 5.682 I 2.976 1.52 zl 12.50 6.250 I 3.125 I 1.563 10.87 I 5.682 [ 2.976 1.52~ 8 I 13."0 
I 6.250 I 3.125 I 1.563 I 11.25 I 5.556 I 2.87Z~ ~ 1.,88 13JI7 I 6.250 I 3.125 I 1.5453 I 11.25 I 5.556 
I 2.87~1 I 1.,88 I 13.99 I 6.257 I 3.125 1.563 : 11.09 I 5.209 2.7,7 1.,29 16 I 13.9~ I 6.257 I 3.125 
1.563 I 11.05 ~ 5.209 2.7,7 1.~29 13.89 1 6.258 1 3.125 1.563 i 11.0~ ] 5.209 2.7~7 1.~29 32 I 16.36 
I 6.605 I 3.125 I 1.563 I 12.81 I 5."09 2.655 1.375 I 16." 11 I 6.598 I 3.125 I 1.563 I 10.,2 I 5."23 
2.655 1.37" .... T;; ;;TT;;TTT;IT" T; 6, I 19."5 ~ 7.133 I 3.137 I 1.563 I 15.08 I 5.676 I 2.587 I 1.322 
I 19.66 I 7.128 I 3.136 ~ 1.563 I 15.13 I 5.673 I 2.587 I 1.322  --T;; ;; T;3;; T; ;;;T;T;; V, ;8T 
128 I 22.8, I 8.302 I 3.250 I 1.563 I 17.7, I 6.526 I 2.622 [ 1.289 J 22.86 [ 8.279 I 3.251 [ 1.563 J 
17.71~ I 6.509 I 2.623 I 1.289 ' <.. ................................................................ 
 Table ~.6 Mean thro~ghputs with FCF$ without skip discipline with H=W=5. With no overhead, the throughputs 
are constant for up to N=4 because only one transaction is allowed to be active. For small transactions 
(n=4 and 8) the throughputs increase beyond N=4 as the granularity of locking increases, but the increase 
in throughput is insignificant for large transactions (n=16 and 32). In case of F=0.2, the throughput 
for small transactions ir~tlally decreases up to a certain value of N, due to the increase in scheduling 
overhead and the fact that there is no increase in Mean System Throughput (T) 28 -- ----With resampling 
p" 26 / ........ Without resenpling / / 24 --Simulation /~ / 22 / °," 20 / 18 16 14 12 I0 / ,/..° 
8 //~/.° " 6 4 n=16 2 n-32 Granularity of locking (N) F~ ~.1 Throu~put v~sus ~.amll~ty ~ 1¢d¢~ for 
diffm~mt transaot£on sizes (n) fop M=W=5,FsO.1, FCFS~r£th sldp d t.e~Lpl£,,.-. effective MPL as N is 
increased up to N=4. The throughput, however, increases for N~16 because of the increased potential for 
concurrent prooenslnE due to reduced probability of lock copilots. The throughput for large transactions, 
however, is almost constant. It follows from Figure 4.1, where we have plotted some of the previous 
results, that fine granularity is preferred for small transactions, but granularity of looklng does not 
affect the performance o£ large transactions. A coarse granularity can be adopted in the latter ease 
to reduce overhead processing due to locking. The results obtained here tend to agree with the results 
in [Ries79, Poti80].  4.5. The Effect of Schedulln~ Overhead Table 4,7 shows the throughputs for various 
values of F at M=W=5 and both scheduling dlsclplines. It is observed that the system throughput significantly 
decreases with the increased overhead. In the case o£ large overhead, the FCFS without skip discipline 
outperforms the FCFS with skip in some oases due to its lower scheduling overhead. 90 ---,--,---,---,---,---,---,---,--,---,--,,---,--,,---,-,,,-, 
 . I I I I I I I I Is\ FI I l I I I I I I I I001 12.50 12.50 I 12.50 I 15.71 17.18 21.55 2~I.89 27.291 
I t 12.50 12.50 I 12.50 I 13.~0 13.9~1 16.36 19.45 22.8~I I 1051 12.35 12.20 I 12.05 I 1~.69 15.66 19.79 
23.03 25.~6; I I I 12.35 12.20 1 12.05 I 12.79 13.09 15.31 18.16 21.35] I IltlOl 12.20 11.90 I 11.63 
I 13.78 lzl.37 18.25 21.37 22.291 I I I 12.20 11.90 I 11.63 I 12.23 12.33 lq.38 17.01 20.01l I 1151 12.05 
11.63 I 11.2£l I 12.98 13.26 16.90 19.88 22.25~ I I I 12.05 11.63 I 11.2~I I 11.72 11.66 13.55 16.05 
18.821 I 1201 11.91 11.36 I 10.87 I 12.26 12.31 15.72 18.56 20.861 I I I 11.90 11.36 I 10.87 I 11.25 
11.05 10.81 15.08 17.7~11 --+'-+" ..... +'- ...... +-...... +-...... 4-...... +--..... +-...... +--~ 
l I I001 6.250 6.250 I 6.250 6.250 I 6.280 7.551 8.965 10.9~1 I I I 6.250 6.250 I 6.250 6.250 I 6.257 
6.605 7.133 8.3021 I 105l 6.211 6.173 I 6.098 6.o61 I 5.799 6.976 8.226 10.09l I I I 6.211 6.173 I 6.098 
6.061 I 5.958 6.266 6.70~ 7.7781 18 I101 6.173 6.098 1 5.952 5.882 ~ 5.388 6.,~80 ?.591 9.31121 I I I 
6.173 6.098 I 5.952 5.882 I 5.685 5.960 6.3?.3 7.3131 I 1151 6.135 6.02~ I 5.81~1 5.71~ I 5.030 6.0~7 
7.0~10 8.68~I I I I 6.135 6.02~I I 5.81~1 5.71~1 I 5.~36 5.682 5.982 6.8981 I 1201 6.098 5.952 I 5.682 
5.556 I 11.717 5.668 6.560 8.1021 I I I 6.098 5.952 1 5.682 5.556 1 5.209 5.~23 5.673 6.5271 I I001 3.125 
1 3.125 I 3.125 3.125 3.125 3.125 3.171 3.5951 I I I 3.125 I 3.125 I 3.125 3.125 3.125 3.125 3.137 3.2501 
l 105l 3.115 I 3.106 I 3.086 3.058 3.021 2.930 2.929 3.2961 I l l 3.115 1 3.106 I 3.086 3.058 3.021 2.993 
2.979 3.0661 1161101 3.106 I 3.086 I 3.0~9 2.99~ 2.92~1 2.75.8 2.720 3.0116l l I 3.106 1 3.086 ~ 3.0~9 
2.99~; 2.92~l 2.871 2.836 2.903l t151 3.096 I 3.067 I 3.012 2.933 2.833 2.605 2.51i0 2.829[ I I 3.096 
I 3.067 I 3.012 2.933 2.833 2.?58 2.706 2.7511 I20~ 3.086 I 3.0q8 I 2.976 2.87~ 2.7~7 2.~168 2.382 2.6~lll 
I I 3.086 I 3.0q8 I 2.976 2.87~ 2.7~7 2.655 2.587 2.6231 --<.--+-..... ~ .... +.,-...... .t--...... 4- 
...... ~ .... ~ ...... +. ..... I I001 1.563 1.563 1.563 1.563 1.563 1.563 1.563 1.5631 I I 1.563 1.563 
1.563 1.563 1.563 1.563 1.563 1.5631 1051 1.560 1.558 1.553 1.543 1.527 1.511 1.~78 1.4561 I I 1.560 
1.558 1.553 1.5~3 1.527 1.511 1.~95 1.~8111 132;101 1.558 1.553 1.5~3 1.52~ 1 .~93 1.462 1. ~02 1.3631 
I I I I 1 1.558 115[ 1.555 I I 1.555 1.553 1.5118 1.5118 1.543 1.53q 1.53~ 1.52~ 1.506 1.506 I.~93 1.~60 
1.~60 1.q62 1.~16 1.~16 1 .~32 1.333 1.375 1.~131 1.2821 1.3481 I I 120] 1.553 I I 1.553 1.5~3 1.5~3 
1.52~ 1.52q 1.~88 1."88 1 ~9 1 ~29 1.37~ 1.374 1.271 1.322 1.2091 1.2891 .................................................................. 
4 Table q.7 Mean system througputs at W=5 for varying granularities of locklng(N) and transaction sizes 
(n). (FCFS with skip / FCFS without skip)  4.6. The Effect of W~ndow-$1ze on SYstem Increasing the 
window slze (W) with FCFS with skip discipline increases the potential concurrency for a higher MPL. 
On the other hand, when scheduling overhead is high, increasing W can result in degradation of performance. 
 Figure ~.2 shows the mean system throughput versus W. The results were obtained using the decomposition 
method without lock resampllng. It is observed that the system throughput actually decreases for small 
transactions (n=4) when the scheduling overhead is high. This implies that a large window size W might 
be detrimental to performance in such cases. 5. CONCLUSIONS A decomposition solution method was used 
in this paper for evaluating the performance of centralized databases wlth static locking and a random 
reference pattern. Simulation was used to validate the model, which was shown to be of adequate accuracy. 
We have also investigated the effect of varying system parameters such as transaction size, granularity 
of locking, wlndow-slze, and the scheduling discipline and its overhead on performance. Mean Syste~ 
Throushput (T) 30 28 26 24 22 2(1 18 16 14 12 10 8 n-8 / I ! F,~O. (1 L n-36 ~,-0.2 _ _ , 
, , i i ~ . 5 6 7 8 9 I0 Wludow size (~) Figure 4.2 5yste~ throughput versus window size wlth a FCFS 
with skip discipline at N-64. The work in [Poti80] is extended by allowing more than one transaction 
to be considered for activation, which allows the incorporation of scheduling disciplines into the model. 
We have also provided for a more efficient solution of the QNM by (i) prorating scheduling overhead over 
the set of active transactions, which results in one Job type in the QNM, (ii) the introduction of an 
additional level (the eligible transaction model) should result in substantial savings in computational 
cost for computing user response times. The decomposition method of this paper supplements the simulation 
approach in [Ries77, Ries79], the analytic method in [Poti80], and the iterative solution method in [Oa1182] 
for analyzing DBMS with static locking. Further work remains to be done to investigate the effect of 
reference patterns, such as different lock reference patterns, on system performance. Due to the hierarchical 
nature of our model this should only affect the analysis of the lock conflict model. Loknowled~ement 
 The authors wish to acknowledge the invaluable assistance of Ms. Mildred Covin in preparing the manuscrlpt. 
 91 Brow80 Cour77 Dant80 Date83 Eswa76 Gall82 Iran79 Lang82 Lave83 Mena82 Moi179 Naka81 REFERENCES 
 <RefA><SinRef><author>Brown, R.M</author>.; <author>Browne, J.C.; </author>and <author>Chandy, K.M. </author>"<title>Memory management and response time</title>," <journal>Comm. ACM </journal><volume>20, 3 
</volume>(<date>March 1977</date>), <pages>153-165</pages></SinRef>. <SinRef><author>Courtois, P.J.; </author>~ : <title>Oueuei~ and ~ System Avolications</title>, <publisher>Academic Press</publisher>, <date>1977</date></SinRef>. 
 <SinRef><author>Dantas, J.E.R. </author>"<title>Performance analysis of distributed database systems</title>,"<tech> Ph.D. Dissertation</tech>, <institution>Computer 
Science Dept., University of California,</institution> <location>Los Angeles</location>, <date>1980</date></SinRef>. <SinRef><author>Date, C.J. </author><title>An Introduction to Database </title>~m~_-~, 
<publisher>Addison-Wesley</publisher>, <date>1983</date></SinRef>. <SinRef><author>Eswaran, K.P</author>.; <author>Gray, J.N.; </author><author>Lorie, R.A.; </author>and <author>Tralger, I.L. </author>"<title>The notions of consistency 
and predicate locks in a database system</title>," <journal>Comm. ACM lq</journal>, <volume>11</volume>(<date>Nov. 1976</date>), <pages>624-633</pages></SinRef>. <SinRef><author>Galler, B.I. </author>"<title>Concurrency 
control performance issues</title>," <journal>CSRG-147</journal>,<institution> Computer Systems Research Group, University of Toronto</institution>, <date>Sept. 
1982</date></SinRef>. <SinRef><author>Irani, K.B., </author>and <author>LIn, H.L.</author> "<title>Queuelng network models for concurrent transaction processing in a 
database system</title>," <booktitle>In Proc~ ACM SIGMOD Int'l Conf. on ~ of Date</booktitle>, <location>Boston, Mass</location>., <date>June 1979</date>, <pages>PP. 134-142</pages></SinRef>. 
<SinRef> <author>Langer, A.M.; </author>and <author>Shum, A.W. </author>"<title>The distribution of granule accesses made by database transactions</title>," ~ 
, <volume>11</volume>(<date>Nov. 1982</date>), <pages>831-832</pages></SinRef>. <SinRef><editor>Lavenberg, S.S. </editor>(ed.) <booktitle>Mndelln~ Handbook</booktitle>~ <publisher>Academic Press</publisher>, <date>1983</date></SinRef>. <SinRef><author>Menasce, D.A.;</author> 
and <author>Nakanishi, T</author>. "<title>Optimistic versus pessimistic concurrency control mechanisms in database management 
systems</title>," <journal>~ Systems </journal><volume>I, I(</volume><date>1982</date>), <pages>13-27</pages></SinRef>. <SinRef><author>Molina, H.G. </author>.<title>Performance of update algorithms for replicated 
data in a distributed database</title>," <tech>Ph.D. Dissertation</tech>, <institution>Computer Science Dept., Stanford University</institution>, <date>June 
1979</date></SinRef>. <SinRef><author>Nakanishi, T.; </author>and <author>Menasce, D.A. </author>"<title>Correctness and performance evaluation of a two-phase cow,nit 
based protocal for DDBS</title>," <tech>Technical Report DB 078102</tech>, <institution>Departamento de Informatica,</institution> <location>Pontiflcia Unlversldade 
Catolica de Rio de Janelro, Brasil</location>, <date>1981</date>. 92 </SinRef>Poti80 Ries77 Ries79 RyuI83 Sevc81b Shum81 Smit78 
 Thom82a Thom82b <SinRef><author>Potler, D.; </author>and <author>Leblanc, Ph</author>. "<title>Analysis of locking policies in database management systems</title>," 
<journal>Co~un. ACM</journal><volume> 2~, 10</volume>(<date>Oct. 1980</date>),<pages> 584-593</pages></SinRef>. <SinRef><author>Ries, D.R.; </author>and <author>Stonebraker, M.R</author>. "<title>Effects of locking granularity 
in a database management system</title>," <journal>ACM Trans. Database Systems </journal>~, <volume>3</volume>(<date>Sept. 1977</date>), <pages>233-246</pages></SinRef>. <SinRef><author>Ries, D.R.; 
</author>and <author>Stonebraker, M.R. </author>"<title>Locking granularity revisited</title>," <journal>ACM Trans. Database Systems </journal>~, <volume>2</volume>(<date>June 1979</date>)<pages> 210-227</pages></SinRef>. 
 <SinRef><author>Ryu, I.K. </author>"<title>Performance modelling of database systems</title>," <tech>Ph.D. Thesis </tech>in progress, <institution>Dept. EE-Systems, University 
of Southern California</institution></SinRef>. <SinRef><author>Sevcik, K.C. </author>"<title>Database system performance predication using an analytical model</title>," 
in <journal>~roc. Seventh Int'l Conf. on Very Lar~@ Data Eases</journal>, <location>Cannes, France</location>, <date>Sept. 1981</date>, <pages>pp. 182-198</pages>. </SinRef><SinRef><author>Shum, 
A.W.; </author>and <author>Spirakis, P.G. </author>"<title>Performance analysis of concurrency control methods in database systems</title>," in 
 '81, <editor>F.J. Kylstra </editor>(ed.), <location>North-Holland</location>, <date>1981</date>, <pages>pp. 1-19</pages></SinRef>. <SinRef><author>Smith, A.J. </author>"<title>Sequentiallty and prefetching 
in database systems</title>," <journal>ACM Trans. Database Systems </journal>Rq 3(<date>Sept. 1978</date>) <pages>222-247</pages></SinRef>. <SinRef><author>Thomesian, A</author>. "<title>The performance 
of a transaction processing system with static locking</title>," submitted for publication</SinRef>. <SinRef><author>Thomaslan, A. </author>"<title>An 
iteratlve solution to the queuelng network model of a DBMS with dynamic locking</title>," <booktitle>In Proc. l~th Comcuter 
Measurement Grouo Conference</booktitle>, <location>San Diego, CA</location>, <date>Dec. 1982</date>, <pages>pp 252-261</pages></SinRef>.</RefA>     
			
