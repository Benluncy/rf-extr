
 An Operating Systems Programming Laboratory Course Tsunetoshl Hayashi Educational Center for Information 
Processing Kobe University of Commerce Taruml, Kobe, Hyogo 655, JAPAN SUMMARY Some inherent difficuties 
are present for good exercise and practice in operating systems program- mlng laboratory course. This 
paper gives a fairly manageable laboratory course plan for programming operating systems (OSs) and a 
teaching tool which is used in it. The plan enables a prototype operating system as a whole, including 
the nucleus and multlprogramming mechanism, to be written in high level language. The operating system 
can run a binary machine program as job program. It is realized through simulation in a common programming 
environment. Some drawbacks of the plan are discussed and solutions are also given. 1. INTRODUCTION 
 Systems programming is one of the most basic disciplines of computer science. Many introduc- tory and 
explanatory textbooks in this field, in particular, programming language and operating system (OS) have 
been published. Adequate prac- tice and exercise are necessary for learning systems programming, since 
its basis is of techni- cal nature. However, there is inherent diffi- culty of exercising OS programming 
in e laboratory course at college or university. There have been a few articles which addressed this 
problem, for example, see [2]. On the other band, a programming course in compiler construction is far 
easier than one in OS programming. Because, the former can be carried out using high level language in 
an adequate programming environment such as TSS, unless it deals wlth object binary machine code. The 
methodology of compiler construction had been establlshed firmly as well. The difficulty of OS programming 
laboratory course is aroused by lack of these properties. In other words, the reason of the difficulty 
is that an OS Brogram must have close interaction Permission to copy without fee all or part of this 
material is granted provided that the copies are not made or distributed for direct commercial advantage, 
the ACM copyright notice and the title of the publication and its date appear, and notice is given that 
copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. &#38;#169; 1983 ACM 0-89791-091-5/83/002/0031 $00.75 with 
the hardware on which it runs, as it is the innermost and basic software of a computer system. Therefore 
it, or at least parts of it, must be usually written in an assembly language and tested on a bare hardware. 
It might take very long time to write an OS program and debug it, or to confirm it runs right, that a 
programming course cannot be done in an appropriate school term, This paper proposes a teaching tool 
for programming an OS, which can make right of this Situation. Some criteria for @cod OS programming 
course are given beforehand. An OS programming labora- tory course should meet the following criteria: 
 (I) It must give students precise understanding of basic OS program structure including the multi- programming 
mechanism;  (2) It must give students adequate practice, for example, writing and completÂ±ng a small 
scale OS;  (3) It can implement basic algorithms constituting am OS without reflecting particular hardware 
architecture;  [4) A few students, or groups of students, can do their assignment simultaneously in 
an adequate programming environment; and (5) It should be completed in an adequate term, for example, 
in a quarter, or a semester. These criteria are arbitrary and not complete, but seem reasonable ones. 
They are, however, rather difficult to be satisfied at the same time, since they imply contradiction. 
 As the criterion (lJ suggests that students should be permitted to deal with the multiprogram- ming 
mechanism. Since such a mechanism inter- acts with the hardware very closely, it seems machine code programming 
is inevitable. Note that high level concurrent programming language such as concurrent-Pascal does not 
meet this crite- rion. For, in order to hold the level oF abstraction high, such a language hides the 
multi- programming mechanism from a user and the mechanism cannot be coded directly in the language [4]. 
 On the other hand, the criteria (3), (4), and (5J state OS programming in high level language is only 
feasible implement of OS laboratory course. In order to cope with the difficulty, a teachigg tool and 
a plan for OS programming labora- tory course will be proposed in this paper. They, used together, 
seem to meet these criteria well. They had been employed in the systems  programming laboratory course 
at the Department of Information Science, Kyoto University in IB77 [3], and were used for several years. 
 2. OS PROGRAMMING LABORATORY COURSE The plan copes with the difficulty through adoption of a sophisticated 
virtual limaginary) hardware as a teaching tool. It consists of a simple model (prototype) OS, the virtual 
hardware simulator (the tool), and a host of supporting util- ity programs. Its outline is:  (i) Students 
are requested to develop a small scala, prototype OS on a (simulated) virtual hardware;  (ii) External 
and internal specifications of the prototype OS are given to students by a text- book;  (i~i) The outline 
of algorithms constituting the prototype OS will be explained, if necessary, using skeleton program listings; 
 (iv) Job programs are prepared in binary loading format in advance by the instructor;  (v) When the 
prototype OS is completed, it will be combined with the virtual hardware simulator and supporting untilities; 
and  (vi) If the prototype OS runs job program success- fully, the assignment is completed.   The 
specification and operational instruction of the virtual hardware simulator are also illustrated by the 
textbook.  2.1 Virtual hardware The virtual hardware being the center of the oroposed plan is designed 
uniquely and exclusively to satisfy the criteria given in section 1: that the algorithms constituting 
the prototype OS as-a whole should be written in high level language, and the OS programs should be made 
possible to interact with the bare hardware functions such as interrupts, context switching, and input/output 
control.  Spe~icic~tion o~ the typical virtual hardware is, for example, as follows: I) The hardware 
has two program state: supervisor and user. The state is indicated in a (simu- lated) program status 
word IPSW). 2) In the supervisor state, the hardware inhibits interrupts and runs (OS) programs in high 
level language. 3) In the user state, the hardware permits interrups and runs binary machine code (job] 
programs stored in (simulated) main memory. 4) The hardware is provided with several registers, PSWs, 
and main memory. (OS) programs written in high level language can refer to them as relevant variables. 
 5) The hardware is provided with several instruc- tions required for OS programming (idle, start io, 
supervisor call etc.). OS programs can invoke them as primitive operations, or library proce- dures, 
depending on the language design. The high level language can be of any algo- rithmic languages, e.g. 
Algol 60, Pascal, PL/I. Or else, a typeless language such as BCPL and Bliss can be used for this purpose. 
 The minimum configuration of the hardware has a /* llardware registers accessible in supervisor state. 
*/ const bits = . ........ ; max memorv = ......... type PSW = record status : (supervisor, user); 
 program counter : 0 .. max memory~ program environment : ......... ;   e.Dd; interrupts = (operator 
call, PCI, card end, printer end, typewriter end); word = array [bits] o_f_f Boolean; var old PSW, 
new PSW, current PSW : PSW; ISR : array [interrupts] o.~_f Boolean; main memory : array [0 .. max memory] 
o_f_f word; procedure start in (device: ... , va~: data ...); procedure idle: procedure supervisor 
call; Figure 1 Registers of the virtual hardware in Pascal-like language. standard input device, a 
standard output device, and a console device: a card reader, a line printer, and a typewriter. And, if 
necessary, some direct access devices may be added to this configu- ration. The hardware also has an 
operator call inter- rupt button in its console, that is: the simulator should provide a means to invoke 
such an effect. Figure I shows the declaration of hardware registers, PSWs, and library procedures in 
Pascal- like language. OS programs can access them and make use of them. The simulator must maintain 
some of the registers. From the viewpoint of OS programs, these declarations are the specification of 
the hardware. The interrupt status register (ISR) indicates presence o~ unprocessed interrupt requests. 
The interrupt sources are, in this case, program con- trolled interrupt (PCI), ooerator call, and device 
end signals. The PCI is set either a program in supervisor state (an 01 ologram) invokes supervisor call 
instruction, or w~en a program in user state Ca job program) requests OS service by executing a program 
controlled interrupt machine code; The operator call interrupt is set when the operator call button is 
pushed, that is. when such effect is simulated; One of the device end interrupts is set when corresponding 
device termi,~ates its operation. If any one of these indicdtors is set In the user state, or when an 
OS program invokes super- visor call instruction, the hardware changes its state to the supervisor state 
if the previous state is not so; saves the current PSW to the old PSW;  32 and calls a specially defined 
interrupt handling procedure which has been supplied as the nucleus of the prototype OS. This procedure 
is reserved for this purpose, and students must write one. At the end of the procedure, the hardware 
restores the current PSW from the new PSW; and contlnues execu- tion according to the current PSW. 
The procedure may assign a value (which may have been saved from the old PSW) to the new PSW for context 
switching. Note that an indicator is reset when a program assigns a new value to it. The idle instruction 
halts continuous execution of programs unless at least one of the indicators in ISR is set. And when 
one is set, the hardware resumes execution at the succeeding statement of the invocation of the instruction. 
 The start in instruction starts an input/output operation of the device deigneted by the instruc- 
tion. The hardware continues program execution in parallel with such input/output operations. Termination 
of an operation is indicated by the cor- responding device end indicator. The hardware looks peculiar 
at first glance, however, it is natural and suitable for OS program- ming understanding and development. 
The hybrid structure of the virtual hardware is adopted to enable a programmer to write OS programs in 
high level language, and to avoid bare machine handling. And at the same time, it enables OS programs 
to access hardware controlling functions directly.  2.2 Prototype operating system The prototype OS 
should be simple and concise, end need not have over-sophisticated features, but should have essential 
structure of existing OSs. The following is specification of an example proto- type OS which can be implemented 
on the virtual hardware: I) The OS can handle one job stream externally, but it does multiprogramming 
internally (several processes are running concurrently). 2) The OS must have simple job control facility, 
but no spooling or no resource allocation. A job consists of binary loading programs and data. 3) The 
OS must have a set of simple but effective operator commands. 4) The OS must have a set of monitor service 
func- tions (monitor macros) based on communication between processes. According to the specification, 
the prototype OS must consist of the nucleus, monitor service functions, and several processes. It must 
be also provided with the monitor data base holding system status information. (i) Processes At least 
following processes are necessary for the basic hardware configuration: job process --- accepts job 
control language; loads a job program; dispatches a job; and if necessary, forces a job to termi- 
nate. operator process ---accepts operator call interrupt and operator commands; processes operator 
commands; and types out operator messages.  printer process ---deals with output operation and interrupt 
for line printer. typewriter process ---deals with i/o operation and interrupt for typewriter. (ii) 
Monitor service functions  The monitor service functions must provide sufficient facility with the OS. 
Processes invoke a monitor service function through supervisor call instruction. At least the moni- tor 
service functions should help the message exchange between processes and operation level input/output 
support to be implemented. They can be any type of communicating/synchronizing primitives such as P/V 
operators. For educa- tional purpose, the message exchange primitives (send message, wait message, send 
answer, wait answer) proposed by Brinch Hansen [1] seem appro- priate, (i~i) Nucleus The nucleus establishes 
multiprogramming envi-ronment of the prototype OS, and transfers the control through processes and monitor 
service func-tions, A stack (called the control stack) must be provided with each process to keep track 
of this transfer of the control. The nucleus is written as the interrupt handling procedure, and is invoked 
when an interrupt is acknowledged by the hardware. It multiplexes processes by switching PSWs. This 
example OS reflects the structure of existing OSs very neatly so that it makes students undertsand it 
well, and is simple enough to be developed in a short while. 3. IMPLEMENTATION OF THE PLAN AND TOOL 
 3.1 Support system The support system, or the simulator of the virtual hardware, can be implemented 
as follows. Figure 2 shows the outline of the support system and its relationship with the prototype 
OS. The behavior of the support system is: (I) when a real or simulated interrupt occurs, it invokes 
the OS nucleus (the interrupt handling procedure); and at the end of the procedure, the control is returned 
to the support system: (2) if the current PSW is set to the user state, the support system simulates 
binary machine code stored in main memory according to the PSW; and  (3) if the current PSW is set to 
the supervisor state, the support system dispatches an OS program determined by the PSW.  The support 
system is written in the same language as that of the prototype OS, and prepared in a program library 
in advance. And, when the prototype OS is completely written, it is linked together with support system, 
When the load module is started by the environment OS, the sup-port system takes the control and runs 
the proto-type OS on the virtual (simulated) hardware. No Initial program load, or.no bare machine handling 
is necessary. OS programming can be practiced using an adequate programming environment provided by the 
environment OS. The support system card process ---deals with input operation and  should implement 
useful facilities such as program interrupt for card reader.   IIin er uP OS nucleus tl I idle 
end of nuleus support supervisor~ I interrupt system control I support --~ start io, system OS I 
OS process, supervisor call ;art monitor function _ ~ binary machine II u.~4"~rl code simulator 
 ,T s~a~us I initialize I Figure 2 Relationship of the support system and prototype OS. trace, snap 
shots, and post mortem dump, etc. proced.ure operator process; In addition, the assembler for the virtual 
hardware be~in is necessary for preparing Job programs. 3.2 Considerations on drawbacks supervisor 
call ( ... ); There are a few drawbacks, or problems, in < this tool. Some of them are [i) language 
issue; i~s nucleus and (ii) parameter passing to monitor service end; context functions from Job and 
OS programs. wi t;hing procedure job process; (i) Language issue be~in The multiprogramming behavior 
of the prototype OS might violate the block structure of OS programs, or procedure call nest chains. 
If we regard the supervisor call ( ... ); prototype OS and the support system as one program, < we 
will find that the multiprogramming mechanism is established as indirectly called co-routines. en_.dd; 
 The nucleus determines the routine to be dispatched. In this regards, the run-time information must 
be Kept somewhere in the PSW [see figure 3). Figure 3 Violation of block structure. In an implementation 
of contemporary program- ming language, the run-time information is Kept in all written in the same 
block, and the supervisor the run-tlme stack. The language used ~or this call instruction passes the 
label attached to the plan must have a means to save the information next statement of the invocation 
as a parameter. compactly, or the whole stack mus.t be Kept in the PSWs holds the label as a current 
value of program PSW. A proposal for the design of the language: counter in supervisor state. Shortcomings 
are the run-time stack should be organized as linked that the prototype OS cannot be adequately struc- 
 chain of frames which correspond to activated tured, no procedure is permitted inside the program 
blocks. PSWs need Keep just a chain, or a of processes and monitor service functions, and pointer. 
 the program is scattered with many labels and gotos. Another solution: programs of processes and monitor 
service functions of the prototype OS are {ii) Parameter passing Parameters cannot be passed in a usual 
way to a monitor service function from binary job programs or from processes, since the link between 
a func- tion and program uses the control stacK, and is quite different from ordinary procedure call. 
The types of a parameter from job programs and OS programs are also different: binary coded data in main 
memory and abstract data defined by the language, since these programs run on the differ- ent hardware. 
Parameters should be reduced to pointers, and held in the control stack frame of the calling program, 
or called program, with the PSW. A monitor service function must determine the type of parameters by 
examining the program state of calling program. This overhead may be a little bit annoying, but the method 
is workable. There can be another solution, in which the support system automatically converts the data 
type. The shortcomings are that the data type of a parameter is defined by the support system and not 
by the OS designer, and that the scope of the actual parameters must be well-Known to the support system, 
In the multiprogramming environment of the prototype OS, this may be difficult. 4. CONCLUSION A teaching 
tool and a plan for OS programming laboratory course is described. According to the plan, students are 
requested to develop a small, well-structured operating system on the virtual hardware. There can be 
assignments other than this, for example: (I) writing processes and monitor service functions only on 
predefined primitives (e.g. concurrent- Pascal);  {2] writing job schedulers, spooling programs, and 
file systems on an existing OS; and  (3) mesuring and evaluating performance of an exisitng OS for variuos 
jobs.  These are, however, rather inadequate for students (uninitated to OS concepts) to learn basic 
structure of a typical OS, and they cannot meet the criteria given in the section 1. For (1), the multÂ±programming 
mechanism is hidden from the students. For [2) and (3), only very speific Knowledge can be obtained. 
 ACKNOWLEDGMENT The idea of the plan was conceived when the author was with the Department of Information 
Science, Kyoto University. The author acKnowl- edges his thanks to the members of the department who 
are in charge of the systems programming labor- atory course for useful discussion. REFERENCES <RefA>[I] 
<SinRef><author>P. Brinch Hansen</author>:<title> Operating Systems Principles</title>, <publisher>Prentice-Hall</publisher>, <date>1973</date></SinRef>. [2] <SinRef><author>J.J. Donovan </author>&#38;<author> S.E. Madnick</author>: 
<title>Software Projects, Pedagogical Aids for Software Education and Research</title>, <publisher>McGraw-Hill</publisher>, <date>1977</date></SinRef>. [3] <SinRef><author>M. Shimasaki</author>, 
<author>T. Hayashi</author>, <author>S. Kitazawa</author>, <author>S. Furutani</author>, <author>M. Watanabe </author>&#38; <author>K. Watanabe</author>: "<title>A labor- atory Course on Programming 
in Department of Information Science</title>", <journal>Trans. of IPSJ</journal>,<volume> voi.21, no.2</volume>, <date>1980</date>, <pages>pp.83-90 </pages>[in Japanese).</SinRef> 
[4] <SinRef><author>P. Brinch Hansen</author>: <title>The Architecture of Concur- rent Programs</title>,<publisher> Prentice-Hall</publisher>, <date>1977</date></SinRef>. [5] <SinRef><author>T. Hayashi</author>: 
"<title>Simulation of a Hybrid machine -- Another Pedagogical Aid for Operating Systems Programming in a High 
Level Language</title>" <note>to appear</note> <booktitle>In Journ. of Inf. Proc</booktitle></SinRef>.</RefA> 
			
