
 3D Geometric Simulation of MEMS Fabrication Processes: A Semantic Approach Hrishikesh Dixit* Sibley 
School of Mechanical and Aerospace Engineering Cornell University Ithaca, NY 14853 Srikanth Kannapan 
Xerox Corporation Design Research Institute Cornell University Ithaca. NY 14853 Dean L. Taylor Sibley 
School of Mechanical and Aerospace Engineering Cornell University Ithaca, NY 14853 Abstract The characterization 
of fabrication processes by simulating the evolving 3D geometry and material attributes of a work-piece 
is a powerful means to ensure manufacturability of an artifact, and to guide the process of simultaneous 
design of both the artifact and its fabrication process. The multi-disciplinary field of Micro-Electra-Mechanical 
Systems (MEMS) is a prime example where such fabrication simulation is vital for integrating design and 
fabrication process design and enabling faster prototype development. This paper presents a semantic 
approach to characterizing fabrication processes by modeling the specific physical and chemical nature 
of MEMS fabrication process elements, and developing a process algebra and related algorithms for capturing 
the geometric and material transformations occurring in MEMS fabrication processes. A software tool, 
called MEMShapes, has been developed that implements the algorithms using geometric operations such as 
topological queries, aftine transformations and Boolean operations available through a commercially available 
geometric modeling software library. MEMShapes has been applied and tested for the SCREAM (Single crystal 
Reactive-ion Etching And Metallization) fabrication process developed at Cornell University. MEMShapes 
has an X-Windows user interface, a programming interface, as well as a WWW-accessible user interface. 
MEMShapes enables a MEMS engineer to interactively visualize geometric and material models of MEMS devices, 
evaluate device designs and tune fabrication parameters before actual fabrication. 1 Introduction process, 
and to diagnose flaws in the fabrication process itself. Such simulations are analogous to the simulations 
developed for CNC code analysis and validation. The characterization of fabrication processes available 
to create engineering artifacts is important since the nature of a fabrication Micro-Electra-Mechanical 
Systems (MEMS) is a expanding fieldprocess can substantially determine the space of designs that are 
of multi-disciplinary activity where fabrication processes similar to manufacturable, the quality of 
the fabricated artifact, and the integrated circuit fabrication processes are used to realizedevelopment 
time for realizing functional prototypes. Geometry electromechanical sensors and actuators on Silicon 
wafers with and material are the fundamental attributes of a work-piece that are micron-scale features. 
The MEMS field is a prime example where transformed by a great variety of fabrication processes -ranging 
the fabrication process critically influences the process of device from traditional machining processes 
to advanced integrated circuit design, the percentage yield of working devices in a wafer, as well fabrication. 
Consequently, a powerful means of characterization of as the actual performance of a fabricated device. 
A typical MEMSa fabrication process is by simulating the effect of a sequence of fabrication process 
is a specialized controlled sequence of selected fabrication steps on the 3D geometry and material of 
the work- process elements, each of which produces a geometric and material piece. Such fabrication simulations 
are valuable in guiding the transformation of a substrate material (usually a single crystal design of 
the artifact to ensure manufacturability, to evaluate and Silicon wafer). visualize the evolution of 
the work-piece through the fabrication Basic process elements in MEMS fabrication processes include steps 
such as oxide deposition, lithography, pattern transfer, etching, and metallization. Each process element 
transforms the wafer work-piece by a specific physical or chemical action depending on the topology and 
the geometry of the work-piece, the surfaces exposed to process action, and the types of materials the 
* Current Address : Schlumberger, Houston Product Center, 110 Schlumherger Drive, Sugar Land, TX 77478 
their corresponding geometric and material transformations are r -Mask -~-- t Conformal 1 Figure 1: 
Geometric transformations during typical process steps. process element affects. The SCREAM process 
@ingle crystal Reactive-ion Etching And Metallization) developed at Cornell University is an example 
of a MEMS fabrication process that uses dry-etching of single crystal Silicon to fabricate released, 
high aspect-ratio structures [l]. An example of another fabrication process is the one developed at the 
Berkeley Sensor and Actuator Center which uses wet-etching of polysilicon layers electro-deposited on 
a Silicon substrate [2]. Examples of process steps and States step 1: F repare Mask Oxide --Mask Oxide 
(2.5~m) 6omin -Silicon Substrate (SCS) step 2: Photolithography Photoresist (l.@m) (before) Mask Oxide 
(Z.$.tm) * Silicon Substrate (KS) step 3: Photolithography (after) Exposed Photoresist :-czxk zz? ix 
Ezz: f- 65 min Mask Oxide (2.511m) -Silicon Substrate (SCS) step 4: Transfer Pattern CHF, MJ.E Exposed 
Photoresist I= 10 min Mask Oxide (2.5 WI) *-Silicon Substrate (SCS) step 5: Strip Resist 0 Z plasma etch 
-Mask Oxide (2.5~) I :1Omin I* Silicon Substrate (SCS) Step 6: Deep Silicon Etch --- , -Mask Oxide 
(2.0~) Cl2 RJE * Silicon Substrate (KS) 45 min illustrated in Fig. 1. One variant of the SCREAM process 
sequence is shown in Fig. 2. Studies show that flaws in the fabrication process are the most common cause 
of failure for prototype MEMS devices - especially since MEMS is an emerging technology where fabrication 
sequences are still being innovated while new types of devices are being prototyped. Flaws in fabrication, 
for example, improper etching for release of a beam substructure, can arise at any step of the fabrication 
process. Inspection of a specific device in the work- piece (a die) between process steps is difficult, 
and rework is even harder than inspection (if not impossible). Therefore, efficient computational tools 
for fabrication process simulation with appropriate interfaces to device design and simulation tools 
are becoming vital for the integrated design, development and prototyping of MEMS devices [3]. The development 
and use of such tools enables the simultaneous exploration and definition of both the required configuration 
and geometry of MEMS device structures as well as the specification of the fully parametrized fabrication 
process for realizing the device on a wafer. This paper describes a new approach to simulation of MEMS 
fabrication processes by (a) identifying key invariants that characterize MEMS fabrication processes, 
(b) developing a process algebra based on the invariants to formally model the basic operations on the 
geometric and material attributes of a die corresponding to the specific physical and chemical nature 
( semantics ) of common fabrication process elements, and (c) developing geometric algorithms that compute 
the basic operations Step I: Deposit Sidewall Oxide PECVD -PECVD Sidewall Oxide (OS&#38; 15 min -Mask 
Oxide (2.0~) g + Silicon Substrate (SCS) step 8: Remove Floor Oxide ad *- Mask Oxide (1.5~) CF4RIE It 
C- Silicon Substrate (SCS) 45 min step 9: Deep Silicon Etch #2 i*+;-MaskOxide(1.5~) Cl2 RIE C-Silicon 
Substrate (SCS) 20 min Step 10: Release Etch SF6 RIE -Mask Oxide (1.5~) 15 min C Silicon Substrate (SCS) 
 Figure 2: Typical process sequence in SCREAM (last step of metallization is not shown). of the process 
algebra to enable 3D geometric simulation of complete MEMS fabrication process sequences. Since MEMS 
structures are three-dimensional in nature and involve mechanical elements with little or no symmetry, 
the fabrication process also must be simulated in 3D through each step. A software tool, called MEMShapes, 
based on the process algebra and algorithms has been implemented that simulates the structure of the 
MEMS device as it evolves through the fabrication process. The 3D device geometry, tagged with material 
type (shown using color), can be interactively visualized at any step of the simulated fabrication sequence. 
MEMShapes thus enables an engineer to evaluate device designs and tune fabrication parameters before 
actual fabrication, which in turn reduces the possibility of flaws occurring when the device is finally 
fabricated. The SCREAM process was chosen for detailed fabrication process simulation and testing of 
the software tool. An advantage of using the approach developed in this work is that the process algebra 
and algorithms are sufficiently general so as to permit extension to other currently existing or new 
variants of MEMS fabrication processes. The rest of this paper is organized as follows: Section 2 reviews 
related work -especially in the area of MEMS fabrication simulation; Section 3 describes the semantic 
approach to MEMS fabrication simulation; Section 4 describes the functional requirements of MEMShapes; 
Section 5 describes the algorithms used in MEMShupes and their implementation and results; and finally 
Section 6 summarizes the results and contributions of this work. 2 Related Work Several process-simulation 
and CAD tools have been developed for VLSI fabrication as well as MEMS design. These tools use a variety 
of different approaches for the simulation process. Of particular interest to the solid modeling community 
are the MEMCAD project at MIT and the OYSTER program by Koppelman. The MIT MEMCAD project [4] is focussed 
on developing an integrated CAD environment for MEMS design by linking together different packages for 
specific aspects of the design process. The MemBuilder program [5], developed as a component of the MEMCAD 
project simulates a process sequence consisting of strictly alternating deposition and etch steps. A 
set of deposition categories is specified (conformal, stacked, planar and via), each of which affects 
the device topology in a particular way. MemBuilder is constrained in its functionality due to the fact 
that it uses strong process invariants such as specific etch and deposition categories, which are modeled 
solely on basis of geometry (except a final optional sacrificial etch that removes an entire component 
of a certain material). Process elements that are sensitive to material type or angles of surface normals 
of an exposed region cannot be modeled , restricting the generalizability of the tool. Koppelman s OYSTER 
program [6] simulates a MEMS device structure on a step-by-step basis through PDL (Process Description 
Language) statements. Each of these statements invokes a step- specific function that geometrically transforms 
the device topology. This restricts OYSTER to fabrication processes that specifically use the process 
steps which can be modeled by the functions built in OYSTER. Other works of interest in the area of fabrication 
modeling and simulation include the SUPREM project at Stanford and MiSTIC from University of Michigan. 
The SUPREM project [7] is a process simulation tool used for design optimization of MOS technologies 
and VLSI device design. SUPREM simulates the details of the chemical processes occurring during the various 
steps, such as etch rates and oxide growth laws, and calculates geometric transformation parameters from 
the process step parameters such as temperatures, times, reactants and ambients. The fine-grained process 
modeling in SUPREM is essentially useful to researchers in fabrication processes and has limited utility 
for MEMS device designers. The MiSTIC program [8] developed by Hasanuzzaman and Mastrangelo at the University 
of Michigan is a process compiler that automatically generates fabrication process sequences or flows 
of micromachined devices from a device description. The program uses set and graph-theoretic representations 
and algorithms for device topology and transformations. As with SUPREM, MiSTIC is fundamentally useful 
for fabrication researchers. The simulation tool needed for MEMS device design needs to generate 3D device 
models for a specified fabrication process, which is not possible with MiSTIC. Tools limited to certain 
classes of fabrication techniques, such as etch simulation by Hubbard and Antonsson [9], and CAD for 
anisotropic silicon etch by Buser and Rooij [lo] have also been developed. A survey of CAD tool concepts 
and requirements for micromechanics has been done by Sandmaier, et al. [l 11. The various tools described 
above, while using different approaches to address the problem of fabrication simulation for MEMS, are 
limited in their utility for the MEMS design process. Tools such as SUPREM and OYSTER are primarily useful 
for fabrication research while OYSTER and MemBuilder are not generalizable and easily extensible. A formalized, 
generalizable tool that simulates a fabrication process in 3D with functionality for effective visualization 
is needed for MEMS design. 3 A Semantic A preach to MEMS Fabrication Process Mode Ping A new approach 
to the simulation of MEMS fabrication processes is proposed, that overcomes the limitations of the existing 
tools described in Section 2. This approach, described as semantic modeling, is a general approach that 
is extensible to any MEMS fabrication process that satisfies a general set of invariants. Semantic modeling 
uses physical information about the transformation occurring during a process step to implement the geometric 
transformations. Using this approach, a formalized process algebra is developed to represent the process. 
This algebra is used to implement a process transform algorithm which in turn is used to model the different 
steps in a process sequence. The semantic information about the process steps is embedded in the abstract 
data type used to represent the process. Typical examples of such information may include: 1. Material 
affected. 2. Type of process - a material addition or a material removal. 3. Nature of the transformation 
- isotropic or anisotropic, masked or not.  This information is used to model the process transformations 
occurring during a process step. The transformations thus simulate the fabrication process using the 
physical effects of a process step on the current state (topology, geometry and material) of the device. 
3.1 Process Invariants The semantic modeling approach is based on a set of invariants observed in most 
MEMS fabrication processes. This makes it extensible to any process that consists of process steps satisfying 
this general set of invariants. Fabrication process steps are operations on geometric components with 
conformal interfaces. Any geometric transformation on the device occurs through all, or some subset, 
of its exposed surface. For a general MEMS fabrication process, the following invariants are observed: 
l All the processing on the device occurs on the top exposed surface of the device. l Every step in the 
process is either a Removal (material is removed) or an Addition (material is added). l Every Removal 
step affects a specific material in the device topology. Thus, the process-affected surface is a material-specific 
subset of the total exposed surface. Further, depending on the nature of the transformation (isotropic 
or anisotropic, masked or not), the process- affected surface may be a further subset of the material- 
specific exposed surface, identified by surface normals or mask topology. l Every Addition step affects 
the entire exposed surface and results in the addition of a new material to the device topology. l Geometric 
changes on surfaces occur along their respective surface normals. MEMS fabrication processes, in particular 
the SCREAM process, satisfy the invariants observed above. To use these invariants for the modeling of 
the fabrication process steps, it is observed that the invariants can be expressed in terms of a set 
of parameters defining a process step transformation. These parameters include: process affected material: 
This identifies the specific material in the device structure that is affected by the process step, such 
as silicon. l l process-affected normal angles: These identify the surfaces affected by the process step. 
These surfaces are represented by the direction of their outward normals, which are specified by the 
normal angles. l process height-change (dimensional change) function: This indicates the dimensional 
change occurring during a process step in each affected direction. This dimensional change is expressed 
as a function of the normal angle. l nature of the process (Removal or Addition): Indicates whether material 
is removed or added during the process step. l properties of the transformation (isotropic, masked, etc.): 
Indicates the properties of the process step transformation, i.e. whether the transformation is isotropic 
or anisotropic, etc. The semantic modeling approach uses the above parameters to construct a set of 
abstractions. The process algebra is defined using these abstractions. The process invariants are then 
expressed, using the algebra, in the form of a transformation algorithm, which provides flexibility in 
modeling a variety of fabrication process steps and sequences. (This is in contrast to MemBuilder [5] 
which I I State, Statet+l Figure 3: A State Transformation. does not rely on a formalized algebra for 
its modeling. Conversely however, the transform algorithm in MEMShapes is capable of modeling each process 
step in MemBuilder by specification of appropriate height change functions. Although stacked deposits 
in MEMBuilder violate the first invariant of MEMShapes, such deposit steps can still be modeled by defining 
the space between the deposit and underlying substrate as a vacuum or NULL material). 3.2 Principal 
Abstractions The principal abstractions used in the modeling are the notions of a State and a Process-Step. 
Execution of a Process-Step transforms the device from one State to the next. Thus, at the highest level, 
the process transformation algorithm is represented as: Process-Step, (Statei) + State,+, A State is 
thus used represent the device at the end of any Process- Step. The State data structure encapsulates 
all the geometric and semantic information required to represent the device at that state as well as 
to transform it to the next state through the subsequent Process-Step. A typical state transformation 
is shown in Fig. 3. To execute the transformation on a State, the device-specific information in the 
Process-Step is used in conjunction with the corresponding semantic information stored in the current 
State. Once all the affected entities are identified, the transformation specifications in the Process-Step 
are implemented through topological queries, affine transformations and Boolean operations on the geometric 
objects in the State data structure that represent the device at that state. The parameters involved 
in the execution of a process step during a state transformation are shown in Fig. 4. The semantic modeling 
approach and the resulting process algebra Trans-Gm Normal Figure 4: Parameters in the state transformation 
process. provides a theoretical basis for the geometric modeling of MEMS fabrication processes. The organization 
of the process algebra makes it extensible to any fabrication process that satisfies the process invariants 
used in the formulation of the algebra. The entire fabrication process, seemingly composed of distinct 
types of process steps, is thus captured in a single algorithm by identification of process invariants 
and formulation of data structures for the State and Process-Step abstractions. The following sections 
describe the theory and implementation of the process algebra and the MEMShapes geometric simulation 
tool. 3.3 Process Algebra and Process Transform Algorithm The following variables and functions represent 
the algebra: Variables: i: Index of current State and Process- Step X(Y): Function X executed on parameter 
Y. Angle-range: Affected normal angle range: all parts of the exposed surface whose outward normal falls 
with this range is potentially affected. (Positive Z-axis is taken as 0.0) Mad: Affected Material: all 
parts of the exposed surface whose normal falls within Angle-range and are composed of material Matl. 
op: Operation (Material added/Material removed): e.g. a deposition is material added, while an etch is 
material removed. Fit-Change: Height change function (as a function of angle): the dimensional extent 
to which a particular component of the affected surface (defined by the surface normal) is modified. 
SurfExp: Exposed surface: The total exposed (top) surface of the device. Surf-Ajj? Affected surface: 
The subset of the exposed surface that is affected by the process step, as defined by Angle-range and 
Matl. Trans-Gm: Geometric object representing the transformation Functions: Fn-Exp-St&#38; Exposed surface 
evaluation: Evaluates the total exposed surface of current device state. Fn-Aff-Surf: Affected surface 
evaluation: Evaluates the subset of the exposed surface affected by current process step. Fn-A&#38;Angles: 
Affected angles evaluation: Evaluates the angles that define the orientations for the outward normals 
for the affected surface. Fn-Aff-Matl: Affected material evaluation: Extracts the material that is affected 
by the current process step. Fn-Op: Operation type extraction: extracts information about the type of 
effect the process step has, i.e. whether material is added or removed. Fn-Ht-Change: Height change function 
evaluation: Evaluatesthe function that defines the change in dimension along each affected direction. 
Fn-Trans-Cm: Transformation geom generation: Generates the object defining the geometric change during 
the process step. Fn-Gen-State: Transformation of current state to next: This actually implements the 
geometric transformation using boolean operations. Using the algebra, the geometric and material transformations 
of any process step satisfying the stated invariants can be computed by the following algorithm: Process-Transform 
(State,, Process-Step, ) Angle-range t Fn-Affected-Angles (Process-Stepi) Ht-Change t Fn-Ht-Change (Process-Step, 
) Mat1 t Fn-Aff-Mat1 (Process-Step, ) Or, t Fn-Op (Process-Step,) Surf-Exp t Fn-Exp-Surf (State, ) SurfAff 
t Fn-Aff-Surf(State,,Op, Angle-range, Matl, Surf-Exp) Trans-Gm e Fn-Trans-Gm (Surf-Af5; Op, Ht-Change) 
State,,, t Fn-Gen-State (State,, Op. Trans-Gm) return State,+, 4 Design of MEMShapes The previous section 
presented the abstractions and the process algebra underlying the development of the MEMShapes fabrication 
simulator. This section describes the implementation of the algebra and the overall development of the 
MEMShapes tool. The implementation of the different functions in the algebra involves geometric algorithms 
such as topological and surface queries, tangent and normal space evaluations, affine transformations 
and Boolean operations. The functional requirements for this tool are first described, followed by the 
details of tool development. Starr Initialize r----- ------1 52 1 ; I I I L ------ ----J Figure 5: Process 
flow in MEMShapes. 4.1 Functional Requirements The functional requirements for a 3D geometric fabrication 
simulator for MEMS are as follows: 1. A reasonably accurate 3D geometric representation of the multi-layer 
device topology at the end of every process-step, with proper identification of every material in the 
device topology. 2. Interactive viewing of the device, with ability to zoom, pan, or view the model 
from different angles. 3. Interruption and restart of the simulation process at any inter- mediate step 
with modification of process parameters beyond the interrupted step.  In order to support distributed 
design activities by users, a user interface that allows remote execution of the program is required. 
  4.2 MEMShapes Development The MEMShapes simulator tool was developed to achieve the functional requirements 
described above. The tool uses the Shupes(rm) geometric computing system from X0x Corporation for implementing 
the geometric operations required to implement the process algebra. Shapes is a library of C functions 
that has first- class data-types for geometric objects (XGEOMS) as well as various geometric entities 
such as vertices, facets and topological maps. The library provides functions for querying, manipulating 
and modifying geometric objects or lists of geometric objects. Shapes also provides a library of graphics 
routines that use the underlying window system for visual display of geometric objects. The advantage 
of using Shapes over a stand-alone solid modeling package is the flexibility afforded by the library. 
Since the tool is essentially a set of C functions, they are easily integrated with   Fabrication Simulation 
(MEMShupes) Design User Interface 4 I Figure 6: User Interaction in MEMShapes. application code. Also, 
since the Shapes graphics routines use the underlying window system for visual display, manipulation 
of the displayed object is also possible through the window-system functions (for instance, Xlib or Xt 
routines can be used in XWindow environments). The user-interface for MEMShapes is based on a client-server 
architecture using the World-Wide-Web. 5 Implementation of MEMShapes The overall flow chart of MEMShapes 
is shown in Fig. 5. The three main routines in the execution process are (a) the user input, where process 
and mask information is obtained, (2) the computation routines which implement the process transform 
algorithm and (3) the output routines, that enable the user to view and manipulate the generated geometric 
objects. The implementation of these three components is described below. 5.1 User Input Two kinds of 
input are required for the simulator -process information and mask data. Figure 6 depicts the model of 
user interaction in MEMShapes. Process information is specified by the user through the user-interface. 
This is stored in a canonical representation in an ASCII data-file. The data-file is read by the program 
and the process data is stored in pre-initialized data structures. These are available to all modules 
of the program. Mask data is potentially obtainable from any relevant source, such as a design tool or 
mask layout software. Converter programs are used to transform the mask data from any potential source 
into a format readable by MEMShapes. The converted mask data is stored as an ASCII file containing mask 
polygon information and used as input to MEMShapes. In our implementation, the source of mask data is 
the design tool 1121, that generates a complete parametric specification of the device. This parametric 
model of the device design is converted into a MEMShapes maskfile. The mask-file is input to the mask 
generation routines in MEMShapes, which generate a 2D geometric model of the mask surface used by the 
modeling routines. 5.2 Data Representation and Algorithms The modeling routines involve an implementation 
of the process algebra using the State and Process-Step data structures. A brief description of these 
data structures is given below: State ( state-key: descriptive key for the state state-index: index of 
the state in the fabrication process sequence composite_geom: single geometric object representing the 
entire device geom-components: list of device geom components, each of a different material with encapsulated 
semantic information I Process-Step / step-index: index operation: Type of operation (e.g. Add/Remove 
material) material: Type of material added (for Addition steps) or affected (for Removal steps) fab_proc: 
process step descriptor (Oxidation /Resist deposition/etc.) time : time taken for the process step angles-affected: 
Range of angles defining outward normal orientation ht-change>: geometric change in affected surface 
as function of outward normal angle. reactant: Reactant/environment for the process step / These parameters 
are generated from the State and Process-Step objects during a transformation, using a set of functions. 
(States and Process-Steps are stored in their respective arrays, so a specific instance of these is represented 
by array indices. Thus Stateli] and Process-Step[i] refer to the State and Process-Step for the i-th 
transformation step in the fabrication process). These functions are either access functions, that serve 
to access a certain parameter stored within a data structure, or computation functions, that actually 
perform arithmetic or geometric computations required in evaluating and displaying the structure change 
occurring in a process step. Implementations of the functions in the algebra are given below: Fn-Exp-St&#38;): 
This function extracts the exposed surface of the device at any stage. This function is executed in two 
steps: 1. The total outer surface (Total-surf) of the device composite geom is obtained from the device 
composite geom. This is simply a union of the first-level sub-geoms (Total-Surf-Gms) of the composite 
geom. 2. The Total-surfis passed through a geometric side surface filter to remove the lateral surfaces 
and retain the top (exposed) surface. This is implemented by a Boolean difference operation between Total-surf 
and a geometric object representing the side surfaces, which is maintained dynamically through the process 
as a global variable (Side-surffilter).  Fn-Exp-SuflState]i].composite_geom) ( Total-SurfGms=FirstLevelSubGeoms 
(State[i].composite_geom) Total-Surf = Union (Total-Surf-Gms) Surf-Exp = (Total&#38;j) - (Side-surf-filter) 
return Surf-Exp I 382 Fn-Aff-St&#38;() : This function extracts the process-affected surface for a particular 
step using exposed surface and semantic process step information (such as materials affected, angles 
affected). The following invariants are identified for this process: a) If the process is a deposition, 
the entire exposed surface is affected. This information is stored in the Process-Step data structure. 
Thus for a deposition step we have SurfAff = Surf-Exp. b) If the process is an etch, the following two 
properties are noted: (i) The process affects only a specific material in the device topology. Thus, 
the affected surface is a material-specific subset of Surf-Exp (Matl-SurfExp), which can be obtained 
by semantic querying of Surf-Exp. (ii) A further classification occurs depending on the transformation 
effect of the process, i.e. whether the process is isotropic or anisotropic. This is specified by the 
Angle-range parameter. Topological queries on Mat-Surf&#38;p for surface normals identify the subset 
Mat-SurfExp that is actually affected by the process (Surf-Am. To implement this, a new data structure, 
Surf-object is defined as follows:  Surf-object / surface-cell; sur$ace-normal-angle; sueace-normal-space; 
In this definition, surface-cell is a consistently oriented component of the surface. Consistently oriented 
implies that the geometric object representing St&#38;ace-cell is defined on a single underlying planar 
topological map. The surjke-normal-angle is, as the name suggests, the normal angle of s&#38;ace-cell, 
with the positive Z direction taken as angle 0.0. The surjke-nom&#38;-space is a unit vector representing 
the direction of the normal for surface-cell. Fig. 7 illustrates the notion of a St&#38;object. For the 
topological query, Mat-Surf-Exp is decomposed into its consistently oriented components (s&#38;ace-cells). 
Each sutfke-cell is queried topologically for its normal. The parameters surface- normal-angle and su$ace-normal-space 
are evaluated and stored in a Surf-object data structure. A list of St&#38;objects is thus obtained. 
Thus, extraction of Smf-Aff 5 surface-cells Be II ,Normal surface-normal-angle= 0.0 su~ace-nonal-space=lo. 
0. 11 Surf Object Figure 7: Components of a Surf-object. simply entails iterating over this list to search 
for surface components whose normal angle lies within the normal angle range for that step (Angle-range). 
The union of these identified surface components gives the affected surface (SurfAfj). Thus the function 
can be represented as: Fn-Aff-Surf (Stateli], Op, Angle-range, Matl, Surf-Exp) ( if Op = ADDITION SurfAff 
= Surf-Exp if Op = REMOVAL Matl-Surf-Exp = Query (SurfExp, Matl) Surface-cells = Decompose (Matl-Surf-Exp) 
foreach (Sugace-cells) normal-space=Normal-Query (current-suface-cell) normal-angle=Eval-Normal-Angle 
(normal-space) current-surf-object=New-Surf-Object (current-s&#38;ace-cell, normal-space, normal-angle) 
Enlist (Surf-object-list, current-s&#38;object) endfor foreach ( Surf-object-list) tfln-range (current-surf-object.normal-angle, 
Angle-range) Enlist (Surf-Aff-List, current-surf object.surface-cell) endif endfor Surf-Aff = Union ( 
Surf-Aff-List) endtf return Surf-Aff I Fn-Aff-Angles 0: This accesses the affected angle-range for the 
i- th process step, stored within the Process-Step variable. Fn-Aff-Angles(Process-Step[i]) [ return 
Process-Step[i].angles-affected I Fn-Aff-MatlO: This accesses the material affected by a certain process 
step (this may be material that is added, if it is a deposition process). Fn-Aff-Mat&#38;Process-Step[i]) 
{ return Process-Step[i].material I Fn-Op(): This extracts the operation type for the i-th Process-Step, 
i.e. deposition or etch (material added or material removed). Fn-Op(Process-Step[i]) { return Process-Step[i].operation 
I Fn-Ht-Change(): This accesses the dimensional change value (or function) occurring in the i-th process 
step, which is stored within the Process-Step variable for that step. Fn-Ht-Change(Process-Step[i]) ( 
return ProcessStep[i]. ht-change* () ) Fn-Trans-Gm(): This generates the transformation solid defining 
the transformation of the device structure from one state to the next. The affected surface and geometric 
change information is used to generate the solid. As noted earlier, geometric changes on surfaces occur 
along their respective surface normals. Thus, generation of the transformation object involves extrusion 
of the surface-cells of Surf-Aff along the respective positive (for Addition) and negative (for Removal) 
normal directions, as specified by the operation (Op) and the dimension change (Ht-Change) to obtain 
the components of the transformation solid. The union of these components is taken to obtain Trans-Gm. 
The St&#38;object-list for SurfAff described in the previous step can be made use of to extract normal 
directions. Eval-Surf-Object-List0 evaluates this Surf-object-list. (Implementation details of the Eval- 
St&#38;Object-List0 function are not included here). Thus, the Fn- Trans-Gm() function can be expressed 
as follows: Fn-Trans-Gm (Surf-Afi Op, Ht-Change) ( Surf-object-list = Eval-Surf-Object-List (Surf-An 
foreach (Surf-object-list) current-solid-component = Extrude (current-surf-object. sudace-cell, HI-Change, 
Op) Enlist (current-solid-component, trans-solid-list) endfor Trans-Gm= Union ( trans-solid-list) return 
Trans-Gm I Fn-Gen-State(): This executes the transformation of the device to the new state. The process 
is implemented using Boolean operations on the device geom (stored in State[i].composite_geom) and transformation 
solid (Trans-Gm) obtained from Fn-Trans-Gm(). Furthermore, the appropriate Boolean operations also need 
to be carried out between the transformation solid (Trans-Gm) and those geom components in State[i].geom-components 
that are composed of the process-affected material Matl. Thus, Fn-Gen-State0 can be implemented as follows: 
Fn-Gen-State(State[i] , Op, Matl, Trans-Gm) ( if Op = ADDITION new-geom=(State[i].composite_geom) V (Trans-Gm) 
new-geoms=Append (new-geom, State[i].geom-components) endif if Op = REMOVAL new-geom = (State[i].composite_geom) 
-(Trans-Gm) foreach (gm E State[i].geom-components) if (material-of(gm) = = Matl) d@geom= (gm) - (Trans-Gm) 
Enlist (diff-geom, new-geoms) else Enlist (gm. new-geoms) endif endfor endif State[i+I].composite~eom 
= new_geom State[i+I].geom~components = new-geoms <Fill in otherfields of State[i+l] > return State[i+ 
I] 5.3 MEMShapes Results The primary output of the MEMShapes tool comprises the 3D device models at 
the end of different process steps. Figures S(a) through 8(j) show the geometric objects generated by 
MEMShapes on a simple mask geometry for the SCREAM process (see Fig. 2). Different materials are represented 
by different colors in the device topology. During its execution, MEMShapes generates a process description 
file, which is a formatted text tile describing each step of the fabrication process. Models generated 
at each state can be visualized interactively through the user interface. MEMShapes generates images 
in GIF format and VRML (Virtual Reality Modeling Language [13]) objects from the Shapes geometric models 
that provide enhanced visualization capability. This is particularly useful due to the three- dimensional 
structure of MEMS devices. The key features of MEMShapes can be summarized as follows: (1) Functionality 
to write the generated geometric objects to files: This enables the designer to interrupt the simulation 
process at any step, make changes to the design and resume the simulation from any arbitrary step, thereby 
enabling the visualization of the effect of the incorporated design changes with minimum time delay. 
 (2) Interactive visualization of the geometric objects: MEMShapes generates both static GIF images and 
3D VRML objects of the generated geometric models. This allows panning, zooming and rotation of the geometric 
models, enabling the interactive viewing of the device structure from all angles. The multi-layer device 
 topology is represented efficiently by color-coding the different materials in the device. (3) Capability 
of remote execution: The user-interface for both the input and output functionality of MEMShapes is based 
on a client- server architecture that allows the user to execute the program and view the results from 
geographically remote locations. This supports the distributed nature of the design environment. The 
current implementation of MEMShapes has some limitations: (a) even with simple masks, the dynamic creation 
and evaluation of surface and topological information becomes fairly time-consuming and memory-intensive 
requiring further code optimization and caching strategies; (b) the graphics routines available in the 
geometric computing tool allow only a static display of generated geometric objects; (c) the lack of 
sufficient functionality in the geometric routines has necessitated approximations and trial estimation 
of certain parameters which may fail or give erroneous results in special cases (e.g., evaluation of 
the coordinates of a point on the surface of a map which is not on the boundary). 6 Conclusion This paper 
describes the theory, design and implementation of the MEMShapes geometric simulation tool for MEMS fabrication 
processes. The key contributions are: 1) a process algebra that captures the semantics of MEMS fabrication 
processes, 2) an implementation of this process algebra in a software tool (MEMShapes) using a commercial 
geometric computing tool, and 3) production of simulated MEMS fabrication sequences (specifically for 
SCREAM) as a sequence of states comprising 3D geometric and material models of the MEMS device. Figure 
8(b): State 2: Silicon (blue) + Oxide (yellow) Figure 8(a): State 1: Silicon (blue) + Oxide (yellow). 
+ Photoresist (red). Figure B(g): Figure S(h): State 7: Etched Silicon (blue) + Etched Oxide (yell1 OW: 
State 8: Etched Silicon (blue) + Etched Oxide (yellow) + Sidewall oxide (green). + Floor-removed sidewall 
oxide (green). (first etched oxide not visible) Figure B(i): Figure B(j): State 10: Release Step - State 
9: Second-etched Silicon (blue) composite device (green). + Etched Oxide (yellow) + Sidewall oxide (green). 
 Figure B(c): Figure B(d): State 3: Silicon (blue)+ Oxide (yellow)+ State 4: Silicon (blue) + Etched 
Oxide (yellow) Exposed Photoresist (red). + Exposed Photoresist (red). Figure 8(f): State 6: Etched Silicon 
(blue) + Etched Oxide (yell0 w). Figpure B(e): State 5: Silicon (blue) + Etched Oxide (yellow 9. A new 
semantic modeling approach is proposed for MEMS fabrication processes which is used to formulate a process 
algebra based on a general set of process invariants which most MEMS fabrication processes were observed 
to satisfy. The algebra is constructed over a set of abstractions defining the key aspects of the process, 
such as process steps and the states of fabrication of the device. The process algebra makes it possible 
to represent, as a single algorithm, any step in the fabrication process that satisfies the general set 
of process invariants which the semantic modeling approach uses. The process algebra affords better extensibility 
and generalizability over existing fabrication simulation techniques and makes software tool development 
both easier and well-organized. The development and implementation of MEMShupes is based on the process 
algebra and the process transform algorithm. Implementation of this algorithm is achieved through solid 
modeling operations such as topological queries, affine transformations and Boolean operations. The algebra, 
algorithm and the MEMShapes program are used to simulate the SCREAM fabrication process. The result is 
a series of geometric models representing the state of a device at the end of each fabrication process 
step. MEMShapes enables a MEMS engineer to interactively visualize geometric and material models of MEMS 
devices, evaluate device designs and tune fabrication parameters before actual fabrication.  References 
<RefA>[l] <SinRef><author>Shaw, K.A., </author><author>Zhang, Z.L. </author>and <author>MacDonald, N. </author>(<date>1993</date>) <title>SCREAM I: A Single-mask, Single-crystal Silicon 
Process for Micro-electromechanical Structures IEEE MEMS </title><volume>93</volume>, <location>Fort Lauderdale, Florida, USA</location>, <pages>pp. 155-163</pages>. 
</SinRef>[2] <SinRef><author>Judy, J.W. </author>and<author> Muller, R.S. </author>(<date>1995</date>) <title>Fabrication processes for magnetic microactuators with polysilicon 
flexures </title>, <booktitle>Proceedings of the 4th International Symposium on Magnetic Materials, Processes and Devices</booktitle>, 
<location>Chicago, IL </location></SinRef>[3] <SinRef><author>Dixit, H. </author>(<date>1997</date>) <title>A Prototype Computational Environment for Concurrent Design of MEMS </title>
<tech>MS. Thesis</tech>, <institution>Cornell University</institution>, <location>Ithaca, NY</location></SinRef>. [4] <SinRef><author>Senturia, S.D., </author><author>Harris, R.M., </author><author>Johnson, B.P., </author><author>Kim, S.</author>, 
<author>Nabors, K., </author><author>Shulman, M.A. </author>and <author>White, J.K. </author>(<date>1993</date>) <title>A computer-aided design system for Micro-electromechanical 
systems (MEMCAD) </title>, <journal>Journal of Micro-electromechanical Systems</journal>, <volume>l(l)</volume>, pp. <pages>3-13</pages></SinRef>. [5] <SinRef><author>Osterberg, P.M. </author>and 
<author>Senturia, SD. </author>(<date>1995</date>) <title>MemBuilder: An automated 3D solid model construction program for microelectromechanical 
structures </title>, <booktitle>Proceedings of the 8th International Conference on Solid-state Sensors and Actuators, and 
EuroSensors </booktitle><volume>IX</volume>,<location> Stockholm, Sweden</location>., <volume>Vol. I</volume>, <pages>pp.21-24</pages></SinRef>. 161 <SinRef><author>Koppelman G.M. </author>(<date>1989</date>) <title>OYSTER, a three-dimensional 
structure simulator for micro-electromechanical design </title>, <journal>Sensors andActuators</journal>, <volume>20</volume>, pp.<pages> 179-185</pages></SinRef>. [7] <SinRef><author>Ho, 
C.P., </author><author>Plummer, J.D., </author><author>Hansen, SE. </author>and <author>Dutton, R.W. </author>(<date>1983</date>) <title>VLSI Process Modeling -SUPREM III </title>, <journal>IEEE Transactions 
on Electron Devices</journal>, <volume>30(1 I), </volume><pages>pp. 14381453</pages></SinRef>. [8] <SinRef><author>Hasanuzzaman M. </author>and <author>Mastrangelo, C.H. </author>(<date>1995</date>) <title>MiSTIC 1.1: 
A Process compiler for micromachined devices </title>, <booktitle>Proceedings of the 8th International Conference on Solid-state 
sensors and actuators</booktitle>, <volume>Vol. 1</volume>. <pages>pp.38-42</pages></SinRef>. [9] <SinRef><author>Hubbard, T.J </author>and <author>Antonsson, E.K. </author>(<date>1996</date>) <title>Design of MEMS via 
efficient simulation of fabrication </title>, <booktitle>Proceedings of the ASME Design for Manufacture (DFM) Conference</booktitle>, 
<location>Irvine, CA</location>, <date>August 1996</date></SinRef>. [lo] <SinRef><author>Buser, R.A. </author>and <author>De Rooij,N.F. </author>(<date>1991</date>) <title>ASEP: A CAD program for silicon anisotropic 
etching </title>, <journal>Sensors and Actuators</journal>, <volume>28</volume>,<pages> pp. 7 l-78</pages></SinRef>. [l l] <SinRef><author>Sandmaier, H., </author><author>Offereins, H.L. </author>and <author>Folkmer, B. 
</author>(<date>1993</date>) <title>CAD tools for micromechanics </title>, <journal>Journal of Micromechanics and Microengineering</journal>, <volume>3</volume>, <pages>pp.103-106</pages></SinRef>. 
[12] <SinRef><author>Dixit, H., </author><author>Taylor, D.L. </author>and <author>Kannapan, S. </author>(<date>1996</date>) <title>Design Considerations for Manufacturability of MEMS 
Comb Actuators </title>, <booktitle>Proc. of the ASME Design For Manufacture (DFM) Conference</booktitle>, <location>Irvine, CA</location>, <date>August 1996</date></SinRef>. 
[ 131 <SinRef><author>Bell, G., </author><author>Parisi, A. </author>and <author>Pesce, M. </author>(<date>1995</date>) <title>The Virtual Reality Modeling Language , Version 1 .O </title>
<booktitle>Specification</booktitle>, <date>May 1995</date></SinRef>.</RefA> 
			
