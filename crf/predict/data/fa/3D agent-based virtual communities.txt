
 3D Agent-based Virtual Communities Zhisheng Huang, Anton Eli¨ens and Cees Visser Vrije University of 
Amsterdam, Department of Mathematics and Computer Science De Boelelaan 1081, 1081 HV Amsterdam, The Netherlands 
 {huang,eliens,ctv}@cs.vu.nl ABSTRACT In this paper we propose an approach to 3D agent-based vir­tual 
communities in which autonomous agents are partici­pants in VRML-based virtual worlds to enhance the 
interac­tion with users or serve as intelligent navigation assistants. In addition, an agent communication 
language (ACL) is de­signed as a high-level communication facility, in particular for the realization 
of shared objects in virtual communities. As a typical example of 3D agent-based virtual communi­ties, 
a VRML-based multi-user soccer game has been devel­oped and implemented in the distributed logic programming 
language DLP. We discuss how DLP can be used for the im­plementation of 3D agent-based virtual communities. 
 Categories and Subject Descriptors H.5.1 [Multimedia Information Systems]: Animations; H.5.3 [Group 
and Organization Interfaces]: Web-based interaction; I.2.11 [Distributed Arti.cial Intelligence]: Intelligent 
agents  General Terms Design, Languages, Performance  Keywords agents, distributed logic programming, 
networked virtual environments, virtual community, VRML, ACL 1. INTRODUCTION 3D virtual communities and 
in particular VRML-based multi-user virtual worlds, have been adopted in a lot of application areas like 
3D virtual conferencing [24], Web­based multi-user games [21], on-line entertainment [2], and e-commerce 
[20]. Examples of popular 3D virtual commu­nity servers are Active World [1] and Blaxxun Interactive 
[2]. However, most of them do not provide support for in­telligent agents. Enhancing virtual worlds with 
intelligent Permission to make digital or hard copies of all or part of this work for personal or classroom 
use is granted without fee provided that copies are not made or distributed for profit or commercial 
advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, 
to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or 
a fee. Web3D 02, February 24-28, 2002, Tempe, Arizona, USA. Copyright 2002 ACM 1-58113-468-1/02/0002 
...$5.00. agents would signi.cantly improve the interaction with users as well as the capabilities of 
networked virtual environments [3,6,26]. The Blaxxun community server does provide support for agents. 
Agents in the Blaxxun community server may be programmed to have particular attributes and to react to 
events in a particular way. As a remark, originally the Blaxxun agents were called bots. In our opinion 
the func­tionality of Blaxxun agents does not surpass that of simple bots and we consider the term agent 
to be a misnomer. De­spite the large number of built-in events and the rich reper­toire of built-in actions, 
the Blaxxun agent platform in itself is rather limited in functionality, because the event-action patterns 
are not powerful enough to program complex be­havior that requires maintaining information over a period 
of time. In this paper we propose an approach to 3D agent-based virtual communities with the following 
two shades of mean­ing : Virtual enviroments with embedded agents: Autonomous agents are participants 
in virtual com­munities. The main advantages are that agents can be used to enhance the interaction with 
users. For in­stance, in a multi-user soccer game it is usually hard to .nd enough users to join the 
game at a particular moment. Autonomous agents can serve as goal keep­ers or players whenever they are 
needed. Moreover, autonomous agents always possess certain background knowledge about the virtual worlds. 
They can serve as intelligent assistants for navigation or as masters to maintain certain activities, 
like a referee in a soccer game.  Virtual enviroments supported by ACL communication: Agent communication 
languages (ACL) are designed to provide a high-level communication facility. The communication between 
the agents can be used for the realization of shared objects in virtual worlds. For in­stance, in a soccer 
game, whenever an agent or user kicks the soccer ball, the kicking message should be broadcast to all 
other agents and users. The state of the soccer ball in the user s local world can be updated after receiving 
the message. Such a high-level commu­nication facility can also be used to reduce message delays, which 
are usually a bottleneck in networked virtual communities. We will discuss performance re­lated details 
in section 5.  Intelligent agents in VRML-based virtual worlds can be considered to be what we called 
3D web agents in [12, 13]. AVRML-based 3D soccer game with a single user has been developed and implemented 
in [14], supported by the dis­tributed logic programming language DLP [7]. In this paper we discuss a 
framework how DLP can be used for the imple­mentation of distributed multi-user soccer games by means 
of a 3D agent-based virtual community.  2. AGENTS IN VIRTUAL COMMUNITIES The term virtual community 
is usually used to refer to the general appearance and gathering of people by means of distributed computer 
systems, in particular on the Internet. Atypical text-based virtual community is Internet Relay Chatting 
[17], whereas typical 3D web-based virtual commu­nities are VRML-based, like the Blaxxun community server 
and DeepMatrix [22]. In VRML-based virtual communities, virtual worlds are designed by means of VRML, 
using the VRML External Authoring Interface (EAI) to connect au­tonomous agents running in a web browser 
to the plug-ins that are required to control the virtual worlds. Virtual com­munities usually have a 
client-server network architecture. In particular, they occasionally use a centralized server ar­chitecture, 
because the clients are running in a remote Web browser and the Java platform security policy allows 
clients only to connect to the originating host. The Living Worlds Working Group describes a general 
concept and context of VRML-based virtual communities [16]. A scene is used to refer to a set of VRML 
objects which is geometrically bounded and is continuously naviga­ble, i.e. without jumps . A world consists 
of one or more scenes linked together both from a technical and conceptual point of view. A SharedObject 
is an object whose state and behavior are to be synchronized across multiple clients. The SharedObject 
on one of these clients is called an instance of the SharedObject. In Living Worlds a pilot is used to 
refer to an instance of a SharedObject whose states and behaviors are replicated by other instances, 
its drones. A drone is an instance of a SharedObject replicating the state or behavior of another instance, 
its pilot. In agent-based virtual communities, a shared object is designed to be controlled by an agent. 
Therefore, a pilot agent is one which controls the states or behavior of a shared object, whereas a drone 
agent is one which replicates the state of a shared object. Based on the di.erent types of shared objects, 
the agents can be further classi.ed by means of the following three types: Object agents: an autonomous 
program controls a sim­ple shared object, like a soccer ball. Pilot object agents are usually located 
at the server side, whereas drone object agents are usually located at the client side.  User agents: 
an autonomous program which controls a user avatar; it translates commands from users to messages for 
the communication between the agents. Apilot user agent is located at the user or client side. Drone 
user agents can be located at the server or other clients, however, they are usually not required as 
will be explained in section 4.  Autonomous agents: an autonomous program with its own avatar which 
is able to perform complex tasks, like an autonomous player in a soccer game. Pilot  autonomous agents 
are located at the server side and drone autonomous agents are located at all clients. In addition, we 
also need multi-threaded, i.e. active com­ponents which are in charge of several aspects of the com­munication 
infrastructure. However, we would not call them agents, but active communication components, because 
agents are only interested in the collaboration with other agents rather than in particular aspects of 
the communication fa­cilities themselves. Aprogramming language supporting 3D agent-based virtual communities, 
as described above, should have the following features:  VRML EAI support: It should support VRML EAI, 
like Java does;  Distributed communication capabilities: It should sup­port network communication, like 
TCP/IP;  Multiple threads of control: It should support multi­ple threads of control for the simulation 
of pilots and drones in both client and server sides;  Declarative language: Preferably, it should 
be a declar­ative language, like a logic programming language, which supports rule-based knowledge representation 
as is of­ten necessary for the implementation of intelligent agents.  Based on the requirements above, 
the distributed logic pro­gramming language DLP has been extended to support 3D agent-based virtual communities. 
 3. DISTRIBUTED LOGIC PROGRAMMING FOR VIRTUAL ENVIRONMENTS Distributed logic programming [5, 7] combines 
logic pro­gramming, object-oriented programming and parallelism. The use of DLP as a language for the 
implementation of agent­based virtual communities is motivated by the following lan­guage characteristics: 
object-oriented Prolog, VRML EAI extensions, and distribution. 3.1 Object-oriented Logic Programming 
DLP incorporates object-oriented programming concepts, which make it a useful tool for programming. The 
language accepts the syntax and semantics of logic programming lan­guages like Prolog. It is a high-level 
declarative language suitable for the construction of distributed software archi­tectures in the domain 
of arti.cial intelligence. In particular, it s a .exible language for rule-based knowledge representa­tion 
[8]. In DLP, an object is designed as a set of rules and facts, which consist of a list of formulas built 
from predicates and terms (variables or constants). For instance, a rule like findHowtoReact(Agent, Ball, 
shooting): - getP osition(Agent, X, Y, Z), getP osition(Ball,Xb,Y b,Zb), gateP osition(Agent,Xg,Y g,Zg), 
distance(X,Y,Z,Xb,Y b,Zb,Distb), distance(X,Y,Z,Xg,Y g,Zg,Distg), Distb =< kickableDistance, Distg =< 
kickableGoalDistance. states that if the ball is kickable for the agent and the gate is within the kickable 
distance, then the agent should try to shoot. 3.2 VRML EAI Extensions DLP is an extensible language. 
Special-purpose require­ments for particular application domains can easily be inte­grated in the existing 
object-oriented language framework. DLP has been extended with a run-time library for VRML EAI [19]. 
The following predicates are some examples of DLP VRML built-ins: URL-load predicate loadURL(URL) loads 
a VRML world at URL into the Web browser.  Get-position predicate getP osition(Object,X,Y,Z) gets the 
current position (X, Y, Z) of the Object in the VRML world.  Set-position predicate setP osition(Object,X,Y,Z) 
sets the position (X, Y, Z) of the Object in the VRML world.  Get-rotation predicate getRotation(Object,X,Y,Z,R) 
gets the current rotation (X, Y, Z, R) of the Object in the VRML world.  Set-rotation predicate setRotation(Object,X,Y,Z,R) 
sets the rotation (X, Y, Z, R) of the Object in the VRML world.  Get-property predicate getSFV ec3f(Object, 
F ield, X, Y, Z) gets a value (which consists of three .oat num­bers X, Y ,and Z)ofthe F ield of the 
Object.  Set-property predicate setSF V ec3f(Object, F ield, X, Y, Z) assigns the SFV ec3f value X, 
Y ,and Z to the F ield of the Object.  Furthermore, DLP programs are compiled to Java class .les, which 
makes it a convenient tool for the implementa­tion of VRML EAI applets. 3.3 Distributed Programming 
Language DLP is also a distributed programming language. DLP programs can be executed at di.erent computers 
in a dis­tributed architecture. The following predicates are some examples of TCP/IP networking primitives 
in DLP: Host-identi.cation predicate host address(HostName, InternetAddress) gets HostName with the 
name of the host from which the current program objects are loaded.  Server predicate tcp server(ServerP 
ort, ServerSocket) creates a server socket.  Server accepting a new client:tcp accept(ServerSocket, 
ServerStreamIn, ServerStreamOut)createsames­sage input stream and a message output stream asso­ciated 
with the server socket.  Client predicate tcp client(ServerHostName, ServerP ort, T imeOut, ClientStreamIn, 
ClientStreamOut) creates a message input stream and a message output stream, connecting a client to a 
DLP server running at ServerHostName .  Bi-Directional Client / Server Communication predi­cates: tcp 
get term(StreamIn, T erm) gets a message term from the stream, and tcp put term(StreamOut, T erm) writes 
a message term to the stream. Moreover, DLP allows for multiple threads of control in a single program, 
which makes it a convenient language for the implementation of autonomous agents. The obvious advantage 
of our approach is a loose cou­pling between high-level programming functionality and the actual creation 
of 3D content. The drawback there, how­ever, is that it requires expertise in both areas, i.e., Web3D 
and the agent technology, and also increases the e.ort of de­velopment and debugging. Another disadvantage 
is that it induces a performance overhead due to the communication via the EAI and the computation in 
DLP. It is our impres­sion, however, that the computational load of VRML far exceeds that of DLP in the 
case of a single user. The per­formance requirements for (multi-user) distributed commu­nication are 
discussed below. Actual desktop requirements depend on the application. A500MHz (256MB) PC with a graphic 
accelerator is recommended.  4. DISTRIBUTED COMMUNICATION In general, a virtual community based on 
a client-server network architecture works as follows: all the client pro­cesses connect with a centralized 
server via a Web browser, usually by means of a TCP connection. The server receives, processes, and transfers 
the messages concerning shared ob­jects to the clients for the necessary synchronization. To improve 
the performance, multiple threads of control are introduced in both server and clients in the virtual 
commu­nities, as is shown in Figure 1. Each thread has its own message queue to store incoming messages 
(sent from other threads) which have not yet been processed. Thus, sending a message to a thread means 
sending the message to the recipient s message queue. Each client has its own commu­nication thread, 
called client thread, which is in charge of the network communication. In addition, for each client a 
special thread called server thread is created at the server side for the network communication with 
its corresponding client thread. The introduction of multiple threads leads to the following communication 
patterns: Communication between internal threads: Messages are sent from a thread to another thread 
inside the server or clients. This kind of communication is done directly, either in an asynchronous 
or synchronous way, without the intervention of active communication com­ponents.  Communication between 
threads across a network: Mes­sages are sent from a thread located at the server to a thread located 
at a client or vice versa. Sending a message from a thread located at the server to a thread located 
at a client has the following procedure: 1. the message is sent to the corresponding server thread s 
message queue; 2. the server thread retrieves the message from its message queue;    Figure 1: Communication 
among Multiple Threads in DLP 3. the server thread invokes tcp put term to put the message to the stream 
connected with the client thread; 4. the client thread uses tcp get term to get the mes­sage from the 
stream; 5. the client thread stores the message in the desti­nation thread s message queue; 6. the 
destination thread retrieves the message from its own message queue.  Communication between two clients: 
Messages are sent from a client thread to a thread located at another client. Since there is no direct 
connection between two clients, this kind of communication has to be achieved via the server. The clients 
and server are designed to consist of two main components (Figure 1) : general components, called gg­server 
and gg-client, which deal with the network communi­cation and application speci.c components, called 
wsserver and wsclient for the soccer game, which deal with any­thing that is relevant for the application. 
Furthermore, the gg echo component is used for the actual message broad­casting. In agent-based virtual 
communities, each agent is rep­resented as a thread. Considering the high degree of au­tonomous behavior 
of user agents, we don t need the drone user agent at the server side and other client sides, which will 
become more clear in section 5. For agent-based virtual communities, agent communica­tion languages (ACL 
s) are used to serve as a high-level com­munication facility. KQML [10] and FIPAACL [11], which are based 
on speech act theory [23], are popular agent com­munication languages. Amessage in an ACL usually con­sists 
of a communicative act, a sender name, a list of re­cipients, and additional content. Communicative acts 
like tell , ask , and reply are used to identify the communi­cation actions which may change the mental 
attitudes of the agents. Moreover, a set of agent interaction protocols based on ACL has to be de.ned 
to achieve interoperability among the agents. Agents don t need to take care of the details how messages 
are passed across the network, that is the responsibility of the active communication components.  5. 
EXAMPLE: VRML-BASED MULTI-USER SOCCER GAME We used the soccer game as one of the benchmark ex­amples 
to test 3D agent-based virtual communities for the following reasons: Multiple users: Multiple human 
users can join the soc­cer game, so that a virtual community is formed.  Multiple agents: Soccer games 
are multi-agent systems which require multiple autonomous agents to partici­pate in the games, in particular 
the goalkeepers are better to be designed as autonomous agents, rather than human users, for their active 
areas are rather lim­ited, i.e. only around the goal gates. The goalkeeper agents can be designed to 
never violate the rules of the game.  Reactivity: Aplayer (user or agent) has to react quickly in the 
game. Thus, it is not allowed to have serious performance problems.  Figure 2: Screenshot of Soccer 
Game with Multiple Users Cooperation/competition: Soccer games are typical competition games which require 
the strong coopera­tion among team-mates. Therefore, intelligent behav­ior is a necessity for agents. 
 Dynamic behavior: Su.ciently complex 3D scenes, in­cluding the dynamic behavior of the ball.  Ascreenshot 
of the soccer game with multiple users is shown in Figure 2. We consider two playing teams, red and blue, 
in the soccer game. Two goal keepers, a soccer ball, and several agent players are designed to be pilot 
agents in the server. Whenever a new user joins the game, a client thread is created for which a user 
avatar is created to be the pilot agent in the client. 5.1 Agent players and their cognitive models Each 
agent player may play one of the following four roles: goalkeeper, defender, mid-.elder,and forward. 
Each role has its own active area in the soccer .eld. Each agent player has the following cognitive loop: 
sensing thinking acting. By sensing, agents use get-predicates to retrieve the necessary information 
about the current situation. The main infor­mation sources are: agent position, soccer ball position, 
and the goal gate position. In the stage of thinking, avatars have to reason about other players positions 
or roles and decide how to react based on their preferences and the information about the current situation. 
Thinking results in a set of in­tentions, more exactly, a set of intended actions. By acting, agents 
use the set-predicates to take the intended actions. In the current version of the soccer game we do 
not require that agents know all the rules of the soccer game [9], like penalty kick, free kick, corner 
kick, etc. In the simpli.ed soccer game, soccer players have several kick actions, like shoot­ing, passing, 
run-to-ball, move-around-default-position, etc. The agents in the soccer game use a simpli.ed cognitive 
model of soccer games [14] in which the agents consider the information about several critical distances, 
then make a decision to kick. Despite this simpli.ed cognitive soccer game model, each player shows a 
remarkably intelligent be­havior [14]. 5.2 Distributed Soccer Game Protocol ACL is used to design a 
distributed soccer game proto­col which states how the message should be processed and forwarded among 
the agents to achieve shared objects. The messages in the distributed soccer game protocol are a 3­tuple: 
[Act, T ype, P arameterList] where Act is a communicative act like tell , ask , register , Type is a 
content type like position , rotation , kick-ball , and P arameterList is a list of parameters for the 
content type. The basic message formats for the distributed soccer game protocol are: register game : 
[register, game name, from(Host)]. register accept : [tell, accept, user(Host, Name)]. register wait 
: [tell, wait, []]. tell new player : [tell, new player, user(Host, Name)]. tell position : [tell, position, 
[user(Host, Name), position(X, Y, Z)]]. tell rotation : [tell, rotation, [user(Host, Name), rotation(X, 
Y, Z, R)]]. text chat : [tell, text, [user(Host, SenderName), RecipientNameList, T ext]]. text chat broadcast 
: [tell, text, [user(Host, SenderName), [all], T ext]]. kick ball : [tell, kick ball, [user(Host, Name),f 
orce(X, Y, Z)]]. tell game score : [tell, game score, user(Host, Name)]. ask game score : [ask, game 
score, user(Host, Name)]. reply game score : [reply, game score, score(score1,score2)]. unregister game 
: [unregister, game name, user(Host, Name)]. reply unregister game :[reply, unregister, done(Host, Name)]. 
player gone :[tell, player gone, user(Host, Name)]. The meaning of the high-level message formats above 
is straightforward. For instance, the message [tell, position, [host(swpc257,red10), position(0, 0, 10)]] 
states that the current position of player red10 at the host swpc257 is (0, 0, 10). The distributed soccer 
game protocol for pilot agents re­quires that they should regularly tell their position and ro­tation 
to the communication components if the position or rotation is changed, so that their information can 
be up­dated by their drones. Moreover, for the player agents, if they kick the ball, the kicking message 
has to be passed to the server. The server decides which one is a legal kick and takes certain actions. 
Thus, the server plays a central role for the synchronization between pilot and drone agents. The received 
condition reply broadcast message message register name register tell game available accept new player 
register name register game not available wait tell tell position position tell tell rotation rotation 
tell legal tell kick kick kick tell illegal kick kick text recipient text chat list chat text chat text 
broadcast chat ask reply game score game score unregister reply player game unregister gone Table 1: 
Distributed Soccer Game Protocol distributed soccer game protocol for the server thread is a set of 4-tuples 
with the following format: (M, C, RM, B),which means that if Message M is received and Condition C holds, 
then reply the message RM and broadcast the message B. The protocol is shown in table 1. In theory, the 
protocol above is su.ciently expressive to realize shared objects in the soccer game. However, in prac­tice 
it results in several performance problems. Consider a problem caused by autonomous player agents: players 
may continuously run to the ball or other positions. If the players regularly send messages about their 
positions and rotations, the message queues grow rapidly, which results in serious message delays. In 
a worst case scenario, a user will never be able to kick a ball because its local world isn t su.ciently 
synchronized. 5.3 Performance Improvement In order to improve the performance and decrease the mes­sage 
delays, new message formats are required in the pro­tocol so that the drone agents can simulate the behavior 
of their counterpart pilot agents at a high level, i.e. the behav­ior can be computed locally. However, 
note that the high level simulations are suitable only for autonomous agents and object agents, for their 
pilots are controlled by DLP pro­grams; their behaviors are to some extent predicatable. Be­cause of 
the high autonomy of the human users, user agents are usually hard to be simulated at a high level. Thus, 
the high-level message formats are used only for autonomous player agents and objects agents. One example 
of a high-level simulation: if an agent wants to run to the position (X1,Y 1,Z1) from the initial position 
(X0,Y 0,Z0), then he sends a move-player message. Other high-level message formats are: run and trace: 
the payer runs and traces the ball until it can kick the ball.  move ball: the ball is moving to a new 
position.  Introducing the high level message formats signi.cantly reduces the message delays. Assume 
that in the game there are u users, a autonomous player agents, including object agents. Compared to 
autonomous agents, human agents are relatively slow to change their position or rotation. Assume also 
that each autonomous agent creates ma messages per second and each human agent creates mu messages per 
sec­ond. There are M = a×ma +u×mu messages per second in total. That means that each communication thread 
has to process M messages. If a communication thread is able to process Mc messages and Mc <M, then the 
message queue length becomes t × (M - Mc) after time t. Now, suppose that introducing a high-level message 
format f for which the average time period of the action is at(f) and the prob­ability is p(f). Asingle 
high-level message m with format f corresponds to at(f) × ma messages for a period at(f). It reduces 
ma - 1/at(f) messages per second for a single occurrence of message m. In general, the reduced number 
of messages Mr(f) per second by introducing f is Mr(f)=(at(f) × M × p(f)+1)/at(f ) The improved performance 
ratio R(f)isde.nedas R(f)= Mr(f )/M p(f) The improved performance is mainly determined by the probability 
of the high-level message. Several concrete dis­tributed multi-user benchmarks show the following test 
re­sults: the total improvement is about 43 percent; the high­level run and trace , kick ball and move 
ball/player message formats contribute about 30, 11, and 2 percent re­spectively. The discussed optimization 
turns out to be an e.ective approach in order to reduce the message passing overhead in a distributed 
context.  6. CONCLUSIONS The two main extensions to VRML97 are expected to be: multi-user interaction 
and autonomous creatures [4]. In this paper we proposed an approach to 3D agent-based virtual communities, 
which is an attempt to provide a gen­eral framework to deal with these two issues at a VRML EAI level. 
Virtual environments embedded with intelligent agents o.er a general solution to shared objects and au­tonomous 
creatures in VRML worlds. The interaction sup­ported by agent communication languages provides a high­level 
multi-user interaction in virtual environments. We have developed and implemented a VRML-based multi-user 
soccer game, which illustrates that the Distributed Logic Programming language (DLP) is a high level 
tool for the development of 3D agent-based virtual communities. The clean separation of 3D content and 
the logic of dynamic be­havior creates a powerful and .exible platform for a variety of applications 
at a reasonable performance penalty. 7. REFERENCES <RefA>[1] <SinRef><institution>ActiveWorlds</institution>, <url>http://www.activeworlds.com</url></SinRef>. [2] 
<SinRef><institution>Blaxxun Interactive Inc.</institution> <url>http://www.blaxxun.com</url>.</SinRef> [3] <SinRef><author>W. Broll</author>, <author>E. Meier</author>, and <author>T. Schardt</author>, <title>Symbolic Avatars 
Acting in Shared Virtual Environments</title>, <url>http://orgwis.gmd.de/projects/VR</url>, <date>2000</date></SinRef>. [4] <SinRef><author>G. Carson</author>, <author>R. Puk</author>, 
and <author>R. Carey</author>, <title>Developing the VRML 97 International Standard</title>, <journal>IEEE Computer Graphics and Applications </journal>
<volume>19(2)</volume>, <date>1999</date>, <pages>52-58</pages></SinRef>. [5]<SinRef> DLP web site: http://www.cs.vu.nl/~eliens/ projects/logic/index.html</SinRef>. [6] <SinRef><author>R. 
Earnshaw</author>,<author> N. Magnenat-Thalmann</author>,<author> D. Terzopoulos</author>, and <author>D. Thalmann</author>, <title>Computer Animation for Virtual Humans</title>, 
<journal>IEEE Computer Graphics and Applications</journal> <volume>18(5)</volume>, <date>1998</date></SinRef>. [7] <SinRef><author>A. Eli¨ens</author>, <author>DLP</author>, <title>A Language for Distributed 
Logic Programming</title>, <publisher>Wiley</publisher>, <date>1992</date></SinRef>. [8] <SinRef><author>A. Eli¨ens</author>, <title>Principles of Object-Oriented Software Development</title>, 
<publisher>Addison-Wesley</publisher>, <date>2000</date></SinRef>. [9] <SinRef><institution>FIFA</institution>, <title>Laws of soccer games</title>, <url>http://www.fifa.com</url></SinRef>. [10] <SinRef><author>T. Finin </author>and <author>R. Fritzson</author>, 
<title>KQML as an agent communication language</title>, <booktitle>Proceedings of the 3rd International Conference on Information 
and Knowledge Management</booktitle>, <date>1994</date></SinRef>. [11] <SinRef><institution>FIPA</institution>web site:<url>http://www.fipa.org</url></SinRef>. [12] <SinRef><title>Z. Huang</title>, <author>A. Eli¨ens</author>, <title>A. 
van Ballegooij, P. de Bra, A Taxonomy of Web Agents</title>, <booktitle>Proceedings of the 11th International Workshop on 
Database and Expert Systems Applications</booktitle>, <publisher>IEEE Computer Society</publisher>, <pages>765 769</pages>, <date>2000</date></SinRef>. [13] <SinRef><author>Z. Huang</author>, <author>A. Eli¨ens</author>, 
and <author>P. de Bra</author>, <title>An Architecture for Web Agents</title>, <booktitle>Proceedings of the Conference EUROMEDIA 2001</booktitle>, <publisher>SCS</publisher>, <date>2001</date>. </SinRef>
[14] <SinRef><author>Z. Huang</author>,<author> A. Eli¨ens</author>, and <author>C. Visser</author>, <title>Programmability of Inteligent Agent Avatars</title>, <booktitle>Proceedings of 
the Autonomous Agents 01 Workshop on Embodied Agents</booktitle>, <date>2001</date></SinRef>. [15] <SinRef><author>Z. Huang</author>, <author>A. Eli¨ens</author>, and <author>C. Visser</author>, 
<title>3D Web Agents in Distributed Logic Programming, Symposium on Multimodal Communication with Embodied Agents</title>, 
<date>December 7, 2001</date>, <location>CWI, Amsterdam</location>. <url>http://wasp.cs.vu.nl/wasp/papers/3dwebagent.ppt</url></SinRef>. [16] <SinRef><institution>Living Worlds 
Working Group</institution>, <url>http://www.web3d.org/WorkingGroups/ living-worlds/. </url></SinRef>[17]<SinRef> <author>Z. Liu</author>, <title>Virtual Community Presence 
in Internet Relay Chatting</title>, <journal>Computer-Mediated Communication </journal><volume>5(1)</volume>, <date>1999</date></SinRef>. [18] <SinRef><institution>ISO</institution>, <title>VRML97: The Virtual 
Reality Modeling Language, Part <volume>1</volume>: Functional speci.cation and UTF-8 encoding</title>, <tech>ISO/IEC 14772-1</tech>, <date>1997</date></SinRef>.. 
[19] <SinRef><institution>ISO</institution>, <title>VRML97: The Virtual Reality Modeling Language, Part <volume>2</volume>: External authoring interface</title>, <tech>ISO/IEC 
14772-2</tech>, <date>1997</date></SinRef>.. [20] <SinRef><author>E. Messmer</author>, <title>E-commerce yet to embrace virtual reality</title>, <url>http://www.idg.net/english/ 
crd commerce 441283.html</url></SinRef>[21] <SinRef><title>MiMaze</title>, <url>http://www-sop.inria.fr/rodeo/MiMaze/</url></SinRef>. [22] <SinRef><author>G. Reitmayr</author>, <author>S. Carroll</author>, 
and <author>A. Reitemeyer</author>, <title>DeepMatrix An Open Technology Based Virtual Environment System</title>, <journal>Visual Computer</journal> <volume>15</volume>, 
<date>1999</date></SinRef>. [23] <SinRef><author>J. R. Searle</author>, <author>Speech Acts</author>. <title>An Essay in the Philosophy of Language</title>. <location>Cambridge</location>, <date>1969</date></SinRef>. [24] <SinRef><title>Virtual 
European Statistical Lab, Conferencing using Vnet</title>, <url>http://vesl.jrc.it/en/comm/eurostat/ research/supcom.97/01/conf/mainvnet.htm</url></SinRef>. 
[25] <SinRef><title>WASP project home page</title>: <url>http://wasp.cs.vu.nl/wasp</url></SinRef>. [26] <SinRef><author>M. Watson</author>, <title>AI Agents in Virtual Reality 
Worlds programming intelligent VR in C++</title>, <publisher>Wiley</publisher>, <date>1996</date></SinRef></RefA>.  
			
