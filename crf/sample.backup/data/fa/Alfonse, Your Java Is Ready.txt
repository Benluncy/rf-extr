
 . Alfonse, Your Java Is Ready! Stephen J. Hartley Math and Computer Science Department Drhxel University, 
Philadelphia, PA 19104 (215) 895-2678 . mailto:shartley@mcs.drexel.edu . Abstract i L L Is Java suitable 
for teaching concurrent programming? This paper describes the features Java has for this, how well they 
work, and what is missing. The author has written a library of classes, also described here, to pro- 
vide the missing features. Supplemented with these classes, Java works well as the concurrent programming 
language in operating systems and related courses. lntrodktion The abundance of hype Java [AG96, .CH96, 
Sun971 receives should not distract us from the fact that it has many excellent features for teaching 
sequential pro- gramming: object-oriented, no explicit pointers and no pointer arithmetic, automatic 
garbage collection and no memory leaks, strong typing, platform independence, and many compiler and run-time 
checks. The devel- opment kit (JDK) for the language comes with ,a rich collection of class libraries 
(AI%) for data structures, IO, networking, remote procedure calls, and graphics. Since threads are built-in, 
Java can be used for con- current programming and developing multithreaded ap- plications. The question 
remains, however, whether Java is suitable-as the concurrency platform in operat- ing systems and related 
courses to give students practice and experience [BC96] in concurrent programming. Be- sides supporting 
multiple threads, a language for teach- ing concurrent programming should have semaphores and monitors 
for synchronizing threads sharing the same address space, and message passing capabilities so threads 
in different address spaces (perhaps on different computers) can communicate. Other desirable features 
are the rendezvous and remote procedure calls for client- server style programming. These programming 
tools are described in many operating systems texts, such as [DeiSO, SG94, Sta95, TW97], and concurrent 
program- Permission to make digitalhard copies of all or part of this material for personal or classroom 
use is granted without fe provided that the copies are not made or distributed for profit or cnmmercial 
advantage, the copy- right notice, the title ofthe publication and its date appear, and notice is given 
that copyright is by pemuss~ on ofthe ACM, Inc. To copy otherwise, to republish, to post on servers or 
to redistribute- to lists, requires specific permission antior fee. SIGSCE 98 AtlsntaGA USA Copyright 
0-89791-994-7/98/2..%5.00 1998 ming books, for, example [AndSl, B&#38;90, BD93]. This ,paper describes, 
and evaluates the features Java has supporting concurrent programming for op- erating systems and other 
courses. To handle what is missing (message passing) and to wrap a rendezvous interface around sockets, 
the author has written a concurrent programming library of classes, available at ftp://ftp.mcs.drexel.edu/pub/ 
shertley/concProgsJava.zip and http://www.mcs. drexel.edu/ shartley/ConcProgJava/index.html. What Java 
Has Java comes with a Thread class that has many useful methods: start, stop, yield the CPU, suspend 
ex- ecution, resume execution, sleep for some number of milliseconds, and join some other thread when 
it termi- nates. Since all threads started in the same Java virtual machine (JVM) share the same address 
space, they all have access to public variables and there is a need for mutual exclusion to avoid lost 
updates and race con- ditions. Threads also need to block if conditions are not right to proceed until 
they are signaled by another thread, called event or condition synchronization. Note that suspend and 
resume cannot be used for condition synchronization because a context switch might occur after a thread 
has decided conditions are not right to proceed but before it has called suspend; the thread might then 
miss alater resume intended for it. Students must be discouraged from succumbing to this tempta- tion. 
For mutual exclusion and synchronization, Java pro- vides the monitor as its,built-in primitive. A Java 
mon- itor has synchronized in all its public method declara- tions. The wait, notify, and notifyAl methods 
are used for condition synchronization. The only signal- ing discipline available in Java monitors is 
signal-and- continue. There are two important properties of this. (1) Since the signaled thread does 
not get priority to reenter the monitor, the condition that resulted in the signal may no longer be true; 
other threads may have barged in ahead of it. (2) Since the signaling thread is not required to leave 
the monitor immediately after signaling, it can change the state of the monitor after signaling, possibly 
negating the condition for which the signaled thread is waiting, The implication of these two properties 
is that threads should use a loop while ( ! condition) wait 0 ; instead of an if check. if ( ! condition) 
wait 0 ; This needs to be clearly explained to students. Another important property of Java monitors 
is that each one has just a single anonymous condition vari- able; a signal cannot be directed to any 
particular queue of threads waiting for a specific condition. Either one random waiting thread is released 
with notify or all waiting threads with notifyAll. The safest program- ming practice is to wake up all 
threads with notif yAl1 before leaving the monitor, particularly if its state has been changed. Thus, 
monitor methods should have the pattern public synchronized type method<. . . > -( . . . while ( ! condition) 
wait 0 ; . . . notifyhllo,; ;,,; 3 For example, here is a Java server monitor for the five dining philosopher 
threads in that well-known operat- ing systems synchronization problem. Note the use of while waiting 
loops and not if yAl1. ?, class DiningServer,< private int n&#38;F'hils = 0; private int[] state = null; 
private static final int ' THINKING :. 0, HUNGRY= I, EATING = 2; public DiningServercint numPhils) C 
this.numPhils = numPhils; state = new int[numPhilsl; for (int i = 0; i,( numPhils;.i++) stateCi.1 = 
THINKING; 3 private final int left(int i) < return (numPhils+i-l)%numPhils; 3  private final: int rightcint 
i> < return (i+l)%nuuPhils; 3 ' , private void test(int k) {. if (stateCleft( !=,.EATING &#38;&#38; ,, 
'.: , stateLk ,;= JDINGRYF&#38;, 'I state[right(k)] != EATING) ' , stateCk1 = EATING; I 3  public synchronized 
void takeForks(int i> c state Cil = HUNGRY; test(i); 248 while (state[i] != EATING) try { wait(); catch 
(InterruptedException e) I) 3 public synchronized void putForks(int i) < state[i] = THINKING; testCleft(i 
test(right(i)); notifyAll();  3 3 At a lower level, Java provides implicit binary sem-aphores with 
initial value pne, also known as critical regions, in the form of synchronized blocks. synchronized (object 
> ( . . . 3 I  In order to execute the statements inside a synchronized block, the thread must first 
obtain the lock on the ob- ject pointed to by object. Each Java object has an associated lock, so any 
object can be used for object in a synchronized block. When an object s lock is re- leased by a thread 
exiting a synchronized block, the virtual machine chooses a thread at random from those waiting, if any, 
to acquire the lock., . Synchronized blocks can be used to enforce mutual exclusion during access to 
shared data by a collection of threads. shared by the threads: Object mutex = neir ObjectO; in each thread: 
synchronized (mutex) -f. critical section; 3  In fact, a synchronized method in a monitor synchronized 
type iethod (. . . > I 3 / is an abbreviation for type method (. . .> ( synchronized (this) ( . . . 
3 3 I  where this refers to the object owning method. Threads can use wait and notify inside synchronized 
blocks. synchronized (object > 1 : . . object.wait(); . . . object .notify() ; . . . 3  This idea is 
utilized to create notification objects for Java monitors that are close in behavior to named con- dition 
variables (remember each Java monitor has only a single nameless Fondition variable). Here is the din- 
ing philosophers server implemented with notification objects. Unfortunately, the coding is not as clean 
as if there were true named condition variables in Java,,a dif- ficulty in teaching this technique to 
students. The server creates a notification object for each philosopher. A hungry philosopher wishing 
to pick up its forks enters a synchronized block on its notification object, records its hungry state 
inside a synchronized block on ,the server (this), and then checks its fork availability. After leav- 
ing the synchronized block on this, the philosopher waits, if its forks are not available, inside its 
notifica- tion object for a signal. A philosopher relinquishing its forks checks both neighbors to see 
if either is waiting to eat. The philosopher sends a signal to a hungry neigh- bor if both of its for,ks 
are now available. : class DiningServer { private int numF'hils = 0; private intC1 state = null; private 
ObjectC] notification = null; private static final int THINKING = 0, HUNGRY= 1, EATING = 2; public DiningServer(int 
numF'hils) { this.numPhils = numPhils; state = new int[numPhils]; for (int i = 0; i < numphils; i++) 
 stateLi] = THINKING; notification = new Object@mF'hils]; for (int i = 0; i < numphils; i++) notification[il 
= new ObjectO; 3 private final int left(int i) { return (numF'hils+i-i)'/,numPhils; ) private final 
iht right(int i) { return (i+l)%numPhils; ) private void test(int k) C if (stateCleft( != EATING $8~ 
stateLk] == HUNGRYbt stateCright(k)l != EATING) stateLk = EATING; 3 -. public void tekeForks(int i) 
{ synchronized (notification[i]) { synchronized (this) { state[i] = HUNGRY; test(i); if (stateCi1 == 
EATING) return; 3 try C notificationCil.waitO; ) catch (InterruptedException e> {3 3 3 public void putForks(int 
i> ( . synchronized (this) { " state[i] = THINKING; test(left(i)); test(right(i)),; ' if (stateCleft( 
== EATING) synchronized (notificationCleft(i C notificationCleft(i)l.notify(); 3 if (state[right(i)l 
== EATING) synchronized (n+ification[right(i)]) { notificationCright(i)].notifgO; 3 3 3 3 The instructor 
must clearly describe the pitfalls of signal-and-continue and barging in Java monitors and synchronized 
blocks. Synchronized blocks are lower- level, like the go to statement; monitors are higher- level, like 
if, while, and for statements. The same trade-offs that apply in sequential programming also ap- ply 
in the concurrent case. Notification objects can be very confusing to students if introduced soon after 
the monitor idea. Nested synchronized blocks and nested monitor invocations are subject to deadlock, 
which stu- dents need to understand. The JDK comes with a collection of classes that pro- vide an interface 
to Berkeley sockets. These are used for network programming and are utilized in the message passing and 
rendezvous classes written by the author and described below. The JDK also includes a remote procedure 
call API, termed remote method invocation (R&#38;II), that allows a thread in one JVM to invoke a method 
in an object in another JVM that is perhaps on a different computer. To send an object from one JVM to 
another as an argument of a remote method in- vocation, object serialization is used. Thii converts an 
object into a byte stream that is sent through a socket and converted into a copy of the object on the 
other end. What Java Does Not Have The Sun Microsystems JDK for Windows 95 uses native threads and so 
Java threads on this platform are time sliced with a quantum of about 50 milliseconds. But Solaris threads 
are not time sliced as of JDK 1.1.1; a thread retains the CPU until it suspends itself, yields, sleeps, 
waits for a lock or signal, joins another thread, or blocks on IO. Also, Solaris threads in the same 
JVM cannot yet take advantage of additional CPUs in a mul- tiprocessor system. However, it is easy to 
introduce time slicing to Solaris threads. Ah object is instantiated that contains a high priority thread 
that repeatedly sleeps for 50 millisec- onds. Each time its sleep ends, the currently executing thread 
is preempted. When the high priority thread goes back to sleep, another thread is allocated the:CPU, 
most likely a different one than was preempted. Using time sliced threads, the instructor can write Java 
examples ofrace conditions, such as a thread being preempted in the middle of manipulating a linked list, 
resulting ins a corrupted data structure. Java does not, have general counting semaphores or binary ones 
that can be initialiied to zero. Binary and counting semaphore &#38;sses are straightforward to write 
as Java monitors and can be made available to stu- dents in a class library by instructors of concurrent 
pro- gramming. Many semaphore-based programming as-signments can then be given, such as an elevator simu- 
lation or a starvation-freeiversion of the dining philoso- phers. ) Students who have programmed in C++ 
are accus- tsmed to using the terminology send a message to an object to mean invoking a method in that 
object. In Java, a threadinvoking.a method in another object tem- porarily leaves the object it is currently 
executing in and executes code in the other object. In concurrent programming; sending a message has 
a different mean- ing: a thread sends a message object to another thread executing in some other object 
and optionally blocks until the other thread receives the object sent. , Since Java does not have message 
passing, the author has implemented a variety of message passing styles in a class library for students 
to use in programming as- signments. Each class implements a mailbox or channel that is shared by a collection 
of threads. Both synchro- nous (blocking sends), and asynchronous (non-blocking sends) are available 
(receives .always block). The one- way flow of information from sender.to receiver in syn- chronous message 
passing is sometimes called a simple rendezvous. .I I : I ! , .. *I-, 8 shared type:, class Message (. 
. . i shared mailbox: SyncMessagePassing mailbox = new SyncMessagePassing(); one thread: Message ms = 
n&#38;i Messdge(. . . > ; send(mailboxl ms); I - another threadf Mesiage e; t I , mr = (Message) 
redeive(mailbox); Within one JVM, threads share a single message pass- ing object containing the mailbox; 
for message passing between JVMs, a message passing 0bject containing.a socket is created-in each JVM 
(the two sockets are con- nected). The types of information passed in a message I are l object references 
from one thread to another, intra JVM;  l data type values like int and double through a pipe, intra 
JVM; j l data type values like int and double through con- nected sockets, inter JVM; l serialized 
objects through a pipe, intra JVM; l serialized objects through connected sockets, inter _ JVM. Thus, 
distributed programming using a collection of workstations connected to,a local area network is done 
in Java with message passing mailboxes based on sock- ets. Students can write programs to solve large 
N- queens problems in parallel,on a set of workstations or simulate the dining philosophers where each 
philosopher is executing on its own computer. In client-server programming, a client thread trans- acts 
with the server thread by sending a message fol- lowed immediately by a receive that blocks until the 
server sends a reply message containing the results of the transaction. mailbox shared by the client 
and server: AsyncMessagePassing mailbox = new AsyncMessagePassing(); client: send(mailbox, request) 
; reply -= receive (mailbox) ; 8 I server: request = receive(mailbox) ; compute reply; send(mailbox, 
reply);  Another name for this is the extended rendezvous: two threads exchanging information synchronously. 
The au- thor s concurrent programming class library contains an extended rendezvous class wrapped around 
a mailbox. shared by the client and server: ExtendedRendezvous er = new ExtendedRenhezvous(); client: 
reply = er. clientMakeRequestAwaitReply(request); server: request = er. serverGetRequest () ; compute 
reply; er.serverMakeReply(reply);  If the client and server threads are in the same JVM, one shared 
rendezvous object is used by the client to contact the server and the server to reply to the client. 
If the client and server are in different JVMs, perhaps on dif- ferent computers, two rendezvous objects 
are used, one by the client and one by the server, connected through sockets. In the former c&#38;e, 
the client and server use object references to exchange information; in the latter case, the objects 
are serialized through sockets. These message passing and rendezvous classes sup- port a wide variety 
of client-server programming projects. The author believes these classes are easier for students to use 
in distributed computing applica- tions than RMI. The author s classes support communi- cation between 
threads in different JVMs, whereas BMI supports a thread executing a method in a,remote ob- ject. Conclusions 
. The author has used Java during the past year to teach concurrelit programming to both undergraduates:and 
graduate students at Drexel University. These students have all previously programmed in C++ and therefore 
learn sequential Java quickly. Using instruct&#38;supplied semaphore, message passing, and rendezvous 
classes, the students get substantial concurrent programming experience in a language they have all heard 
much about in the popular press. Their feedback has been uniformly bpositive. However, there are a few 
caveats. Since Java moni- tors use signal-and-continue and have only one nameless condition variable, 
instrutitors will need to explam with pseudocode named condition variables and the sign&#38; and-exit 
signaling discipline. Students need to code their Java monitors to handle barging. The dangers of using 
suspend and resume for thread condition syn- chronization also need emphasis. So, Alfonse [BC96], yes, 
your Java is ready par98]. References <RefA>[And911 <SinRef><author>Gregory R. Andrews</author>,<title> Concurrent Program- ming: Principles 
and Practice</title>, <publisher>Benjamin/ Cummings</publisher>, <date>1991</date></SinRef>. [AG96] <SinRef><author>Ken Arnold </author>and <author>James Gosling</author>, <title>The Java Programming <date>1996</date>. 
Language</title>,0 <publisher>Addison-Wesley</publisher>,</SinRef> /Ben901 <SinRef><author>M. Ben-Ari</author>,<title> Principles of Concurrent and Distributed <date>1990</date>. Programming, 
</title><publisher>PrenticeHall</publisher>,<volume>1</volume></SinRef>, PD931 <SinRef><author>Alan Burns </author>and <author>Geoff Davies</author>, <title>Concurrent Progrzunming</title>, <publisher>Addison-Wesley</publisher>, <date>1993</date></SinRef>.  PC961 
[CH96] [DeiSO] Pa4 [SG94] [Sta95] [Sun97] [TW97; <SinRef><author>Bill By</author>&#38;m and <author>Tracy Camp</author>, <title>After You, Alfonse: A 
Mutual Exclusion Toolkit</title>,,, <journal>ACM SIGCSE Bulletin</journal>, <volume>Vol. 28, No. 1, </volume><pages>pp. 170- 174</pages>, <date>March 1996</date></SinRef>. <SinRef><author>Gary Cornell </author>
and<author> Cay S. Horstmann</author>,<title> Core Java</title>, <publisher>Prentice-Hall</publisher>, <date>1996</date></SinRef>. <SinRef><author>Harvey M. Deitel</author>, <title>An l&#38;roduction to Op- erating 
Systems</title>, <volume>second </volume>edition, <publisher>Addison-Wesley</publisher>, <date>1990</date></SinRef>. <SinRef><author>Stephen J. Hartley</author>, <title>Concurrent Program-ming: The Java 
Programming Language</title>, <publisher>Oxford University Press</publisher>, <date>1998</date></SinRef>. <SinRef><author>Abraham Silberschatz</author> and <author>Peter B. Gavin</author>, <title>Operating 
System Concepts</title>, <volume>fourth </volume>edition, <publisher>Addison-Wesley</publisher>, <date>1994</date></SinRef>. <SinRef><author>William Stallings</author>, <title>Operating Systems</title>, <volume>sec- ond </volume>
edition, <publisher>Prentice-Hall</publisher>, <date>1995</date>. 1 <url>http:/Lwww.javasoft.com </url></SinRef><SinRef><author>Andrew S. Tanenbaum </author>and <author>Albert S. ,Wood- hull</author>, 
<title>Operating Systems: Design and Im- plementation, second edition</title>, <publisher>Prentice-Hall</publisher>, <date>1997</date></SinRef></RefA>. 
			
