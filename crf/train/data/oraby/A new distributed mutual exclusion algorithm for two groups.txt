
 A NEW DISTRIBUTED MUTUAL EXCLUSION ALGORITHM FOR TWO GROUPS Ahmed HOUSNI Ph.D. student Université de 
Franche Comté, 16, route de Gray 25000 Besançon France + 33 3 81 66 20 85 housni@lifc.univ-fcomte.fr 
ABSTRACT This paper presents a new token-based management protocol for shared resources. The example 
of a teleconference with a point-to-point communication between speakers is used. The power of speech 
is the resource and the member who is speaking is the token holder. Every member must send a request 
to have the right to speak. This request moves up from one member to another one going toward the token 
holder. At a given time, a logical tree expresses the different path requests and must follow the members 
to reach the token holder, and reciprocally the token going toward each requester. Thus, a single request 
queue, including all requests, moves from one requester to another with the token, following to the logical 
tree. Firstly, a teleconference with a single group (room) of members is considered, i.e. a single logical 
tree. Two groups (members in different rooms), i.e. several logical trees, are considered. General Terms 
Algorithms  Keywords Algorithm, Distributed Mutual Exclusion, Tree, Token, Priority, Groups, Teleconference, 
 1. INTRODUCTION Distributed mutual exclusion has received much attention: Lamport [4] proposed an algorithm 
based on timestamps. A site wishing to enter its critical section broadcasts its request toward the other 
sites, and these sites reply giving permission. Once a site receives permission from all the other sites, 
it enters and carries out its critical section. Requests and replies induce messages and acknowledgments. 
Ricart and Agrawala [13], Carvalho and Roucairol [1] have improved Permission to make digital or hard 
copies of all or part of this work for personal or classroom Permission to make digital or hard copies 
of part or all of this work or use is granted without fee provided that copies personal or classroom 
use is granted without fee provided that copies are are not made or distributed for profit or not made 
or distributed for profit or commercial advantage and that copies commercial advantage and that copies 
bear this bear this notice and the full citation on the first page. To copy otherwise, to notice and 
the full citation on the first page. republish, to post on servers, or to redistribute to lists, requires 
prior To copy to to post on specific permission and/or a fee.otherwise, republish, servers or to redistribute 
to lists, requires prior specific permission and/or a fee.  SAC 2001, Las Vegas, NV SAC 2001, Las Vegas, 
NV  &#38;#169; 2001 ACM 1-58113-287-5/01/02 $5.00 &#38;#169; 2001 ACM 1-58113-324-3/01/02...$5.00  
Michel TREHEL Professor Université de Franche Comté, 16, route de Gray 25000 Besançon France + 33 3 81 
66 66 53  trehel@lifc.univ-fcomte.fr Lamport s algorithm by eliminating the acknowledgments of delivery. 
However, when considering messages for a critical section, these algorithms have an n-order complexity 
O(n). Thomas [9] introduced the idea of quorum consensus: a site must vote at the most for one site at 
a given time. When a site receives a majority of the votes, it enters its critical section. Maekawa [6] 
has presents an algorithm based on the site group concept. Each site must only require the permission 
of its group. Kumar [3] has put forward a hierarchical quorum consensus protocol which asks O(N0.63) 
for a vote of consensus, but this protocol is more fault-tolerant than the algorithm of Maekawa. Li and 
Hudak [5] have presented an algorithm of distributed mutual exclusion, which reinforces coherence in 
a system distributed with virtual memory, shared (DSVM). In a DSVM, a memory page of a processor is treated 
like a hidden version of an overall shared memory page. The algorithms of coherence need a processor 
home to manage the shared page. This processor detects the positions of the copies of this page. Naimi 
and Trehel have presented two algorithms of distributed mutual exclusion ([10] and [11]), which are similar 
to the algorithm of Li and Hudak. Chang, Singhal and Liu [2] improved to the algorithm of Naimi Trehel 
by reducing the average number of messages. When a site makes a fault on a not-resident page, it sends 
a request to a site (which is its successor in the tree structure). Consequently, the page is turned 
over and the rejected site is isolated. The page request is propagated until it has a site or will soon 
have the page. Raymond [8] put forward a simple algorithm of mutual exclusion, which organizes the sites 
in the form of a fixed tree. In this algorithm, mutual exclusion is ensured as in the algorithm of Li 
and Hudak. Neilsen and Mizuno [7] further improved the algorithm of Raymond by conveying the token directly 
between the petitioning sites, i.e. the token does not forward go through any intermediate site. Woo 
and Newman-Wolfe [12] used a fixed tree based on a Huffman code. However, this tree was not adapted to 
the dynamic requests in the system. Our objective in this article is to present an algorithm of distributed 
mutual exclusion for two groups. To do this, the representation storks in only one group. In this algorithm, 
the sites are organized in the form of a tree structure whose root is the site holder of the token. This 
site uses an overall queue to record all the requests for execution of the critical section. The token 
moves between the petitioning sites. Our ideas are extended to mutual exclusion between two site groups 
knowing that each group remains represented by a tree and the communication is done by a link between 
the root of each group. 2. SPEECH RIGTH ALGORITHM IN A GROUP OF SPEAKERS 2.1 Description and specification 
In this algorithm, a speaker (or site Si) is represented by five following variables: -An identifier 
of this site Si that is represented by the variable its self. -The Father variable whose value is Sj 
identifies the successor Sj of site Sj. This means that site Si considers site Sj holder of the token, 
-The variable Asked indicates if the site requires a critical section, -The variable privilege indicates 
the possession of a token, -The variable QUEUE_D represents the queue of the applicants of the token. 
It is made up of a succession of couples of elements. The first element of each couple is the identifier 
of the petitioning site of the token, Sk. The second element of the couple is a stack recapitulating 
the sites, which were crossed by the Sk request, called Stack_Req. The base of this Stack is the petitioning 
site Sk. When the request reaches the holder of the token, the node of this Stack is the last site, crossed 
by the request, whose father is the holder of the token. An example is presented below. Table1. Initial 
state of system Self A B C D G Father nil A A A D Asked F F F F F Privilege T F F F F QUEUE_D nil nil 
nil nil nil  Figure 1. Tree with holder-directed Edges: A holds the privilege 2.2 The Basic algorithm 
When a site wishes to carry out its critical section, it calls upon procedure DEMANDE_SC. This procedure 
assigns to the variable Asked of the site, the value truth. Then, it tests if the site is the holder 
of the token; if this not the case, it records this request in queue QUEUE_D then it starts sending the 
request (Req, QUEUE_D) towards the successor of this site: DEMANDE_SC Begin Asked . T Enqueue ((Self, 
nil), QUEUE_D) If (Father . nil) then Push (Self, Stack_Req) Send (Req, QUEUE_D) to Father Endif End. 
When a site receives a message of the type (Req, QUEUE_D), it starts the Request_reception procedure, 
which tests the possession of the token. Indeed, if this site has the token, the request (Req) is put 
on standby in its local queue. If not, the Request_reception procedure initially stacks up the entity 
of this site in the Stack_Req stack of the request and then it sends it to the successor of this site. 
Request_reception (Req_received, QUEUE_received) Begin If Father . nil then Push (Self, Stack_Req_received) 
Send (Req_received, QUEUE_D) to Father Else Enqueue (QUEUE_received, QUEUE_D) Endif End. While exiting 
of its critical section, the site holder of the token calls upon the procedure LIBERATION_SC that carries 
out the following stages: -It assigns the value forgery to the local variable Asked of the site; -It 
decapitates queue QUEUE_D to remove the request for this site; -It indicates the new site holder of token 
(N_Holder_token) which is the new head of queue QUEUE_D; -it determines the receiver of the Receiving_token 
which is the node of the Stack_Req Stack of the new site holder of the token. Moreover, the routing of 
the token, towards this site, is described in its Stack_Req Stack; -It also calls upon procedure UPD_QUEUE_D 
to update all the stacks of QUEUE_D. LIBERATION_SC Begin Asked . F Dequeue (Self, QUEUE_D) N_Holder_token 
. Head (QUEUE_D) UPD_QUEUE_D (N_Holder_token, QUEUE_D) End When a site receives the token and queue QUEUE_D, 
the Reception_message procedure updates the variables (privilege and father) of this site. Thus, constantly 
the site having the token is the root of the tree structure. The procedure also checks if this site is 
the head of the QUEUE_D_reçue queue of the applicants, and if this is the case then this site carries 
out its critical section. In this is not the case, Reception_message procedure calls upon its tower with 
UPD_QUEUE_D procedure. Reception_message (Ok, QUEUE_received) Begin Privilege . T Father . nil If (Self 
= Head (QUEUE_received)) Then <Initiate entry into critical section> LIBERATION_SC Else / for each request 
(Di, Stack_Reqi) . QUEUE_D update its stack Stack_Reqi / UPD_QUEUE_D (Head (QUEUE_received), QUEUE_received) 
Endif End. The UPD_QUEUE_D procedure updates of all the Stack_Reqi stacks of the requests belonging 
to queue QUEUE_D. Indeed, UPD_QUEUE_D procedure seeks to send the token towards the site which is the 
new head of QUEUE_D. The routing of the token, towards this site, is described in its Stack_Reqi Stack. 
To do this, it first determines the receiving site from the Receiving_token, which is the node of the 
Stack_Req Stack of this site. In the second time, it examines all the Stack_Reqi Stacks associated with 
the Di requests pertaining to queue QUEUE_D. The update of each Stack_Reqi Stack is carried out in the 
following way: If the node of the Stack_Reqi Stack is the receiver of the token (node (Stack_Reqi) = 
Receiving_token) then procedure UPD_QUEUE_D depilates the node of Stack_Reqi. If not, it currently stacks 
up the identity of the site holder of the token. Once that all the Stack_Reqi Stacks of the requests 
are brought up to date, procedure UPD_QUEUE_D starts sending the token towards another site. UPD_QUEUE_D 
(head (QUEUE_D), QUEUE_D) Begin N_Holder_token . Head (QUEUE_D) Receiving_token . top (N_Holder_token, 
Stack_Req) {For each request (Di, Stack_Reqi) . QUEUE_D update its stack Stack_Reqi } If top (Di, Stack_Reqi) 
= Receiving_token Then Pop (top (Di, Stack_Reqi), Stack_Reqi) Else Push (Self, Stack_Reqi) Endif Endfor 
Send (Ok, QUEUE_D) to Receiving_token Privilege . F Father . Receiving_token End.  2.3 Example Table 
2. Initial state of system Self A B C D E Father nil A A B B Asked T F F F F Privilege T F F F F QUEUE_D 
(A,{}) nil nil nil nil Self F G H I Father C C G G Asked F F F F Privilege F F F F QUEUE_D nil nil nil 
nil  F Figure 2. Initial state of system: site A holds the privilege 2.3.1 Site I wants to enter its 
critical section Site I wants to enter its critical section. Initially it is site A which uses the token 
(figure 2). To carry out critical section, site I sends its request (Req, (I, {I}) to its father which 
is G. Once that a has received the request (Req, (I, {I}), it stacks up its identity (G is not a root) 
in the stack of the request of I (Req, (I, {G, I}) then it dispatches it towards its father C who carries 
out the same protocol as site G (the request of I (Req, (I, {C, G, I})). Once the root A request reaches 
the root, its put on standby in queue of the root (following table). Table 3. Site I Asking Self A I 
Father nil G Asked T T Privilege T F QUEUE_D (A,{}), (I,{C, G, I}) nil  2.3.2 Site E, G, F and B want 
to enter its critical section The sites E, G, F and B have to carry out their critical sections: Let 
us suppose that the sites E, G, F and B ask respectively for the in critical section and their requests 
are dealt with by the above defined protocol. The following table presents the state of the system: Table 
4. Site E, G, F and B Ask critical section Self A Father nil Asked T Privilege T QUEUE_D (A,{}),(I,{C, 
G, I}), (E,{B, E}) , (G,{C, G}) , (F,{C, F}) , (B,{B}) I E G F B G B C C A T T T T T F F F F F nil nil 
nil nil nil Once that site A comes out of the critical section, it carries out the following actions: 
-A decapitates the QUEUE_D queue which becomes: QUEUE_D = {(I, {C, G, I}), (E, {B, E}), (G, {C, G}), 
(F, {C, F}), (B, {B})}, -A beheads all the Stacks of the other applicants whose node is C (Stacks of 
applicants I, G and F) -A stacks up its identity A in the stacks of the applicants B and F: ((B, {A, 
B}, (E, {A, B, E}), -A sends the token and QUEUE_D queue to C, -A becomes the son of site C.  2.3.3 
Site C receives the token and QUEUE_D queue Site C receives the token and queue QUEUE_D. One site C receives 
the token and queue. The following table gives the state of the system: Table 5. Site C receive the token 
and QUEUE_D queue Self A C I E G F B Father C nil G B C C A Asked F F T T T T T Privilege F T F F F 
F F QUEUE_D (I,{ G, I}), (E,{A,B, E}), (G,{G}), (F,{ F}), (B,{A,B}) nil nil nil nil nil As site C is 
not an applicant of the token, it updates all the stacks of queue QUEUE_D. Indeed, site C beheads the 
stacks of the other applicants whose node is G and stacks up its identity C in the other stacks. Then, 
it dispatches the token and queue QUEUE_D to G and point towards G (G becomes the father C). When site 
G receives the token and queue QUEUE_D, its is an applicant of the token but it does not appear at the 
head of stack QUEUE_D. Consequently in its turn, it must apply the same protocol as that of the site 
C.  2.3.4 Site I receives the token and QUEUE_D queue Table 5. Site I receive the token and QUEUE_D 
queue Self I E G F B Father nil B I C A Asked T T T T T Privilege T F F F F QUEUE_D (I,{}), (E,{G,C,A,B,E}), 
(G,{G}), (F,{ F,C,F}), (B,{G,C,A,B}) nil nil nil nil Site I is an applicant of the token and ranks first 
in queue QUEUE_D then enters in critical section (figure 3). At the end of a set time, site I comes out 
of its critical sections then it removes its request of queue QUEUE_D, it beheads all the stacks of the 
other applicants whose node is G and stacks up I in the other stacks. Once that the updated is made, 
it dispatches the token and queue QUEUE_D with G. Site G is an applicant of the token but it does not 
appear at the head of stack QUEUE_D. Consequently, it must send the token and QUEUE_D queue to the site 
C. Site E receives the token and QUEUE_D queue.  2.3.5 Site E receives the token and QUEUE_D queue Table 
6. Site E receive the token and QUEUE_D queue Self I E G F B Father G nil C C E Asked F T T T T Privilege 
F T F F F QUEUE_D (E,{}), (G,{B,A,C,G}), (F,{ B,A,C,F}), (B,{A,B}) nil nil nil Once all the requests 
have been useful, the state is presented by the following table 7 and Figure 4: Table 7. Final state 
of system Figure 4. State of system when all the requests are been useful   3. THE CONFERENCE ALGORITHM 
OF TWO GROUPS OF SITES We initially seek to apply the concept of group to our study. This notion was 
introduced into the system of the queues of UNIX for better managing protection between users. To broadcast 
messages, the operational system distributed Chorus [14] also proposes groups, but this time on the level 
of the wearing of communication. System DCE [15] employs groups on several levels: first of all cells 
to gather the users of the same local area network on a WAN, then of the groups to classify the users 
of a cell according to their qualification, and finally from the point of the rights of access. The ISIS 
system makes it possible to gather process sites or workstations, and communication port, in order to 
focus on the availability, the performance, and the tolerance of the faults. In our article, a group 
represents the participants in the same conference; the relation between these participants is organized 
on the base of a tree structure. The member placed at the root of this tree structure has a particular 
role (which, at one particular point in time and then transmits it). The reorganization of three enables 
the members of group to play this role. This role can circulate between the members of the group. The 
preceding algorithm corresponds to the case of a conference (or a class) bringing together its participants 
(its pupils and the teacher) in the same place. It is a question to extending this operation to the case 
of a distributed conference whose participants are gathered in several geographically dispersed places. 
Moreover, to preserve the homogeneity and coherence related to the concept of locality, which reliant, 
the concept of a group, i.e., each distributed whole of participants could be expressed in a language 
which is him particular as in the case of an international conference. It is thus advisable to develop 
a model of communication, which integrates the circulation of the requests to speak inside a same group 
on the basis of the preceding algorithm, relayed by a system of circulation of the right to speak between 
the groups. The circulation of a token illustrates the circulation of the right to speak. The model adopted 
is based on the following elements: All local participants make up a group. At a given moment, only one 
participant of only one group speaks to the participants about the unit about the groups. At this moment, 
the token is the property of the member of this group. The other groups are on the token standby. Each 
group which is on token standby remains organized on the basis of a structure tree whose root is the 
member of the group who was the last holder of the token and who transmits it to another group. This 
member retains root of the tree structure until a request resulting from its group is taken into account 
and brings back the token inside the group, by this same root. Between the departure and the return of 
the token in the group, this member root continues to receive and to transmit the requests for its group 
towards the holder of the token, who is in another group. 3.1 Description and specification In this model, 
there are thus, two types of tree structures: -The local tree structure which corresponds to local operation 
within a group, which is based on the relation (father). -The tree structure, which binds the members 
of the holder group of the token with the members of another group on standby for the token, which is 
built by the relation (knows). A group is known to be the holder of the token if one of its members has 
the token. Communication (messages: of request, of change of root, of acknowledgment of receipt and the 
dispatch message joint committee is, thus, always and exclusively carried out between the node holder 
of the token and the node roots of the other groups. DEMANDE_SC Begin Asked. T Enqueue ((Self, Gi, nil), 
QUEUE_D) If (Father = nil) Then If Privilege = F Then Send (Req, QUEUE_D) to Know Endif Else Push (Self, 
Stack_Req) Send (Req, QUEUE_D) to Father Endif End When a site receives a request, its Reception_Request 
procedure tests its site in the tree structure and the possession of the token: -If the site is an unspecified 
node in the tree structure, the Reception_Request procedure stacks up its identity in the Stack_Req_received 
stack. Then it dispatches this request towards his/her father (its successor in the tree structure). 
-If the site is a root then two cases arise: This site has the token: the Reception_Request procedure 
puts on standby the received request in queue QUEUE_D. This site does not have the token: the Reception_Request 
procedure dispatches the request received towards its node which is the root of the other group. Reception_Request 
(Req_ Received, QUEUE_ Received) Begin If (Father . nil) then Push (Self, Stack_Req_ Received) Send (Req_ 
Received, QUEUE_ Received) to Father Else if (Privilege = F) then Send (Req_ Received, QUEUE_ Received) 
to Know Else Enqueue (QUEUE_ Received, QUEUE_D) Endif Endif End While releasing of the critical section, 
the site holder of the token calls upon the procedure LIBERATION_SC, which removes its request in QUEUE_D 
queue and determines the next site using the token. The site, which will receive the token, is called 
N_Holder_token. Consequently, two cases arise: -If the N_Holder_token and the current site of the token 
are not the same group, LIBERATION_SC procedure starts sending the token and QUEUE_D queue sends it towards 
the root of the other group. If this not, i.e. N_Holder_token and the holder of the current site of the 
token belong to the same group; then LIBERATION_SC procedure updates all the Stack_Reqk stacks of QUEUE_D 
queue. LIBERATION_SC Begin Asked. F Dequeue (Self, QUEUE_D) N_Holder_token . Head (QUEUE_D) If (Self 
and N_Holder_token . the same group Gi ) Then Send (Ok, Self, QUEUE_D) to know Privilege . F Otherwise 
UPD_QUEUE_D (N_Holder_token, QUEUE_D) End. When the token moves between the members of the same Gi group, 
the Reception_message(Ok) procedure updates it variable Know receiver of the token and the root of the 
other Gj group. The update of this variable knows the Gj group and directs routing of a request coming 
from this group towards the current root of the Gi group. Moreover, the variable knows shortens the disposed 
path of sending of the token or request between the two groups. Reception_message(Ok, Racine, QUEUE_received) 
Begin If (Self . Racine) then Know. Racine Endif Privilege . T Father . nil if (Self = head(QUEUE_received)) 
then Begin <Initiate entry into critical section> LIBERATION_SC End Otherwise UPD_QUEUE_D (head (QUEUE_D_reçue), 
QUEUE_D_reçue) Endif End When the token moves within a group, UPD_PILE_TD procedures call update the 
stacks of the applicant members of this group. Once that all the stacks are updated, the site holder 
of the token sends a message (UPD_KNOW), Receiving_token) to indicate the next root of its own group. 
When the site holder of the token receives an acknowledgment of delivery (Acq, Receiving_token) of the 
root of the other group, the UPD_PILE_TD procedure starts the send of the token towards a member (Receiving_token) 
of its group. UPD_PILE_TD (Head (QUEUE_D), QUEUE_D) Begin N_Holder_token . Head (QUEUE_D) Receiving_token 
. top (N_Holder_token, Stack_Req) For each request (Dk, Gi, Stack_Reqk) in the QUEUE_D If ((Dk, Gi, 
Stack_Reqk) and (N_Holder_token . the same group Gi) then If (top (Dk, Gi, Stack_Reqk) = Receiving_token) 
then Pop (Top (Dk, Gi, Stack_Reqk), Stack_Reqk) Else Push (Self, Gi, Stack_Reqk) Endif Endfor Send (UPD_CONNAIT, 
Receiving_token) to Knows Wait (Acq, Receiving_token) Send (Ok, Knows, QUEUE_D) to Receiving_token Privilege 
. F Father . Receiving_token Know. nil End. When the root of a group decides to send the token towards 
one of the members (Receiving_token) of its group, it must inform the root of the other group by sending 
a message (UPD_ KNOW, Receiving_token). This group then indicates the next receiver of the token. By 
receiving this message, the root of the group (not holder of the token) answers systematically by sending 
an acknowledgement of delivery (Acq, Receiving_token) to the transmitting root of the message (UPD_KNOW, 
Receiving_token). This message makes it possible for a non-holder group of the token to know the position 
of the token in the group, which holds it. Reception_message (UPD_CONNAIT, Receiving_token) Begin Send 
(Acq, Receiving_token) to Know If (Self . Receiving_token) then Know. Receiving_token End End 3.2 Example 
Let us suppose that there is a system of two groups G1 and G2 of which the roots A and G the G1 group 
holds the token. The System State is presented by the table 8 and figure 5: Group G1 Self A B C D E 
Father nil A A B B Asked T F F F F Privilege T F F F F Know G nil nil nil nil QUEUE_D (A, G1,{}) nil 
nil nil nil Group G2 Self G H I J K Father nil G G H H Asked F F F F F Privilege F F F F F Know A nil 
nil nil nil QUEUE_D nil nil nil nil nil 3.2.1 Site E is required to carry out its critical section Initially, 
it is site A which uses the token (Figure 5). Site E is required to carry out its critical section, and 
send its request (Req, (E, G1, {E}) with its father B once this the father receives the request, he stacks 
up its identity (bus B is not a root) in the stack of the request of E (Req., (E, G1, {B, E}) then it 
dispatches he towards its father A. When the request of E (Req., (E, G1, {B, E}) reaches the root (site 
A) holder of the token, it is put on standby in QUEUE_D queue. Table 9. State of system when site E asked 
Group G1 Self A B C D E Father nil A A B B Asked T F F F F Privilege T F F F T Know G nil nil nil nil 
QUEUE_D (A, G1,{}) (E, G1,{B,E}) nil nil nil nil Group G2 Self G H I J K Father nil G G H H Asked F F 
F F F Privilege F F F F F Know A nil nil nil nil QUEUE_D nil nil nil nil nil The sites J, C and G have 
enter their critical sections in right order, the state of the system is represented by the following 
table: Table 10. State of system when site E, J, C and G asked Group G1 Self A B C D E Father nil A 
A B B Asked T F T F F Privilege T F F F T Know G nil nil nil nil QUEUE_D (A, G1,{}), (E, G1,{B,E}), (J, 
G2,{}), (C, G1,{B,E}), (G, G2,{}) nil nil nil nil Group G2 Self G H I J K Father nil G G H H Asked T 
F F T F Privilege F F F F F Know A nil nil nil nil QUEUE_D nil nil nil nil nil Once that site A release 
its critical section, it sends the token and the queue decapitated towards the site E this is represents 
by figure 6: Group G1 Self A B C D E Father B A A B B Asked F F T F F Privilege F F F F T Know G nil 
nil nil G QUEUE_D nil nil nil nil (E, G1,{}), (J, G2,{H,J}), (C, G1,{C}), (G, G2,{}) Group G2 Self G 
H I J K Father nil G G H H Asked T F F T F Privilege F F F F F Know A nil nil nil nil QUEUE_D nil nil 
nil nil nil   4. INFORMATION PROOF The proof is the same as for only one group. The only difficulty 
is the communication between the groups. Lets us say for the moment that the link ensures this. A more 
precise approach is as follows. 4.1 Mutual exclusion As for all the token-based algorithms mutual exclusion 
is ensured by the fact the token is needed to obtain exclusion and only one site can do this because 
of the unicity of the token. 4.2 Liveness Every request is linked to a queue, and the queue is always 
transmitted to the site placed at head of this queue. The requests are served in FIFO order and, no request 
can be forgotten.  5. CONCLUSION This article presents an algorithm of mutual exclusion in the systems 
distributed. Mutual exclusion is checked because, at any moment, the token is used by only one site. 
In section 1 (the system is formed by only one group), a request for execution of the critical section 
is transmitted to the root and two cases arise: the request is put in the queue or it is returned and 
accompanied by the token towards the site, which formulated it. In section 2 the algorithm ensures mutual 
exclusion between two groups of sites. Each group remains represented by a tree and the communication 
is carried out by a link between the root of each group. The algorithm was validated, using classical 
examples. At the same time, was computed overage number of the messages. This was easy to obtain in the 
first algorithm (one group) that only depends on the structure of the initial tree. It was more difficult 
for tow groups. The final objective is to give a priority level to each group. We currently write this 
extension. 6. REFERENCE <RefA>[1] O.S.F. Carvalho and G. Roucairol. On mutual exclusion in computer networks. 
Comm. of the ACM, 26(2): 146-147, 1983. [2] Y.I. Chang, M. Singhal, and M.T. Liu. An improved O(log(n)) 
mutual exclusion algorithm for distributed systems. In Int'l Conf. on Parallel Processing, III295-302, 
1990. [3] A. Kumar. Hierarchical quorum consensus: A new algorithm for managing replicated data. IEEE 
Trans. on Computers, 40(9): 994-1004, 1991. [4] L. Lamport. Time, clocks, and the ordering of events 
in a distributed system. Communications of the ACM, 21(7): 558-564, 1978. [5] K. Li and P. Hudak. Memory 
coherence in shared virtual memory systems. ACM Trans. On Computer Systems, 7(4): 321-359, 1989. [6] 
M. Maekawa. An vn algorithm for mutual exclusion in decentralized systems. ACM Trans. On Computer Systems, 
3(2): 145-159, 1985. [7] M.L. Neilsen and M. Mizuno. A dag-based neilsen for distributed mutual exclusion. 
In 11th IEEE Inter national Conference on Distributed Computer Systems, pp. 354-360, Dallas USA, 1991 
[8] K. Raymond. A tree-based algorithm for distributed mutual exclusion. ACM Trans. On Computer Systems, 
7(1): 61-77, 1989. [9] R. H. Thomas. A majority consensus approach to concurrency control for multiple 
copy databases. ACM Transactions on Database Systems, 4(2): 180-209, 1979. [10]M. Naimi and M. Trehel, 
A distributed algorithm for mutual exclusion based on data structures and fault tolerance. In IEEE Conference 
on Computers and Communications, Phoenix USA, 36-39, 1987. [11]M. Naimi and M. Trehel, An improvement 
of the log(n) distributed algorithm for mutual exclusion. In Proc. IEEE Intl. Conf. on Distributed Computer 
Systems, 371-375, Berlin, Germany, 21-25 September 1987. [12]T.K. Woo and R. Newman-Wolfe. Huffman trees 
as a basis for a dynamic mutual exclusion. ICDCS92, IEEE Computer Society Press, June 9-12, 1992, 126­133, 
Yokohama, Japan. [13]G. Ricart and A.K. Agrawala. An optimal algorithm for mutual exclusion in computer 
networks. Comm. of the ACM, 24(1): 9-17, 1981. [14]Pierre Siron, Sécurité Informatique, Systèmes Opératoires 
Répartis et Algorithmes Répartis, rapport final 2/3530.00/DERI, octobre 1995. [15]Andrew S. Tannenbaum, 
Distributed Operating Systems, Prentice Hall, 520-574. </RefA> Michel TREHEL took a higher doctorate at Grenoble 
in 1972 on tree-structured files and their algebraic proprieties. He later worked on non-numeric sequential 
and parallel algorithms. He has been concerned by design and performances of distributed algorithms. 
He is currently working on cooperative applications Ahmed HOUSNI is a Ph.D. student at the University 
of Franche-Comté in the east of France and is currently working the computer science laboratory in the 
domain distributed algorithms. 
			
