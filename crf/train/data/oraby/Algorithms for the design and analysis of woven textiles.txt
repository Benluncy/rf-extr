
 ALGORITHMS FOR THE DESIGN AND ANALYSIS OF WOVEN TEXTILES J. A. Hoskins W. D. Hoskins Dept. of Clothing 
and Textiles Dept. of Computer Science University of Manitoba University of Manitoba Abstract The design 
and analysis of woven textile structures requires the precise manipulation of large amounts of numerical 
data, the majority of which is binary. As such, algorithms to perform these designs and analytical tests 
are ideally suited for machine implementation. The use of a microcomputer as a vehicle for the implementation 
of these a]gorithms greatly simplifies the user interface with such a system as well as increasing the 
general availability of the system. This paper will discuss some of the critical algorithms employed 
in the creation and analysis of woven textiles structures and will describe a novel microcomputer implementation 
of these algorithms. 1. Introduction Woven textile structures are produced by the interlacement of one 
set of strands, the lengthwise or warp (ends), with an orthogonal set of strands, the crosswise or weft 
(picks). Clearly, two types of intersection are possible: warp over weft and weft over warp. Traditionally, 
weavers have represented the structure formed from these intersections, diagrammatically as a matrix 
of black and white squares, where a black square represents a warp over weft crossing and a white square 
indicates a weft over warp crossing (Figure I). This representation, known as a point diagram, can commonly 
be comprised of up to 10 6 elements [I], although the order is more commonly 10 4 elements. FIGURE 1 
POINT DIAGRAM Permission to copy without fee all or part of this material is granted provided that the 
copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the 
title of the publication and its date appear, and notice is given that copying is by permission of the 
Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific 
permission. &#38;#169; 1983 ACM 0-89791-123-7/83/012/0153 $00.75 153 The binary nature of this date 
makes it ideally suited to computer processing. Since the information for each element of the matrix 
can, in fact be represented by a single bit, it is possible to store and process large arrays with relatively 
small amounts of storage. Thus, microcomputer implementations of woven textile design and analysis systems 
become not only practical but, with the increasing availability of inexpensive personal computers, highly 
desirable to the textile designer. This paper will discuss briefly the important functions required of 
such a textile system and outline in more detail some of the computational algorithms involved. Discussion 
will be addressed for illustration to a specific microcomputer implementation of these algorithms and 
appropriate examples and illustrations will be described. 2. Tex~tile Design Functions The functional 
requirements of a woven textile design system can be divided broadly into those of data manipulation, 
including data entry, display and storage, and those which are computational in nature. The conventional 
manner of designing a woven structure involves selecting an appropriate grid and filling in squares of 
this grid to create a "point diagram" representation of a binary interlacement array. A fundamental principle 
in the good design of an interactive computer system is that user action requirements be as familiar 
as possible, with adequate and appropriate prompting and feedback, and that the learning of response 
requirements be minimized [2]. Thus, the most satisfactory mode of design entry is the creation of a 
grid on which a cursor can be moved from cell to cell, using a four directional key pad, with an additional 
key being used as a toggle switch to fill in a blank cell or to erase a coloured cell. The correspondence 
between the Application Data Structure and the Design File should be one to one, and as the displayed 
design is updated, corresponding entries must be made in the design file. In the example implementation, 
an Apple If+ microcomputer with 48K of RAM was used. The display screen used ane high resolution graphics 
page and the Application Data File was created and stored in the region of memory (SK) corresponding 
to the second high resolution graphics page. This storage area was not used for program, variable or 
string storage and the program architecture was arranged so that when any module was used this region 
was not compromised. As such, the Application Data Structure was maintained in memory as global data 
to be accessed and freely modified by all program modules. As previously noted, the design data is binary 
and can be stored in individual bits in memory. Since the data storage area used corresponded to a bit 
map of the second page high resolution screen, a single element was stored by drawing a single unit dot 
at specified screen co-ordinates. Retrieval of data therefore required either accessing a single bit 
from this region of memory or rather more interestingly, by using a graphics command and the high resolution 
collision counter to detect a visual bit. This type of storage had the additional unique advantage that 
the actual data file could be visually examined by displaying the page two high resolution graphics screen. 
Having created a design, the usual editing features are required. The system should permit rows or columns 
of the display file to be deleted (with corresponding updates to the Application Data Structure file), 
rows or columns to be added to the Display File, or the displayed design to be transpossed about the 
diagonal. Having achieved a satisfactory design, there should be some method of permitting long-term 
storage. 3. Computational Algorithms The second major area of textile design functions is that of providing 
useful computational algorithms. Due to the large amounts of data which must be accurately processed, 
the advantages of machine algorithms are obvious. The interlacement matrix, as represented by the "point 
diagram", is actually the product of three matrices, the threading, the tie-up and the treadling or shed 
sequence matrices [3] which specify the pa~'ameters of the loom set-up. (Figure 2) These three additional 
matrices are also binary, with additional constraints being placed on the threading and treadling matrices, 
as follows. The threading matrix must have exactly one 1 per column and the treadling matrix must have 
exactly one I per row. 154 .-:::: .... : ........... :::::::, i ii iumuuilmiil 1:.'1.....1::1111:::1:...., 
...... .1 immm mm immlummmmulniimlll OWl ........., .-::::::::: ...... millime IIUIIIIINIINII am mmmmmml 
mmummnulmmml lmlm~mm uug~wi m m mmmm im m mi mR mmmmmmmmmmmm II limuDmiJ illli..... :l:lll)llU ..... 
 mmmmmm lll~l~iUui mJmmmm m mm lmmlmm mlmm mmmm m mmm mmm iN - -:: :: . -,:: - ::- u m lU m immi 
mmm immi mmm mmm mmmm m mmml m mmlm lmmm mm l mlm "'": ..... ..,..::':::'::,'::::: .1 1111":1. "111" 
.11 ........ mlml  m mmmmm m  UgH 1"1.', ..1.,"'. 1"1.:,..'.1" mumn um Iml mmm mm mum ........ ,.. 
....... m ~m mm mlm m AmiNO mm i mulmm  ImmMm am .... : maN :iml= u iN mmal  mmmm m mm -1-11--mmmm 
-1-.1---11 mmmi i ---1-1 U~llmma mmi OlD mlm llm mmm u: : :: .... ........... u: umIB lOll Im m iNn 
mmmm imm iim uml iN l ~ umlumuu m um ummimu mi mum mu m m  m m mmm muml immu uuimm miNI mimi mmmumm 
uum mmmmm mmmuuu  FIGURE 2 mum mini I in ill Ill i l :1::'1 1.11"" miu lU alum mw :.:i::))):: ...": 
: : ::': :...:i: mum aNn ui i:m. .... " aNnUm: : i:" :::.'.'. ..i ..... .1 l:::::...i.:::: mR m m 
muliili :::, 1:. ..:::: hi n nnnuunu mmwlmi ilimuiiii , ....... 1:11 mill mill ilium mialamUe ml mini 
m mmmmm mmmm mum m wmmmm mm u um mimiummmmmmmmi i mmmmmmm uu u mmm m a mmuu u  namaBle ilia am  
nlii 1:1111:::'.1.... .... I llilll Immuuli ilium IliUm mum ilium mu muliim lumu uuimullmium WiN uu um 
uuulmm mi immimiimuimmm m mmumummmmummii  THE INTERLACEMENT ARRAY AND ITS THREE FACTORS If the treadling 
matrix is denoted by A = {aj,kl, the tie-up by B = Ibr,k} and the threading by C : {Cr,jl, then the i,jth 
element of the corresponding interlacement array D --{di,j} is given by: di,j = U U(ai,kA br,k) ACr,j 
where the logical operators "and" and "or" replace the conventional matrix operations, multiplication 
and summation, respectively [4]. Although the preceding matrix equation completely and unambiguously 
specifies the relationship between the interlacement array and its three factors, this approach is not 
computationally very efficient. A more efficient and considerably faster process makes use of indirect 
addressing, as follows: di,j = br,k where r is the column index of the single 1 in the ith row of the 
treadling matrix A, and where k is the row index of the single i in the jth column of the threading matrix 
C. The ability to create, rapidly and accurately, a "point diagram" representation of an interlacement 
array for a given threading, treadling and tie-up is of invaluable assistance to a textile designer. 
The reverse process, that of factoring an interlacement array into its three matrix factors is also extremely 
useful. Once the interlacement sequences of a textile specimen of unknown manufacture have been represented 
as an interlacement array, the array can be analyzed to produce three essentially unique matrices. The 
threading matrix is unique up to row permutations, the treadling matrix is unique up to column permutations, 
and the tie-up matrix is unique up to row and column permutations. A straightforward computer implementation 
of the hand algorithm for fabric analysis involves the following steps [5]: To obtain the threading I. 
Put a 1 in CI, I and 0 in Ck,1 k = 2,3,...,s, where s is the maximum number of rows of C (corresponding 
to the maximum number of available shafts). 2. Comparethe first column of D to all other columns of D. 
 3. For every column which does not match the first one in every corresponding position, put a 0 in the 
corresponding column of the first row of C. 4. For every column which does match the first one exactly, 
put a 1 in the corresponding position of the first row of C and 0 in the rest of that column of C, as 
was done with the first column. 5. Choosethe first column of D which does not already have a 1 in its 
corresponding column of C, put a 1 in this column of C, in row 2, and 0 in the rest of the column. 6. 
Comparethis column with the remaining unused columns, assigning 1 and 0 to the C matrix as before. 7. 
Repeat this process until all columns of D have a 1 in some row of the corresponding column of C.  To 
obtain the treadling I. Repeat the preceding 7 steps for the rows of D, with the corresponding entries 
being made in the matrix A. To obtain the tie-up 1. For each unique row of D, determine which elements 
of this row are equal to 1. For each of these positions, scan the corresponding column of C to find the 
row index of the single 1 element. Place a 1 in this row of B, in the column associated with the single 
1 in the row of A corresponding with this row of D. The order of the number of comparisons for only the 
first pass of the threading is n(m-l) where n is the number of rows of D and m is the number of columns. 
This process becomes very tedious and time-consuming when performed manually, as well as being extremely 
susceptible to error. The computer implementation of this algorithm works q~ite satisfactorily, although 
a faster algorithm making use of the bucket technique of sorting has recently been developed [6]. Due 
to the nature of the design data storage and access in the microcomputer implementation already described, 
the design product and factorization processes could be easily monitored. The design, threading, treadling 
and tie-up matrices, it may be recalled, were stored as a bit map of the second high resolution screen 
and were accessed by a drawing command. The data access process therefore manifested itself as a visible 
dot of light travelling through the relevant matrix or matrices on the screen. This feature allows for 
accurate timing, not only of entire processes, but also of sub-sets of these processes. Another important 
aspect of woven textile design is obviously a concern for the structural integrity of the final fabric. 
Thus, another computational algorithm is required to determine whether a given interlacement array is 
irreducible and represents a single layered structure, or is reducible and represents a structure which 
will separate into two or more fabric planes [7]. This mathematically simple process is defined by the 
following steps [8,9]: I. For a given binary interlacement array (Figure 3) D={di, j i=1,2 ..... n; j=l,2 
..... m} compute the row sums (ri i=1,2, ..... ,n) and the column sums (cj j=1,2,. ..... m). 2. Sort 
the row sums into ascending order and the column sums into descending order. 3. Let j=l. 4. Choose 
the largest value of i such that ri<j. 5. Calculate El, j = rl+....+ri+(n-cl)+....+(n-cj)-(i x j). 
6. If Ei, j is not equal to 0, calculate Ei, j for j = j+l. 7. Continue until Ei, j = 0 or until j=m. 
 8. When Ei, j = 0,  the weft or crosswise yarns corresponding to r I .... r i and the lengthwise, or 
warp yarns corresponding to c 1 .... cj form one reducible layer which can be separated from the remaining 
fabric. 9. If Ei, j is not equal to 0 for all values of j, j=l,2,...,m then the interlacement array D 
represents a single layer irreducible fabric structure. llmlln  Uillill I IUIII n  []  l anal [] 
lllillinlll n mmm []   H mm  immmmmm immmmmm [] mmmmmim  mmimmmm m m mmmmmmm m.m mmmmmmm m 
m immimmm  mmm  immmimm m mmmmmm i mmmmmmm [] mmmmm m immm  mmmmmimmmmi  mmm m mmmmim i mmmmmmm 
 mmmmm m mmmimim  mmm  mmmmmmm i nmmmmmm   mmmmmim [] m mmimmmm,i mmmmmmm i mm  immmmmm mmimmmm 
 mmmm  mmmmmmmmmmm i mmm []    [] FIGURE 3 BINARY INTERLACEMENT ARRAY Clearly a major component 
of this algorithm is the sorting of the integer valued row and column sums, and tlle evaluation of the 
table of values Ei, j. Point diagrams give a very good representation of the surface fabric structure 
produced by a given set of interlacements. They do not however provide a great deal of insight into the 
relative planar positions of the constituent strands. An alternate form of display, namely a cross-sectional 
diagram is therefore required [i0]. The computerization of this type of display requires an algorithm 
which maps the interlacement data onto an appropriate set of graphic output primitives. The particular 
implementation described produces cross-sectional diagrams by first computing an index value corresponding 
to specified interlacement sequences and using this value to index the appropriate cross-sectional tile 
in a shape table. Four tiles are required to represent single layer fabrics (Figure 4) and these can 
be accessed by computing an index value i, where i = 2dj + dj+ 1 j=l,2, ..... ,m-I FIGURE 4 SINGLE LAYER 
FABRIC TILES These tiles are intended to overlap to the extent that the first end (or ends, in the case 
of a multi-layer representational tile) overlap the last end(s) of the preceding ones. Although it is 
interesting to see the cross-sectional representation of a single layer fabric, it is really in the case 
of the multi-layered fabrics that this type of representation becomes useful. For example, even if it 
is known that a given interlacement array (Figure 5) corresponds to a two layer fabric, it is difficult 
to visualize the planar relationship. An index i can be computed, where i -- 3(dj+dj+ I) + dj+ 2 + dj+ 
3 j=1,3,5, ..... ,n-3 and used to access an ordered set of appropriate graphic primitives (Figure 6). 
[] mmmmm  mmmmm mmmmm mmm mmmmm mmmm mmmmmmm mmmmm [] mm mmmmm mmmmm mmm mmmmm  mmmmm mmmmm 
 mmmmm mm mmmmm mmmmm mmm mmmm mmmmmmm mmmmm  [] mmmmm mmm mmmmm mmmmm  mmmmm mm mmmmm mmmmm 
 mmm FIGURE 5 REDUCIBLE ARRAY l I| | m ..  m II ~~E  II ,' ./, , . . FIGURE 6 DOUBLE LAYER FABRIC 
TILES 158 The problem remaining is that of determining in which cloth layer each of the intersections 
should appear. If a particular interlacement sequence allows no ambiguity as to which, of a pair of intersections, 
will lie in the top layer and which will lie in the bottom layer, the warp ends occurring in these intersections 
are so labelled. One symbol being used to denote the first intersection in a pair and a different symbol 
being used to denote the second intersection (Figure 7). m x x m x x ° + . . + + . . + x   x x 
w-~ + ~'m%. mJ~ ~. ~ "mm~.m m~ ,r+ +  + + + +  +',m x  z x x x m x  FIGURE ? CROSS-SECTIONAL DIAGRAM 
DOUBLE LAYER FABRIC  These principles and this technique have in fact been applied to structures consisting 
of up to four layers, as well as two layered structures with 2 to 1 and 3 to 1 proportions of yarns in 
each of the two layers. 4. Conclusions As has been illustrated, complex textile structures, corresponding 
to large amounts of numeric data, can be rapidly and accurately displayed, manipulated and analyzed with 
the aid of an appropriate microcomputer textile design system. REFERENCES <RefA>[1] Z.J. Grosicki, Watson's 
Advanced Textile Desi~'n: Compound Woven Structures, (4th ed.), Newnes-Butterworth, London, 1977. [2] 
J.D. Foley and A. Van Dam, Fundamentals of Interactive Computer Graphics, Addison-Wesley Publishing Company, 
Philippines, 1982. [3] Janice R. Lourie, Textile Graphics/Computer Aided, Fairchild Publications Inc., 
New York, 1973. [4] Janet A. Hoskins and W. D. Hoskins, The Solution to Certain Matrix Equations Arisin~ 
from the Structural Analysis of Woven Textiles, Ars Combinatoria II, (1981), pp. 51-59. [5] Janet A. 
Hoskins, Computerized Fabric Analysis, Shuttle, Spindle and Dyepot 14, (1982). [6] J. A. Hoskins and 
W. D. Hoskins, A Faster Algorithm for Factoring Binary Matrices, to appear. [7] J.A. Hoskins, Factoring 
Binary Matrices: A Weaver's Approach, Comb. Math. IX, Proc. Ninth Aust. Conf. ed. Elizabeth J. BiUington, 
Sheila Oates-WiUiams, Anne Penfold-Street, Lecture Notes in Math. 952(1982) pp 300-326, (Springer-Verlag, 
Berlin, Heidelberg, New York). [8] C.L.J. Clapham, When a Fabric Hangs Together, Bull. London Math. Soc. 
12 (1980), pp 161-164. [9] Janet A. Hoskins, Computerized Analysis of the Drawdown, Shuttle, Spindle 
and Dyepot 13, (1981), pp 76-77. [lO] J.A. Hoskins, Binary Interlacement Arrays and Structural Cross-Sections, 
to appear</RefA>. 160 
			
