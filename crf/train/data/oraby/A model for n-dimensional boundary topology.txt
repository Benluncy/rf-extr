
 A Model for n-Dimensional Boundary Topology Henning Osterg&#38;d Hansen and Niels J@rgen Christensen 
Department of Graphical Communication Technical University of Denmark ABSTRACT The principle of representing 
a solid object by the structure of its boundary elements is a special case of describing an n-dimen­sional 
object by its (n-1)-dimensional bounding surface. By analogy to 2-and 3-dimensional objects, a model 
representation for the topology of n-dimensional boundary representation is defined, A characteristic 
property of the proposed representation is, that any boundary element separating two higher-dimensional 
objects is split in two topological parts, one belonging to each side in space. The result is a hierarchical 
split-element representation that is well suited for modeling applications. An interesting feature is 
that the orientability of a topologic structure can easily be determined. An implementation of the data 
structure is defined, and its applicability to high-level modeling operations is demonstrated. 1 INTRODUCTION 
The majority of current solid modeling systems use a boundary representation (BR) of solid objectslg, 
either as the one and only representational scheme or in combination with other data structures, such 
as constructive solid geometry (CSG), A boundary model of a solid object is a description of the faces, 
edges and vertices, that make up its bounding surface, together with adjacency information defining the 
boundary topology of the modells. However, BR can be applied recursively not only to solids, surfaces, 
and edges, but to higher dimensional objects as well, and a generalization of the methods for BR of 3-D 
objects can extend the capability of geometric modeling systems beyond solid modeling to accommodate 
the needs of more advanced applications. A general purpose representation must allow efficient modeling 
operations, as well as it must contain sufficient information for model analysis. This paper presents 
a data structure, that has been developed for general purpose boundary representation in n dimensions. 
he data structure allows multi-dimensional modeling, mixing objects of different dimensions. Objects 
can be incomplete, with or without boundary, orientable or not orientable. Like BR data structures for 
3-dimensional solids, this representation may be Permission [o copy withou[ fee all or part nf this material 
is granted provided that the copies are not made or distributed for direct cnmmercia] advantage,the ACM 
copyright notice and !he titIe of the publication anditsdateappear,andnoticeISgiventha[ copying is hy 
permission of (he Aswciatinn for Computing Machinery Tn copy otherwiw, nr to republish. requwes a fee 
andk spec!tic permission. appIied in polyhedral as well as curved-surface environrnentszz, if only the 
geometry can be recursively defined in a dimension­independent way (eg. B-spl ines) and the necessa~ 
geometric evaluations can be performed for objects of any dimension. The geometric domain of the BR is 
not a subject of this paper. Throughout the paper, the dimension of an object means its dimensional type, 
not the dimension of the space it is embedded in. So whether embedded in 2-or 3-dimensional space, a 
vertex is a O-dimensional object, an edge is 1-dimensional, a surface is 2-dimensional and so forth. 
Also, the topology of a boundary model refers to the adjacency relations of the elements of the model, 
not to point set topology in general. 1.1 Previous work Most work on higher-dimensional representations 
has been in the context of specific algorithms, in particular Boolean set operations. Putnam and Subrahmanyam 
17 describe Bmlearr set operations without an explicit representation of adjacency information, and Bieri 
and Nefi define set operations for Iocall y adjoined pyramids . Fenucci and Paoluzzia describe extmsion 
of n-dimensional polyhedra, using a winged represwttation of simplicial complexes developed by Cattani 
and Paoluzzi3. Others take a more general approach and define representations of the topology of subdivided 
n-manifolds, separating the representation of geometry and connectivity. Brisson2 defines the cell-tuple 
structure for subdivided n­manifolds, and Lienhardtl 2 defines the n-G-map and the n-map , based on combinatorial 
maps. l%ese ideas are further investigated by Dufourd6, and in another paper by Lienhardtl 3. llte data 
structures are generalizations of the quad-edge repre­sentation for subdivisions of 2-manifolds, defined 
by Guibm and Stolfig, and the facet-edge representation of 3-manifolds, defined by Dobkin and Laszlos. 
Rossignac and O Connor20 use u selective cell complex model to represent objects of mixed dimensions 
with internal structures and incomplete boundaries. An alternative approach is presented by Takala21, 
using streams of polygons with no connectivity information at all. 2 BOUNDARY TOPOLOGY The faces, edges 
and vertices of a 3-dimensional boundary representation are referred to as the topological elements of 
the model. In an n-dimensional boundary representation, the repre­sentation of topological elements must 
be generalized, and an n-dimensional type of topological element must be defined. We will describe some 
different approaches to this problem, looking first at 3-D models. 2nd ACM Solid Modclltrg 93-5 /9 VMontreal, 
Canada  2.1 Graph models Data structures for 3-dirnensional boundary representation are often defined 
in terms of graph modelsl ,22.A graph consists of a numk-r of elements called nodes, and a number of 
arcs, each of which defines artunordered pair of nodes. If each node stands for a vertex element and 
an arc stands for an edge, a partition of the surface can be defined by a graph, embedded on the bounding 
surface of a solid. However, a graph model in which a node stands for a face and an arc stands for an 
edge, is just as appropriate. The paper by Guibas and Stolfi investigates the duality of such graph modelsg. 
Marty data structures exist for 3-dimensional modeling. Most common are edge-baaedrepresentations,in 
which all adjacency information is m.lated to the edges of the modells~~. However, such models are restricted 
to 3-dimensional object representation. They cannot represent faces that are not part of the boundary 
of a solid, and they cannot represent objects of higher dimensions. 2.2 Complex models The properties 
of n-dimensional boundary representations are better described in terms of cellular complexe#)l c~~. 
A presentation of the finite topology of cellular complexes in the context of image processing, but also 
applicable to geometric modeling, can be found in the paper by Kovalevskyl 1. A cellular complex is a 
set of elements called cells, provided with a bounding relation between ordered pairs of cells. Each 
cell has a non-negative integer dimension. If the cells are only symbolic entities, it is called an abstract 
cellular complex, or a chain compled. When applied to geomernc modeling, cells represent topological 
elements of different types: 04mensional vertices, l-dimensional edges, 2-dmensional faces and 3-dimensional 
solids. The dimension of a cell defines the type of the element, and the bounding relation defines, that 
one element is part of another elements boundary. A chain complex model is easily generalized to describe 
n-dimensional BRs, simply by allowing elements of higher dimensions. 2.3 Subdivided manifolds The boundary 
of a solid object is a 2-dimensional surface, that is cktaed, so the interior of the solid is separated 
from the outside, and oriented so you can tell which side is inside and which side is outside. The bounding 
surface of a solid is called a closed (or compact), orientable 2-manifold14. A 2-martifold is a topological 
space where every point has a neighborhood topologically equivalent to an open 2-dimensional diskls. 
For boundary representation, the boundary of a solid is subdivided into a closed set of 2-manifold patches. 
A finite set of 2-mrmifolds is said to be close~ if the boundaries of its members can be pairwise identified, 
so that when the patches are sewed together along all identified boundary elements, they define a closed 
surface. Non-manifold conditions occur, if the surface of a solid touches itself in a point or along 
a curve. Such non-manifold conditions will not be considered here. Looking at higher-dimensional objects, 
an (n+l)dirnensional hyper-solid is surrounded by an n-dimensional hyper-surface , a closed orientable 
n-manifold.Theseare subdivided into a closed set of hyper-patches . me atmcture that results from repeated 
subdivision of objects into their lower-dimensional boundary elements, can be represented by a chain 
complex. As for 2-manifokia, a small neighborhood of any point on a closed n-manifold is topologicrdly 
equivalent to artn-dimensional disc. A finite set of n-manifolds is said to be closed, if the boundaries 
of its members can be pairwise identified, so that when the hyper-patches are sewed together along alI 
identified boundary elements, they define a closed hyper-surface. In the classical terms of cellular 
complex topology, a hyper­solid is an (n+ 1)-cell, and a hyper-surface is the set of its bounding n-cells. 
Hyper-patches are n-dimensional hyper-solids, and the process of sewing together patches may also be 
referred to as gluing together solids. We shall use the term patch in the context of botm&#38;ry elements, 
and solid when speaking of individual objects. A surface or a boundary refers to a set of patches. The 
hyper- prefix will be omitted unless we want to explicitly state the higher dimensionality of the objects. 
 2.4 Manifolds with boundary A solid object is a 3-dimensional manifold with boundary. 1[ may sometimes 
be appropriate to allow the representation of incomplete objects, in which also lower-dimensional elements 
have a boundary, that is, objects that are not closed. A point on the boundary of an n-manifold has a 
neighborhood equivalent to an open n-dimensional half-disk. 2.5 Onentability of manifolds An n-manifold 
is orientable, if its 2 opposite sides can be distinguished in (n+ 1)-dimensional space. Not all manifolds, 
whether open or closed, are orientable. Two famous examples are the Mobius strip and the Klein bottle. 
Orientability of a sub­ divided surface can be determined using the Mobius mlels. lle otientability of 
cell complex models is discussed by Rossignac and O Connor20, defining left or right neighborhoods for 
boundary cells, and full neighborhood for interior cells.  2.6 Properties of an n-manifold BR The boundary 
representation of a closed set of n-manifolds has the following properties o. A O-manifold is a point, 
and it has no boundary. 1. All boundary elements of an n-manifold are (n-1)-manifold elements. 2. All 
(n-1)-dimensional elements belong to exactly two n-manifold elements (or twice to the same element). 
 3. Manifold elements may not intersect each other except at common boundary elements.  llese properties 
have been generalized from the constraints for planar 2-manifolds, as they are described by Martti Mantyla14. 
For n=2, they define the topology of a subdivided 2-manifold. For higher dimensions, a similar result 
is not Imownls. We presume the existence of an associated n-manifold for a representation of any dimension. 
The manifold properties do not guarantee orientability, and therefore they are not sufficient to define 
the boundary topology of an (n+ 1)-dmensional solid. his important to notice at this point, that property 
2 refers ordy to the (n-1)-dimensional boundary elements on one n-dimensional surface (see lemma 1 in 
Bnsson2). It means, that when used recursively to describe manifold elements in terms of lower-dimensional 
manifolds, property 2 holds within each closed set of n-manifolds. This can be illustrated by an example: 
A cube is a 3-dimensioned solid, bounded by a closed set of 2-manifolds (the faces). For n=2 property 
1 says, that all boundary elements of each 2-manifold (face) is a 1-manifold (edge), and property 2 says, 
that every l-manifold (edge) belongs to two ab . luclclclcl . lclclnclcl  A MAA A 111111111111 111111111111111111111 
 AAAAAAAAAAAAAAAAAAAAAAAA .OO**O*eO*****eOOe* mmO********O*ee* OmOmeOO**Oem* e . ...... Figure 1. (a) 
Incidence graph showing the bounding rela!ions of the shared-element topology of a cube. Topological 
elements are represented only once, butused many times; (b) Thehunda~tree giv,es a diagrammatic ~,ien,of 
thesplit-elemetl t!opologyofa cube. Identical topological elements are represented many times, but each 
instance is used only once. 2-manifolds (faces). This is no surprice, but let us look at the representation 
of the faces of the cube. Afaceof thecube is bounded byaclosed set of l-manifolds (the edges). For n=l 
propetty 1 now says, that all boundary elements of each 1-manifold (edge) is a O-manifold (vertex), and 
propeny 2 says, that every O-manifold (vertex) belongs to exactly two 1-martifolds (edges) within a closed 
set of 1-manifolds. Each vertex on a cube of course belongs to three edges, but a vertex belongs to only 
two edges within one face. 3 SPLIT-ELEMENT REPRESENTATION The hierarchical structure of a boundary model 
can be described by an incidence graph7. [f every element is split into a component for each element 
it bounds, the result is a tree graph, which we shall call the boundary tree. One topological element 
will be represented by a number of nodes in the tree, one for each boundary it belongs to (see figure 
I). The boundary tree is often used as an abstract model to describe the principle of boundary representation, 
but most boundary representations do not actually represent each node of the boundary tree as one element 
of the data structure. Instead, many nodes correspond to one and the same element in the boundary representation. 
We now propose a radically different approach, that results from representing every node in the boundary 
tree as an element of the data structure. While this yields more elements, the element telations become 
simpler, and can therefore be more efficiently represented in the data structure. One topological element 
is split up into a number of elements in the data structure, and we therefore call these elements split-elements. 
We shall refer to the usual set of topological elements as shared-elements, because they are shared between 
more than one boundary (see figures 1 and 2). ISIa split-element boundary representation, every element 
is a unique element in the boundary tree and belongs to different parts of an object, even if they are 
geometrically identical. Therefore, geometric information should not be stored with the topological elements 
of a split-element representation, but in separate data structures. In this paper, we are only concerned 
with the topological model. The split-elements of a 3-dimensional solid model are defined by splitting 
every edge into two half-edges, each belonging to one of the two adjacent faces, and every vertex into 
a number of split­vertices, each belonging to different half-edges. h is a gen­eralization of the use 
of half-edge elements, that has already found use in edge-based data str-octuresls~zz, and may also be 
thought of as the explicit representation of element uses only23. In a split­element model. these are 
the basic elements of the data structure. 3.1 An n-manifold model In the boundary tree, the set of child 
nodes of any particular node represents a closed set of manifold elements. and the boundary tree therefore 
provides a good model for n-dimensional BR of manifold geometry. The bounding relation is represented 
by parent-child relations, but because the topological elements have been split up, the boundary tree 
does not describe the adjacency of neighbor elements, whose boundaries share common elements. All sets 
of identical split-elements could of course be linked together in lists representing the shared-elements 
of the model, but that is not necessary. From property 2 above, we know that on an n-manifold surhce, 
two adjacent elements of the same type are separated by exactly two boundary elements, one from each 
of the boundaries of the two elements. By defining the opposing relation between every such pair of coincident 
elements, adjacency information is included in the model, The ncxles in the boundary tree that represent 
opposing elements alwisys have the same grand-parent node, and thus are cousin ncdes themselves. llte 
set of split-elements, together with the dimension finction, the (transitive) bounding relation, and 
the (bijective) opposing relation, define the split-element representation. Incomplete manifold objects 
can be represented by a subset of elements with the relations retained (sub-manifold representation), 
Objects may be orientable or non-orientable. ab Figure2. (a) Exploded view of shared-elements showing 
the bounding faces of a cube. Boundary elements are shared between more than one object; (b) Exploded 
view of split-e!ements showing the bounding faces of a cube. Boundary elements are spiit up in a number 
of instances, each belonging to only one object, which can thus be said to containitsownbounaizry. 3.2 
Orientable topology Split-element representation supports orientability analysis, if vertex elements 
are designated to have one of two possible orientations. Two n-manifold elements can then be aaid to 
have opposite orientations if and only if they are equivalent, except that all pairs of corresponding 
vertices have opposite orientationa(see figure 3). For convenience, we shall use the terms positive and 
negative orientation to designate the two possible st?:es of orientation. A geometric interpretation 
of oriented split-element topology could be, that the two possible orientations of a vertex designate 
the starting point and the end point of an edge. This in turn defines the direction of the edgea, and 
the orientation of the faces from the rotational direction of their boundary edges. This interpretation 
is in accordance with the usual definitions of g~metric orientation in 3-D spacels~~. However, the topological 
orientation as defined above is very simple, and yet it is applicable to objects of all dimensions. Split-element 
representation can be restricted to orientable objects based CMvertex orientations. An orierttable object 
is one, in which all vertex elements can be assigned positive or negative orientations, so that all pairs 
of opposing elements of any dimension have opposite orientations. This follows from generrd­ization of 
the Mobius rule for orientabilityls.  4 THE HYPER BOUNDARY REPRESENTATION We now define a recursive 
n-dimensional BR data structure, as it has been implemented in what we call the hyper boundary mpreaentation. 
I?te data structure represents the topology of n-dimensional objects, but it includes no geometric information. 
The data structure is defined by the format of its elements. An element contains 3 classes of information: 
a natural number, that represents the dimensional type of the element a number of topological links that 
points to other elements in the data strtrctuw, and a geometric link, that may link the element to a 
geometric description of the object represented elsewhere. Additionally, the orientation of vertex elements 
can be represented as a Boolean value. 4.1 The adjacency relationships The are4 topological links in 
the proposed data structure. They define the n-dimensional adjacency relationships of the elements in 
the hyper data structure. The four links are: HYPER The hyper-element of an element of dimension n is 
the element of dimension (n+ 1), to the boundary of which the element belongs. BOUND fhe bound-element 
of an element of dimension n is one of the elements of dimension (n-1) on the boundary of the element. 
NEXT The next-element of an element of dimension n is another element of dimension n, that belongs to 
the boundary of the same hyper-element. The next-links link all elements on the boundary of an object 
into a cyclic linked list, the next­loopof thatboundary. ANTI Ilte anti-element of an element is the 
other half of the pair of elements, that comects two adjacent parts of a manifold together. The anti-links 
always link 2 elements to one another, defining an anti-pairof elements. The two anti-elements of an 
anti-pair are geometrically identical, but may have different hyper-elements, as long as those hyper­elements 
are in the same next-loop. The data structure is a representation of the n-manifold model discribed in 
section 3, and it has two parts, which represent the bounding relation and the opposing relation, respectively. 
The bounding relation is represented by the HYPER, BOUND and NEXT links, which define the parent, first-child 
and next-sibling representation of the boundary tree. l he opposing relation is directly represented 
by the ANTI links. Manifolds with boundary can be represented by allowing the ANTI links to have nil-values. 
BOUND and NEXT are non-deterministic, because the next-loop is not an ordered list of elements, and the 
bound-element may be any element of the boundary. In an oriented model, the two elements of an anti-pair 
must Figure 3. The bounokvy of a cube is an orien!able, closed 2-man fold. Here, the orientation of 
the split-element model is illustrated by black and white coloured vertices. have opposite orientations. 
Because a piece of line has two end points, edge elements always have an even number of bounding vertex 
elements. If edges were on[y allowed to have exactly two end points, orientation could be represented 
simply by defining, that the BOUND link of an edge points to the vertex with positive orientation. However, 
the data structure loses in generality by this restriction, and some mcdeling algorithms get more complicated, 
if they must handle edges as a special case. 4.2 Properties of the data structure fhe representational 
domain of the &#38;ta structure includes only objects with an n-manifold boundary. If non-manifold objects 
must be modeled, they can only be described as psetrdomanifoldsl~.By allowing ANTI links to contain nil­pointers, 
n-manifolds with boundary can be represented. This is is very convenient for the representation of incomplete 
objects, that often arise temporarily under modeling operations. Whether a surface is closed or not cart 
easily be detected by looking for nil­pointers in the ANTIlinks. Because a set of boundary elements is 
linked into a next-loop by their NEXT links, it is possible to assemble the patches of a surface before 
defining the object it bounds. There are no restrictions on the genus or number of connectivity components 
of an object, other than those imposed by the geometric mpresentstion or by the algorithms used with 
the data structure. There is no need to represent objects equivalent to the shell and loop structures 
of most 3-dimensional modelers, because connectivity components can be traced by following the ANT1-links 
of the bormdarv elements. Because the boundine and the opposing relations are ~xplicitly represented 
by separate~yps of topological links, hierarchical as well as horizontal adjacency analysis is well supported. 
Because the boundary tree is directly represented, with nodes representing split-elements, traversal 
of the model is simple. The split-element mcdel has the advantage, that any split-element is contained 
in only one boundary, and its owner object can always be found as its parent node. This means, that algorithms 
need not remember in which context they access an element. A similar advantage is obtained in some 3-dimensional 
boundary repre­sentations, that explicitly represent element uses23. The data structure supports top-down 
traversal using BOUND and NEXT links to go from an enclosed object to its boundary elements, and return 
using the s-IYPER link. Horizontal traversal between neighbour objects, separated by a common boundary, 
is suppomxt by the ANTI links of the boundstry elements, that need be crossed. For example, the edges 
around a face can lx traversed in order by following the ANTI and NEXT links of their bounding vertices. 
Unordered traversal of all the elements of a surface, whether connected or not, is done by following 
the NEXT links. Similarly, higher-dimensional surfaces can either be traversed in random order, following 
NEXT links, or locally from one element to its neighbor elements by following BOUND-ANTI-HYPER link sequences. 
Elements can be tagged, to avoid visiting them repeatedly. llte HYPER representation supports an object 
oriented style of programming. Because of the tree structure of the split-elements, lower dimensional 
objects can be thought of as recursively encapsulated within their higher dimensional hyper-elements. 
The only external relationships of an n-dimensional objeet, that relate elements within the object tree 
to elements outside the mee, are the HYPER, NEXT and ANTI links of the object element itself (the root 
of the object tree), and the ANTI links of its (n-l )-dimensional boundary elements. Local topological 
changes to a model therefore only affect two levels of element representations, and high-dimensional 
objects can be handled as selfcontained structures. This makes many modeling algorithms easier to implement. 
The cost of using a split-element mcdel, is that there is no easy way to obtain the set of all split-elements 
associated with a single topological element, for example a vertex. There are two alternative methods, 
both of which involves search. Either the complete boundary tree can be searched top-down. or starting 
in one element, the others can be found by sequences of HYPER, ANTI and BOUND links. This latter method 
resembles traversing orbits in the cell-tuple structure.  4.3 Space and time complexity The data structure 
can be implemented as an array of fixed-size elements, since each element of any dimension contains the 
same number of elements: 1 Boolean-valued orientation 1 integer dimension 4 adjacency pointers 1 pointer 
to external geometric information The number of elements, and their size, determines the space complexity 
of the data structure. Apart from the cost of memory, the size of the representation also affects the 
time needed to read and write element data. The number of elements can grow very large for high-dimensional 
objects. For example, a 3-cube has 79 elements, a 4-cube 633, and a S-cube 6331 elements. Presuming that 
any non-vertex element has two or more boundary elements, more than half of the elements in an object 
will be vertex elements. A split-element representation of an n-dimensional cube contains n!x2n vertex 
elements. Ile number of shared-elements in an n-cube is 3n, of which only 2m are vertex elements. This 
is a dramatic difference. The complexity of the operations outlined in the following sections depends 
on the number of elements. This is unavoidable, but it must be remembered, that many of these elements 
have identical geometry, which can be shared and therefore need only be treated once in geometric operations. 
llre performance of the data structure depends not only on the number of elements needed to represent 
an object, and their size, but also on the applicability of the adjacency information, stored with each 
element. However, n-dimensional geometric modeling is still a theoretic-experimental discipline, and 
there is no general foundation for evaluation of the performance of different models. 4.4 Comparison 
with other models The split-element representation has much in common with the cell-tuple stmcture, defined 
by Brissort2, and the n-G-map representation, defined by Lienhardtl 2. Every path from the root object 
to a vertex in either the incidence graph or the boundary tree corresponds to a cell-mple in the Cell-tuple 
structutw. Therefore, there is a 1:1 correspondence between cell-heples and vertices in the split-element 
structure. For Id, the switchk function is equivalent to the opposing relation of the split-element that 
comesponds to a (k-l)-cell in the cell-tuple. The circular ordering described by Brisson can be obtained 
in the split-element representation by following sequences of BOUND-AN IT-HYPER-ANTI-BOUND-NEXT* liks. 
l%e * means, that a number of NEXT links must be followed, until an element is found that matches the 
same shared-element, as the element to begin with. Because cells are shared in the cell-tuple structure, 
it does not suffer from this problem. llte cell-tuple structure and the split-element representation 
are theoretically very similar, and it would be interesting to define oriented cell-tuples by assigning 
a Boolean value representing orientation to each cell-tuple. Each dart in art n-G-map also corresponds 
to a split-element vertex, but comectivity information is stored at the vertex level, in the form of 
ties between darts. This means, that the representation of connectivity information is very complete, 
and does not suffer from problems when trying to identify objects, that correspond to the same shared-elements. 
The drawback of this model is, that higher-dimensional elements are not explicitly represented. I%e number 
of vertex elements in the split-element topology equals precisely the number of cell-tuples in the cell-tuple 
structure, and the number of darta in an n-G-map. The cell-tuple structure is not based on fixed-size 
elements (unless the dimension is fixed), because an n-dimensional cell-tuple contains n+ 1 elements. 
The same is true for an n-G-map representation, since the number of ties is also n+ 1. However, hese 
differences are far outweighed by the growth of the number of elements, and the space complexity is practically 
the same for all of these representations. The number of basic elements of either model, whether defined 
as split-elements, cell-tuples, or darts, seems to reflect the complexity of the problem, and the choice 
of model must be based on the needs for access to different types of infor­mation, or for performing 
operations that modify the model. T?te main advantage of the split-element representation compared with 
these data structures is, that topological elements and their adjacency relationships are explicitly 
represented. The fixed format of the elements is also more suitable for mixed­dimensional representation. 
 5 BASIC ALGORITHMS This section presents two algorithms, that form part of many modeling operations, 
when using the hyper representation. lle fimt algorithm is used to check whether an object is orientable, 
and if so, orientates the vertex elements accordingly. The second algorithm tests whether two objects 
are topologically equivalent, including orientations. llte algoritms are written in a Pascal-like pseudo 
language. lle scopes for if-then and for-do structures are defined by line indentation. llre symbol <-is 
the assignment operator. An object is represented by the root element of its boundary tree. 5.1 Onentability 
Tlte algorithm expects the existence of an object, that has been defined without respect to orientability, 
so the vertex elements have arbitrary orientations. Orientation is now imposed on the object bottom-up, 
and the function Orientable will take a True value, only if the object topology has been succesful iy 
oriented. Geometry is not considered. Orientability algorithm: holeaflunction Orientable ( object: O 
) GmlemOriented begin Oriented<-True for all beundaryobjects B in Odo if not Oritmtable(B] then Oriented<. 
Fllse if Oriented. Truethen for all objecte B in Odo if B is equivalentto anti of B with identical orientations 
then turn (reveree)orientationof S andall connected elaaanta if notOis equivalentto anti of Bwithoppositeorientationsthen 
Oriented<. Mu Orieatahle<. valueof Oriented andOrientable  5.2 Comparison This algorithm compares the 
topology of two objects, to test whether the two topological structures are equivalent including their 
orientations. Comparison of geometry can easily be incorporated into the algorithm. A similar algorithm 
is used to compare equivalent structures with opposite orientation, or without checking orientations 
at all. Comparison algorithm: Bolean?unction ?Equivalent ( object: 01 , 02 ] BooleanArray Tag( object 
) Boolean?Xatch begin if dimanaionof 01. dimensionof 02 . 0 then ?Equivalent<. true .Iae ?I@tch<. true 
fol ail boundaryelamantaB1of object Oi do Tag(Bl)<. False for all boundaryelamantaB2of object 02 do 
 if ?Satch. true than ?Xatch<. ?alae for all boundaryelementsBI of object 01 do if ?Hatch . ?alae then 
if Tag(Bl). Falaethen if ?Cquivalent[Bl, B2)then ?Xetch<. True Tag(Bl)<-True for all boundaryelemantaBI 
of object 01 do if ?ag(Bl]. ?alsethen ?Match<. ?alae else Taq(Bl) <. ~alae ?Equivalent c. ?Xatch eti 
?Squivalent   DHDI Figure 4. Sewing two faces together does not affect (he number of elements, because 
the split-elements are contained w ithin the boundary of each object. 6 HYPER MODELING We shall now take 
a look at some types of modeling operations that are essentially multi-dimensional. The purpose is to 
illustrate some propefiies of split-element representations. The operators available in n-dimensional 
modeling must work uniformly for objects of all dimensions. llte examples here are 2-dimensional, but 
should be thought of as n-dimensional generalizations, showing (n+ 1)-dimensional solid objects as faces 
and n-manifold boundary elements as edges. With the exception of the set operations, all operations have 
been implemented in an n-dimensionalgeometricmodelingprogram.They all work on the topological model only, 
geometric calculations are not included, but are of course essential in some operations. One class of 
operations, that does not change the topological representation of a model at all, are geometric transformations, 
which move or deform objects in space in various ways. lltree other main classes of modeling operations 
are described in the following: element assembly operations, which are purely topological changes to 
a model; interpolation (or extrusion) operations, which deal separately with changes to the topological 
and the geometric representations; and Boolean set operations, in which changes to the topology depend 
on geometric analysis. 6.1 Assembly of elements A simple approach to model definition is bottom-up modeling, 
starting with vertex elements, and building up objects of increasing dimensions by repeatedly defining 
objects from lower dimensional sets of objects. This involves two types of elementary operations: sewing 
elements of the same type together to form a closed surface; and defining new elements of higher dimension 
to be bounded by a surface. Identification of the edges in plane models is an example of the sewing operation 
applied to solid modelingl 5. When solid objects are sewed together, sewing is often referred to as a 
gluing operation. When two adjacent elements are joined together, they must be sewed along their common 
boundary. Whether two elements have a common boundary depends on the boundary geometry, but the operation 
of sewing is a purely topological change to the model. fn a shared-element representation, the sewing 
operation will substitute two boundary elements by one, which is shared between the two sewed elements. 
So in the shared-element representation, sewing and tin-sewing involves destruction and constmction of 
  c1 IDl Figure 5. Recursive interpolation for sweep-type opera­ tions. Interpolation between two line 
elements is performed jirst by recursive interpolation betu een copies of the boundary elements, then 
creatiott ofa higher-dimensional element. model elements. Not so with the split-element representation, 
where sewing is performed solely by linking the object next-loops and changing the ANTI links of the 
two boundary elements. Sewing is thus very simple to implement in a split-element representation (see 
figure 4). Before sewing two elements together they are compared, to check that they are equivalent structures 
with opposite orientations. When a closed surface has been defined by sewing patches together, a higher-dimensionaf 
object is defined, simply by creating a new element, and adjusting the HYPER and BOUND links to make 
it the parent nmie to the set of nodes in the boundary tree, that represent the already next-linked surface 
patches.  6.2 Interpolation A more high-level class of mdeling procedures suitable for n-dimensional 
geometric modeling is the interpolation operators, also known as extrusions or sweep operations. A sweep 
defines an object by moving a lower-dimensional object along a trajectory curve. In an interpolation 
operation, the topology changes independently of the object geometry, so topological and geometrical 
changes can Ix calculated separate! y. Interpolation in n dimensions can be formulated recursively. When 
an interpolated object is created, the resulting object will be of dimension one higher, and its boundary 
will consist of three parts: the original source object, a copy (or equivalent) of the original object 
moved to another position, and the third part of the object, which is the result of a lower dimensional 
interpolation between the two boundaries of these two objects (see fi&#38;re 5). The construction of 
an object by interpolation between two identical objects of lower dimension is the simplest case of this 
type of operation. A more generalized operator would allow, for example, a 4-D hypes-cube to be defined, 
either as the product of a 3-D cuk and a I-D line, or as the product of two 2-D squares. 1 El Figure 
6. Boolean set operations by recursive cutting and sewing. Thesetoperationsarepe~ormedby recursively 
subdividingintersectingboundaryelements,andthereafter swappingthe sewings to combine elements from different 
bounah-ies. The result depends on the orientation of the objects, illustrated here by the black and white 
colours of the vertices.  6.3 Boolean set operations Another important modeling tool for higher-dimensional 
representations is set operations baaed on Boolean algebra, as known from CSG solid mcdeleml,14~17. A 
boundary representation set operation can be performed in two steps: The boundaries of the two intersecting 
objects are first subdivided, so they only intersect at common boundary elements. This is necessary, 
if the operation shall produce valid, closed manifold objects. Then the objects are cut at the intersections, 
and recombined to produce the boundaries of two of the four possible Boolean products. With the split-element 
representation, this step can be performed ve~ simply by swapping relations between two pairs of anti-elements 
at a time. llte result dependa on the initial orientations of the objects, such that every possible Boolean 
combinationof two objects can be constructedby first selecting theproperorientations(see figure6). Two 
new objects arealways constructed, one of which can afterwards be deleted. If implementedlikethis,thecombinationpartof 
thesetoperations can be performed as purely topological operations, without changing the number of elements. 
7 RESULTS A provisional representation of the n-dimensional split-element topology has been implemented 
in the form of a prototype program called HYPER, which is a polyhedral hyper-solid modeler. Procedures 
for validation of boundary closure and orientability have been successfully tested, and aewing and interpolation 
operators have been implemented. More general sweep algorithms for n-dimensional objects are currently 
under further investigation, as is the development of Boolean set algorithms, that take advantage of 
the orientation information provided by the data stmcture. The program is interactive and menu-driven, 
and modeling operations cart be followed in graphics, while they execute. Visualization lay-out is baaed 
on mhogonal projections, and automatically adjusts to match the current dnenaion of space. Most algorithms 
benefit from the split-element representation of the model, because top-down traversal is well supported 
by the boundary tree structure. Bottom-up traversal is seldom used in modeling procedures, and is in 
some cases harder to implement. However, a procedure for realizing the star relation10 has been implemented, 
though we have found no practical use for it in modeling algorithms.  8 CONCLUSION The split-element 
model for n-dimensional boundary topology has been defined, and a prototype n-dimensional geometric modeler 
has been implemented, based on the hyper data structure. It is an element-baaed representation, that 
supports element-to­element traversal of objects, and efficient modeling operations. fhe tepreaentation 
is based on explicit representation of the manifold properties. This means, that the boundary elements 
of an open surface can be identified by looking for elements that have no opposing element (nil-pointers). 
It is easy to maintain the topo­logical consistency of the representation, (including orientability), 
and vertical (top-down) and horizontal adjacency information for model COMtXtiVity analysis is provided. 
llte split-element structure of the model is advantageous for the use of recursive procedures, which 
come naturally with n-dimensional mrMeling, and algorithms are easier to develop, because changes in 
adjacency topology (aewing operations) do not involve element construction or destruction, and can therefore 
be handled separately from geometric operations. The support for orientability analysis may be the most 
attract­ive propeny of the split-element model. It supports efficient verification of model orientability 
baaed solely on topological analysis. Because complete ordering information is not completely maintained 
in the model, tree search is often needd to match split-element pairs. Future work will be on n-dimensional 
algorithms for object medeling and analysis, and development of the interface between topology and geometry 
representations. The intended use of this model representation is in a geometric modeling system, that 
shall provide an integrated and flexible environment for modeling of objects of any dimensions. ACKNOWLEDGEMENTS 
 The authors want to thank the reviewers for their comments and many useful suggestions. REFERENCES 
<RefA>1 Bieri,H and Nef, W Elementa~ set operations with d-dimensional polyhedra in Noltemeier, H, ed. Cornpu/a­tional 
Geometry and its Applications, Lecture Notes in Compu[er Science W33, Spnnger-Verlag ( 1988) pp 97-112 
2 Brisaon, E Representing Geometric Structures in d Dimensions: Topology and Order 5fh ACM Symposium 
on Computational Geometry, proc. (1989) pp 218-227 3 Cattani, C and Paoluzzi, A Solid Modeling in Any 
Dimension Dip. di Informatica e Sistemistica, Rap. 02-89, University La Sapienza ( 1989) 4 Connolly, 
M L An application of algebraic topology to solid modelling in molecular biology The Visual Computer 
Vol 3 No 3 (1987) Pp 72-81 5 Dobkin, D P and Laszlo, M J Primitives for the Manipulation of Three-Dimensional 
Subdivisions 3 rd ACM Symposium on Computational Geometry, proc. (1987) Pp 86-99 6 Dufourd, J-F Formal 
specification of topological subdivisions using hypermaps Computer-Aided Design Vot 23 No2(1991)pp 99-116 
 7 Edelsbrunner, H Algorithms in Combinational Geometry Springer-Verlag ( 1987) 8 Ferrucci, V and Paoluzzi, 
A Extrusion and boundary evaluation for multidimensional pal yhedra Computer- Aided Design Vol 23 No 
1 (1991) pp 40-50  9 Guibas, L and Stolfl, J Primitives for the Manipulation of General Subdivisions 
and the Computation of Voronoi Diagrams ACIU Transactions on Graphics Vol 4 No 2 (1985) pp 74-123 10 
Hanrahan, P M Creating volume models from edge­vertex graphs ACM Computer Graphics Vol 16 No 3 ( 1982) 
pp 77-84 11 Kovalevsky, V A Finite Topology as Applied to Image Analysis Computer Vision, Graphics, 
and Image Processing No 46 (1989) pp 141-161  12 Lienhardt, P Subdivisions of N-Dimensional Spaces and 
N-Dimensional Generalized Maps 51h ACM Symposium on Computational Geometry, proc. ( 1989) pp 228-236 
13 Lienhardt, P Topological models for boundary represen­tation: a comparison with n-dimensional generalized 
maps Computer-Aided Design Vol 23 No 1 (1991) pp 59-82 14 Mantyla, M 2-Manifold Booleans through Vertex 
Neighborhood Classification ACM Transactions On Graphics Vol 5 No 1 (1986) pp 1-29  15 Mant yla, M An 
Introduction to Solid Modeling, Computer Science Press, Inc. (1988) 16 Munkres, J R Elements of Algebraic 
Topology, Addison- Wesley (1984) 17 Putnam, L K and Subrahmanyam, P A Boolean Operations on n-Dimensional 
Objects IEEE Computer Graphics and Applications Vol6No6(1986)pp43-51 18 Requicha, A A G Representations 
for rigid solids: theory, methods, and systems ACM Computing Surveys Vol 12 No 4 ( 1980) pp 437-464 19 
Requicha, A A G and Voelcker, H B Solid modeling: Current status and research directions IEEE Computer 
Graphics and Applications Vol 3 No 7 (1983) pp 25-37 20 Rossignac, J R and O Connor, M A SGC: A dimension 
independent model for pointsets with internal structures and incomplete boundaries in Wozny, M, Turner, 
J and Preiss, K, eds. Geometric Modeling for Product Engineering, proc. 1988 IFIFYNSF Workshop on Geometric 
Model/ing, North Holland ( 1989) pp 145-180 21 Takala, T Geometric boundary modelling without topo­logical 
data structures Eurograp/rics 86, proceedings (1986) Pp 115-128 22 Weiler, K Edge-based data structures 
for solid modeling in curved-surface environment IEEE Computer Graphics and Applications Vol 5 No 1 (1985) 
pp21 -40 23 Weiler, K Topological Structures for G. umetric Modeling. Ph.D. dissertation, Rensselaer 
Polytechnic Institute ( 1986)   </RefA>
			
