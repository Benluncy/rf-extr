
 ADVENTURES IN PASCAL --THE ACADEMY APPROACH Captain A.C. Jost, Major R. Bolz, Captain G. Topping Department 
of Computer Science(DFCS) United States Air Force Academy, CO 80840 ABSTRACT A ne~ curriculum was designed 
for the computer science major at the Air Force Academy with the initial majors course being Elements 
of Programming Languages (CS359). The course consists of four major blocks: detailed concepts of PASCAL; 
examination of elements of programming languages; examination of FORTRAN77 and COBOL; and student comparative 
reports on other contemporary languages. The initial block about PASCAL in this course is unique in 
concept and approach; and is the focus of this paper. The underlying basis for the approach taken is 
that PASCAL is an extremely small language; therefore, very easy to master. Once a student has mastered 
a programming language it is easy to compare other languages against the "mastered" language. Also, it 
is much easier for the student to learn new programming languages once one is mastered. The approach 
we used in this course is what makes it fairly unique. INTRODUCTION. The Department of Computer Science 
at the United States Air Force Academy has instituted a new undergraduate curriculum in Computer Science. 
The first course in the curriculum is Elements of Programming to set programming standards and style, 
and to provide a program design methodology to be used throughout the computer science curriculum. Therefore, 
it is an extremely important course as it initializes the students frame of Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, 
and notice is given that copying is by permission of the Association for Computing Machinery. To copy 
otherwise, or to republish, requires a fee and/or specific permission. (~) 1983 ACM 0-89791-091-5/83/002/0143 
$00.75 thought toward the remaining courses in their major. The CS359 course consists of four major 
blocks consisting of detailed coverage of the PASCAL language; examination of elements of programming 
languages; examination of FORTRAN77 and COBOL; and student comparative reports and presentations on 
other contemporary languages. The PASCAL language is covered in detail in the first block using a fairly 
unique approach and is the focus of this paper. The underlying basis for the approach taken in this 
block is that PASCAL is a small language and, therefore, easily mastered. Once a student has mastered 
a programming language it provides a basis for comparison when studying other programming languages. 
Also a student who has mastered a language generally finds it easier to learn new programming languages. 
 The students enrolled in CS359, Elements of Programming Languages, were required to know and use almost 
every construct available in PASCAL. We used the syntax charts of PASCAL as tools to facilitate learning 
the minuetest details of the language. On daily quizzes we required the students to reproduce from memory 
the syntax charts of chosen constructs from the assigned charts. Although all students had programmed 
in PASCAL before CS359, the vast majority had a difficult time with the syntax chart quizzes at first. 
Their knowledge of PASCAL was limited by their programming experiences in the language, i.e. they were 
taught by example and thus limited to those examples. Using the syntax charts gave the students much 
broader knowledge of the PASCAL language. The students had to use their knowledge of Top Down design, 
data 143 abstraction, structured programming and PASCAL to implement their own design of an "Adventure" 
computer game. The students" "Adventure" game was the major learning tool used in the PASCAL block of 
the CS359 course. The mastery of Pascal was the initial goal of CS359 and was accomplished in the following 
manner. OBJECTIVES OF PASCAL BLOCK. The objectives of this block were the following: a) emphasize the 
design of computer programs should be done in a top down modular way; b)use levels of abstraction to 
reinforce the Top Down Modular Design methodology of the program design; c) master a programming language(PASCAL) 
so the student has a basis for comparison to other languages. The students used the design methodology, 
concepts and the PASCAL language in the remainder of the course very successfully. METHODOLOGY. We 
used a structured approach, quite naturally, in our presentation of the structured techniques and the 
PASCAL language. It must be emphasized here that the students had a computer science course using PASCAL 
before being enrolled in CS359. The students were taken through a review of the PASCAL language using 
the syntax charts which define the language. The review of the language was reinforced with a very large 
programming problem emphasizing levels of abstraction and top down design. The use of syntax charts 
to review the PASCAL was an extremely interesting experience. Using the syntax charts demonstrated 
how the PASCAL language is defined in a top down fashion with varying levels of abstraction (see Fig 
1 and 2). In Figure 1 you can see the complete definition of a PASCAL program. The primitives, those 
tokens which appear in circles or oblongs, appear exactly as given in an actual program. The abstractions, 
those items given in rectangles, are defined by another chart in the PASCAL syntax charts. ( :&#38;#169; 
 -L I IDEtITI F~[R For instance, the abstraction called IDENTIFIER in Figure 1 is defined in another 
syntax chart given as Figure 2. To add to the levels of abstraction IDENTIFIER is further defined by 
the abstractions LETTER and DIGIT. One can readily see that the syntax charts reinforce the concepts 
of top down design and levels of abstraction. The students were required to learn the contents of the 
syntax charts by essentially memorizing the charts. Quizzes were given almost every class period. The 
students had to reconstruct the syntax charts so they conveyed the meaning of the abstraction they were 
asked to define. It was not necessary that the students give an exact duplicate of the syntax chart, 
just that they illustrate the correct definition. We found that on the initial quizzes most students 
~ syntax charts were limited to describing examples they used in previous programs. In other words, their 
understanding of the PASCAL language was limited to previous lecture examples and programming experiences. 
By using syntax charts, the CS359 students expanded their knowledge of how powerful the PASCAL language 
really is. Even though the top down modular design and levels of abstraction were reinforced with the 
syntax charts, we also used as a learning tool a large sized PASCAL program(1000+ lines of code) the 
student's own version of the familiar "ADVENTURE" game. Each student had to go through specific design 
phases in implementing their game. The initial phases of the design received strong guidance from the 
instructors. The implementation of the student's "ADVENTURE" game was accomplished with strict adherence 
to top down modular design and stubbing the lower level program modules. The development of the adventure 
game was implemented in the following manner. IMPLEMENTATION OF THE ADVENTURE GAME. The implementation 
of the game was accomplished in parallel with the review of the PASCAL language. The process was initialized 
by the first required  FIGURE ~ ADVENTUEE G~IE pLANNING BUBBLE CHAR'r assignment. In this assignment, 
each student had to define their own scenario for the Adventure game, along with game locations, game 
objects, and finally a diagram of the various routes through their game. To aid in the game design we 
 used a bubble chart (see Figure 3) to show pictorially how each of the game locations would fit together. 
The student was required to have at least one four-location maze within their scenario. Each location 
could also have up to six exit points: North, South, East, West, Up and Down. Further, if a location 
had an exit North, it could be a one way exit, that is, once you got in the new location there was no 
guarantee you could return going South. This generalization allowed for some interesting and frustrating 
game scenarios. The student's creativity was allowed to run wild in their creation of the game scenarios. 
Scenarios encompassed games dealing with medieval castles,to detective games, to various escape plans 
from the Academy grounds, and many others. All students had a very positive attitude toward developing 
their own scenario. The students also had to define what objects would be hidden throughout their gameboard, 
along with a variety of actions the player could accomplish. As in the commercial Adventure game, the 
player could give two-word commands such as: GO NORTH CLIMB UP PICK KEY DROP KNIFE FIGHT TROLL  As 
extensions to the basic game program, the students eventually added synonyms to the command list so "N" 
would equate to "GO NORTH" or "GET" would be the same as "PICK". The students had completed designing 
their scenario and now they received a framework PASCAL program(see Figure 4). As you can see examining 
the PASCAL program,that it is a very abstract version of an "Adventure" type game. All students regardless 
of their scenario, used this framework to start from, with the only differences bein:i the variable 
names. Initially, all the datatypes used were integer thus allowing the program to compile in it~ rudimentary 
stage of development. The main program initializes the player wit% the initial objects and location. 
The game scenario--exits from locations, objects in locations are initially set by INITGAME. The game 
continues to be played as the player gives commands other than QUIT or until the player wins. All the 
students were given was the declaration of types: TBD and the main program shown in Figure 4 along with 
a list of what the output from the stubbed modules should look like. PAOGg,AH AOVENT ( INPUT ,OUTPUT 
) ; V/~q FRO00 ~ PLAYERTYP(OIZZYL&#38;qD GAMETYPE; COI#9.ND CCPI4ANDTYPE~ BEGIN (*S4in program starts 
here ") ZNITPLAYER ('ROCO); [NITGA~E (OIZZYL~O); REPEAT G~TNEXT {COHMA.qO)~ PRO((SS (COeet~O); UNTIL 
PLAYERQUIT$ (CON4AffO) OR PLA~INS (~OO0h GIVEREStJLT5 (FAOOO.OIZIyLA/4D); £NO. The next step in the 
development process was to provide the students with very abstract datatypes. These datatypes would 
reflect the abstract objects and operations in their game(see Figure 5). ANALYSIS pRC~PJO~4IEG LANGUAGE 
IMPLNEIqTATION FIGURE ~ ABSTRACT ~OLUTION$ ~(PRF, SS~ IN A PROGRA,~4ZNG LANGUAGE This figure illustrates 
the process we are now going through. The students have defined in their scenario real world objects 
and operations they want implemented in their game. We have now gone to the level of providing program 
abstractions that mirror those real world objects and locations. PASCAL with its very nice capability 
of allowing the programmers to define their own datatypes gives us the capability to implement our abstract 
objects, operations and solution. We provided a sample declaration section to the students which showed 
them how to implement the player, objects, actions, directions and gameboard using the PASCAL capability 
of user defined datatypes (see Figure 6). The structure of these user defined datatypes made the solution 
to the game problem very simple to program. Once the student understood the interconnection between GAMETYPE, 
SCENETYPE, PLAYERTYPE and the given commands, the solution followed very naturally. We insisted on the 
students turning in increments of their program solution with lower levels of detail in modules being 
stubbed using only output statements i?~dicating the module was entered.  The first required assignment 
after the abstract datatypes were created, essentially filled in the details initializing the gameboard 
and play,~u. The other procedure required was the one to input the commands from the terminal and recognize 
valid command words, i.e., GO NORTH is valid and so is GO KNIFE, even though not meaningful. The procedure 
GETNEXT would identify invalid commands such as GOO NORTH where GOO is not a valid verb and GO PITCHFORK 
where PITCHFORK is not in your datatype WORDTYPE and therefore an invalid noun. So, in the first student 
generated program they only initialized the player, gameboard and accepted valid two-word commands from 
the terminal. The next assignment required more detail in their procedures. The students had to add 
semantics to the meaning of the two-word commands. They had to differentiate between GO NORTH as being 
a meaningful command and GO KNIFE as being valid, but a meaningless command. The students also implemented 
the procedure GO so the player could traverse through the gameboard. All the other verb modules were 
stubbed. LOCTYPE = (FIEND. KEAOOW. WOODS. TRZEPL~CE, ffOUSE. LIVI~GROO~, KITCHE//. PAHTRY, CLOSET, TUNNEL, 
PASSAGE, MIRROR, CAVE, CAVE~'I, STALAGTITE, GOLDROOM, ~ZEI, MAZE2, MAZE3, ~mZE4, ~UNE)~ (* TO OE us~o 
FOR 'BLOCKED' EXITS "I WDRDTYPE -(GO, TAKE, DROP, FIGHT, CLIHB, LOOK, OPEN, UNLOCK, OUIT, INVENTORY, 
DRINK, NORTH, EAST. WEST, SOUTH, UP, mmm DIA~:)ND, GOLD, CHEST, RUBY, SILVER, TREE, WATER, BOTTLE, KEY, 
KNIFE, TROLL, DOOR, DU~Y " used for $entina2 search "} VERSTYP~ . GO..DRI~K; ROUNTYPE -NORTH..DOO~+ 
 DIRECTIONT~PE -IIORTR..DO~I THINGS -DIAMONO..DOORI THINGSET -SET OF THINGS3 PLAYERTYPE -RECORD PLAYERPOINTS 
I INTEGER~ P~YE~ U~'I~PE~ GPABBAG : THINGS~2Jr 8 SCm~ET~pE -RECOP, D EXIT ARRAY (DIRECTIONTYPE] OF LOCTYPE; 
ITEMS i THINGSET; MEG : STRING; UND* GAMETYPE -ARRAY |LOCTYPE] OF $CEWETYPE; CO~MANDTYPE= RECORD VERB 
: VERETYPE; NOUN ~ NOUNTYPE; ENO~ OBJECTOEEC . RECORD pOINTS = INTEGER; LOCATION ; LOCTyPE~ MSG ~ STRING; 
 OBJECTTYPE . ARRA¥[DIAMOND..DOOR] OF OB3ECTDESC; VAR FRODO pLAYERTYPE; DIZ~YL~D ~ GAMETYPE ; cow, No 
: co:~m-ry ~E; OBJECT : O~.~ECTrYPE: The final development iteration of  the game was the implementation 
of all the remaining verbs the student needed to define. Each student implemented each procedure one 
at a time and thoroughly tested each procedure prior to moving on to the next verb. Once the student 
completed their basic game program we allowed them to start implementing optional additions to their 
games. We gave the students suggestions for their extensions along with allowing them to define their 
own extensions. Some of our suggested extensions were the following: a. initializing the scenes from 
a file generated by another program;  b. deal with synonyms for objects, directions, and verbs;  c. 
random "villains" roaming around the game;  d. use of variant records in defining objects and scenes; 
 e. adding 20 objects/verbs to basic list of I0 objects/verbs;   one of the most interesting extensions 
 was two students could combine their games together--you would pass through a time warp scene and instantly 
go from fighting a dragon to the bridge of the Battlestar Gallactica. The student-generated extensions 
were also very interesting. Some of these extensions were the following: a. different levels of game 
competence, beginner, novice, and expert; and how the video display varied between competence levels; 
 b. saving a player's game situation on a file, so when the players start playing the game again they 
start in the location and situation they left off with; c. random generation of exits from a location 
that change during the actual play of the game; d. and there were many other unique twists added to 
various games.  The extensions added to the game indicated the completion of the development cycle of 
the game. Almost all the games were over 1000 lines of PASCAL code, excluding comments. All students 
but two, were able to complete the programming tasks in the six weeks allowed for the project. CONCLU~ 
I O~ The long term affect of the methodology used in CS359 will not be d~scerned for another few semesters. 
 However, the short term learning was quite dramatic. The students showed a tremendous improvement in 
their syntax chart quizzes. But their learning was really demonstrated in their enthusiasm toward the 
Adventure game. The game absorbed any extra time thestudents could give their projects. They experimented 
with additional features of the PASCAL language in order to improve their game scenario. They improved 
the interactive features of their game making it more user friendly. Most of the students continued working 
on improvements to their games several weeks after the final program assignments were due. In the final 
evaluation of the student's program listings, almost every feature of the PASCAL language was used. Was 
the use of syntax charts, levels of abstraction, Top Down Modular Design, and the Adventure game successful 
in this class? We in the Department of Computec Science a t the Air Force Academy certainly believe 
so, especially the three instructors in the course--the authors of this paper. We would suggest any reader 
who is responsible for developing a programming languages course uslng PASCAL as the major language in 
the course think seriously about the approach we have been successful with this past semester. BIBLIOGRAPHY 
 <RefA>ACM Curriculum Committee on Computer Science, "Curriculum "78 - Recommendations for the Undergraduate 
Program in Computer Science", Communications of the ACM, Vol. 22, No. 3, March, 1979, pages 147-166. 
 Pagan, F.G.,"The Role of Comparative Languages", ACM-SIGCSE, vol l0 #1, 1978, pages 22-23. </RefA> 
			
