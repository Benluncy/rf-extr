
 A Labeling Algorithm for Just-in-Time Scheduling in TDMA Networks Charles G. Boncelet Jr.* and David 
L. Mills * Department of Electrical Engineering University of Delaware Newark, DE 19716 Abstract This 
paper describes a scheduling algorithm for high speed, TDMA communication networks. The problem is to 
find a route and determine switch schedules so that a burst of information can traverse the network from 
source to destination. We show that this problem is difficult, i.e., that several simple variations are 
NP­complete, We present an algorithm that finds schedules, and within a simplifying assumption, is guaranteed 
to find a route if one exists. Simulations indicate that this algorithm runs quickly in practice and 
overall scheduling efficiencies of 80-90% can be achieved. We also describe a variation in which the 
problem is to find a repeating schedule and we show how to adapt the basic algorithm for this variation. 
 Summary We address the issue of scheduling bursts of data on high speed networks. The networks in question 
have accurate time keeping between nodes (allowing TDMA protocols), crossbar switches which can connect 
any in­put to any output, and directed links. The assumed geographical size is large so that typical 
link delays are on the order of 10ms. The number of nodes is moderate, say between 10 and 100. (These 
nodes may, of course, connect to many others with gateways.) In this paper, we propose two scheduling 
problems for these networks. We show that simple variations of this problem are NP-complete. We present 
algorithms *Supported by Defense Advance Research Projects Agency under NASA Ames Research Center contract 
number NAG 2 638. The authors can be reached at boncelet@udel.edu and mills@ udel.edu, respectively. 
Permission to copy without fee all or part of this materiel is granted provided that the copiee ara not 
made or distributed for direct commercial advantage, the ACM copyright notice and the titla of the publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. COMM 92-81921M0, 
USA @l1992 ACM 0.89791 -526-7 /92/0008 /0170 ... $1 .50 for creating schedules and present the results 
of sim­ ulations which indicate that scheduling efficiencies of 80-90% may be achieved. The work has 
its immediate application to the UD Highball Network, discussed briefly in Section 3. Other applications 
may lie in scheduling traffic on roads or scheduling tasks on machines. The remainder of the paper is 
organized as follows: Section 4 specifies the scheduling problem and Section 5 presents the NP-completeness 
results. Algorithms are presented in Sections 6 and 8. Finally, the paper con­ cludes with comments and 
suggestions in Section 9. 3 Overview of Highball The University of Delaware Highball project is a re­search 
effort geared toward developing, analyzing, and protolyping a novel high speed computer network based 
on TI)MA protocols [2, 4]. The network is designed for big users, such as supercomputers, visualization 
workstations, and immediate disk to disk transfers, who can individually demand gigabit or so rates, 
but usually do so on a bursty basis. Highball accommodates these users by providing dedicated access 
for brief periods. Users can transmit relatively large bursts of data, say a megabit or so. At gigabit 
rates, a megabit burst takes 1 ms. The network consists of directed links, probably fiber optic, connecting 
nodes. Distances involved are rela­tively large. Individual links have delays from 3-18 ms, while the 
network diameter is approximately 30 ms. Links are connected together by crossbar switches that can connect 
any input to any one or several outputs. The switches are controlled locally. Each switch has an accurale 
clock (to within about a microsecond). Thus, the switches can perform just in time switching just before 
a burst arrives. Nowhere within the network are the bursts stored or otherwise manipulated. All queuing 
is done at the source nodes. The scheduling problem is how to schedule the switches and assign starting 
times for the bursts so that as many bursts as possible can successfully reach their destinations. The 
scheduling problem is perhaps best understood with an analogy: that of scheduling trains on a directed 
network. The trains must not collide and cannot be stopped prior to reaching their destinations. Maximum 
throughput demanck that many trains are traversing the network at once. Furthermore, unlike real train 
networks, Highball camnot signal ahead of the trains since the trains go as fast as the signals. This 
analogy gives the Highball network its name, In rail­road parlance, highball means the train has priority 
and can go as fast as the tracks allow. Presently, we are studying two scheduling paradigms. The first 
is termed Reservation-TDMA (R-TDMA). In R-TDMA, the nodes transmit requests to transmit bursts on a seprate 
reservations channel (which maybe physically inband, even though logically out of band). All nodes receive 
these requests, schedule them, and arrive at the same schedule. At the appropriate time, the source transmits 
its burst and intermediate switches are set just in time. The second paradigm is a re­peating schedule 
determined clnce at network turn on time, and modified in an attempt to meet instanta­neous demand. We 
refer to this paradigm is referred as Adaptive Circular-TDMA (A C..TDMA). In AC-TDMA, nodes transmit 
requests to modify the repeating sched­ule for an extended number of bursts. The principal advantage 
of AC-TDMA versus R-TDMA is less com­putational overhead, while the disadvantage is possibly slow adaptation 
to instantaneous demand. 4 The Scheduling Problem 4.1 Statement We make the following assumptions about 
the network: Size: The network is large , about 5000 km in diam­eter. At approximately 2/3 the speed 
of light, this size corresponds to a delay of about 30ms. Typical links are 5 15ms long. Number of Nodes: 
The number of nodes, n, is small to moderate, say 10-100. Links: Links are directed. In practice, these 
will likely be fiber optic connections. Switches: Links are connected by cross-bar switches. These switches 
can connect any input to any output or to several outputs. The switches can reconfig­ure quickly, although 
not instantaneously. For the purposes of this paper, we will ignore this reconfig­uration time and assume 
the switches reconfigure instant aneously. Bursts of data are approxinmtely 1 ms long. At giga­bit rates, 
each burst has 1 mega,bit of data. Thus typical links can have many bursts in transit at one time. Note 
the burst size is crucial to the nature of the network. Bursts that are long compared to link delays 
can be conveniently switched with virtual circuits. Conversely, bursts that are very short (e.g., ATM 
packets) are prob­ably best handled with source routing techniques. The 1 ms burst is an interesting 
middle position and is con­venient for many big users, such as supercomputers or visualization workstations. 
We use the word bursts , rather than packets , be­cause the bursts do not contain routing information. 
The network does not require any sort of header on the burst (except possibly for synchronization). On 
a sep­arate channel, the nodes transmit requests to transmit. (These requests are assumed to be much 
shorter than the actual bursts.) All nodes receive these requests and must schedule them. In abstract, 
the scheduling problem is as follows: Given a directed graph G = (V, A) with V being a set of vertices 
and A a set of directed arcs, a distance metric associated with each arc, and a list of reservation requests, 
find a schedule of starting times and switch configu­rations to satisfy the requests. Note that it may 
be impossible to satisfy all the re­quests if there are lifetimes associated with them or if the requests 
are arriving over time with a rate that ex­ceeds the scheduling capacity. Furthermore, it is not obvious 
what criteria should be optimized in selecting a schedule. The following are some of criteria over which 
one might wish to opti-mize: Satisfy as many requests as possible.  Minimize the arrival time of the 
final burst.  hIinimize the total transit time of all scheduled bursts. Minimize the total waiting 
time for transmission of the scheduled bursts.  hlinirnize the total time for the satisfied requests 
to be received. The total time is the sum of the transit and waiting times.   5 NP-Completeness The 
general scheduling problem posed above is quite difficult. In this section, we show that several specific 
variations are NP-Complete. 5.1 Transformations of the Partition Problem The partition problem is the 
following: Given a set of integers, xl, ZZ, . . . . ~n, and a sum, S = ~~=1 xi, is there a subset of 
the integers, A, such that S/2 = 5.2 A Transformation of the Bin Pack­ &#38;A xi? It is well known that 
this problem is NP­complete (See, for instance, [1, 3].) We show two different ways of solving the partition 
problem with a scheduling algorithm. For the first so­lution, consider a simple network of n + 1 nodes. 
Order the nodes linearly from left to right and identify the first (the leftmost) as the Source and the 
last (the rightmost) as the Destination. Connect each node to the next in line by two arcs: one with 
zero delay, and one with delay equal to xi. All arcs go from left to right. The network is illustrated 
in Figure 1. The partition problem can be solved by the following scheduling problem: Is there a schedule 
for a single burst with arrival time S/2? In this case, a schedule is a single path. We need to show 
two things to establish the NP-completeness. Firstly, we need to show that the scheduling problem is 
in NP. This is trivial. An instance can easily be checked in polynomial time by adding the n delays (either 
Zi or O). Secondly, we need to show that this construction correctly solves the partition problem. If 
there is a path, take A to be the nonzero links along the path. This set will satisfy the partition problem. 
This construction is particularly interesting to this paper. It shows that the problem of determining 
whether a single burst can arrive at a destination at a particular time is NP-complete. Therefore, we 
can expect any exact algorithm which provides this infor­ mation to run in exponential time (assuming 
P # NP). In particular, the algorithm presented in Section 6 de­termines all times that a burst can arrive 
at all possi­ble destinations. Therefore it must run in exponential time. However, partitioning is an 
example of a class of NP-complete problems known as pseudo-polgnomiai because (loosely speaking) they 
can be solved in polyno­mial time if the integers involved are bounded in size. In other words, if the 
integers can be represented in unary, rather than binary, then the problem can be solved in polynomial 
time [3]. In the scheduling problems considered here, the in­tegers are bounded by the size of the network 
(about 30 ms) divided by the quantization size (about 0.25-1.0 ms). Thus we have good reason to believe 
that in prac­tice the labeling algorithm will run in reasonably short times. The second construction 
uses a trivial network con­sisting of a Source and Destination and two links be­tween them, from source 
to destination. Each link has zero delay. Assume there are n bursts to be scheduled, each with size xi. 
Then the partition problem is equiv­alent to the following scheduling problem: Is there a schedule of 
these n bursts such that all bursts are fin­ished by time S/2? Such a schedule must, by necessity, partition 
the bursts into two subsets each with total size equal to S/2. ing Problem The bin packing problem is 
as follows: Given a col­lection of integers, xl, XZ, . . .. x~, and a bin size B, partition the integers 
into subsets such that the sum of the integers in each subset does not exceed B and that the number of 
subsets is minimal. This problem is NP-complete, as is the generalization which lets the bin sizes vary. 
We can transform bin packing to a scheduling prob­lem if we assume that network access is siotted, For 
instance, in Highball we assume there is a reservations channel that transmits requests to all other 
nodes. A simple way to do this in-band is to periodically allocate network resources for these reservations. 
Normal traffic must be scheduled around the reservations. For instance, consider a trivial network with 
a Sourcej a Destination, and a single link connecting them, If access to the link is slotted, then the 
scheduling problem is NP-complete. Treat each available period as a bin, and minimize the number of bins 
necessary to transmit n bursts of sizes Z1, Z2, . . .,zn. Again bin packing is pseudo-polynomial and 
is only difficult if the integers involved can get large. For ex­ ample, if all the xi = 1, then bin 
packing is trivial.   6 Labeling Algorithm for Scheduling To reiterate the general scheduling problem, 
given a di­rected network and a set of burst requests, find a sched­ule for transmitting the bursts and 
setting the various crossbar switches along the way. In practice these re­quests are made over time and 
we would like to schedule each as soon as possible. In order to facilitate this task, we make a simplifying 
assumption: We freeze the cur­rent schedule and try to schedule the next burst without changing any of 
the previous bursts. In other words, we assume that we have scheduled the first L bursts and will not 
change any of that schedule in scheduling the (L+ l)st. This assumption is a greedy one and leads to 
one at a time processing. Greedy algorithms are widely used heuristics in solving combinatorial problems. 
The current schedule creates holes or slots into which we can try to fit the next burst. This burst cannot 
over­lap any of the previous at any link. Thus we conclude that the schedule is link based, Each link 
has a timeline that stores the status of the beginning of that link at each time. A link can be in one 
of four states: BUSY: The beginning of the link is occupied at this time by a previously scheduled burst. 
MAY13E: The beginning of the link is unoccupied at this time and we do not know whether the burst  
 sCxx JJD o0 o Figure 1: Network configuration can reach this link at this time. YES: The beginning 
of the link is unoccupied and the burst can reach this link at this time. NO: The beginning of the link 
is unoccupied at this time, but the burst in question cannot arrive now because it would overlap with 
an already scheduled burst. In other words, the tail of this burst will overlap with the head of another 
burst. One restriction that must be considered is that the burstsize must be smaller than duration of 
the smallest loop. If not, the tail of a burst can overlap its own head (much like the need to mark the 
NO state). Since the loop time is at least twice the shortest link, we can say that as long as the burstsize 
is less than twice the shortest link, then this problem cannot occur. Furthermore, for each node connected 
directly to a crossbar switch, we augment the network with two zero delay, fictitious links between that 
node and the cross­bar switch. One link goes to the switch and the other to the node. These fictitious 
links carry the node state, both in sending and receiving. Thus, the entire schedule is now link based. 
Since these links are not part of any loops, they do not affect the minimal burstsize. Initially, before 
any bursts have been scheduled, all timelines are in the MAYBE state. As bursts are sched­uled, the timelines 
are markecl BUSY for the appropri­ate durations. In the effort to schedule the next burst, we must do 
two things: Firstly, find and mark the NO s where the burst to be scheduled cannot fit because it would 
overlap another burst. Note, whether or not a link state is NO is a function of the burst size. Sec­ondly, 
try to turn MAYBE states into YES S. If the destination link can be marked YES at some time, then we 
have succeeded in finding a path. Denote a link that can be connected to a given link, 1, by s =SUCCESSOR(l), 
i.e., s is a link that can be connected directly to 1 by a crew.sbar switch. The crucial idea is that, 
if link 1 is in state YES at time tand sisin state MAYBE at time t+delay(l), then s can be marked for 
the partition problem. Let b = burstsize, T = maximum time, and TL(I, t) denote link 1 s state at time 
t.  First step, mark NO s: for each link, 1, for (t= O;t < T;t++) if (TL(l,@) ==BUSY for any t<0 St+ 
b) TL(l,t) = NO.  Second step, propagate YES s forward:  Mark Source link as YES and put on FIFO. While 
FIFO not empty, pop link 1 off fifo for each s=successor(i), if (TL(I, t) == YES and t+delay(l) < T 
and TL(s,t+delay(l)) == MAYBE) { TL(s, t+delay(l)) = YES if(s is not in fife) add s to FIFO. ) Third 
step, did we succeed? Check destination for YES S. If so, backtrack to SOURCE marking appropriate YES 
s as BUSY S.  Fourth step, return NO s and YES s to MAYBE s:  for each link 1, for(t = O;t < T;t++) 
if(TL(l,t) == NO or TL(l,t) == YES) TL(l,t) = MAYBE as YES at time propagate YES t + delay(l). In this 
basic fashion, labels until powibly the destination we link Figure 2: networks. Labeling algorithm for 
scheduling in TDMA is marked YES. The basic scheduling algorithm is given in Figure 2. The algorithm 
begins by determining and setting the NO S. Then all available times on the source link are marked YES 
and the link is placed on a fife. The fifo contains links which recently marked YES s. While the fifo 
is not empty, a link is popped off and its successors checked. When this link is YES and its successor, 
offset by the link delay, is MAYBE, then the successor can be reached. It is marked YES and placed on 
the fife. This algorithm finds all links at all times that can be reached from the source. It is a simple 
matter to check the destination link and see if and when it can be reached. It is also a simple matter, 
if desired, to keep track of auxiliary quantities besides reachability. For instance, hop count, transit 
time, maximum or mini­mum starting time, etc., can be computed. These auxil­iary quantities can be used 
to select among the possibly many times that the destination can be reached and to select from the possibly 
many different paths. The complexity can be derived as follows: We assume that the maximum number of 
successors of a link is lim­ited to W by the nature of the crossbar switch. Typical values are W = 4 
 32. There are IV links, each of which can be placed on the fifo at most T times, and the inner loop 
over successors can be executed at most W times. Combining these, we obtain O(NTW) opera­tions. The exponential 
complexity comes from the fact that T is exponential in the size of the problem, since the integers involved 
(the link delays) are represented in binary. There are various tricks to decrease computational time 
somewhat. First of all, one can break out of the loops in Step 2 as soon as any path to the destination 
is found. Secondly, one can compute the minimal time required to travel from any intermediate node to 
the destination. Processing at any intermediate node can cease whenever the current time plus the minimal 
tran­sit time to the destination exceeds the target time. One interesting question is how does the labeling 
al­gorithm scale as the network grows? We expect that W would remain bounded. It is a function of the 
cross­bar switch technology and network topologies. We be­lieve these might well remain constant, or 
at worst, grow slowly. We expect that T will be constant as N grows. It is determined by how long users 
are willing to wait for their message to be transmitted and is not likely to in­crease just because the 
number of users increase. Thus the overall ,complexity on a per burst basis scales lin­early with N. 
One might expect the number of bursts to also increase linearly with N. Therefore, the overall scheduling 
complexity appears to scale as N2. Simulation Results We simulated the performance of the labeling algorithm 
on a model of the NSF backbone. There are 13 nodes and 19 connections. The network is well connected 
with many paths between pairs of nodes, so that it provides a good test of the path finding ability of 
the algorithm. We model the connections as pairs of fiber optic cables, one in each direction. Combining 
with the 26 fictitious links (two for each node), we get 26+38=64 links. Thus the number of links is 
reasonable. Link delays were estimated by 2/3 the speed of light and were quantized to the half millisecond. 
The shortest link is 3 ms and the longest 18 ms. In the simulation, we assumed a horizon of 60 ms. If 
a request could not be satisfied so that it arrived within 60 ms of when that request was generated, 
we dropped that request and moved on to the next. The requests were taken in the order received. No effort 
was made to sort the requests to enhance scheduling efficiency. Among possibly many arrival times at 
the destination, we al­ways selected the first arrival to the destination and we chose arbitrarily among 
routes that arrived at the same time. All bursts were 1 ms long. Since the smallest loop is 6 ms, the 
labeling algorithm will work correctly. Each 1 ms interval, a random number of requests, following a 
Poisson distribution with parameter, A, were gener­ated. The sources and destinations were randomly cho­sen 
from a uniform distribution. With 13 nodes, one cannot expect to satisfy all requests if A > 13. In all 
cases, the simulations were run over 2000 time periods, generating at least 20,000 requests. We define 
efficiency as the fraction in per cent of all requests that are satis­fied. The results are presented 
in Table 1. Even for A = 13, the scheduling efficiency is approximately 90Y0. It takes, on average, 25.6 
ms for the burst to be started, and 48.0 ms before it arrives at the destination. The average transit 
time is about 21 rns independent of the load. Lambda 10 11 12 13 14 Efllciency (%) 99,9 99.0 94.6 90.1 
84.3 Start delay (ins) 11.4 17.8 22.3 25.6 27.7 Encl time (ins) 32.1 39.8 44.8 48.0 50.0 Table 1: Scheduling 
efficiencies versus A for the NSF backbone. Note the times indicated above do not include any initial 
delays caused by the reservations channel. one can expect that this delay would be about 30 ms for each 
reservation. However, one reservation may request communications access for multiple bursts. The reser­vations 
delay for many bursts may be zero. 8 Extension to Circular Sched­ules One deficiency of the scheduling 
scheme considered so far is the computational burden of scheduling each burst one at a time. In the simulation 
discussed above, it took about 5 ms to schedule ei~ch 1 ms burst on a Sun SPARC workstation. We need 
to schedule 10-13 bursts each millisecond. Even with coding improvements and a faster processor, it may 
be impossible to get the nec­essary speed. We have proposed an alternative scheduling strategy: Adaptive 
Circular TDMA (AC-TDMA). In AC-TDMA, we implement a repeating sclhedule that allows each node to communicate 
with each other once during each frame. The frame is the repeating period. For instance, with n nodes, 
the frame cannot be shorter than n 1 burst periods. We can adapt the labeling algorithm given above 
to compute repeating schedules as follows: Guess the frame time and compute all times modulo the frame 
time. Try to schedule the n(n -1) bursts by picking an order of bursts and scheduling each one at a time. 
If successful, stop; else, try a different ordering or increase the frame time. Since the repeating schedule 
is computed rarely, per­haps only once, the computing time is almost irrelevant. Therefore, the guessing 
above is tolerable. 9 Conclusions We believe these results are very encouraging. In the simulations 
presented above we achieved scheduling effi­ciencies of approximately 90% and better. The Highball network 
promises high utilizations. There are several improvements one can propose to the scheduling algorithms 
presented here. We have done limited experiments on some of these enhancements, but there is little room 
for improvement, owing to the high efficiencies already achieved. One enhancement that does seem to improve 
the results by a few percent is to choose the minimum hop path when choosing between alternative paths. 
The simulations presented here do not take into account inefficiencies caused by in-band reservations 
scheduling. Before in-band reservations can be recom­mended with confidence, this effect must be quantified. 
References <RefA>[2] D. L. Mills, C. G. Boncelet Jr., J. G. Elias, P. A. Schragger, and A. W. Jackson. Highball: 
a high speed, reserved-access wide area network. Technical Report 90-9-3, University of Delaware, Department 
of Electrical Engineering, September 1990. [3] C. Papadimitriou and K. Steiglitz. Combinat­orial Optimization: 
Algorithms and Complexity. Prentice-Hall, Englewood Cliffs, NJ, 1982. [4] P. Schragger. Scheduling algorithms 
for burst reser­vations on wide area high speed networks, In Pro­ceedings of the IEEE INFOCOM 91, pages 
6B.2. l 6B,2.8, April 1991. [1] A. V. Aho, J. E. Hopcroft, and J. D. Unman. The Design and Analysis of 
Computer Algorithms. Addison-Wesley, Reading, Mass., 1974.</RefA>  
			
