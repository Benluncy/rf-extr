
 A Formal Structured Method for Requirement Specification Construction Shaoying Liu University of York 
England Abstract tation VDM [6][7]. The DeMarco data flow diagram, DDFD for short, is the most popular 
informal struc-A formal structured method for requirement specifica-tured specification construction 
tool [2][3][11] as it cre­tion construction called FSMRSc is described in this ates an approach by which 
a developer and someone out­paper, FSMRSC extends DeMarco data flow diagrams side the field could communicate. 
It has a graphic rep­with the mathematical notation VDM (Vienna Devel-resentation with only a few primitives 
and concepts. A opment Method). Specifications constructed using this complex system specification can 
be decomposed into a method are comprehensible, structured and formal. The modular and hierarchical structure 
which is easily com­significant progress presented in this paper is to develop prehensible. However, 
data are not strictly typed in a systematic approach to correctness proofs of require-DDFDs and the purposes 
of the bottom level processes ment specifications. are not specified precisely, requirements expressed 
us­ing DDFD may be ambiguous, and the model lacks tbe formality to provide a specification for rigorous 
devel- Introduction opment. Extending this method with VDM [6] allows a specification to be developed 
which is both problem-As formal methods find increasing acceptance within oriented and formal, This approach 
retains the usabil­the software industry, there is a growing body of re­ity of Structured Analysis in 
DDFD and notation VDM,search and user interest in the integration of structured but has the following 
additional advantages: and formal methods [1][10][8][4]. Software engineers now use a range of different 
methods, both formal and 1. It provides a specification which is precise and un­informal, in order to 
model systems; these provide dif­ambiguous. ferent viewpoints on the system s data structures, pro­cesses 
and control. However, little research bas ad­ 2. It allows the possibility of mathematical reasoning 
dressed the issue of correctness of requirement speci­ about the specification fications. We believe 
that integrating formal notations with existing structured requirement analysis methods 3. It overcomes 
the weakness of VD31 (the lack of a will not only achieve precise requirement specifications, well-designed 
structuring mechanism ), but will also facilitate correctness proofs of requirement specifications. 4. 
It has the advantage of graphical notation and In this paper we introduce the method FSMRSC for data-driven 
approach over VDM in which require­requirement analysis by combining (and extending) De-ment models can 
be e.~sily expressed and commu­hlarco data flow diagrams with the mathematical no-nicated. Permission 
to copy without fee all or part of this material is grantad provided that the copies are not made or 
distributed for direct commercial advantage, the ACM copyright notice and the title of the publication 
and its date appear, and notice ia givan that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republieh, requires a fae endlor specific permission. e 1992 ACM 
O-89791 -502 -X/92 /0002 /1055... $ 1.50 The remaining part of this paper is organised as follows. Section 
2 contains the definition of a FSMRSC specifi­cation. Section 3 describes a method for producing a post-condition 
for an upper level condition process from its decomposition. In section 4 we introduce a series of rules 
for correctness proofs of FSMRSC specifications. Finally, we present our conclusion on FSMRSC and out­line 
further research.  FSMRSC specifications A FSMRSC specification is a hierarchical condition data flow 
diagram (CDFD for short). A CDFD consists of variables and condition processes. The significant dif­ferences 
between a DeMarco data flow diagram and a CDFD are that the variablea in the CDFD are typed, each condition 
process is a process of a DeMarco data flow diagram with a precondition, and each terminal (or bottom 
level) condition process is expressed with a specification in the style of pre-and post-conditions. 
Condition process A condition process is expressed as: [C(P), (hptd(lq, P, OUW(P))] where Input (P) and 
Output (P) denote the input data expression and the output data expression of condition process P respectively. 
C (P) denotes the pre-condition of P. To avoid ambiguities in a specification, we require that the relationships 
among input/output variables for any given condition process must be defined explicitly. Con­sider the 
graphical representation of condition pro­cesses, an input (or output) data expression must be given 
in disjunctive normal form: l?l~Ut(P) Z Xl @X2 @ . . . OX. and each Xi (i=l . ..n) is a conjunction of 
input (or out­put) variables which, for example, can be the form: Xi Z Z1OC2O ...ozm where we use A= 
B to indicate that two expressions A and B are syntactically identical, X @ Y means both X and Y are 
required, and X @ Y means either X or Y but not both is required. We use AVL(Z) for an input (or output) 
variable z to indicate data is available through the variable z. Data is available through a variable 
if there is one action which binds data to the variable. Otherwise, we say no data is available through 
the variable and the variable is un­defined. In general the predicate AVL onto the set of all data expressions 
is defined as follows (using logical operators V and A): AVL(X 6 Y) -AVL(X) V AVL(Y) AVL(X o Y) e AVL(X) 
A AVL(Y) The purpose of a condition process is a transformation from its input data to output data. This 
transformation can be completed only when the action (firing) of the condition process occurs. Firing 
of a condition process will occur when it has available input data. As a result of firing a condition 
process, input data bound to input variables will be transformed, and made available as new data bound 
to output variables, and input variables will become undefined. For instance, a Training Centre System 
can be expressed by the condition process TCS. Its purpose is to train students, teachers or workers 
by courses and to produce their study records and to select lecturers or technicians. The associated 
type and variable declarations, are as follows: TYPE Person alInf = compose PersonalInf of name : seq 
of char sex : seq of char age :N end where inv-PersonalInf (mk-PersonalInf(x, y, z)) ~ lenz~20Aieny~6 
Degree = {B.SC, M.SC, Ph.D} Education = map PersonalInf to Degree Students = set of PersonafInf TeachingAssistants 
= set of PersonalInf Workers = set of PersonalInf Stud~Res = compose St udyRes of person : PersonalInf 
 record : N end Lecturers = set of PersonalInj Technicians =set of PersonalInf FinalSequence =seq of 
StudyRes DATA s : Students t : Teach ingAssistants w : Workers e : Education  SS, ts, ws : Final Sequence 
 1 : Lecturers tn : Technicians TCS is written as: [ cards >OVdome=t Acardt>OV card w> 0, (s@t0e6Bu,TCS, 
 ss@ts@l@ws@tn ] ) The graphic representation is as shown in Fig 1 Icds>ovdom. .f .Cdl>ov.adw >0 I 
Figure 1: Condition process TCS The condition process TCS indicates the function of the Training Centre 
System. A firing either accepts the students, denoted by s, or the teaching assistants with their education 
background, represented by t and e, or the workers, denoted by w. After they are trained, TCS provides 
the students sorted by their study records, rep­resented by SS, or the sorted teaching assistants in 
the same principle and the recommended lecturers, denoted by ts and 1, or the sorted workers and the 
recommended technicians, represented by ws and tn respectively. We want to express the purpose of TCS 
precisely by giving the post-condition of TCS which describes the relationship between the input variables 
and the out­put variables. This is easy for bottom level condition processes, but very difficult (if 
possible) for upprr level condition process. Therefore, upper level condition pro­cesses are usually 
expressed in detail by their decompo­sitions (another CDFD) instead of their post-conditions. This graphic 
representation of condition process TCS also shows how to express the input and output, data ex­pressions 
graphically. All of the data occurring in each conjunction of variables flow into (or leave from) one 
small box and the different small boxes are separated by a line which denotes the LI.  Hierarchical 
condition data flow diagram FSMRSC is a structured analysis method. The analy­sis of the problem is carried 
out hierarchically through the decomposition of condition processes. In order to spell out the details 
of a condit ion process, the condi­tion process is actually decomposed into a set of related condition 
processes whicli is called a condit ion data flow diagram. A condition data flow diagram is a directed 
graph Each node is a condition process and these are connected ac­cording to the successor condition 
process relation. ~he condition process P2 is a sllccessor of the con(lit ion pro­cess PI if one of the 
output variables of F 1 is onf> of input variables of P?. A complete FSNIRSC specification is therefore 
a hierarc­hical condition data flow diagram. Definition 2.1 A hierarchical conditiou data flow dia­gram 
is a four-tuple: (D, Q. G, f), where D is a set of typed variables, Q is a set of condition processes 
whose input and output variables are from 0, G is a set of condition data flow diagrams and f, Wllicll 
is called de­composition function, is a partial fllnctiou fronl Q to C;. In addition, it satisfies the 
conditions: 1. For any condition process q E Q. all the input vari­ ables are different from all the 
output variablea. 2. Every condition process in in exactly one CDFD in G. Q occurs exactly once 3. For 
any condition duces the output processes, each data only once. firing of it pr~ IW170 A91.. AMF#l>O k9W, 
I >0 *1 For the sake of simplicity, the condition processes which are the members of the domain of the 
decomposition function ~ will be called non-terminal condition pro­cesses and other condition processes 
in Q terminal con­dition processes. For the non-terminal condition process q if ~(q) = g, then the CDFD 
g is called the decomposi­tion of q, all the condition processes in g are called child condition processes 
of q and q is called their parent con­dition process. For example, the FSMRSC specification of the Training 
Centre System is expressed as in Fig 1, Fig 2 and Fig 3; each figure presents a CDFD which are named 
gl, gz and g3 respectively. The decomposition function is: f = {< TCS, g2 >, < CO, gs>} and the additional 
type and variable declarations are: TYPE . W*,O m , I . # co I h Figure 2: Decomposition +TE 4w~** 
w, m of TCS StudgInf = map PersonalZnf to N DATA Sl)wl : seq of S2, W2 : StudyIn Person f alInf Terminal 
condition process Since every non-terminal condition process is ultimately defined in terms of terminal 
condition processes, it is necessary to specify the functionality of terminal con­dition processes using 
the VDM in order to achieve the concise and precise specifications. In a FSMRSC speci­fication a terminal 
condition process is expressed in pre­and post-conditions similar to the specification of an op­eration 
in VDM [6]: condition process name (xl, x2, .... Zn) m pre-condition !lll!/2) .... y~; Figure 3: Decomposition 
of C O post-condition where each ~i (i=l . ..n) is an input variable and Yj (j=l ...m) is an output 
variable. The difference between terminal condition processes in FSMRSC and operations in VDM is that 
there are no external variables in specifications of terminal condition processes. Therefore, the post-condition 
of a terminal condition process describes the relation only between its input variables and output variables. 
For example, some terminal condition processes in Fig 2, and Fig 3 are as follows: (1) SR(S) s, pre: 
cards >0 post: elem s] = s  (2) Sc(sl) S* pre: len sl >0 post: EX.4M(S1 , S2) EXAM : seq of PersonalInf 
x StudyIn~ B .EX,4M(/l, m) ~ domm= e!em11 A ~zEelemllarEN (r~OAr~100Am(x)=r)  (3) SS(S2)Ss pre: dom 
sz# !3 post: dom S2 = elem ss A card dom S2= len ss A lS-&#38;2RTED(ss, S2) IS-SORTED : FinalSequence 
x StudyInf -B IS-SORTED(1], m) L Vi,j~indsllqs,y~elemiL Il[i] = x A Ilu] = yAi<j-m(z)> m(y) (4) WI?(W) 
w, pre: card w >0 post: elem WI = w   Semantics of FSMRSC specifica­t ions Since a FSMRSC specification 
is expressed in terms of condition processes, and the top level represents a sys­tem, the key problem 
of defining the precise semantics ofa FSMRSC specification is to give a precise definition of the semantics 
of every condition process. In section 2 we defined a condition process as a transformation, but did 
not give a precise meaning of a transformation. We want to express such a transformation in terms of 
pre-and post-conditions of the corresponding condition process. As every non-terminal condition process 
is ultimately expressed by terminal condition processes, there must exist a post-condition for every 
non-terminal condition process which can be generated from its decomposition. First the generation of 
the post-condition for a non­terminal condition process is discussed. Generation of post-condition for 
non­terminal condition processes Let (D, Q, G, ~) be a FSMRSC specification, P EQ be a non-terminal condition 
process and the decompositiotl of P with respect to the decomposition function f be gl whose condition 
processes are P1, Pz, .... Pn. Thcll the post-condition of P, denoted by POST(P). can he obtained from 
gl. An algorithm has been developed for generating the POST(P) from gl as follows: Algorithm 3.1: 1. 
Let PI, P2, .... Pfi be the condition processes of gl, Relate each Pi with a data transformation of form: 
L(Pj) 4 R(Pj) where L(Pi) = Input(Pi), I?(Pi) = O~itpUt( Pi). Hence we represent gl by a combined transforma­tion: 
 L14Rl@L2+ R2@... E)Ln Rn. 2. For every transformation of the form ( I.l % L?G &#38;lLk) R, expand it 
to become: L1-R@Lz-R@... OILk - R POST(P) is true if and only if there exists a path in the decomposition 
of P, which implements a transfor­ 3. For every transformation of the form: mation represented by P, 
and all the post-conditions of L--+ (Rlf3R2@... @Rf) condition processes in the path are true. expand 
it to become A complete example of applying algorithm 3.1 to pro­duce POST(P) from the decomposition 
of P can be L­ R~@L-R2@... @Rl Rl found in [9]. 4. Expand ample, the expressions of transformations. 
For ex- Semantics of condition processes L~+R~@(Lz_R@L3_R3) For the condition process P let Input(P) 
be F{@ F~@ becomes ... oF:, where each F: [i=l...m) is a conjunction of L1-R1~L2+R2@L~-R~ OL3-R3 variables 
following (by the notation: operator ~). Then we empoly the 5. We can obtain an expression, PATH~ @ PATH2 
@ . . . @ PATHt for example, through the previous steps, where each PATHi (i= 1.. .t) is a combination 
CONE(Input(P)) = set of all the variable {F/, F;, .... F:} denotes conjunctions in Input(P). the of transformations 
joined together only by 0 s in dom(F/) denotes T1 x T2 x ... x T. if F: = El @ 91. E2 0 ...0 Em and 
Tj is the type of variable Ej for 6. Replace every single transformation within each l<j~n. path, say 
PATHi, by the post-condition of its cor­ dorn(Inpzd(P)) = dom(Ff) U dom(F~) U . . . U responding condition 
process to obtain the pred­ dom(F~). icate conjunction COPi and the final expression COP1 @ COP2 @ ... 
(3 COPt. For example, the Similar to Input(P) we can use the notation: path: CONE(Output(P)), dom(F~) 
and dom(Output(P)) to L1-Rl~L2- R2@... @Lt - Rt represent Based on the the corresponding properties of 
Output ( P). notation above the semantics of the con­ will be converted into dition process P can be 
expressed as: POST(P1) A POST(P2) A . . . A POST(Pk) VzEdOm(Input(P)) where k ~ n ing condition Li _ 
Ri. and Pi process (i = 1.. .k) is the correspond­of the single transformation C(P)(Z) ~ z!e~C~NE(O.tPut(P)) 
POST(P) (X, y) where 3! means exists exactly Obviously, one. qy~dom(e] ~ because 7. Obtain the final 
predicate disjunction by convert­ z!e~CONE(Output( P))~yEdom(e) POST(P) (Z, V) im­ ing: plies that output 
data bound to all the variables in ex- COPI 6 COP2 @ ...6 COP, actly able, one the variable execution 
conjunction in Output(P) of the condition process are avail­certainly into guarantees that a unique group 
of output data whose COPI v COP2 v ... v coPt corresponding variables constitute exactly this variable 
conjunction in Output(P) is available. Then let junction. the POST(P) Namely, be this final predicate 
dis- Because the FSMRSC tained by decomposing specification the unique of a system is ob­top level condition 
POST(P) = COP1 V COP2 V . . . V COPt process, the semantics of the top Ieve condition process, therefore, 
represents the semantics of the whole specifi­cation of the system.  Correctness proofs of FSMRSC specifications 
A correct specification should guarantee that for ev­ery legal input data of the top level condition 
process, the required output data must be produced. Legal in­put data means the input data must satisfy 
the pre­condition of the top level condition process and obey the principle of availability. Because 
the top level con­dition process is usually decomposed into sub-CDFDs, every such sub-CDFD must guarantee 
that the required output data can be produced for every legal input data in order for the whole specification 
to be correct. There­fore, the correctness of a CDFD depends on the correct­ness of all condition processes 
of which it consists. Considering the semantics of condition processes, we can establish the rules for 
such a correctness proof. Suppose z is a variable in a CDFD. We use f9P(z) to denote the condition process 
in the CDFD, say P, from which the data bound to x flows out. That is, x is an output variable of P. 
In addition, let the notation POST-(P)(z) denote the sub-post-condition, which in­cludes all possible 
occurrences of z, oft he post-condition of P. Formally, it can be obtained by using algorithm 4.1 aa 
follows. Algorithm 4.1: 1. Transform POST(P) to disjunctive normal form, say Cl V C zV ... V C n where 
Ci (i = l...n) is a predicate conjunction which is of the form rl A r2 A Art and each rj (j=l...t) is 
a relation expression, a negation of predicate or a quantified predicate. 2. Produce the partition {Al, 
AZ, .... Am} of the set {Cl, C2, ....Cn} such that: C i, cj G A~ ~ ~YES(O.tP.t(P)) v E. Ci AV ~c Cj 
where l~i<n, l~j~n, l~k~mand S(Output(P)) denotes the set of all the output vari­ ables occurring in 
Output(P). 3. Construct a corresponding predicate for every set of predicate conjunctions produced above. 
For exam­pie, let A~ = {Cj, Cj+l, . . .. Cj+/} (1 <j <~+~< n). Then the corresponding predicate, represented 
by A;, is constructed as: A; = Cj VCj+l V... Vcj+[ 4. For every predicate conjunction C i = rl Ar2A 
. ..Art. produce the partition {l?l, B2, .... Bq} of set {rl, rz, .... rt} such that:  ra, rj EBk = 
~V~S(O tPUt(P)) Y EC a A Y EC j where l<a<t, l<j<t and l~k~q. 5. Construct a corresponding predicate 
from every set of predicates in the partition produced above. For example, if Bk = {r], rj+l, .... r)+,} 
(1<j < j + 1< t), then the corresponding predicate, repre­sented by B;, is constructed as: B; = rj Arj+l 
A . .. Arj+/ 6. If there is an A; such that x EC A; and card(Ai) > 1, then let POST-(P)(z) = A:. Otherwise, 
find B; such that x EC B; and let POST-(P)(Z) = B;. where card(Ai) denotes the number of elements in 
Ai and zEC A; indicates that z occurs in the ex­pression A: (Likewise for z SC Bi ). However, if z is 
an input variable of the condition process P but not an output variable of any other condition processes 
in the same CDFD, then we use POST-(P)(Z) to denote the sub-pre-condit.ion of the parent condition process, 
say P1, of the condition pro­cess P. It is obtained by using algorithm 4.1 in which the notation POST(P) 
should be substituted by the pre-condition C(P1 ) of condition process f] and oui~ut(p) by ~nput(p). 
Definition 4.1 Let P be a condition process, Pi a con­dition process in the decomposition of P. Then 
Pi is a correct condition process if it satisfies the rule: Rule CP-1 VFCCONE(InpUC(P, )) F = ~1 @ X2G 
@Xn + (POST-(OP(ZI))(ZI) A POST-(OP(X?))(Z?) A A POST-(OP(rn))(~n) * c(~i)) where each Zj (i= 1.. .n) 
is an input variable of Pi. In fact, in the process of doing correctness proof for all condition processes 
in a CDFD, another two proof rules have to be used. They are expressed using Hoare notation [Hoare 73] 
as follows: Rule CP-2 ­ {c(P)} P {POST(P)} {c(P)}P {POST(P)A C(P)} As output variables in POST(P) are 
expressed in terms of input variables in Input(P), the pre-condition C(P) of condition process P which 
the input variables satisfy before the execution of P should be the background condition for POST(P) 
to be true after the execution of P. Rule CP-3 R*R1 R1 t-C(P) R 1-C(P)  where P is any condition process 
in a CDFD, R and RI are two predicates. The following is an example to show the principle of cor­rectness 
proof for a condition process. We need to prove the following assertions in order to prove the correctness 
of the condition process CO in Fig 2. 1. POST-(SR)(s~ ) F C(CO) 2. POST-(WR)(W1 ) F C(CO) 3. POST-(P)(t) 
t-C(CO)  Notice that POST-(P)(t) denotes the sub-pre­condition dome= t A card t>0 of condition process 
TCS. Here we just give the detail proof for the first assertion. The proofs for other two assertions 
are similar. Since C(SR) ~ cards >0 and POST-(SR)(S1 ), which is equal to POST(SR), is elemsl = s, using 
Rule CP­2 we obtain: elemsl=s Acards>O Because elem S1= s A cards >0 ~ card elemsl >0, card elem S1 
>0 ~ len S1 >0, and /en SI >01-C(CO), we have: POST-(SR)(S1 ) F C(CO). A more complicated example on 
correctness proof of specification can be found in [9].  Conclusions We have provided a formal method 
FSMRSC for re­quirement analysis by extending DeMarco data flow di­agram with VDM. Specifications produced 
using this method are both comprehensible to users and precise in semantics. Based on the formal foundation 
in FSMRSC, correctness of specifications is defined and can be proved before futher development is undertaken. 
Since dia­grams are employed and specifications are construc­tured based on data-driven approach, the 
readability and comprehensibility of FSMRSC specifications are su­perior to VDM specifications. Futher 
work is needed to build a software environment based on the method FSMRSC to support requirement specification 
construction and correctness proofs. Acknowledgments I am greatly indebted to John T. Latham of the 
Uni­versity of Manchester for his invaluable advice on this research. I should also thank Pete Fenelon 
and Christo­pher John Ho-Stuart of the University of York for read­ing this paper and giving me many 
helpful suggestions. Finally, a special word of gratitude goes to my wife At­suko for her help in the 
process of completing the re­search and this paper.  References <RefA>[1] A. Bryant, Structured Methodologies 
and For­mal Notations, Developing a Framework for Synthesis and Investigation , Proceedings of Z user 
Group 1989, Springer-Verlag 1990. [2] Tom DeMarco, Structured Analysis and System Specification , Yourdon 
Inc., New York, 1978. [3] Ed Downs and P. Clare etc., Structured Systems Analysis and Design Method , 
Prentice Hall Interna­tional Ltd, 1988. [4] M.D. Fraser et al, Informal and Formal Require­ments Specification 
Languages : Bridging the Gap , IEEE Transactions on Software Engineering, Vol. 17, No. 5, May 1991. pp 
454-466. [5] C.A.R. Hoare and N. Wirth, An Axiomatic Defi­ nition of the Programming Language PASCAL 
, Acts Informatica, Springer-Verlag Berlin, 1973. pp 335-355. [6] C .B. Jones, Systematic Software Development 
Us­ ing VDM , Prentice-Hall International(UK) Ltd, 1986. [7] C .B. Jones, Case Studies in Systematic 
Software Development , Prentice-Hall International(UK) Ltd., 1990. pp 271-291. [8] Shaoying Liu, Gradually 
Formal System Develop­ment Method , Proceedings of the International Con­ference on Systems Management 
90, Hong Kong, 11-13 June, 1990. pp 13-19. [9] Shaoying Liu, A Formal System Development Method and Automatic 
Production of Algorithms , Ph. D dissertation, University of Manchester, 1991. [10] L. Semmens and P. 
Allen, Using Yourdan and Z : an Approach to Formal Specification , Proceedings of the Z User Group 1990. 
Springer-Verlag 1991. [11] D.V. Steward, Software Engineering with Systems Analysis and Design , Wadsworth, 
Inc., Belmont, Cali­fornia 94002, 1987. pp 51-66.</RefA> 
			
