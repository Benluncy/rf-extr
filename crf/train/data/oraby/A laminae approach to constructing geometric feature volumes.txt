
 A laminae approach to constructing geometric feature volumes T. Lim J.R. Corney D.E.R Clark Hedot-Watt 
University Dept. of Mechanical and Chemical Edinburgh, Scotland (+44) 0131 449 5111 ext. 4353 Heriot-Watt 
University Dept. of Mechanical and Chemical Edinburgh, Scotland (+44) 0131 449 5111 ext. 4381 Heriot-Watt 
University Dept. of Mathematics Edinburgh, Scotland (+44) 0131 449 5111 ext. 3234 t.lim@hw.ac.uk j.r.corney@hw.ac.uk 
d.e.r.clark@hw.ac.uk ABSTRACT The limiting factor for the majority of reported feature recognition (AFR) 
algorithms lie in their inability to handle anything more complex than the restricted geometric domain 
of 2.5D machined components. This paper describes a novel approach to recognising shape features on models 
comprising both simple and complex ruled surfaces. Specifically, the paper describes how the concept 
of 3D-laminae enables feature volumes bounded by complex ruled surfaces to be constructed. This genetic 
feature recognition algorithm requires no predefined feature libraries and advocates the notion of neutral 
features, which separates the genetic features identified by the extraction algorithm from those (features) 
classified subsequently to suit a discrete domain. The work concentrates on identifying machinable volumes 
(for manufacture by CNC machines) and the classifications presented apply specifically to this context. 
However, because the algorithm is capable of handling complex ruled surfaces, it is envisaged that the 
proposed methodology will be applicable to industries involved with the manufacture of dies and moulds. 
 Keywords Feature recognition, Laminae, CAD/CAM, Geometric reasoning, non-2.5D geometry. 1. INTRODUCTION 
Shape blending, used by industrial designers to marry aesthetics and functionality, has been applied 
since the early 1930s in the design of streamlined automobiles, ocean liners, and consumer products [18]. 
Applied to geometric models, this essentially involves first establishing entity (e.g. vertex, edge, 
and face) correspondences and then interpolating the intermediate shapes Permission to make digital or 
hard copies of all or part of this work for personal or classroom use is granted without fee provided 
that copies are not made or distributed/'or profit or commercial advantage and that copies bear this 
notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or 
to redistribute to lists, requires prior specific permission and/or a fee. Solid Modeling 01 Ann Arbor 
Michigan USA Copyright ACM 2001 1-58113-366-9/01/06...$5.00 between them. The result defines a smooth 
transition (i.e. blends) from one entity to another [12]. In applications such as forging and the design 
of moulds, the requirement of these transitions (i.e. rate of taper, radius, etc.) fully define small 
regions of curved surfaces. While many techniques have been developed for identifying features from solid 
models, the vast majority of these still lack the ability to handle such complex transitions (i.e. blends). 
This may be attributed to difficulties in extending fundamental concepts such as edge vexity or surface 
orientation to non-2.5D geometry. For example, a radius blend occurring along the base of a pocket removes 
the vital loop of concave edges that hint at the presence of the depression. It has been widely accepted 
that features technology has a key role to play in CAD/CAM integration [9]. However, effective integration 
remains elusive as existing process planning systems make little use of solid modelers and rarely perform 
geometric computation [14]. AFR has long been seen as one way of interfacing CAPP systems with CAD data. 
The feature recogniser is often envisaged as simply outputting a set of features for a process planner 
with no feedback fi'om the planner [11]. For AFR to relate the CAD model and the computer-aided process 
planning (CAPP), it must be able to organise and decompose/group features into appropriate and 'manageable' 
machining volumes [8],[9],[24]. Both heuristics and/or human interaction can accomplish this. The objective 
here therefore is to design a feature recogniser capable of handling a wide variety of geometry, which 
outputs a set of neutral features. This set of neutral features can then be organised, decomposed and 
classified to suit a particular domain or field of interest. Because this work was motivated by the manufacture 
of mechanical components, the feature classifications presented are tailored for this application. The 
paper is structured in the following manner: Section 2 reviews feature recognition techniques used by 
some researchers. In Section 3, the method for extracting features and their reconstitution by lamination 
is presented. The classification of extracted features is briefly described in Section 4 while Section 
5 discusses the results of applying the new algorithm to 183 four test components. Finally, Section 
6 concludes the paper with a brief note on current limitations and future developments of the methodology. 
 2. PREVIOUS RESEARCH Four AFR mechanisms have regularly appeared in the literature, these are: volumetric 
(see [251, [31]), graph isomorphism, ruled- based and syntactic pattern recognition. Shah [25],[261 promulgated 
the two popular mechanisms employed by researchers in identifying features from Boundary models 03- rep) 
as either syntactic or graph-based. Syntactic pattem recognition relies on combining sequences of coded 
geometric primitives into an expression that represents a feature. Perhaps the most well known work in 
this area is the seminal presentation by Kyprianou [ 16] who coupled syntactic pattern recognition with 
graph representation. His concave-convex shape grammar enabled the identification of feature entities. 
Other syntactic approaches can be found in the work of Choi et al [2], Staley et al [28] and Jakubowski 
[131. While Staley and Jakubowski required that pattern primitives be in 2D line and curve segments, 
Kyprianou relied on the surfaces and edges as the basis. Significantly, this allowed the direct recognition 
of 3D features without the need for a 2D representation. Choi's approach was similar but could only recognise 
prismatic depression features. Graph-based feature recognition has steadily gained momentum since the 
'80s and is currently one of the most prevalent techniques [14]. Joshi and Chang [15] were among the 
first to introduce graph-based feature extraction from a B-rep solid model, Their Attributed Adjacency 
Graph (AAG) captured several different types of face adjacencies and relationships between sets of faces, 
while face-nodes and edge-arcs represent concave or convex angles between faces. Their assumption that 
a face forming convex angles with all its neighbouring faces does not contribute to any feature of the 
component allowed the decomposition of the AAG into sub-graphs, which are then analysed to determine 
the feature type. The potential for using graph theory as a basis of feature extraction from solid models 
was also noted by G-avankar et al [7]. He states that as "geometric and topological information are addressed 
using the formalism of graph theory" and goes on to describe how "one graph theoretic algorithm can enable 
extraction of all features belonging to a certain connectivity class in the face-edge graph approaches". 
During feature extraction a boundary model is decomposed into one- and two- connected features from its 
face-edge graph and classification of the extracted features is segregated into certain geometric and 
topological classes using graph theory. Several other researchers have also employed the concept of face-edge 
(or edge-face) graphs for feature recognition. De Floriani [4] described an elegant method to decompose 
the edge-face graph into sub-graphs to extract features. The edge- face graph (EFG) comprised cut nodes 
that correspond to a face in the model that splits the graph into two or more connected parts (bi-counected 
components). However, the algorithms for identifying the bi-connected components of a graph are extremely 
complicated. Furthermore, the identification does not provide a sufficiently detailed classification 
for manufacturing and engineering purposes. Comey and Clark [31 extended De Floriani's definitions of 
21/2D depressions and protrusions to allow multiply connected features to be recognised. Their algorithm 
is direction dependent and, given a selected aspect (i.e. tool approach direction), a heuristic is used 
to decompose the face-edge graph of the B-rep model into several disconnected components. The algorithm 
was initially restricted to planar-faced, single-sided components until Sormaz [27] and later Little 
[21],[22] both increased the efficiency and considerably extended the algorithm to enable the processing 
of cylindrical faces and multi-sided components. Neither Sormaz nor Little required feature libraries 
but their work was still limited in its ability to handle non-2.5D components. A recent study by Ji and 
Marefat [14] indicates that there are still many significant feature recognition problems open to research. 
Stefano [5] has also highlighted the fact that while much research centres on recognising machining features, 
casting features remain an important challenge. To extract casting shape features, Stefano first converts 
the B-rep model into a so-called face-based Boundary Representation model comprising a finite set of 
triangulated B~zier primitive surfaces (or patches). This representation scheme is also supported by 
a graph, referred to as a face-feature adjacency graph (FFAG) in which convex faces and features are 
considered as the same entity. It is similar to the edge-face graph described by Ansaldi [1]. Faces containing 
one or more concave patches are labelled as being concave faces. A breadth first search of the adjacency 
graph then reveals concave features, after which a genus evaluation is used to identify the features. 
For example, a genus zero represents a blind hole or protrusion. Initially the approach had problems 
when through holes were encountered but this was remedied by evaluating the volume of the feature --a 
negative volume indicating a hole while a positive value indicated a protrusion. The significance of 
this work is its capability of handling transitions (i.e. blends) and tapers. To alleviate the problems 
posed by transition features, other researchers have adopted a tool/resource-based approach. Gaines and 
Hayes [6] report on a tool-based, resource-adaptive feature recogniser known as CUSTOM-CUT. Their system 
accepts user-defined cutting tool profiles as input and automatically identifies areas of the component 
that can be cut using these tools. Tool profile segments are also labelled as 'cutting' or 'non-cutting'. 
To identify faces that require machining, the delta-volume is first obtained by subtracting the component 
from the stock. Cross-sections of the delta volume are then taken and their profiles matched to the tool 
profile. Feature recognition is accomplished by relating component geometry to the geometry of the cutting 
tools. This method is similar to trace-based approaches employed by other researchers such as Relgi [23] 
and Han and Requicha [101. 184 Another resource-based approach is that of Stage et al [29]. Their feature 
recognition algorithm generates feature primitives, which are operational sub-plans for sub-regions of 
a component. Critical to the feature recognition algorithm is the formulation of a Feature Primitive 
Table (FPT) derived using a number of rules, heuristics and constraints. A face-by-face analysis is performed 
to determine its machinability given a specific tool. Geometric reasoning is also applied to the solid 
model in order to identify 'dangling' faces. Rounded cutters (e.g. ball-end mill) typically create these 
faces in pocket corners. Researchers have also investigated integrated feature-based modelling and recognition 
environments. For example, Lee and Kim [17] proposed an approach for extracting machining features incrementally 
through feature conversion. Three types of design features are supported: depression, protrusion, and 
transition features. During design, feature information (stored in an extended B-rep model) and relations 
are recorded separately. The extended B-rep model holds attributes attached to each feature face while 
the feature relation model has a feature adjacency graph that indicates both parent-child and feature 
interaction relations. By examining attributes on the faces of a feature after a modelling operation, 
"real faces" produced by machining are identified. A generic naming scheme is also used to manage any 
topological changes caused by feature interactions. A three-step procedure is then used to extract machining 
features from design features. The first two steps involve pre-proeessing and converting a design feature 
to a machining feature while the last involves feature analysis. For transition features, conversion 
depends on the type of edges representing its profile. Transition features with convex profiles are converted 
to machining features; while a concave profile is used to select an appropriate cutting tool (e.g. a 
fillet-ended mill). To summarise this section, recent work on feature recognition has begun to address 
the issue of transition features. The work described here contributes to the feature recognition field 
in two ways: In contrast to many graph-based methods of feature recognition, the system described here 
does not search the B-rep directly. Rather, a network of adjacent entities (i.e. laminae) is obtained 
from the component model, and it is this graph that is queried for features. 2. The objective of this 
work is to expand the applicability of features to domains other than discreet machining process as, 
for example, in pressing, moulding and casting. Two consequences arise from this: first the system has 
to be robust in its handling of protuberances and second it also has to cope with complex face geometries 
bounded by "smooth" edges (e.g. blends). The literature survey also suggests that traditionally, feature 
recognition systems have been designed to extract depressions (or delta-volumes) as these typically define 
tool removal volumes. Consequently protrusion features have largely been ignored. A distinct difference 
inherent in moulded components is that the protrusions on the component define the geometry of depressions 
within the mouM or die. 3. THE L-ALGORITHM Here we will describe how the notion of laminas (see Section 
3.4) has been applied to feature recognition and volume construction. The process of forming cycles bonds 
the laminae together, enabling 3D solids to be created without the necessity for the sweeping of 2D profiles 
while enabling transitions to be correctly handled. Figure 1 illustrates this process for a component 
containing a pocket and a slot, both with sloping walls and fillets around the bottom of the depression. 
@ "..S-..   i /k j' (b)Santo ~n/t~ sogrnm~ (c) ,~tl of idor~f~d flmtur~ Figure I: Depression features 
identified on a non- 2.5D object. 3.1 Overview Essentially, the L-Algorithm generates laminae between 
pairs of vertical edges on vertical faces. Although having similar concepts to Little et al [21] (whose 
objective was to assist manufacturing engineers in the identification of a set of machining features), 
the L-Algorithm caters for a much wider domain. Potentially, the L-Algorithm can be applied to features 
associated with numerous manufacturing regimes (e.g. castings, forging, STL, CT scan, etc.). Four steps 
summarise the L- Algorithm: I) Obtaining aspects: The algorithm is direction dependent and requires an 
orientation vector prior to feature recognition and the generation of laminae. This vector is termed 
an aspect and is obtained by interrogating face normals and conical axes on the B-rep model. The root 
point of this vector also provides the location of an aspect (or datum) plane located external to the 
body. In the context of machining the aspect may represent a tool approach direction, whilst in forging 
or casting the aspect may represent the orientation of features orthogonal to the parting line. The aspect 
also dramatically reduces the search space and allows inaccessible faces on a component model to be excluded. 
Possible aspects are output in the form of an interactive list for manual selection (Figure 2). The key 
element of the aspect vector is that it enables faces on a model to be classified as vertical (within 
a tolerance) with respect to it (Figure 3). 185 2) Pairing edges: Similarly, corresponding edges can 
be classedas either on or offdepending on their sense relative to the aspect (Figure 4). This enables 
the pairing of on~off-edges on each individual face. 3) Generating laminae: Having identified all relevant 
faces and edge pairs, features are located by: ~' Taking sections through these faces to form laminae 
whose depth is determined by an initiating on-edge (seed-edge). ~" Aggregating sets of laminae together 
to form closed cycles that are then covered (laminated) to define 3D volumes. 4) Feature classification: 
The algorithm terminates with the classification of feature volumes. 0.1300000, 0.1300000, 1.O00000l 
0-000000. 0.000000.-I.000000} -1.000000, 0.000000, 0.000000) 1.000000, 0.000000, 0.000000) 0.500000, 
0.866025, 0.000000} -0.500000,-0.866025, 0.000000} 0.500000, -0.866025, 0.000000} -0.500000, 0.866025. 
0.000000} -0.707107. 0.000000. 0,707107} 0.707107. 0,000000,-0.707107] 10.707107, 0,000000. 0,7071071 
-0.707107. 0.000000. '-0,707107] Figure 2: Aspect selection user interface We now give detailed descriptions 
of the processes involved. 3.2 Obtaining vertical faces Vertical faces are defined by determining their 
orientation (as given by their normal vector or axis) relative to an aspect vector. From the list of 
aspects, the user selects one or more possible aspects as input to the L-Algorithm. Dihedral (or deviation) 
angles, O, are computed for each face in the geometric model between the selected aspect/s and the surface 
normal/axis. This allows pseudo-vertical faces to be identified by comparing 0 with a pre-set angular 
tolerance, a. Collections of pseudo- vertical faces are then placed into a list that can be represented 
by an adjacency graph. AS/~ct (a) Plannrteceflin,~,tir,~lleiz (b) ,~inericnlfncef2isvertiealt'all ~e 
~e~t et"~m' va~es cf e ere v~in ~e pfmet tolermce angul~ tolerance Figure3: Obtaining pseudo-vertical 
faces. Figure 3 shows two faces that are considered 'vertical' within an angular tolerance. Specific 
methods for classifying the orientation of planar and cylindrical/conical faces are provided as these 
are the most commonly encountered. This involves identifying those faces whose normal vector (or axis 
of generation in the case of cylindrical/conical faces), when compared with the selected aspect vector, 
lie within a pre-set angular tolerance (Figure 3-a). The orientation of non-planar faces however, is 
established by sampling surface normals along the bounding edges (Figure 3-b). The mid-point along each 
bounding edge of the face is used as the sampling location. The deviation angle between the surface normal 
at the sampling position and the aspect is then compared against the pre-set angular tolerance ,v 3.3 
Pairing on/off-edges Having identified the pseudo-vertical faces from which laminae will be generated, 
the next step involves classifying the edges of each face as either on or off. Note that a face can have 
any number of on and off edges but as explained in Section 3.4, a lamina, by definition, has only one 
of each. The L-Algorithm assumes a B-rep data structure in which each edge in a manifold model is associated 
with two co-edges, each lying on one of the two faces adjacent to that edge. Likewise, each face is bounded 
by a number of loops of co-edges whereby the 'external' loop of co-edges is oriented counter-clockwise 
while any internal loops are oriented clockwise. By traversing the external loop of co-edges, each co-edge 
is queried for its degree of vertical 'orientation' with respect to the selected aspect. This is achieved 
by calculating a general from-to (or chord) vector C between the start and end points of the co-edge 
and then determining the angle fl between this vector C and that of the selected aspect (Figure 4-b). 
More formally: fl = arc c°s(C'ak/CI) Where O is the degree of orientation 186 ak is the selected aspect 
(a unit vector) is the general from-to vector (chord vector) Thus, on computing and comparing fl against 
the pre-set tolerance angle ¢t, pseudo-vertical edges for each face can be determined. All pseudo-vertical 
edges for a given face are collected into a list. In order to determine whether a co-edge is on or off, 
its sense with respect to the selected aspect has to be determined. This is accomplished by taking three 
points, namely, the start-point Ps, mid-point Pm and end-point P, along each coedge, and computing their 
distances from the selected aspect. An on-edge is recorded if P, is closer to the root position of the 
aspect plane than Pm and likewise P= is closer to the aspect's root position than Pe (Figure 4-e). Off-edges 
are duly noted in the converse situation. All possible pairs of on/off- edges for each face are then 
collated and stored in a list to be used by the laminae generating module. Figure 4-a shows on- and off-edges 
on a typical pseudo-vertical face. ,   ',,, l// ~-I e(Im~ free b:p. ~#-<a DI<D2<~ Figure 4: Defining 
'vertical' On~Off-edges. (Note the general from-to vector, C, in (b)) 3.4 Generatinglaminae A lamina 
is defined as being a replicated portion of a face bounded by two planes. These planes are (1) normal 
to the aspect vector (2) located at the start and end points of a seed-edge (i.e. an on-edge). The orientation 
of a lamina is strictly controlled by the location of the seed-edge. Figure 5-a illustrates how two planes 
define the bounds and geometry of a lamina. Hence, the lamina is described both by the geometry of the 
face and by the bounding edges arising from intersections between the two planes and the face (Figure 
5-b). ATt Aspect Tap 1Mand ~ E4 " ~'~ ~" ~ ~d, icit direction or' len~a (" ~ m plan4 l½ s..d-=d ~ El 
i.~ e3 (On-Edge) ~.~Off--gd~e) F,~ce-~rnina E2 (a) 5) Figure 5: Defining a lamina. Two types of laminae 
are fundamental to the L-Algorithm: face- laminae (laminae lying on a face) and void-laminae (laminae 
that bridge gaps on a face), see Figure 6. Both types of laminae are generated by a function that creates 
a pair of interzecaon planes for each on-edge in the component model. In other words, each on-edge, in 
turn, acts as a seed-edge (which ultimately initiates the generation of lamina on faces throughout the 
model). A lamina adopts the geometry of the face from which it is created and so represents segments 
of the boundaries of possible features, their location and extent. Each lamina generated is stored in 
a list along with information describing its depth range or interval, references to the face and the 
on-edge (i.e. seed-edge) from which it was constructed. More importantly each lamina also contains an 
is_visited attribute which is initially set to zero (i.e. un-visited). Aspect 1 (a) (D) OWlldge h*$ ~e 
eK~r,~J m o ~ the (el (d) (e) Figure 6: Face-lamina and Void-lamina (NB: the seed-edge governs the interval 
or range of the laminae.) Lamina creation starts with a list of on/off edge pairs for each pseudo-vertical 
face. All laminae are oriented from a single on- edge to a single off-edge as illustrated in Figure 6. 
Note that the loop bounding a face-lamina is counter-clockwise in direction while a void-lamina is clockwise 
in direction. Laminae are generated twice during the recognition process: 1) To create laminae on the 
parent (i.e. owning) face of each on-edge (see Figure 6-a, -b, -c). 187 2) During the cycle finding process 
when the range of a given seed-edge is used to create lamina on other faces encountered during the search 
(see Figure 6-d, -e). The lamina generating function uses several API's [29] which are commonly found 
in geometric modelling kernels. For example, API's for building and covering a wire-frame body enables 
laminae to be generated quickly once their bounding edges have been established. Note that this function 
is called repeatedly until all possible laminae for a given face have been obtained. All laminae generated 
are stored in a lamina list. The collective functions for obtaining vertical faces, on/off-edge pairs 
and building laminae form the L-Generator (Figure 7). 1 o.t *.,tl.al r~e*. }i[; s Inpu,: I-R*p :r o 
utput: v *a~lH*e* ~. Ygs ~ ~ I ...................... I .,o 1 :?¢N......................... r: i G 
t i . ~ ....r I Ap~°nat*ml~.,a*,t* I o ~ltmt** *~*monts In I Llm Insa_L~l : elm fungi[on NIIt LQIIDBQ 
Figure 7: Flow diagram of the L-Generator. 3.5 Generating cycles from an aspect laminae graph (ALG) The 
contents of the lamina list can be represented by a graph termed an Aspect Laminae Graph (ALG), where 
nodes represent edges and arcs represent adjoining laminae. Since each lamina contains a record of the 
parent entities (faces, edges, etc.) used for its creation, cycle generation is a matter of searching 
and gluing adjacent laminae together. A seven-step algorithm used for this recursive process is summarised 
below: Step 1. Select a seed_lamina lamina from the ALG and set it as curr_lamina (i.e. current lamina). 
Mark it as 'visited' and set a global range object (pointer) to the range of seed_lamina's on-edge. This 
defines the current range value during this phase of the cycle generating process. Step 2. Find an adjacent 
lamina to curt_lamina in the ALG and set this adjoining lamina as next_lamina. Note that the adjacent 
lamina's on-edge is coincident with curr._lamina's off-edge. Call the function get lamina to generate 
a lamina using next_lamina's on/off-edge and surface geometry information but using the global range 
value. This ensures that laminae formed throughout the search process have a constant range. Determine 
whether next_lamina has partners" (i.e. other laminas that share its on-edge, Figure 8-b) and, if so, 
mark next_lamina as 'visited'. This ensures that duplication does not occur during the search for laminae 
adjacent to curr__lamina. Stitch (laminated) curr__lamina and next_lamina together. Step 3. Update curr_lamina 
as next lamina. Step 4. Determine whether the concatenated laminae form a close loop (i.e. a cycle). 
Step 5. If the sequence of laminae is not closed, then repeat Steps 2 and 3 until a cycle is obtained 
or laminae list is exhausted. Step 6. If a cycle is found, then determine whether it self- intersects 
(Figure 8-b) and also whether such a cycle already exists. This ensures that cycles are both valid and 
not duplicated. Only cycles that form a closed loop (i.e. the off-edge of the curt_lamina meets the on-edge 
of the seed-lamina) and do not self-intersect are considered valid. Step 7. Cover this cycle (forming 
a 3D volume). This completes the lamination process. Step 8. If the cycle contains laminae with un-visited 
partners then repeat Steps 1 to 6. Otherwise obtain the next seed lamina from lamina list and repeat 
Steps 1 to 6 until lamina list is exhausted. 3.6 Feature classification Feature volumes created during 
cycle generation are considered neutral as they are purely geometric and contain no information regarding 
process-specific application. In order to make these features meaningful in a machining context the classification 
module proceeds by evaluating the correspondence of each neutral feature to that of generic depressions 
and protrusions. This is accomplished by evaluating the mass property of the feature volume. A negative 
volume indicates a depression feature while a positive volume indicates a protrusion feature. Also, when 
viewed with respect to the aspect, cycles are either clockwise (i.e. a depression) or counter-clockwise 
(i.e. a protrusion). This orientation results from the search process (Figure 8-b). 188 /.1 L2 L2 Asp 
ec~t, d Nil: The circled on-edge has ~)artner'laminas ¢manting from it ......Facef "/ "'~..~//,I 5 Fae~mina, 
1.1 /.2 (a) Component (Note the direction of (b) Cycle search laminae indicated by the arrows.) Figure 
8: Illustrating the recursive searches for a cycle. In (a) the seeding laminae (i.e. LI and L2) of the 
list of laminae are related to face, fi In (b) the broad arrows indicate the direction of the cycle search 
and the larger of the two bold arrowheads indicate the seeding laminae while the smaller indicate the 
orientation of each adjacent lamina Once generic feature types are determined they are further classified 
through geometric interrogation, tests detailed in [20] (e.g. offsets, ray firing, etc.), and reasoning. 
Table 1 summarises the classification scheme employed: Llm~ina TyDe~(~L G%~m( ~ ;-Ue Bird ~ N, ,/ Throu~ 
1 ~ J C.tm#~lk 2 Ng J 1 ta # Br~ >, Nil / "i~ounh >1 Nil ¢ O~n ~lBind~ >1 >1 / U~dercut >1 i~ >1 1~2 
J U~c~cut >1 1~r2 ,/ Proile P¢~ Cont Jrf im[ Te~ On q~ aut quq Ou; On Oul Cut P~,k Bme J r~T~ Top On 
(p~ Oo J qn ~ qd J Out Q~ (;~ O~ (~0 x ~'t I Qut J / # J OqtOn Out Ouk Cut (;~ x Table 1: Schema for 
feature classification. Table l presents the generalised classification scheme for the features recognised. 
Notice that for counter-bore/sink holes (labelled as C-bore/sink in Table 1) there exist two face-laminae 
of which one represents the preparation diameter while the other represents the drilling diameter. This 
is the result of applying the merge operator to the neutral features during classification, which determines 
the concentricity of holes whose level (see ref. [19]) is adjacent in a top-down manner (Figure 9). Lev~ 
0 LevellO p retoarollc~ diameter J ~.d J D i~lin(i dlametef [ , F1 I H°lefeatumat LevelO I FZ Hole [eabJre 
at I~eve110 Figure 9: Illustration of levels, hole-components and diameters that constitutes a counter-bore 
feature. It is important to note that when the objective is to recognise features for the machining of 
components from blocks of stock, protrusion cycles are often of limited interest. In the production of 
moulds however, the locations and profiles of protrusions on the final component is important. 4. IMPLEMENTATION 
AND RESULTS The feature recognition system has been implemented in C++. It uses the ACIS ® modelling 
kernel [30] and experimental trials were conducted using an Intel ® P233 processor. The modus operandi 
of the algorithms is discussed in the context of four test components. 189 Component-I (Figure 11) is 
a triangular component model of an unfinished ashtray labelled as 'Tribowl'. The outer wails are sloping 
inwards with a taper often degrees, while the depression (inner portion) has an outward taper of five 
degrees. As illustrated, all corners have been blended to provide a smooth and flowing shape. This model 
shows a typical mould design with the majority of its geometry being non-2.5D. Figure 1 l-a is a screen 
dump of the Heriot-Watt Feature Finder user interface showing the 'Tribowl' component to the right and 
the features recognised in the feature browser to the left. Items in the browser can be expanded to reveal 
feature information such as volume, depth and the aspect from which it was recognised. Figure ll-b and 
10-c show various views of protrusion and depression features respectively. Component-2 (Figure 12) shows 
a typical injection moulded artefact -a plastic jelly mould. This model comprises spline, toroidal, cylindrical 
and planar faces. Both inner and outer surfaces exhibit complex blends, and apart from the basal sections, 
also have a tapering effect. Figure 12-a and b show the results of the L-Algorithm using a negative z-aspect 
to locate depressions while Figure 12-c and d are the results of protrusion recognition with a positive 
z-aspect. Both Figure 12-b and 11-d show the decomposed feature volumes in varying shaded bands. Component-3(Figure 
13) represents one of a set of eight mounts designed to support a sliding table. The center 'hump' has 
a T- slot and a U-slot cut into it. Such features incorporate undercutting or overhanging characteristics 
and can be produced by special cutters. In Figure 13-b these features are identified using an approach 
aspect vector, d. The left panel of Figure 13-d shows several further decomposed or alternative shape 
representations for the hump-like protrusion. Notice also that the T-slot has been decomposed into two 
pieces. This provides the process-planner a choice of either removing the material with two separate 
cutters (i.e. a slot mill followed by a T-cutter) or using a form-tool (i.e. a special cutter allowing 
both the slot and the undercut to be machine by a single pass). Table 2 shows the approximate times (based 
on the CPUs clock) taken for laminae and cycle generation phases for each of the example components. 
In general, the number and type of faces the component has governs the laminae generation time. ¢yckl 
9e¢~ T~I time Camponmt S4dmct~s ~ of flcu t.,imcr, u 6.52 Nund~w d ~ p4~li on ~mpoc4t f~ g~tlon (rain) 
and vallCqt~n (rain) flatunm (m~t) Trihowl 2 33 1.00 5 7.52 Jelmould 2 60 1.10 4.05 5 5.15 Slider.mount 
2 123 2.25 5A5 28 7.7 Table 2: Approximate times taken for identifying features for the select components. 
Thus, for a component with a majority of faces of spline type, more time is incurred. Likewise, the number 
of lamina affects the cycle generation phase --more time is required for cycle searching and validation. 
Similarly, during the classification, cycles whose profile contains spline curves take more time during 
offsetting. Further examples and a discussion of the algorithm's characteristics (i.e. complexity and 
completeness) can be found in [20]. 5. CONCLUDING REMARKS There are a number of directions the work 
presented above could proceed. Some of these are the subjects of current research. Among these are: 
An extension to the algorithm to enable the extraction of features with 'free-form' surfaces. This will 
allow applications of the algorithm not only in the domain of manufacturing but also for sculpturing 
and the enhancement of medical scans, etc.  Methods of extraction and classification of helical type 
features commonly generated by mill-turn machine tools are also being studied.  Optimisation of the 
algorithms to improve efficiency.  Figure 10: FLAPS Component The work presented here has its limitations. 
For example, feature volumes associated with the three U-shaped cut-outs (see Figure 10) are not identified. 
These are examples of open features not identified by the algorithm because void laminas are only defined 
between edges on a face's outer loop. In this case the void lamina required lies between separate faces. 
Thus, similar features (e.g. corner notches, steps, etc.) cannot be directly identified Another limitation 
is that the algorithm describe here is solely dependent on on-edges to determine a lamina's range. This 
hinders its ability to fully handle shapes generated with closed spline surfaces. The present methodology 
also applies a recursive routine for the building of cycles. This, and some of the other routines used 
for classifying and validating features, contributes to computational expenses. One method of reducing 
this overhead might be the application of facet hidden-line techniques for approachability testing. Here 
however there is a question mark as to whether features such as undercuts could still be identified if 
this approach was adopted. 190 6. REFERENCES <RefA>[1] Ansaldi, S., De Floriani, K. and Falcidieno, B. An 
Edge- Face Relational Scheme for Boundary Representations. Computer Graphics Forum No. 4, 1985, 319-332. 
[2] Choi, B.K., Barash, M.M. and Anderson, D.C. Automatic recognition of machined surfaces from a 3D 
solid model. Computer-aidod Design, Vol. 16, No. 2, 1984, 81-86. [3] Corney, J. and Clark, D.E.R. A feature 
recognition algorithm for multiply connected depressions and protrusions in 21/2 D objects. Proceedings 
Symposium on Solid Modeling Foundations and CAD/CAM Applications, ACM Press, 1991, 171-183. [4] De Floriani, 
1. Feature extraction from boundary models of three-dimensional objects. IEEE Transactions on Pattern 
Analysis and Machine Intelligence, Vol. 11, No. 8, 1989, 785-798. [5] Di Stefano, P. Automatic extraction 
of form features for casting. Computer-Aided Design, Vol. 29, No. 11, 1997, 761-770. [6] Gaines, D.M. 
and Hayes, C.C. CUSTOM_CUT: a customizable feature recognizer. Computer-Aided Design, Vol. 31, No. 6, 
1999, 85-100. [7] Gavankar, P., Chuang, S.H., Henderson, M.R. and Ganu, P. Graph-Based feature Extraction. 
Formal Methods in Design Workshop, Tue. Oct. 24, 1989, 167-183. [8] Gupta, S.K., Regli, W.C., and Nan, 
D.S. Manufacturing feature instances: Which ones to recognise? Third Symposium on Solid Modeling Foundations 
and CAD~CAM Applications, Rossignac, J., Turner, J. and Allen, G. (eds.). ACM Press, 1995, 141-152. [9] 
Han, J.H., Regli, W.C. and Rosen, D. Special panel session for feature recognition. Proceedings of 1997 
ASME Design Engineering Technical Conference. Sept. 14-17, 1997, Sacramento, California, DETC97/CIE-4423. 
[10] Hart, J.H and Requicha, A.A.G. Integration of feature based design and feature recognition. Computer-Aided 
Design, Vol. 29, No. 5, 1997, 393-403. [11] Han, J.H and Requicha, A.A.G. Modeler-independent feature 
recognition in a distributed environment. Computer-Aided Design, Vol. 30, No. 6, 1997, 453-463. [12] 
Hui, K.C. and Li, Y. A feature-based shape blending technique for industrial design. Computer-Aided Design, 
Vol. 30, No. I0, 1998, 823-834. [13] Jakubowski, R. Syntactic characterisation of machine part shapes. 
Cybernetics and Systems, Vol. 3, No. 1, 1982, 1- 24. [14] Ji, Q. and Marefat, M.M. Machine Interpretation 
of CAD Data for Manufacturing Applications. ACM Computing Surveys, No. 3, Vol. 24, Sept. 1997, pp264-311. 
[15] Joshi, S., and Chang, T.C. Graph-based heuristics for recognition of machined features from a 3D 
solid model. Computer Aided Design, Vol. 20, No. 2, 1988, 58-66. [16] Kyprianou, L.K. Shape Classification 
in Computer Aided Design. Ph.D. thesis, Christ College, University of Cambridge, Cambridge, UK, 1980. 
[17] Lee, J.Y. and Kim, K. A feature-based approach to extracting machining features. Computer-Aided 
Design, Vol. 30, No. 12, 1997, pp. 895-905. [18] Lichtenstein, C. and Engler, F. Streamlined, A Metaphor 
for Progress, Lars Muller Publishers, Switzerland, 1991. [19] Lim, T., Comey, J. and Clark, D.E.R. Exact 
tool sizing for feature accessibility. Int. J. Adv. Manufacturing Technology, Vol. 16, 2000, 791-802. 
[20] Lim, T. Lamina-based Feature Recognition and Applications in Manufacturing. Ph.D. thesis, Heriot-Watt 
University, Edinburgh, UK, July 2000. [21] Little, G., Clark, D.E.R., Tuttle, R. and Comey, J. The Heriot-Watt 
FeatureFinder: A graph-based approach to recognition. Proceedings of 1997 ASME Design Engineering Technical 
Conference., Sept. 14-17, 1997, Sacramento, California, DETC97/CIE-4276. [22] Little, G., Clark, D.E.R., 
Tuttle, R. and Comey, J. Delta- Volume Decomposition for Multi-Sided Components. Computer-Aided Design, 
Voi. 30, No.9, 1998,695-705. [23] Regli, W.C. Geometric Algorithms for Recognition of Features from Solid 
Models. Ph.D. Dissertation, University of Maryland, 1995. [24] Regli, W.C. and Gaines, D.M. A repository 
for design, process planning and assembly. Computer-Aided Design, Vol. 29, No. 13, 1998, 1019-1035. [25] 
Shah, J.J., Nan, D.S. and Mantyla, M. Advances in feature based manufacturing. Elsevier Science B.V., 
Amsterdam, 1994. [26] Shah, J.J. Assessment of features technology. Computer- Aided design, Vol. 23, 
No. 5, 1991, 331-343. [27] Sormaz, N., Clark, D.E.R., Corney, J. and Tuttle, J.R. A feature recognition 
algorithm for NC-machining. Product Modeling for Computer Integrated Design and Manufacturing. Pratt, 
M.J., Sriram, R.D. and Wonzy, M.J. (eds.). Chapman and Hall, UK, 1997, 223-233. [28] Staley, S.M., Henderson, 
M.R. and Anderson, D.C. Using syntactic pattern recognition to extract feature information from a solid 
geometric data base. Computers in Mechanical Engineering, Vol. 2, Sept. 1983, 61-65. [29] Stage, R., 
Roberts, C. and Henderson, M. Generating resource based flexible form manufacturing features through 
objective driven clustering. Computer-Aided Design, Vol. 31, 1999, 119-130. [30] Spatial Technology Inc., 
Three-Space, Ltd., and Applied Geometry, Corp., 2425 55 th Street Building A, Boulder, CO 80301-5740. 
ACIS ® Geometric Modeler Application Guide, Version 4.0, Issue 1, 1998. [31] CAM-I Current Status of 
Features Technology, Technical Report R-88-GM-04.1, Revised Nov. 1988.</RefA> 191  ......... I I iiiiii i 
iiiii ill ~l i I Aspect.d tii T Aspect..4 (a) The 'Slider-mount' component (b) Recognised features with 
aspect d. Selected features are hi.clhliahted in riclht Danel of the GUI. (c) Snapshot of two depression 
features identified with aspect --d. _=~nd (d) Feature decomposition. The left panel shows the decomposition 
of the central 'plateau' protuberance into various alternative shapes labeled as Pd. The right panel 
displays the depression features. Figure 13: Results of test Component-3 -the 'Slider-mount'. This component 
illustrates the capability of the algorithm in handling small- scale manufacturing features such as undercuts. 
193   
			
