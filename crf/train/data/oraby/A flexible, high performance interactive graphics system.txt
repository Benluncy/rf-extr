
 A FLEXIBLE, HIGH PERFORMANCE INTERACTIVE GRAPHICS SYSTEM R. J. Hubbold &#38; P. J. Bramhall Computer 
Graphics Unit University of Manchester, England ABSTRACT A computer graphics system with refresh and 
stor- age displays, flat-bed plotter, digitizer and film recorder is described. The software structure 
com- prises a device-independent, front-end graphics package and a driver program for each device. Two 
and three-dimensional vectors, hardware and soft- ware characters, transformations and windowing, picture 
segmentation, element and segment attrib- utes, and input from interactive tools, such as a light-pen, 
aresupported. The extent to which the system is used by different research groups shows that this is 
a very cost-effective way to provide computer graphics facilities. KEY WORDS AND PHRASES : computer 
graphics, graph- ics subroutine package, device-independent graph- ics. CR category : 8.2 I. INTRODUCTION 
 In 1974 the University of Manchester established a Computer Graphics Unit (CGU) to provide a cen- tralised 
interactive graphics facility for use by different departments. The decision to set up a centralised 
graphics system was taken principally on economic grounds. Many other universities and research establishments 
in the UK, and elsewhere, have expensive interactive graphics systems which are dedicated to specific 
research projects. Our feeling was that many of these systems were under- utilised and that a great deal 
of duplication of software was taking place. Centralised multi-disciplinary interactive graph- ics facilities 
have been and are being estab- lished elsewhere (e.g. Cornell University [i], University of Texas at 
Austin), but our system is unique in the UK. A major constraint on us was the amount of money available 
for equipment and staff (Â£i00,000 for equipment; 2 people for system development, maintenance, user 
documenta- tion and instruction, and everything else!). This paper describes the background to our 
work, our hardware and software. A general description of the graphics software which we have developed 
is given, covering user requirements and design goals, facilities implemented, software structure, and 
some performance details. We believe that this is an appropriate moment at which to do this, since our 
graphics software is similar in structure and capability to the SIGGRAPH core system [2]. 2. BACKGROUND 
2.1. Activities to be supported by the system  In defining and implementing our system we had to meet 
the requirements of a wide spectrum of users from different disciplines. Three specific activ- ities 
had been identified for which facilities were to be provided: Interactive graphics using a high-performance 
refresh display, with light-pen and other input tools, for computer-aided design and other high- ly interactive 
applications. Digitizing of information from maps, engineer- ing drawings and other diagrams. - Flat-bed 
plotting for large, high-quality graph- ical output. The diversity of projects meant that a flexible 
graphics system was needed, but one whose perform- ance would be good enough to enable its effective 
application in individual cases. Another require- ment was that the computer was to be operated in a 
"hands on" environment by the users. This made it essential to have a robust system, especially as we 
envisaged it being used by up to three people pur- suing unrelated activities concurrently.  2.2. Hardware 
configuration and operating system Figure 1 shows our present (April 1978) hardware configuration. 
 The Vector General is a Series 3 DD3 model with light-pen, alphanumeric keyboard, 16 function switches, 
i0 control knobs and direct-memory access interface to the PDP-II. At present, it does not have 3-D transformation 
hardware. The digitizer has a recording area 1.5m. by im. and is located physically next to the teletype, 
enabl- ing them to be used interactively together. The flat-bed plotter, also l.Sm. by im., features 
 analogue vector generation hardware for drawing  31a 224 KBYTES [ RKI  I OP I DQII E SYNCHRONOUS 
CORE [ DI: INTERFACE 1 PDP-II/45 l LAT- BED ] /VECTOR COPY ~GENERAL DIGITIZER PLOTTER 1 HARDI )] 
Figure 1 smooth lines and will draw at up to 10cm./sec. The DQll 9.6Kbaud synchronous link connects 
the PDP-11 to a large ICL 1906A/CDC 7600 configuration housed in the University's Regional Computer Centre 
and allows the PDP-11 to transfer files to and from the large machines and to submit jobs for running 
on the 7600. The configuration is run under the DEC RSX-IID op- erating system. RSX-IID is attractive 
for this kind of work because of its real-time features, its structure (which provides good protection 
and makes it easy to install and modify new device driver software), and its supporting software (e.g. 
com- pilers, editors, file system and utilities). 3. GRAPHICS SOFTWARE 3.1. Requirements and implementation 
considera- tions Many of our users had no previous experience with interactive computer graphics but 
needed to be able to make progress with their projects without fol- lowing a long and tedious learning 
process. For this reason, the graphics system had to he easy to understand by computer users without 
expert comput- er science knowledge. For similar reasons it had to be usable from programs written in 
FORTRAN IV, although we are well aware that there are other languages which are superior to it in may 
respects, and this constrained us to implementing a package of FORTRAN-callable sub-routines rather than 
a graphics language. The applications to be implemented on the equipment in the CGU required that the 
graphics package should have lines and characters as its basic elements rather than higher-level objects 
such as volumes and surfaces. Therefore, at least as a first step, we required the provision of comprehensive 
facilit- ies for the generation of these, together with a simple picture-structuring scheme, 3-dimensional 
transformations and windowing, and access to input tools. The package had to be small; it also had to 
be fast for both the generation of output and the handling of input because of the highly-interactive 
nature of many of the applications which would use it. In addition, it had to ensure that the integrity 
and operability of the environment and itself would not be jeopardised by faulty application programs 
or incorrect user actions, and to be capable of easy maintenance and extension. Because single programs 
would want to use differ- ent graphical output devices, it was important to have, as far as possible, 
a package with a device- independent user interface. This capability is most easily provided by implementing 
a package based on a device-independent front end together with a device-dependent back end for each 
graphical device. Such a structure and division of labour is similar to that described by the Core Definition 
Subgroup of SIGGRAPH's Graphics Standards Planning Committee. It also fits neatly into the RSX-IID operating 
system's concept of user-written, applica- tion tion-specific programs, incorporating sub- routines from 
a library to communicate with device drivers provided in the operating environment. 3.2. The Front End 
Packages available in Britain which support a meas- ure of device independence include GPGS [3] (and 
also GPGS-F), and GINO-F, [4] a commercially mark- ted package used widely in British universities. Because 
we wished to provide a service as soon as possible after the hardware arrived, we initially used one 
of these (GINO-F) as our front end. This provided many of the facilities our users required, but it is 
written in FORTRAN IV and we soon found it to be too large and slow for our PDP-II and Vector General. 
Additionally, we did not regard the facilities for handling input tools as satis- factory for our purposes. 
Consequently, we chose to write a new front end in PDP-II assembler to overcome these deficiencies whilst 
maintaining as far as possible the same interface to the user- written applications software. This is 
implemented as a library of FORTRAN-callable subroutines, the necessary modules of which are linked with 
user- written program modules by an operating system ut- ility during program development. The facilities 
 319 provided by the front end are as follows. 3.2.1. Device selection and release : Applications software 
may use one device at once, selected by calling a device-nomination routine. This initial- ises the relevant 
back end and arranges for subse- quent graphical input/output requests to be sent to it until the applications 
software calls another routine to release it. A device suspend/resume capability is also implemented. 
This permits an application program to switch between different de- vices, such as a display and plotter, 
and to re- sume operations on each one at the point where they were suspended. 3.2.2. Generation of 
graphical output : 2-dimen- sional and 3-dimensional vectors can be generated in a variety of line styles 
(solid, dashed, etc.), widths and colours. Applications software can choose between the generation of 
broken lines by the output device hardware or by software in the front end. Characters can be generated 
by hardware or software. Hardware characters are drawn at a size selectable from a range of sizes provided 
by the output de- vice. (In the case of the flat-bed plotter, they are actually implemented by its device 
driver, but this mechanism is transparent to the applications software and the front end). Software characters 
are continuously variable in size and aspect ratio and are optionally transformable. 3.2.3. Transformation 
and windowing : Transforma- tion (scale, shift, shear, rotate) in 2 or 3 dim- ensions of vectors, points 
and software characters are provided. Axonometric and perspective projec- tions of 3-dimensional objects 
are also supported. Transformations are implemented using homogeneous coordinate representation. After 
transformation, windowing can be performed in 2 or 3 dimensions to orthogonal planes paral- lel to the 
axes of the output device. The posi- tions of the window boundaries are variable. 3.2.4. Picture segmentation 
: A simple mechanism for the structuring of graphical output into a single level of picture segments 
is supported. Facilities for complex and hierarchical structures are not required by applications currently 
using this sytem, but provision has been made for a sec- ond level, comprising picture subroutines, to 
be implemented. At the moment, a segment is the only entity which may be created, extended (i.e. re- 
opened), deleted, replaced or identified by an in- put tool such as the light-pen. A segment also has 
a status (visible/invisible) and attributes (default brightness, etc.) which may be altered at any time. 
 3.2.5. Support for interactive input tools : Tools currently supported are the light-pen, control knobs 
(potentiometers), alphanumeric keyboard, func- tion buttons, sense switch mask, tracking symbol and refresh 
clock of the Vector General display. These are divided into categories, e.g. keys, positioner% valuators, 
identifiers, time clocks, and the front end contains one or more subroutines to handle each category. 
This provides a measure of independence from handling invidual tools directly and allows for extension 
to include new tools. Each category falls into one of two classes, namely, event-gener- ating tools, 
e.g. keys, and non-event tools, e.g. valuators. An event-generating tool is enabled when an input request 
is issued for it and disabled again as the request is satisfied. Normally, only one such tool is enabled 
at once, but a mechanism is also provid- ed which simultaneously enables more than one, e.g. function 
buttons and light-pen, and accepts data from whichever the operator chooses to use first. Non-event-generating 
tools may be read at any time without display operator action. Support for the different categories 
of tool will be implemented for the Tektronix in the near futur% but only upwards compatibility from 
the Tektronix to the Vector General will be feasible. 3.3. The Back Ends All the back ends, exept the 
one for the Tektronix 4010, are regarded by the RSX-IID operating system as device drivers. Each can 
be loaded into and re- moved from main memory to suit changing require- ments whilst the operating system 
is running. Back ends have been written for the following de- vices: 3.3.1. Tektronix 4010 storage 
tube : This uses the RSX-IID teletype handler as the device driver. A small routine linked into the applications 
software with the front end performs the necessary code gen- eration and transmission. 3.3.2. CETEC 
flat-bed plptter : This takes the form of a spo01ing system, as it is impractical to have such a slow 
device online to the application program. Commands received from the front end are processed and filed 
by a pseudo-driver; the file is read and used to control the device itself by a sep- arate device driver 
at a later time. 3.3.3. III FR80 film recorder : This device is lo- cated 150 miles away at the Science 
Research Council Rutherford Laboratory in Oxfordshire. Input to the FR80 is generated at the CGU on magnetic 
tapes which are mailed to the Rutherford Laboratory for proces- sing. The back end which writes these 
tapes is another pseudo-driver; it compiles optimised code to reduce the amount, of tape used and also 
looks after writing administrative and accounting data onto the tape. 3.3.4. Vector General refresh 
display : This is the most interesting, widely-used and complex back end. It contains code to receive 
commands from the front end, compile optimised display instructions, manage space in the display file 
(including garbage collection to concatenate free space), look after picture segmentation, enable input 
tools, service their interrupts and pass data from them to the front end. It also controls the display 
processor so that refreshing occurs at the required rate and organises interlocks so that no changes 
are made to items in the display file whilst the display pro- cessor may access them. In addition, it 
implements a facility for making a dump of the picture on the Vector General screen onto the T4010 (and 
thence to tSe T4610 hard copy unit if desired) or the flat- bed plotter, by interpreting the contents 
of the 320 display file. This facility is triggered from the Vector General alphanumeric keyboard and 
is totally independent of the front end and all applications software- it can thus be used to take a 
snapshot of the screen at any time regardless of the current state of the applications software. Many 
of the applications using the CGU have found this very use- ful.  The display file is contained in 
the Vector General device driver. There are two main reasons why it is not included in the application 
task's address space. First, the space available for application- specific code would be reduced. Since 
the limit imposed by the PDP-II hardware (64k bytes per task) is not generous for complex applications, 
any re- duction could cause serious problems. Second, there would be a much higher risk of it being cor- 
rupted by faulty applications software. Such an occurrence could easily cause the display processor to 
run wild and crash the operating system; this must be avoided in a multi-user environment.  3.4. Front 
end/Back end Communication The two parts of the graphics system communicate by means of the standard 
RSX-IID input/output mechan- ism. Output is assembled By the front end for transmission to the back end 
in batches in order to reduce the time lost by the communication overhead. Because these back ends are 
separate pieces of soft- ware with a well-defined interface to the front end, they can be used by other, 
user-written special- purpose "front ends" if required. An example of such a "front end" is a program 
written in Algol 68C for one particular application which required the Vector General display driver 
for picture segmenta- tion, display file compilation and management, input tool handling, arranging refreshing, 
etc., but which needed facilities different from those in the multi- purpose front end we had implemented. 
 3.5. Performance  3.5.1. Space : The space required by the front end linked into a user-written application 
program var- ies with the number of facilities called upon. Typ- ically it is 5 kbytes, including a Â½ 
kbyte buffer for assembling instructions to pass to the 5ackend. The size of the Vector General display 
driver's code and data is 9 kbytes, plus 20 kbytes allocated for the display file. 3.5.2. Speed : One 
measurement which can be made to determine the speed of the software is the rate at which output vectors 
can be generated; for the system described here it is a maximum of 800 per second. The main overhead 
on input is caused by the operating system and is of the order of 2 millisec~ ends per request. 3.5.3. 
Capacity : The Vector General can display about 4000 vectors Before flicker and swim Become an annoyance, 
depending on vector lengths. A 20 kbyte display file can hold about 5000 2-dimensional vectors, depending 
on the degree of optimisation the display file compiler has Been able to achieve and the number of segments 
the picture is divided into. 3.5.4. Ease of maintenance : Device drivers can Be changed as easily as 
user-written programs. There is no need to perform a new system generation to extend or change supported 
features. Because most changes and all extensions to a device driver do not affect the definition of 
the front end/back end interface, modifications to the back end usually require no complementary action 
by users; where this is not so, all that a user needs to do is to link the corresponding new version 
of the front end into his program. Modifications to the front end are incorporated into a user's program 
by the same simple process. 4. DIGITIZER SOFTWARE Input from the digitizer is supported by a separate 
library of FORTRAN-callable subroutines. Together with a device driver, these provide facilities for 
single point digitizing, stream digitizing (either equal time or equal distance intervals between points), 
correction of coordinates to allow for paper skew, and menu handling. Alphanumeric input/ output can 
be performed on an adjacent teletype. In most cases, recording of information on the dig- itizer and 
its subsequent display and manipulation are separate steps performed with different pro- grams. This 
is not because of any constraint in the software but because it is not usually justifiable to tie up 
a display terminal for long periods of time when it can be used more profitably by someone else. In any 
case, we have found that it usually pays to make digitizing as simple as possible in order to minimise 
errors. Nevertheless, calls to the graphics routines can be incorporated in digitizer programs in order 
to pro- duce a display or plot of the recorded information. This is employed By several projects in order 
that an operator can take a "snapshot" of the informa- tion recorded so far, in order to check and correct 
errors. 5. APPLICATIONS Forty people from fifteen different university de- partments are using the 
computer graphics system which we have described. They include the follow- ing disciplines (the list 
is far from exhaustive): Anatomy (analysis of human abnormality); Astronomy (galactic evolution); Computer 
Science (printed circuit board layout, computer animation, software research); Dentistry (orthodontic 
treatment planning); Engineering (simulation of atomic power stations, display of wind tunnel test data); 
Geography (thematic cartography); Geology (geophysical modelling); High-energy physics (.analysis of 
particle tracks); Radio astronomy (spectrum analysis); Urban research (traffic simulation, network an- 
alysis); X~ray crystallography (molecular structure anal- ysis); Zoology (reconstruction and analysis 
of insect nervous systems).  The majority of these make extensive use of the in- teractive capability 
of the Vector General and its supporting software. Many exploit the ease and rap- idity with which displayed 
picture segments can be updated to implement dynamically changing displays. 321 Examples of this include 
3-D rotation, representa- tion of time-dependent situations, and dynamic mod- ification of computed 
graphs and surfaces by a dis- play operator. Another popular technique is the use of light-pen menus 
to make programs easy to op- erate by technicians and non-computer staff. 6. EXPERIENCE TO DATE AND 
FUTURE PLANS The system which we have described has been in nor- mal operation since the beginning of 
1975. On av- erage it is now being used by one or more people at once for 9 hours per day, 7 days a week. 
Cur- rently, twenty-two projects are being pursued. Dividing the cost of all our hardware by this fig~ 
ure yields a cost per project of less than Â£5000, or about half the cost in the UK of a Tektronix 4014. 
 The progress made by our users, many of whom had no previous experience of computer graphics, seems 
to us to be due to two main factors. The first is that they have been able to concentrate on their applications 
and leave systems programming aspects to the staff of the Unit. The second is that the "hands-on" environment 
has encouraged them to learn about the system's capabilities and to apply them effectively, as well 
as fostering cross-fertilisa- tion of ideas between disciplines. We believe that successful use of our 
system to date has clearly demonstrated that a single, flexible graph- ics system can satisfy the requirements 
of a broad range of users and application areas in a highly cost-effective manner.  We have recently 
concluded an agreement with the Science Research Council which will result in sev- eral major new projects 
being undertaken in the near future. In order to cope with the increased load we are about to expand 
our system by adding 80 Mbytes of disc storage and more core store to the PDP-II, and refresh memory 
and transformation hardware to the Vector General. 7. ACKNOWLEDGEMENT Some parts of our graphics software 
are based quite closely on the GINO-F package. We are grateful to the Computer-Aided Design Centre 
for supplying us with that package under a special agreement. REFERENCES <RefA>I. Greenberg, Donald P. An 
interdisciplinary laboratory for graphics research and applica- tions. Computer Graphics, Volume II, 
No.2. 2. Status Report of the Graphics Standards Plan- ning Committee of ACM/SIGGRAPH. Computer Graphics, 
Volume II, No.3, Fall 1977.  3. Caruthers, L. C., van den Bos, J. and A. van Dam. GPGS a device-independent 
General Purpose Graph- ic System for stand-alone and satellite graph- ics. Computer Graphics, Volume 
II, No.2, Summer 1977.  4. GINO-F User Manual. Computer-Aided Design Cen- tre, Cambridge, England, December 
1976.   
</RefA>			
