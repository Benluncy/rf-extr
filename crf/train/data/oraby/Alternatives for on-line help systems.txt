
 ALTERNATIVES FOR ON-LINE HELP SYSTEMS T.P. Kehler and M. Barnes Texas Woman's University Denton, T~xas 
 1. INTRODUCTION As the distribution of the computing resource becomes more prevalent, alternative methods 
of pro-viding easy to use and easy to maintain interactive aids for users should be studied. This paper 
re-views some existing possibilities for help systems and proposes a series of steps for improving the 
interactive interface to users. We consider a hypothetical environment of a predominantly time- sharing 
facility providing services to multiple campuses over a large geographical area with a small staff for 
training and user services. It is assumed that general services are provided includ-ing the major programming 
languages, statistical packages, text editors, document formatting pack-ages, and so on. Each semester 
a series of user training workshops are conducted at each site, pro-viding a basic introduction to the 
rudiments of the operating system, text editor, and other basic ser-vices. The point of entry for the 
on-line help system is mainly to provide continued support and clarification for users who have received 
this ba-sic training or have had previous experience on a timesharing system. The focus of this paper 
will be to look at the basic topical areas of interest for a help system. Two perspectives are used to 
view support documents: i. The hierarchy of subjects related to system services such as editors, oper-ating 
system commands, and programming languages, and 2. The document keyword index. A specific set of subject 
areas is produced as a hierarchy for discussion and evaluation by indiv- iduals actively interfacing 
to computer users in a university environment. Primarily we are concerned with developing a foundation 
for system self-doc- umentation. 2. Evaluation Criteria for Help Systems Primary requirements for an 
on-line consulta-tion and documentation system are: - Ease of Use: The user should be able to find out 
things about the system with minimal training. Permission to copy without fee all or part of this material 
is granted provided that the copies are not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the 99 Ease of Maintenance: The consultation system should ideally 
use the same on-line documen-tation that is used for training workshops. Specifically, the 'User's Guide' 
that is printed and distributed by the computing center should be accessed via the consulta- tion system 
as well. The maintenance of special documents can lead to inconsistencies between the information presented 
in the printed document and that given by the con-sultation system. - Versatility: The system should 
adapt to use of different terminal types. 3. Overview of Approaches to Help Systems In a previous paper 
the authors developed an overview of the different approaches to on-line consultation systems (I). These 
systems are dis-cussed briefly in the following sections. 3.1 HELP files Typically the HELP file system 
is simple to implement, requiriflg only a program which reads a particular named file from a common area. 
On the DECsystem-20, HELP ? lists the names of all of the files in this common area. The system administra- 
tor may create as many different files as desired using a text editor. The HELP command is used by many 
systems to retrieve and display a specific file on request. For example, HELP BASIC displays the help 
file for basic. A difficulty with this system is that it is easily abused with help files unorganized, 
not up to date, written at a variety of levels of difficulty, and little topical infor-mation to guide 
the user to the desired goal. The user is often confronted with scanning large quan- tities of text trying 
to locate a particular item. 3.2 Menu Based Help In order to provide some structure a tree structured 
system of topics and subtopics is or-ganized as a hierarchy of menus. For example, the topic 'Programming 
Languages' is given a menu of all available programming languages on the system. Each of the languages 
are then given a menu with items like: Getting Started, Hints, Examples, and Available Documentation. 
Providing top down organization of help has been implemented in the INFO systems in the text publication 
and its date appear, and notice is given that copying is by permission of the Association for Computing 
Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 01980 ACM 0-89791-023-0/80/Ii00/0099/$00.75 
 editing system EMACS (2). An EMACS user may in- terrupt an editing session to make inquiries a- gainst 
the documentation about certain editor commands and then return to editing with disturbing the editor 
buffer contents. The EMACS INFO system has also been used to provide a general on-line help system at 
T.W.U. The difficulty with the info system is in the requirement for specially prepared files. A menu 
may point to a file and its nodes or it may point to a node within its file. Nodes and files must be 
consistently marked and named in the tree structure. Thus there is some problem in maintaining a documentation 
system of this type. A basic approach to human machine interaction using a menu driven approach has been 
developed in the ZOG system (3). ZOG uses an information net- work and menus as an interface to the user. 
The menu driven approach, using network linked files, can provide both subject hierarchy driven and key- 
word index driven inquiry into documents. The cost of such a system is the maintenance of the in- formation 
network and the file system management overhead.  3.3 Category-lndexed Help Systems may be organized 
by a specific scheme such as: - system name function format operation hints examples A 'category-indexed' 
system has been implemented on the DECsystem-20 as a GUIDE program to the use of the TOPS-20 operating 
system. 3.4 Linked-index Help An approach proposed in this paper is to ex-tend topically indexed help 
files like the category indexed files to a variety of links between topics. By this extension, we demonstrate 
that it is possi-ble to meet the users' needs by permitting the sel- ection of link types for a particular 
topical area. 3.5 Knowledge Based Systems A variety of 'expert' systems have been de- veloped over the 
years from research in artificial intelligence. The exploitation of the use of the very simple model 
presented by ELIZA where a set of keywords can be used to generate script responses has been done by 
Shapiro and Kwanzy in the devel- opment of an on-line consultation interface to a set of operating system 
commands (4). The applica- tion of other knowledge driven approaches to con-sultation with users will 
be discussed. 4. Introducing Structure into Help Systems 4.1 Typical Help Files Though the non-indexed 
file is the most ele-mentary approach to providing on-line help, it is the most widely used and can be 
improved by the use of directories to the various areas requiring help, For example, the help file named 
EDIT can contain a guide to a variety of files which discuss use of the text editor. The major problem 
with non-indexed files is the requirement that the user have a rather good idea of what to look for before 
the files are of much use. Browsing is time con-suming and often not very productive. Topical or-ganization 
of help files with directories to re-lated files improves the interface to the user. In addition, a standard 
limit on help file size (i.e. to 2 pages) facilitates the location of desired information.  4.2 Developing 
Indexes Development of an effective index or topical organization for a particular document is the pri- 
mary problem of all methods of providing help. With the constraint of using standard machine readable 
documentation, the requirement is shifted to providing a computable indexing procedure. !.!e assume that 
each application area will have an in-dividual who maintains the documentation and who is familiar with 
the subject area. Many documents used on timesharing systems are created using a document processing 
facility like RUNOFF or SCRIBE which provides a facility for creating key-word indexes. In this case 
the document specialist may mark words to be entered into the index. The resulting index may be used 
in creating an on-line inquiry facility into the documentation. HELPSYS, an on-line inquiry system for 
the programming sys-tem INTERLISP, uses this approach for obtaining the index. In addition to identifying 
index words, the relationship of these lexical items to a topical hierarchy for the subject area is of 
importance. For example, the indexed word 'FOR' makes sense in the context of the topic 'Loop Functions' 
for the language under consideration. Additional data on the frequency of occurance of the index word 
as well as the previous and next occurance of the in-dex word is relevant to the ease of use of a help 
system. Consider for a moment that a user is looking for information on the printer output command in 
the operating system. A minimum requirement of a help system is the facility to search the index word 
list using 'wild carding' to locate the parti- cular keyword. For example, in the GUIDE program, the 
user might go through the following procedure: GUIDE P? ;User types P? implying all words ; beginning 
with P. POP PRINT PUSH ;system responds with the ; known index word. GUIDE INFORMATION (ON) PRINT? ;index 
word identified, ; now review categories CHARACTERISTICS EXAMPLES FORMAT FUNCTION HINTS OUTPUT RESTRICTIONS~ 
At this point the user might select CHARACTERISTICS and after reading that want to index in all occur-ances 
of PRINT in the on-line user's guide. Here the link to next occurance and previous occurance are of importance, 
allowing the user to move for- ward and backwards in the document. The linked- index feature is not available 
in GUIDE, but is a-vailable in HELPSYS in INTERLISP, permitting the user to type in a keyword and then 
simply by i00 typing 'MORE' the user is able to move forward through the document to the various occurances 
of the keyword. HELPSYS does not use previous links. Notice that conceptual indexing requires both or-ganization 
of words into categories as well as es- tablishing relationships on occurances of words. In addition 
to the problem of indexing, there is the problem of deciding how much text to dis-play in the vicinity 
of the keyword. It is likely that the reader will, at times, want to continue on sequentially through 
the document. Thus a 'NEXT' command is needed which enables the reader to browse the document if desired. 
Before a comprehensive help system can be im- plemented, the problem of establishing effective indexes 
must be addressed. A hierarchy of cate-gories must be developed in conjunction with index sets for each 
document in the system. In order to do this, an anecdotal approach will be made using a mid-sized university 
timesharing system as a mo- del, mainly that of the T.W.U. facility. 4.3 The University Computing Center 
Environment Unfortunately, there is no substitute for carefully organized documentation. In the univer- 
sity environment, documents describing editors, programming languages, system commands, and appli- cation 
systems are used to provide the interface between the system and the user. Typically, there is a user's 
guide as well which addresses such de- tails as how to get an account and provides a gen- eral overview 
of the facility. In order to con-struct a hierarchy of categories of interest, we will propose a series 
of questions which a new user might ask. These questions will be identified by category-keywords(CKW). 
Q: How do I get an account? CKW: ACCOUNTS  Q: Who do I see for...? CKW: STAFF  Q: Where are the terminals 
?  Q: What are the systems phone numbers ?  Q: How do I log on ? CKW: ACCESS or TERMINALS or COMMUNICATIONS 
 Q: What is the system memory size?  Q: How many lines are supported? CKW: HARDWARE  Q: How do I get 
started? CKW: NOVICE or GETTING=STARTED  Q: What text editors are available? CKW: EDITORS  Other category 
keywords which may be intro- duced are: PROGRAMMING-LANGUAGES STATISTICAL-PACKAGES DOCUMENT-PROCESSORS 
OPERATING-SYSTEM-COMMANDS ELECTRONIC-MAIL COMPUTER-ASSISTED-INSTRUCTION BIBLIOGRAPHIC-MANAGEMENT GAMES 
A category like EDITORS will con%ain subcategories like: TECO EDIT TV EMACS which are some of the editors 
available on the T.W.U. system. In turn, EDIT would have subcate- gories like: CREATING-FILES MAJOR-MODES 
INSERTING DELETING SEARCHING NOVICE-COMMANDS EXPERT-COMMANDS The PROGRAMMING-LANGUAGE subcategories would 
be the names of the available languages on the system. Each programming language would have sub- categories 
like: COMMANDS GENERAL-DESCRIPTION USER-HINTS It is assumed that the function of on-line docu-mentation 
for a programming language is to provide usage hints for novices and experts and tO give a guide to more 
information. A hierarchy of system facilities can be cre- ated in this fashion. This hierarchy can be 
used as a guide in determining the overall coverage of existing documentation even before an automated 
on-line system is attempted. In the initial stages of this project it was a very enlightening exper- 
ience to go about looking at the on-line documen-tation in an organized fashion. Very little uni-formity 
in the documentation was found. An example hierarchy is given below --a portion of the T.W.U. facilities: 
(BIBLIOGRAPHIC-MANAGEMENT (BMS) (COMPUTER-AIDED-LEARNING (PILOT (COMMANDS OVERVIEW HINTS) (QUEST (COMMANDS 
OVERVIEW HINTS) (DATABASE-SYSTEMS (DBMS (COMMANDS OVERVIEW HINTS) (IQL (COMMANDS OVERVIEW HINTS) (DOCUMENT-PROCESSORS 
(RUNOFF (OVERVIEW COMMAND-SUM~RY HINTS) (SCRIBE (OVERVIEW COMMAND-SUMMARY HINTS) ELECTRONIC-MAIL (GAMES 
(ADVENTURE .... ) (GETTING-STARTED (ACCOUNTS STAFF ACCESS HARDWARE) (GRAPHICS (IGL (COMMANDS OVERVIEW 
HINTS) (EDITORS (EDIT i01  (OVERVIEW HINTS HELP EDICOM ret --produces a command (COMMANDS (DELETING 
SUBSTITUTING SEARCHING) (EMACS (OVERVIEW HINTS (COMMANDS (DELETING SUBSTITUTING SEARCHING) (TECO (OVERVIEW 
HINTS (COMMANDS...)(TV (OVERVIEW HINTS (COMMANDS...) (MISC (MLAB (COMMANDS OVERVIEW HINTS) (REDUCE (COMMANDS 
OVERVIEW HINTS) (PROGRAMMING-LANGUAGES (ALGOL (COMMANDS OVERVIEW HINTS) (APL (COMMANDS OVERVIEW HINTS) 
(BASIC (COMMANDS OVERVIEW HINTS) (COBOL (COMMANDS OVERVIEW HINTS) (CPL (COMMANDS OVERVIEW HINTS) (FASBOL 
(COMMANDS OVERVIEW HINTS) (FORTRAN (COMMANDS OVERVIEW HINTS) (LISP (COMMANDS OVERVIEW HINTS) (PASCAL 
(COMMANDS OVERVIEW HINTS) (MACRO (COMMANDS OVERVIEW HINTS) (SAIL (COMMANDS OVERVIEW HINTS) (SNOBOL (COMMANDS 
OVERVIEW HINTS) (OPERATING-SYSTEM-COMMANDS (ACCESS (FUNCTION HINTS EXAMPLES) (ADVISE (FUNCTION HINTS 
EXAMPLES) (APPEND (FUNCTION HINTS EXAMPLES) (ASSIGN (FUNCTION HINTS EXAMPLES) (...) (UNLOAD (FUNCTION 
HINTS EXAMPLE) (VDIRECTORY (FUNCTION HINTS EXAMPLE) ((STATISTICS (SPSS (OVERVIEW HINTS) (BMDP (OVERVIEW 
HINTS) (ISP (OVERVIEW HINTS) This hierarchy can be used as a check list in creating a simple non-indexed 
help file system. For example, if the user types HELP EDITORS, the follow- iing display appears: Editors 
available are: EDIT -the system standard editor (line oriented). EMACS - a comprehensive video display 
editor from MIT TV - a video display editor (TECO based) TECO - a buffer oriented editor. For additional 
HELP type HELP followed by one of the editor names. For further information on EDIT, the user types HELP 
EDIT and obtains: Help on EDIT through a command summary and hints for use (through tutorials) is available 
in the following files: summary. HELP EDCAI1 ret --produces an introductory tutorial for novices. HELP 
EDCAI2 ret --produces an intermedial tutorial. In addition to the guide provided for the user on a specific 
file, a file called HELP-FILES can be placed in the help area to explain the hierarchy of categories 
to the user, indicating what files are available and giving a basic roadmap to the exist- ing documentation. 
By using a structured approach to developing help files, particular problems such as completeness of 
the documentation and consisten- cy as to the level of difficulty of the documenta- tion can be better 
identified. The hierarchy of categories can be used to make the best of the simple non-indexed help file 
system. However, the user is still left with the difficult task of a considerable amount of browsing 
until familiarity with the system is achieved.Know- ing where to look is a difficult task that is only 
mildly aided by establishing a hierarchy of cate-gories. Thus, problems with synonyms, paraphrase and 
intent still exist. 5. Design of a Model Help System A system, called HELPME, has been designed to allow 
the documentation specialist to explore al- ternative indexing approaches for a particular sub- ject 
area. The HELPME system uses a linked-index approach to provide an index to a particular stan- dard machine-readable 
document. HELPME consists of an indexing program (used by the documentation spec- ialist) and an inquiry 
program for the general user. The indexing program establishes the relevant key words to be used via 
an interactive session with the documentation specialist. Occurences of key words are linked, providing 
a cross referencing feature for the user. In addition, a distance con-cept is used to look for occurences 
of keyword ~ groups in the document (1). Experimentation with HELPME is in a preliminary stage at present. 
The intent is to provide categorically driven as well as keyword driven inquerles. Ultimately, the is- 
sues of paraphrase and user intent must be incor- porated in such a system. 6. Conclusions The shift 
from highly centralized computing systems to distributed,often unattended,timesharing systems places 
a requirement on the availability and ease of use of on-line documentation. Systems must be able to explain 
themselves. Much of the effort in developing useful help systems revolves around the user services component's 
understanding of the user's needs and the available resources. This intuitive understanding must be translated 
in- to an explicit representation, i.e. structured doc- umentation including a hierarchy of the type 
pre- sented in this paper. Some progress can be made with existing help file systems by using a struc- 
tured approach to developing help files. Additional work is needed in standardized approaches to pre- 
paration of documentation by the specialist. In 102 addition, development of easy to use interfaces 
be- tween the documentation and the user are needed. References <RefA>I. T.P. Kehler and M. Barnes, Design 
for an On- Line Consultation System, AEDS Proceedings, 1980. 2. Eugene Ciccarelli, An Introduction to 
the EMACS Editor, M.I.T.A.I. Memo 447, 1978. 3. G. Robertson, D. McCracken, and A. Newell, The ZOG Approach 
to Man-Hachine Connumication, Technical Report CMU-CS-79-148, Computer Science Department, Carnegie-Mellon 
University, Pittsburgh, PA., Oct. 1979. 4. S. Shapiro and Kwans~, 'Interactive Consulting Via Natural 
Language', CACM, August 1975, 18, 8,  p. 459.</RefA> 
			
