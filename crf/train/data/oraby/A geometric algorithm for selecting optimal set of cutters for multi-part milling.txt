
 A Geometric Algorithm for Selecting Optimal Set of Cutters for Multi-Part Milling Zhiyang Yao Satyandra 
K. Gupta Dana S. Nau Mechanical Engineering Department Mechanical Engineering Department Computer Science 
Department and Institute for Systems Research and Institute for Systems Research and Institute for Systems 
Research University of Maryland University of Maryland University of Maryland College Park,MD-20742 College 
Park,MD-20742 College Park,MD-20742 +1-301-405-6572 +1-301-405-5306 +1-301-405-2684 yaodan@Glue.umd .edu 
skgupta@eng.umd.edu nau@cs.umd.edu ABSTRACT For the manufacture of milled parts, it is well known that 
the size of the cutter significantly affects the machining time. However, for small-batch manufacturing, 
the time spent on loading tools into the tool magazine and establishing z-length compensation values 
is just as important. If we can select a set of milling tools that will produce good machining time on 
more than one type of parts, then several unnecessary machine-tool reconfiguration operations can be 
eliminated. This paper describes a geometric algorithm for finding an optimal set of cutters for machining 
a set of 2½D parts. In selecting milling cutters we consider both the tool loading time and the machining 
time and generate solutions that allow us to minimize the total machining time. Our problem formulation 
addresses the general problem of how to cover a target region to be milled with a cylindrical cutter 
without intersecting with the obstruction region; this definition allows us to handle both open and closed 
edges in the target region. Our algorithm improves upon previous work in the tool selection area in following 
ways: (1) in selecting cutters, it accounts for the tool loading time, and (2) it can simultaneously 
consider multiple different parts and select the optimal set of cutters to minimize the total manufacturing 
time. Keywords Milling Cutter Selection, Computer-Aided Process Planning. 1. INTRODUCTION Increasingly, 
the manufacturing industry is moving towards high part mixes, which makes it important to reduce setup 
and tooling operations. For example, if a machine-tool is not configured to accommodate more than one 
part within a part family, then large amounts of time will repeatedly be spent on reconfiguring the machine-tool 
(i.e., loading new tools and fixtures into the machine-tool) each time a request is received for manufacturing 
a Permission to make digital or hard copies of all or part of this work for personal or classroom use 
is granted ~4thout fee provided that copies are not made or distributed for profit or commercial advantage 
and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, 
to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Solid 
Modeling 01 Ann Arbor Michigan USA Copyright ACM 2001 1-58113-366-9/01/06...$5.00 different part. Such 
reconfigurations are the major source of inefficiency in small batch manufacturing. If a machine-tool 
was configured from the beginning to accommodate several different parts within the part family, much 
of the cost of reconfiguring the machine-tool could be avoided. This will require considering all of 
the parts that need to be produced during the given operational period, and selecting tools and machine-tool 
configurations that can work for multiple different parts. In the milling operation domain, it is well 
known that the size of the milling cutters significantly affects the machining time. Therefore, in order 
to perform milling operations efficiently, we need to select a set of milling cutters with optimal sizes. 
It is difficult for human process planners to select the optimal or near optimal set of milling cutters 
due to complex geometric interactions among tools size, part shapes, and tool trajectories. Furthermore, 
in small batch manufacturing, both tool loading time (i.e., the time spent on loading tools into the 
tool changer) and machining time (i.e., the time spent on performing milling operations) are equally 
important. Most existing cutter selection algorithms select milling cutters by minimizing the machining 
time and do not account for tool loading time [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]. In most cases, 
the existing algorithms will recommend using a different set of cutters for each new type of part. Since 
most machine-tools can only hold a limited number of tools at one time, this means that we will need 
to reconfignre the machine-tool (i.e., we will need to change the set of tools in the tool magazine) 
before machining each new type of part. When the batch size is small, reconfignring the machine-tool 
before machining each type of part may significantly reduce the throughput. However, if we can select 
a set of tools that can be used for more than one type of part, then several unnecessary machine-tool 
reconfiguration operations can be eliminated, thereby increasing the throughput. This paper describes 
a geometric algorithm for finding an optimal set of milling cutters for machining a given set of parts. 
In selecting milling cutters we consider both the tool loading time as well as machining time and generate 
solutions that allow us to minimize the total manufacturing time. Our tool selection algorithm improves 
upon the previous work in this area, in the following manner: (1) in selecting cutters it accounts for 
tool loading time, and (2) it can simultaneously consider multiple different parts and select the optimal 
set of cutters to minimize the total manufacturing time. 130 Cutter library ........ ) Get 2D profile 
from 3D parts(Section 3. I). ) For each cutter, find how much of area it can cover(Section 3.2). f Tool 
Setup Time, Cutting Parameters ~_~ Choose an optimal set of cutters by solving least-cost path problem(Section 
4). / ., , ~ , ,, _ ,, Figure 1: Overview of Our Approach Currently our algorithm is restricted to 2½D 
milling operations. In particular, we consider the problem of selecting a sequence of cylindrical cutters 
to cut all of the points in a 2½D target region without cutting any of the points in a 2½D obstruction 
region [15]. This approach allows us to handle both open and closed edges. The steps of our approach 
are as follows. Given a set of available cutters, we first compute how much of the target region each 
cutter can cut. We do this by finding the set of all possible permissible locations for the tool, and 
then computing the total area covered by the tool at these permissible locations. 1 Next, we represent 
the problem of finding an optimal sequence of cutters as a least-cost path problem, and use Dijkstra's 
algorithm to solve it. Our overall approach is shown in Figure 1. 2. PROBLEM FORMULATION The milling 
problem is the problem of taking one or more pieces of stock and using a sequence of one or more milling 
operations to remove portions of each piece of stock, in order to produce some desired set of parts. 
Each milling operation is performed using a milling cutter, and our research focuses on the geometric 
aspects of selecting those cutters. In previous work [15], we looked at the case where only one milling 
operation was to be used, and developed an algorithm for finding the optimal cutter for this operation. 
However, in practical milling problems, it is more typical to use more than one milling operation, using 
a 1 This problem is computationally similar to the problem of computing the offset for a 2D point set, 
and previous approaches for this problem have been based on the use of the offsetting operators traditionally 
available in solid modeling systems. However, in this paper we show that use of traditional offsetting 
operators will not always produce correct results, and in Section 3.2.2 we show what modifications are 
needed to make those approaches correct. different cutter for each operation--and that problem is the 
subject of the current paper. Let P be one of the parts that needs to be produced, and let S be the piece 
of stock from which P is to be produced. We will assume that S-* P (i.e., the portion of S that needs 
to be removed to produce P) is a 2½D solid (this assumption holds for many milling operations). In this 
case, the cutter selection problem can be reduced to a 2D problem by considering any cross-section of 
the 2½D solid. Within this 2D cross-section, we define the region to be machined as the target region 
T (a region is a set of 2D points). In addition to the target region, there is an obstruction region 
0 that is the region that the cutting tool should not cut during machining. An example is shown in Figure 
2. The target region and the obstruction region must both be regular sets, each of which may consist 
of a number of non-adjacent sub-regions: T= T 1 ~ ... u TM', O=O 1 u... uO N. In this paper, we assume 
that the boundary of each sub-region consists only of line segments and segments of circles. Let C be 
a rotating cutter of radius r(C) located at some point p=(x~v). If we hold C stationary while it is rotating, 
then C will cut a circular region R(C,p) = {all points (u,v) such that ~/(u - x) 2 + (v - y)2 < r(C) 
}. We will call R(C,p) the set of points covered by C at p. If we move C while it is rotating, then C 
will cut some region larger than R(C,p). In this paper, one of the things we will want to find is the 
set of all points in T that can be cut by C. There are several different non-equivalent ways to define 
what this set is. As we discussed in [15], the best one for our purposes is as follows. A pointp is apermissible 
location for C if the interior of R(C,p) does not intersect with the obstruction region, or 131  (a) 
Stock (b) Final Part r .................... Target Region, T Obstruction Region, 0 (c) Target and Obstruction 
Regions Figure 2: Examples of the stock, final part, target region, and obstruction region. equivalently, 
if O n* R(C, p) = 0. A set of points can be safely covered by C if for every point p in the set, there 
is a permissible location of C that covers p. In most cases, the length of the cutter path associated 
with a cutter will decrease as the cutter size increases, and therefore it will take less time to cut 
a given area. However, due to geometric restrictions, a large cutter may not be able to safely cover 
the entire target region--and thus one or more smaller cutters will be needed to cut the remaining portion 
of the target region. In multi-cutter selection problems, multiple milling operations are used, each 
with a different milling cutter. The bigger cutters are used first, in order to cut material as fast 
as possible. Then, smaller cutters are used to create the smaller features of the target region. The 
total machining time T M for the sequence of milling operations is the total time needed from the time 
that the stock is loaded into the milling machine, until the time that the finished part is produced. 
T M can be expressed as TM = Tct+ Tcc+ Tcl , where Tct is the total real cutting time (the time spend 
on moving cutters to cut the profile); Tcc is the total cutter change time (the total time of changing 
tools during machining all the parts); and Tcl is the total cutter loading time (the total time spent 
on loading and calibrating all selected cutters before machining given parts). Since cutter change time 
is significantly smaller (of the order of 5 seconds) compared to cutting time and cutter loading time 
(of the _ Profile Shows Target and Obstruction Region - Upper Surface Profile fl - Bottom Surface Profile 
f2 4- 3-D Model Figure 3: Example of profile extraction 132  Target Obstruction ~=KcA ~ Cutter C A'= 
K A(O,C) Region T Rec, ion O ! I (a) (b) (e) Figure 5: A ease where using the offset operator to 3.1 
An Algorithm for Extracting 2D Profile To estimate the coverable area automatically, we will need to 
extract the target and obstruction region from the CAD model. To see how we extract the target region 
and obstruction region, consider example shown in Figure 3, in which we have a 3D model of a rectangular 
part whose faces are parallel to the xy, yz, and xz planes. As shown in the figure, this part has a single 
feature, which is a blind 2½D milling feature which is located in the part's top face. To find the target 
region and the obstruction region, we extract two cross-sections that are parallel to the xy plane: a 
cross-sectionf 1 at the top of the part, and a cross-section f2 at the bottom of the feature. The obstruction 
region is fl, and the target region is f2 -*fl. 3.2 An Algorithm for Finding Coverable Area 3.2.1 Definitions 
Lemma 1: Given a cutter C of radius r(C), the target region T and obstruction region O, the set of non-permissible 
locations A(O,C) for C is given by: A(O,C) = {p: 3 q E O, distance(p,q) < r(C) }. Proof: For every point 
p in A(O,C), 3 q e 0 such that distance(p,q) < r(C). Therefore, q will be in the interior of R(C,p). 
Thus, R(C,p) c~* 0 ~ 0. Hence every p in A(O,r) is not a permissible location of C. [] Lemma 2: Let A 
be the complement of A(O,C). Every point in the set A is a permissible location. Proof:. Letp be a point 
in ,~. Let q be the closest point in O top. Since A(O,C) contains all points whose minimum distance to 
O is less than r(C), it follows that distance(p,q) > r(C). Therefore, q is either outside of R(C,p) or 
on the boundary of R(C,p). Thus, (c) .......................... t ' D " B (d) computeA' results in 
a correct value for B. R(C,p) n* O = O. Hence every p in A is a permissible location of C.o Lemma 3: 
Let E(A,C) = {p: 3 q a A, distance(p,q) < r(C) }. Then for every pointp in E(,4,C), there is a permissible 
location q such thatp can be safely covered by C at q. Proof: Let p ~ E(A,C). Then there is a point q 
in ,~ such that distance(p,q) < r(C). Therefore, pc R(C,q). Since q is in A, it follows from Lemma 2 
that q is a permissible location. Therefore, p can be safely covered by q. [] Lemma 4: Let ~be the complement 
of E(A,C). For every p e ~', there is no permissible location for C to cover p. Proof'. Let p be any 
point in ~, and suppose we can find a permissible location q such that R(q,C) covers p. Then from Lemma 
1, it follows that q is not in A(O,C) and hence is in A. Since R(q,C) covers p, this means that distance(q, 
p) < r(C). Thus p is in E(A,C), which is a contradiction since p is in L =. [] Theorem 1: Let D = T-* 
E(,4,C). Then for every p E D, there is no permissible location for C to cover p. Proof: Since D is a 
subset of 1~, this theorem directly follows from Lemma 4. [] Theorem 2: Let B = T -* D. Then for every 
p ~ B, there is a permissible location for C to cover p. (Thus we will call B the coverable region of 
C). Proof: B is a subset of E. Therefore, this theorem directly follows from Lemma 3. [] Figure 4 shows 
an example in which A(O,C), A, E(A,C), ~, D and B are gwen.  3.2.2 Algorithm 134  Let A be the area 
of the coverable region B. A is the coverable discussion of this below) area of using C. From the definition 
and lemmas introduced in 2. A=cA(O,C) (c is the operator to compute complement, and Section 3.2.1, we 
know that if we can find D, then we can get B we assume that the universal set is a large rectangular 
area and then we can compute A. Our algorithm for doing this is as that contains A) follows: 3. From/i 
and C, get E(A,C) COVERABLE_AREA_FINDING(C, O, 7') 4. £--~E 1. From O and r(C), get the 2D point set 
A(O,C) (see the Target Obstruction Region T Cutter C Region 0 A'= i¢ A(O, C) K c A' (notice that this 
is ;~ A) di 2a,,,~ ;!,,~: iii (a) (b) (c) Incon l-..... ----"------7 " " "* value I ti .... Incorrect 
value i for D Ineorr ! i value r i ! i Incorrect value I for B Regio~ ineom i omitte E (d) (e) Figure 
6: A case where using the offset operator to compute A' results in an incorrect value for B. Obstruction 
,4 includes the line Target The open edge that was Region T Cutter C Region O A(Open Set) segment. .~g 
in F: ...... ; I L .........................  (a) (b) (c) ]ii~i .....................ilil :ii~iiii~ 
In this example, D= ii:i:iiiii ii~ !~~andthusB=T. liiiii~iiiiiii I !iiiiiiiiiiill I I I I i I iii!i! 
f ! t (d) (e) Figure 7: A correct way to compute B for part shown in Figure 6 135 5. D = r -* E( A, 
C) 6. B"T-* D  7. Return A = the area of B Except for Step 1, all of the above steps are standard geometric 
operations, and descriptions of them can be found in geometric modeling books such as [4]. However, Step 
1 is more problematic. It involves computing A(O,C), whose definition is similar to the "offset" operation 
found in popular geometric kernels, but with an important difference. A(O,C) is set of points that are 
less than distance r from the obstruction region. Most offset operators compute the set of points that 
are less than or equal to distance r from the given region. Therefore the set A(O,C) is an open set, 
whereas the offset operation produces the closed set A' = r,A(O,C) (where 1< is the closure operator). 
In many cases, A = KcA'. In such cases, Steps 1 and 2 of the COVERABLE AREA_FINDING algorithm can be 
replaced with the two steps shown below (for an example, see Figure 5): 1 '. compute A' using the offsetting 
operation 2'. A -KcA' In fact, Steps 1' and 2' seem so obvious that they are standardly used in algorithms 
for computing the area of B [9,10]. However, there are a few cases in which Steps 1' and 2' will lead 
to incorrect results. For example, suppose that the part is the same as in Figure 5 but the cutter's 
radius is as shown in Figure 6. In this case, ,4 is not equal to ~cA', because ~:cA' does not include 
the additional edge shown in Figure 7(b) and 7(c). As a result, if we use Steps 1' and 2' instead of 
1 and 2, Step 3 will compute an incorrect value for E in that leaves out the "omitted region" shown in 
Figure 6(d). Thus, if we use Steps 1' and 2' instead of 1 and 2 in the COVERABLE_AREA_FINDING algorithm, 
we will get an incorrect value for B. In our current implementation of COVERABLE AREA_FINDING, we use 
the following approach to compute a close approximation of B. We use Steps 1' and 2', but instead of 
offsetting O by the radius r, we offset O by a distance r', where r' --- r - 6 (with 8 > 0 and 6 << r). 
This can overcome the problem with the "omitted region" illustrated in Figure 6, but only if the value 
of E is chosen carefully so that another "omitted region" does not occur elsewhere. We are currently 
extending our implementation to compute set A(O,C) exactly. This requires computing open sets and performing 
Boolean operations on open sets.  4. FINDING OPTIMAL SEQUENCE OF CUTTERS FOR MULTI-PART In cutter selection 
problems, we are given a set of parts associated with corresponding stocks, and a set of available cutters. 
We need to select a subset of the initial set of cutters such that by using the subset to perform machining 
operations, the given set of parts can be produced from the corresponding stocks in the shortest possible 
total machining time. Recall from Section 2 that we are given a sequence of cutting tools (CI,C2 ..... 
Cn), listed in decreasing order of cutter radius; we are given one or more pieces of stock (S1 ..... 
SL) from which we need to produce a corresponding set of parts (P1 ..... PL); and the problem is to find 
a subsequence (C*I,C* 2 ..... C'm) of (C1,C 2 ..... Cn) such that if we use C*I,C* 2 ..... C* m in the 
order given, we can minimize the total machining time TM.. We now define the workpiece state Ft" J. as 
follows. Forj=l ..... L, let Foj = Sj, and for i=1 ..... n, let Ftj be the state of the workpiece that 
results after using the cutter Ci, under the assumption that we use Ci to cut as much of Tj as it can 
safely cut. From this definition, it follows that for every t>0, Qj is equal to the set of points in 
Tj that cannot be safely covered by C i. The reason for this is that any cutters that we used prior to 
C i are larger than C i, and thus the portion of Tj that they can safely cut is a subset of the portion 
of Tj that C i can safely cut. For the given set of parts (P1, ..., PL), we define the composite state 
1~ to be (Ft'0,/'il ..... FiL ). Thus there are n+l composite states TO,...,F n. Since C n can completely 
cover all of the target regions, F n represents the set of all of the final part shapes. Let B/j = Tj 
-* Qj, and let Alj be the area of Bty. (As a special case, note that BOj = Tj -* l"oj = Tj -* Sj = 0, 
and thus AOj = 0.) Then the safely coverable area for the composite state/~ using cutter Cj is given 
by L   4=E¢ j=l Let G be the directed graph whose node set is (F 0 ..... Fn) , and whose edge set is 
{(Ft',D) : i <j}. Each edge (/'~,Fj') corresponds to the operation of using the cutter Cj. to produce 
Fj directly from Ft'. For each edge (Fi,Fj), we want to assign a cost w(Fi, Fj) that estimates the cost 
of performing that operation. We will define w(Ft.,Fj') as follows. As discussed in Section 2, the cost 
of performing the operation is Tel + Tct, where Tel is the cutter loading time and Tct is the cutting 
time. An average value for Tel is usually determined experimentally, and we can estimate Tct as follows. 
Since the Figure 8: Problem Representation 136 Part P4 Part P] Part P2 Part P3 Figure 9 : Example 
Parts cutter C i has already been used to cut a coverable area A i of 4, the cutter Cj will only need 
to cut the area Aj -A i in order to produce Q. The time needed to cut Aj - A i can be estimated as k 
x (Aj -Ai)/r./, where k is a factor determined by machining parameters. Thus, we define w(/~,Q) = Tel 
+ k x (Aj-,4i)/rj'. Since F 0 represents the initial stocks (S 1 ..... SL) and 1"n represents the final 
parts (P1 ..... PL), any path in G starting from _F0 to ['n represents a cutting sequence in which the 
final parts can be produced form the initial stocks. Because the cost of every edge in G represents the 
estimated machining time needed to go from one state to another, any valid path in G has an associated 
total estimated machining time, which is the sum of the path's edge costs. If we can find the least-cost 
path from ['0 to Fn, this will give us the sequence of cutting operations that minimizes the total estimated 
machining time. Using Dijkstra's algorithm, this least-cost path can be found in time O(n 2) [3]. 5. 
IMPLEMENTATION AND EXAMPLES We have implemented our algorithm, using C++ and the ACIS ® kernel. As an 
example, Figure 9 shows parts P1, P2, P3 and P4. In this example, we are given 10 cutters (C 1 ..... 
C10 ) and their radii are 2.5mm, 5 mm, 7.5 mm, 10 mm, 12.5 mm, 15 mm, 17.5 mm, 20 mm, 22.5 mm and 25mm. 
We first get the 2D profile for Coverab&#38;Area Coverable Area/Cutter 16000.00 14000.00 12000.00 ~ ~ 
. _ . 10000.00 8000.00 6000.00  4000.00 -I '" " ~ -'-" ~  ooooo 1, each part as described in Section 
3.1. After that, we use the algorithm described in Section 3.2.2 to get the covetable area for each cutter 
and part combination. Based on these results, Figure 10 gives a chart showing the relationship between 
the sizes of the cutters C I ..... CI0 and the total area that each cutter can safely cover. After we 
get all the coverable area values, we use the approach described in Section 4 to find the best combination 
of cutters. Figure 11 shows the resulting answer. In Section 1, we pointed out that the best combination 
of cutters is likely to be different than what we would get by selecting optimal cutter sets for each 
part individually. As an illustration of this, Figure 12 shows what cutters we would have chosen if we 
had selected optimal cutter sets for each part individually. If optimal cutter sets are generated for 
each part individually, then the total number of cutters selected will be 7 (their radii are 2.5 mm, 
5 mm, 7.5 mm, 10 mm, 12.5 mm, 17.5 mm and 20 mm). As shown in Figure 13, the total machining time used 
by these cutter sets will be 290 minutes. In contrast, by considering all parts together, the total number 
of cutters needed is only 4, as shown in Figure 12 (their radii are 2.5 mm, 7.5 mm, 12.5 mm and 20 mm). 
As shown in Figure 13, the total machining time by using cutters selected by considering multi-part simultaneously 
will be 205 minutes. Thus, the total time saved by using multi-part cutter selection approach is (290-205)/290 
= 29.3%. Size chart "~ " 0.00v , , , " , " , -, ' , -" , -" , - 2.5 5 7.5 10 12.5 15 17.5 20 22.5 25 
Figure 10 : Cutter Size/Coverable Area Chart 137 Coverable Area of P1 ---a-- Coverable Area of P2 Coverable 
Area of P3 Coverable Area of P4 Coverable Area of All Parts Cutter Size  ea=Co=" 0 0 Cutter's Radius 
: 25 22.5 20 17.5 15 12.5 10 7.5 5 2.5 Figure 11: The Optimal Cutter Set Generated by considering all 
parts simultaneously (cutter loading time is 20 minutes) Least'C°st Path 0 0 0 0 0 0 0 O~O-~ for Pl: 
 Least-Cost Path 0 0 0 ~ 0 0 O for P2: Least-CostPath 0 0 ~ 0 0 0 0 for P3: Least-CostPath 0 0 0"-""" 
0 0 o for/'4: Cutter's Radius : 25 22.5 20 17.5 15 12.5 10 7.5 5 2.5 Figure 12: Optimal Cutter Sets 
for Individual Parts (cutter loading time is 20 minutes) Manufacturing Time Comparison Minutes / 320 
[] Tcc of P1 240 / Tccof P2 r3 Tccof P3 160 / D Tcc of P4 80 / [] Td of Selected Cutters BTM o / Considering 
Individual Part Considering Multi-Part Figure 13: Comparison of Total Machining Time by Considering Four 
Parts Individually and Considering Four Parts Simultaneously Another interesting observation is that 
if the tool loading time 6. DISCUSSION AND CONCLUSION changes, the optimal cutters may change. In particular, 
the lower In order to stay competitive in today's market, companies need to the cutter loading time, 
the higher the total number of cutters in eliminate as many sources of manufacturing inefficiency as 
the optimal sequence may be. For example, as shown in Figure possible. One such source of inefficiency 
comes from 14, if we take the previous example and change the cutter loading unnecessary machine-tool 
reconfiguration operations. time to 10 minutes, then the number of cutters in optimal cutter In this 
paper, we describe a way to select an optimal set of set will be 5 rather than 4. Similarly, the higher 
the cutter loading cutting-tool sizes such that the cutting tools can be used for time, the lower the 
total number of cutters in the optimal multiple different parts, thereby eliminating unnecessary machine 
sequence. Meanwhile, the time saving will also be higher when tool reconfigurations. In particular, this 
paper describes the considering multiple parts together compared to consider parts following new results: 
individually because the shared cutter loading time. 138 Least-Cost Path: Cutter's Radius : 25 22.5 
20 17.5 15 12.5 10 7.5 5 2.5 Figure 14: The Optimal Cutter Set Generated by considering all parts simultaneously 
(cutter loading time is 10 minutes) 1. We describe mathematical conditions for determining the region 
that can be covered by a given cutter, and discuss a problem with previous formulations of those conditions. 
Based on our conditions, we give an algorithm (not yet implemented) that can compute the coverable area 
exactly, and another algorithm (implemented) that can compute a close approximation.  2. We show how 
to represent the multi-part cutter selection problem as the problem of finding the least-cost path in 
a directed graph. 3. We describe a prototype implementation of our approach, and demonstrate it on an 
example. The example illustrates how significant savings can be achieved in the total machining time. 
  We plan to extend our work in the following areas to overcome current limitations: 1. We plan to implement 
the algorithm mentioned in Item 1 above. 2. Our current estimate of cutting time assumes that it is 
proportional to the ratio of the covered area and the cutter size. In practice, the cutting time will 
also depend on the cutter path. We plan to develop a better algorithm for estimating cutting time, by 
incorporating tool-path considerations. 3. Tool life plays an important role in tool selection. We plan 
to incorporate tool-life information in order to develop a more realistic estimate of total machining 
time. 4. So far, we have only considered geometric constraints in the cutter selection problem. We plan 
to extend our method to incorporate milling process constraints as well.  7. ACKNOWLEDGMENTS This research 
has been supported in part by NSF grants DMI9896255 and DMI9713718, by AFRL grant F306029910013, and 
by a semester research award from the University of Maryland General Research Board. Opinions expressed 
in this paper are those of authors and do not necessarily reflect opinion of the funders.  8. REFERENCES 
<RefA>[1] S. Arya, S. W. Cheng and D. M. Mount. Approximation algorithm for multiple-tool milling. Proc. Of 
the 14 th Annual ACM Symposium on Computational Geometry, pp. 297-306, 1998. [2] M.Bala and T.C.Chang. 
Automatic cutter selection and optimal cutter-path generation for prismatic parts. International Journal 
of Production Research, 29(11), 2163- 2176, 1991. [3] T.H. Cormen, C.E. Leiserson, and R.L. Rivest. 
Introduction to Algorithms, The MIT Press/McGraw Hill, 1990. [4] C. M. Hoffmann. Geometric and Solid 
Modeling: An Introduction, Morgan Kaufman Publishers, 1989. [5] Y.S. Lee, B. K. Choi and T. C. Chang. 
Cut distribution and cutter selection for sculptured surface cavity machining. International Journal 
of Production Research~ 30(6), 1447- 1470, 1993. [6] K. Lee, T. J. Kim and S. E. Hong. Generation of 
toolpath with selection of proper tools for rough cutting process. Computer-Aided Design, vo1(26) 822-831, 
Nov. 1994. [7] Y. S. Lee and T. C. Chang. Application of computational geometry in optimization 2.5D 
and 3D NC surface machining. Computers in Industry, 26(1), 41-59, 1995. [8] Y.S. Lee and T. C. Chang. 
Automatic cutter selection for 5- axis sculptured surface machining. International Journal of Production 
Research, 34(4), 977-998, 1996. [9] T.Lim, J.Comey, J.M.Ritchie and D.E.R.Clark, Optimising automatic 
tool selection for 21/2D components. In Proc. DETC 2000:2000 ASME Design Engineering Technical Conference, 
Baltimore, MD, September 10-13, 2000. [10] T.Lim, J.Comey and D.E.R.Clark. Exact tool sizing for feature 
accessibility. International Journal of Advanced Manufacturing Technology, Vol. 16, pp.791-802, 2000 
[11] B. Mahadevan, L. Putta and S. Sarma. A feature free approach to tool selection and path planning 
in 3-axis rough cutting. Proceedings of First International Conference on Responsive Manufacturing, Nottingham, 
pp.47-60, September 1997. [12] Ganping Sun, Fu-Chung Wang, Paul Wright and Carlo Sequin. Operation decomposition 
for freeform surface features in process planning. In Proc. DETC 1999:1999 ASME Design Engineering Technical 
Conference, Las Vegas, Nevada, September 12-15, 1999. [13] D. Veeramani, and, Y. S. Gau. Selection of 
an optimal set of cutting-tool sizes for 2.5D pocket machining. Computer-Aided Design, 29(12), 869-877, 
1997. [14] D.C.H. Yang and Z. Han. Interference detection and optimal tool selection in 3-axis NC machining 
of free-form surface. Computer-Aided Design, Vol.31, pp.303-315, 1999. [15] Zhiyang Yao, S. K. Gupta 
and Dana Nan. A Geometric Algorithm for Finding the Largest Milling Cutter. SME's Journal of Manufacturing 
Processes. To appear, 2001.</RefA> 139  
			
