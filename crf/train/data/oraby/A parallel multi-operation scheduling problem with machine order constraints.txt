
 A PARALLEL MULTI-OPERATION SCHEDULING PROBLEM WITH MACHINE ORDER CONSTRAINTS Weizhen Mao Department 
of Computer Science The College of William and M~ry Williamsburg, VA 23187-8795 wm@cs.wm.edu KEYWORDS 
Job scheduling, parallel processing, network routing, on-line algorithms. ABSTRACT In this paper, we 
define a multi-operation job schedul- ing problem with parallel machines. What makes this problem unique 
is the added machine order constraints, which require that only certain machine orders be used for the 
execution of jobs. We study the complexity of the problem and analyze two on-line greedy heuristics. 
In addition, we explore the relation of our scheduling problem to a network routing problem. 1 INTRODUCTION 
The scheduling problem we consider in this paper be-longs to the class of multi-operation schedulin 9 
problems [7], in which the execution of a job includes multiple op- erations to be performed by machines 
of different types. These scheduling problems often arise in industrial man-ufacturing, production planning, 
and computer control [1]. For example, consider a large automotive garage with specialized workshops 
[5]. A car may require the following work: replace exhaust system, align wheels, and tune up. Since the 
three corresponding workshops are in different buildings, it is impossible to perform two operations 
for a car simultaneously. When there are many cars requiring services at the automotive garage, it is 
desirable to construct a service schedule that takes lhe least amount of total time. To distinguish our 
prob-lem from the classical multi-operation scheduling prob- lems, we call ours the parallel multi-operation 
schedul- m9 problem, where parallel machines, instead of a single machine, are available to perform a 
certain type of op- eration. "Permission to make digital or hard copies ot" part or all of this work 
for 9crsonal or classroom use is granted without fee provided that copies arc not nadc or distributed 
for profit or commercial advantage and that copies bcar his notice and the full citation on the first 
page. Copyrights lbr components this work owned by others than ACM must be honored. Abstracting with 
"rcdit is permitted. To copy otherwise, to republish, to post on servers or to cdistribute to lists, 
requires prior specific permission and/or a fee." 1997 ACM 0-89791-850-9 97 0002 3.50 In our parallel 
multi-operation scheduling problem, there are m types of machines, T1,...,Tm, providing services to n 
independent jobs, J1,..., J,~. In the paral- lel processing environment, each set Ti contains ki ma-chines, 
Mia,...,Mik,, of the same type and probably with different speeds (although in this paper we assume that 
all machines of the same type are identical). For each job J3, its execution consists of m operations 
to be performed by one machine of each type, in the opera- tion order of T1,..., T,,~. In other words, 
job Jj will be executed by machine M1~1 of type T1, then by machine M2~2 of type T2, etc., and finally 
by machine M,~j,~ of type Tin. The entire executio~a of a job must be sequen- tial and strictly in the 
given order. However, it is up to the scheduling algorithm to decide which machine Mij, of type 7", to 
use for the ith operation, but theoretically, j~ can be any integer between 1 and k~. Let p[.lj, Ti, 
M,t] be the processin 9 (execution) time of job Jj on the lth machine l~,Iitof type T,, for 1 < j _< 
n, 1 < i < m, and 1 < l < k,. For notational simplicity, we will sometimes use p[3, i, l] for the same 
definition. So far, the problem described is no different from the previously studied hybrid flow shop 
scheduling [6], which is a multi-operation scheduling problem with par- allel machines and a fixed operation 
order to be fol-lowed by all jobs. However, what makes our prob-lem different and likely more difficult 
is the so-called machine order constraints imposed on the problem in-stances, which arise in situations 
where some machines of different types may be geographically isolated or mu- tually incompatible so that 
they can not be chosen si- multaneously for the execution of one job. For example, if job Ji chooses 
machine :1111 of type T1 for its first op- eration, and 3Ill and machine :~I23 of type T.2 are not compatible 
to be used by the execution of the same job. then job Jl is not allowed to use M23 for its second op- 
eration. To enforce the constraints, we define a set of feasible machine orders, called F, where each 
element in F is an m-tuple, representing one possible machine order that may be used for the execution 
of jobs. Set F is given as a parameter of the problem instances. We define the above scheduling problem 
as an op-timization problem by employing the makespan of a schedule as the objective function. The goal 
is to con-struct a schedule with the minimum makespan, i.e., the minimum total elapsed time from the 
start of the first job to the completion of the last job in a schedule. 473 We organize this paper 
as follows. In Section 2, we give an NP-completeness proof of the problem. In Section 3, we define and 
analyze two on-line heuristics based on greedy strategies. In Section 4, we exi~lore the relation of 
the scheduling problem to network routing. Finally, in Section 5, we make our conclusions. COMPUTATIONAL 
COMPLEXITY In this section, we restrict our attention to the deci-sion problem, i.e., given a bound B, 
is there a solution to the parallel multi-operation scheduling problem with the makespan no larger than 
B? In particular, we con- sider several special cases of the problem. First, we observe that when there 
is only one ma-chine of each type, i.e., ki = 1 for 1 < i < m, and F = {(Mll, My_l, . .., Mini )}, the 
problem degenerates to the classical NP-complete flowshop scheduling problem [4]. Secondly, when m = 
1 and F = {(Mll),(M12) .... , (~'/lk~)}, the problem then becomes the single-operation multi-machine 
scheduling problem, which is also NP-complete [3]. Next, we assume that the processing time of any job 
on each machine is either 1 or co, i.e., p[j, i, l] is 1 or o~, for 1 _< j _< n, 1 < i < m, and 1 < l 
< ki. Since its NP-completeness is not as obvious as the pre- vious two special cases, we provide the 
proof in the fol- lowing theorem. THEOREM 1 The parallel multi-operation scheduling problem with machine 
order constraints is NP-complete even when the processing time of any job on ec4ch ma- chine is either 
1 or ~. Proof Consider the NP-complete timetable design [2]. Given a set of three work hours H ---- {hi, 
h2, ha}, a set of craftsmen C = {cl,c2,..., cm}, and a set of tasks l" = {tl,t2 ..... t,~}. Let A(c) 
C_ H be the available hours for c C C, A(t) = H be the available hours for t C T, and R(c, t) = 0 or 
1 be the required work hour for c E C on t E T. The problem asks to define a function f: C x H x T --{0, 
1} such that (1) f(c,h,t) = 1 only if h C A(c); (2) Vc. Vh, there is at most one t for which f(c,h, t) 
= 1: (3) Vh, Vt, there is at most one c for which f(c,h,t) = l; and (4)Vc, Vt, there are exactly R(c,t) 
values of h for which f(c, h, t) = 1. Let us define an instance for our scheduling prob-lem. Assume there 
are two types of machines, in Tl and T2, respectively. Each machine in T1 is represented by a craftsman-hour 
pair and 7"1 = {(e,h)lh E A(c)}. Each machine in /'2 is represented by an hour-task pair and T2 = {(h,t)lh 
E A(t)}. For the feasible machine orders, let F = {(P,q)IP = (c,h) E T1,q = (h,t) E T2}, i.e., each element 
(pair/order) in F consists of two ma- chines whose representations share the same work hour. For each 
R(c.t) = 1. we create a job, represented by the corresponding craftsman-task pair (c,t). For the processing 
tilnes of the jobs, define p[j, l.l] = 1 if job j = (c.t) and machine l = (e,h) for some e.h.t, define 
p[j, 2.1] = 1 if job j = (c.t) and machine l = (h,t) for some e, h, t, and define p[j, i, I] = ~ otherwise. 
Finally, let the bound in the decision problem be 2. We claim that the timetable design probleIn has 
a solution f satisfying requirements (l)-(.t) if and only if there is a schedule with makespan 2 for 
the instance of the parallel multi-operation scheduling problem. Assume that there is f : C x H x T-- 
{0, 1} satisfy- ing requirements (1)-(4) in the timetable design prob- lem. Consider all triples (c, 
h, t) with f(c, h, t) = 1, each of which corresponds to a machine order ((c, h), (h, t)), where (c, h) 
is a machine in 7"1 and (h, t) is a machine in T2. We use these machine orders to form a set, F'. Obviously, 
F I C_ F (due to requirement (1) and the defi- nition of F). Because of requirements (2) and (3), there 
is no machine appearing in more than one feasible ma- chine order in F'. Furthermore, because of requirement 
(4), for each job (c, t), there is exactly one machine or-der, ((c, h), (h, t)), in F' which yields a 
finite total pro- cessing time. This means that all jobs can be executed in parallel starting at time 
0 and finishing at time 2. Therefore, we have a schedule with makespan 2. Assume that there is a schedule 
with makespan 2 for the instance of the parallel multi-operation scheduling problem. Then there must 
be machine-disjoint machine orders in F, one for each job. We define f such that f(c, h, t) = 1 if and 
only if machine order ((c, h), (h, t)) in F is used to execute job (c,t). It is easy to verify that requirements 
(1)-(4) are all satisfied. Therefore, the timetable design problem has a solution. Since the parallel 
multi-operation scheduling prob- lem is in NP and a polynomial reduction from an NP-complete problem 
to the scheduling problem exists, we conclude that the parallel multi-operation scheduling problem with 
processing times of 1 or o~ is NP-complete. cl The NP-completeness of the scheduling problem in- dicates 
that no polynomial-time algorithm has been de- signed to construct optimal schedules for the problem 
and thus research should focus on designing fast algo-rithms that give near-optimal solutions. 3 ON-LINE 
ALGORITHMS In a realistic situation, jobs are not available all at once before any scheduling decision 
is made, but instead they arrive one after another in a sequence J1,...,J,~ and have to be processed 
in the order given. Vve call algo- rithms that are able to process jobs one by one without knowledge 
of future jobs on-line algorithms. Competitive analysis is commonly used to judge the quality of solutions 
produced by an on-line algorithm. Let A be the on-line algorithm under consideration and OPT be the optimal 
(off-line) algorithm for the same problem. Furthermore, let CA(I) and CoPr(I) be the values of the objective 
function (makespan) when al-gorithms A and OPT are applied to instance 1, re-spectively. If there are 
c (a constant or a function of the size of I) and a (a constant), such that CA(I) <_ c. COPT(I)+a for 
any I. then we say that on-line algo- rithm A is c-competitiee, where c is its competitive ratio. The 
c-competitiveness of an algorithm indicates that in the worst case the value of the objective function 
of a solution produced by the on-line algorithm is at most c times that of the optimal solution. Next. 
we study two on-line algorithms, GREEDYI and GREEDY2. for our scheduling problem, both based 474 on 
some greedy strategies. The first algorithm uses a naive greedy strategy, in which for each job J~ (j 
= 1.... , n), the algorithm picks an arbitrary feasible ma- chine order from F that yields a finite total 
processing time for Jj, and schedules the job on those machines in a way that gives the smallest increase 
in the current makespan of the schedule In other words, the algorithm tries to balance the load of each 
machine at any time of the schedule We call this algorithm GREEDY1. Since the algorithm chooses a feasible 
machine order arbitrarily, it can not be avoided that some machines be used heavily in some instances. 
As a matter of fact, in the worst case we can force one particular machine order to be used over and 
over again by the execution of all the jobs. THEOREM 2 GREEDYI is at least (9(n)-competitive, where n 
is the number of jobs. Proof Consider an instance I, where in each Ti there are n machines, i.e., k, 
= n for 1 < i < m. Assume that each of the m operations of a job takes unit time by any machine of the 
corresponding type, i.e., p[j, i, If = 1 for 1 < j < n, 1 < i < m, and 1 < l < n. Also, let F = {(M,~, 
M~t ..... Mm,)ll < l < n}. Clearly, job J~ can use machine order (Mi~,M~j,...,Mm~) for its execution, 
and all jobs can be processed in parallel from time 0 to time m. So the optimal makespan COeT(I) = m. 
See Figure 1. I M~I TI M~_~ ... Mln t M21 T, M=_, M:n ~-] T Mma . . . 0 2 m-1 m Figure 1. The optimal 
schedule. As for the schedule produced by GREEDY1, since machine orders are chosen arbitrarily from 
F, in the worst case all jobs will be using the same machine order, say (Mll..~I.~1 ...... ~[,,,1 ). 
Therefore. jobs will line up for the service of a single machine. It is easy to figure out that C'CREE~-~(/)= 
m + n-1. See Figure 2. The ratio c'oncEo~-~ll)CopT(t) = ,,,+,~-1,,~ = (9(n). when m is a constant. Since 
we have found one instance (described above) which yields a ratio of ®(n), then the worst-case ratio 
among all instances must be at least ®(n}. Therefore. GREEDYI is at least (9(n)-competitive. O T :M,, 
[ J, ] J2 MI2 ...~-~-] T Min M:, M:2 I J' J: Il--JT]    I J'[ J2 I"U I i ¢¢ I t,-t 0 1 2 re+n-2 m+n-I 
Figure 2. The GREEDY1 schedule. To improve the performance of a greedy algorithm, we have to adopt a 
smart strategy to select machine or- ders to spread the processing load among all machines Here we propose 
another greedy algorithm, GREEDY2, where we define #(M) to be the number of jobs that have used machine 
M for their operations so far into the schedule For each job that comes in the on-line sequence, GREEDY2 
always selects a feasible machine order that causes the smallest increase, if at all, in maxvm{#(M)}, 
also denoted by # .... THEOREM 3 GREEDY2 is at least (9( v:ff)-competitive, where n is the number of 
3obs. Proof We consider an instance I with n on-line jobs such that n = 1+2+.-.+h = ½h(h+l) for some 
integer h. So h = (9(,/7ff). The jobs are denoted by Jit for 1 < i < h and 1 < l < i. Assume that there 
are two types of machines, i.e., m = '2. Let T1 = {A,tll < i < h and 1 < l _< i} and T2 = {Bit[1 < i 
< h and 1 < l < 2i-1~. The set of feasible machine orders, F, is the union of subsets, F1,...,Fh, where 
for any 1 _< i _< h, Fi = {(A,,, Bi, ), (Ail, B,2), .., (A,,, B,, )} U {(A,2, B4,+1)), (A,3,B,(,+2)) 
..... (Ai,,B,12i_I)) }. We define the pro- cessing times in such a way that jobs J,1, J,2,..., J,, have 
no choice but to use the machine orders in F,. That is, let p[.],t, Tt, A,t] = 1 for 1 < l < i, p[.la, 
T~, Ai(t+l)] = 1 for 1 < l< i-1, p[Ja,T2,B,t]= 1 for 1 < l< i, and p[J,t,T2,B,I,+t)] = 1 for 1 < l < 
i-1 Set the rest of p[*,*, *] to be vo. Let us consider the optimal schedule. For job J,, 1 < l < i - 
1, machine order (A,(t+l), B,~i+t)) is chosen. For job J,,, machine order (A,x, B,, ) is chosen Since 
no machine is used by more than one job, all jobs can be executed in parallel from time 0 to time '2 
(one unit for each operation) Therefore, COPT(I) = 2. Now for the greedy algorithm (,REED5_, first ini- 
tialize It to be 0 for all machines. Assume that jobs are ordered Jll, Jzl , .122, J3t, J:,~2, J33 ..... 
For job .111, since there is only one feasible machine order (.411, Bll ), GREEDY2 picks it and assigns 
the job on machines 411 and BlI. forcing /t(.411) = #(Bll) = 1. and hence it .... = 1. Clearly, the current 
makespan is '2. For the next job .I21 in the sequence, GREEDY2 has two choices, machine orders (.421. 
B21) and (A22, B2~). Since 475  both can be used for the execution of job J21 and nei-ther causes any 
increase in #r~, GREEDY2 pick an arbitrary machine order. Assume it is (A~I, B21). Then job J22 comes. 
Since only machine order (A21, B22) is feasible for the job, GREEDY2 has no choice but to se- lect (A2x, 
Bzz), forcing machine A21 to be used by two jobs, thus tt,~=~ = 2. The current makespan is 3 after the 
first three jobs are scheduled. Next consider jobs J31, J32, J33. If GREEDY2 happens to choose machine 
order (A31, B31) for job J31 (this is certainly a possibility since the selection does not change #,,,,), 
then for the next two jobs Ja~ and J33, the algorithm has no choice but to pick machine orders (Aal, 
B32) and (A3~, Ba3), respectively. Thus #,~ = 3 and the makespan be-comes 4. We continue this reasoning 
until the last group of jobs Jhl, Jh2 .... , Jhh are scheduled. We can see that the final value of It 
..... is h and the makespan of the schedule is h + 1. So CG,~EEDY2(I) = h + 1. The ratio CGREEDY2(I)CoPT(I)= 
h+12 = ®(v/-n) Since we have found one instance (described above) which yields a ratio of ®(x/:n), then 
the worst-case ratio among all instances must be at least (9(v~). Therefore, the com-petitive ratio of 
GREEDY2 is at least 6)(v/-n ). [] We are unable to prove the tight competitive ratios for GREEDY1 and 
GREEDY2, but preliminary experi- ments show that on average GREEDY2 performs much better than GREEDY1, 
i.e., the rnakespan of the sched- ule constructed by GREEDY2 is much shorter than that of the schedule 
constructed by GREEDY1. A RELATED NETWORK ROUTING PROBLEM Let IIS consider a network routing problem 
[S] [9]. Define a layer graph G = (I'bLOVlto...UF~,~, E1 UE2U...UE,,~), where Fb, ~q,..., P;n are disjoint 
sets of vertices and E, is the set of directed edges between vertices in F]-I and k}. See Figure 3 for 
an example. V 0 E I V I F~ V~ Figure 3. A layer graph with m = 2. In the network routing problem, the 
underlying net-work is described as a layer graph, where vertices rep- resent processors and edges represent 
message-passing links. Assume that n files are to be transferred from their pre-specified sources in 
t'0 to their pre-specified destinations in F,n. The network routing problem asks to assign to each file 
a route between its source and des- tination and construct a schedule for each file so that the location 
of the file is accounted for at each instant of lime and network resources are not over-utilized (as- 
suming that at any time only one file can be traversing a link}, with the goal to minimize the overall 
makespan. (sing the link speed and file length, it is easy to com- pute the time needed for a file to 
traverse a certain link in the network. We show in this section that the above network rout- ing problem 
can be converted to our parallel multi-operation scheduling problem. However, as we shall see later, 
the conversion does not hold true vice versa. Given a network graph with rn + 1 vertical layers of nodes, 
with the leftmost layer to be the possible source nodes and the rightmost layer to be the possible des-tination 
nodes. For each edge in Ei, we define a ma-chine of type Ti. So the number of parallel machines of type 
Ti is IEil, and there are m types of machines altogether. Each path from a source (in F~)) to a des- 
tination (in Vm) corresponds a feasible machine order for the execution of jobs. For example, if edges 
(1, 3) and (3, 5) in a layer graph with m --2 represent ma-chines Maa and !1//21, respectively, and there 
is a path 1 ~ 3 ~ 5 between source node 1 and destination node 5, then machine order (Mll, M21) is a 
member of the set of feasible machine orders, F. For each file with source s 3 and destination d 3, we 
create a job Jj which has to go through m operations. As for the processing time, we use the following 
principle: If job Jj is created from a file with file length h and machine Mit of type Ti corresponds 
to an edge with speed t, then p[J~, Ti, Mit], the processing time of job J3 on machine M,£ of type T,, 
is defined to be y-h However, there is one exception to this principle. If the machine's corresponding 
edge is either the first or last edge on a path, then assign cx) to P[]3,T,, Mit] for the case when the 
nodes on the edge do not match the source sj or the destination dj. This prevents a job from selecting 
a machine order when the corresponding path in the network can not be used to transfer the file from 
its source to destination. For ex- ample, if edge (a, b) with a E I,~) corresponds to machine Mll, and 
file fl with source c ¢ a corresponds to job .]1, then p[J1,T1,Mll] = c.~. Assume the graph in Figure 
3 is used to transfer 3 unit-length files. For simplicity, assume the link speed is also unit. Let file 
fl = (1,5), where node 1 is its source and node 5 is its destination, file f2 ---- (2,5), and file ]'3 
---- (1, 7). The following tables describe the corresponding instance for the parallel multi-operation 
scheduling problem. The first table shows the edge-to- machine correspondence. The second table shows 
the path-to-order correspondence. The third table defines the processing times of the jobs. edge machine 
( l, 3) :1Ill (2, 3) .lit2 (2, 4) ,1I~3  ( 3, .5) M2, (3, 7) .U22 ( 4.5 ) 3123 (4, 6) 3124 Path Machine 
order I --3--5 (.Ill I, 3121 ) I --3 --7 (3111../I22 } 2--3 --5 (./I12, M21) 2--3~7 ( ),112, .1,122 ) 
2 -- -t -- 5 ( 311a, ./I2~. ) 2--4--6 ( .1113, .U24 ) 476 P J1 J2 3"3 3{11 1 oo 1 Ma2 oo 1 e~ M13 oo 
1 ec M2: 1 1 M22 oo oo 1 M23 1 1 oo M24 oo oo oo We can show that there is a solution to an instance 
of the network routing problem with layer graphs if and only if there is a solution to the defined instance 
of the parallel multi-operation scheduling problem with ma-chine order constraints. The formM proof is 
omitted in this paper. In this one-way conversion, files are mapped to jobs, edges are mapped to machines 
of various types, and paths are mapped to feasible machine orders. How-ever, the conversion does not 
hold true in the opposite direction. That is, given any instance of the parallel multi-operation scheduling 
problem with machine order constraints there is not always an equivalent instance of the network routing 
problem with layer graphs. The reason for this claim is that feasible machine orders do not necessarily 
define paths in layer graphs. For exam- ple, assume m = 2 and F = {(MII,M21),(M:l, M22), (M:2, M2: )}. 
Creating an edge for each machine, we get a network graph as shown in Figure 4. While for each feasible 
machine order there is a corresponding path in the graph (e.g., for machine order (M:I, M2:), it is path 
l --3 -- 4), there exists a path, 2 -- :3 -- 5, for which there is not a corresponding feasible machine 
order since (M:2, M22) ff F. So the feasible machine order set F does not uniquely define the set of 
all paths in the net- work graph. Hence, the conversion from the scheduling problem to the routing problem 
does not hold true. MII M~ I 20 "/ Mi2 M:., "~O 5 Figure 4. A network graph. 5 CONCLUSIONS In this paper, 
We defined a scheduling problem, in which parallel machines of various types are available to pro- cess 
jobs consisting of multiple operations. What makes our problem different from all of the previously studied 
scheduling problems is the added machine order con-straints. We provided the NP-completeness proof for 
the problem, anddesigned and analyzed two on-line greedy algorithms for the problem. We also gave our 
observation that a network routing problem can be con- vetted to our scheduling problem. However, the 
conver- sion does not stand vice versa. For future research, we are interested in proving the tight competi-tive 
ratios for both greedy algorithms. We also wish to explore further the relation between the scheduling 
problem and the routing problem. VVe sus- pect that many results developed for the network rout- ing 
problem may be applied to the scheduling problem. ACKNOWLEDGEMENT This research is supported in part 
by NSF grant NCR- 9505963. References <RefA>[1] Coffman, E. G. Jr.(1976), Computer and Job Shop Scheduling 
Theory, John Wiley and Sons, New York. [2] Evan, S., Itai, A., and Shamir, A. (1976), On the complexity 
of timetable and multicommodity ttow problems, SIAM Journal on Computing, 5, 691- 703. [3] Garey, M. 
R., Johnson, D. S. (1979), Computers and Intractability: A guide to the theory of NP- completeness, Freeman, 
San Francisco. [4] Garey, M. R., Johnson, D. S., and Sethi, R. (1976), The complexity of flowshop and 
jobshop schedul- ing. Mathematics of Operations Research, 1, 117- 129. [5] Gonzalez, T. and Sahni, S. 
(1976), Open shop scheduling to minimize finish time, Journal of ACM, 23, 665-679. [6] Gupta, J. N. D. 
(1988), Two-stage hybrid flowshop scheduling problem, Journal of the Operational Re- search Society, 
39, 359-364. [7] Lawler, E. L., Lenstra, J. K., Rinnooy Kan, A. H. G., Shmoys, D. B. (1990), Sequencing 
and schedul- ing: Algorithms and complexity, Handbooks in Op- erations Research and Management Science, 
Vol-ume 4: Logistics of Production and Inventory, S. C. Graves, A. H. G. Rinnooy Kan and P. Zipkin, ed., 
North-Holland. [8] Mao, W. and Simha, R. (1994), Routing and scheduling file transfers in packet-switched 
net-works. Journal of Computing and Information, 1, Special Issue: Proceedings of the 6th International 
Conference on Computing and Information, 559- 574. [9] Rivera-Vega, P. I., Varadarajan, R., and Navathe, 
S. B. (1990), Scheduling data redistribution in dis- tributed databases. Proceedings of the 6th Interna- 
tional Conference on Data Engineering, 166-173.</RefA>  AUTHOR'S BIOGRAPHY Weizhen Y, lao received her Ph.D. 
in computer science from Princeton L'niversity in 1990. She then joined the faculty of the College of 
William and Mary and is now Associate Professor in the Department of Com- puter Science. Her research 
interests are in design and analysis of algorithms and combinatorial optinfization. She has published 
papers in the areas of bin packing, job scheduling, network routing, and graph partitioning and mapping. 
477   
			
