
 A Deterministic Poly(log log N)-Time N-Processor Algorithm for Linear Programming in Fixed Dimension 
 Mildos Ajtai and Nimrod Megiddot Abstract. It is shown that for any fixed number of variables, the linear 
programming problems with n linear inequalities can be solved deterministically by n parallel processors 
in sub­logarithmic time. The parallel time bound is O((log log n)d) where d is the number of vari­ables. 
In the one-dimensional case this bound is optimal. 1, Introduction The general linear programming problem 
is known to be P-complete [5] so it is interesting to investigate the parallel complexity of special 
cases. One important case is when the number of variables (the dimension) d is fixed while the number 
of inequalities n grows. Megiddo [10] showed that this problem can be solved in O(n) time for any fixed 
d. Clarkson [3] and Dyer [7] improved the dependence of the constant on d. The general search technique 
proposed in [10] provides poly-logarithmic algorithms with n pro­cessors for any fixed d (see [1 I]). 
Deng [4] gave an O(log n) algorithm with n/ log n processors for the case d = 2. It was not known previously 
IBM Almaden Research Center, 650 Harry Road, San Jose, California 95120-6099. IBM Almaden Research Center, 
650 Harry Road, San Jose, California 95120-6099, and School of Mathematical Sciences, Tel Aviv University, 
Tel Aviv, Israel. Research supported in Part by ONR Contract NOO014-91-C-O026. Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct commercial advantage, the ACM copyright notice and the title of the publication and ita date appeer, 
and notica ie 9iven that copying ia by permission of the Association for Computing Machinary. To copy 
otherwisa, or to rapublish, requirea a fee and/or specific permission. 24th ANNUAL ACM STOC -5/92/VICTORIA, 
B. C., CANADA @ 1992 ACM ().89791.51 2.7j92\O004\0327 . ..$J .50 whether the problem can be solved in 
o(log n) time with n processors for any d >1, Alon and Megiddo [2] showed, however, that on a prob­abilistic 
CRCW-PRAM with n processors the problem can be solved by a Las Vegas algorithm almost surely in constant 
time. In this paper we show for the first time that for any d the problem can be deterministically solved 
in O((log log n)d) time on n processors. We describe our model of computation in section 3. We note that 
the simple case of d = 1 is equivalent to the prob­lem of finding the maximum of n elements, which requires 
!l(log log n) time on n processors. 2. Preliminaries We first review some known facts about expander 
graphs. Let G = (V, E) be any graph. For any nonnegative integer r, denote by G = (V, E ) a graph where 
(u, v) c E if and only if in G there exists a path of length less than or equal to r from u to v. For 
any S c V, the r-neighborhood of S, N,(S) = NT(S; G), is defined to be the set of all vertices v such 
that either v E S or there exists au 6Swith (u,v) 6 E . Definition 2.1. A graph G = (V, E) is called 
an expander with expansion coefficient Q if for every S c V such that ISI < !j\Vl, we have IN,(S) I ~ 
(YIs[. The following proposition was first proved by Tanner [12]: Proposition 2.2. If G is a d-regular 
graph and AZ = A2(G) is the second iargest absolute vake of an eigenvalue of the adjacency matrix of 
G, Proof: The proof follows directly from Corol­ then G is an expander with expansion coefficient lary 
2.4 since t = dllc = 7 lC = (1 + 6) /2. a = 1.5  A2/(2d). I The work of Lubotzky, Phillips, and Sarnak 
[8] provides for every n z 2 mod 4 such that n -1 is prime, an explicit construction of a 6-regular graph 
such that A2 < 2W. Thus, these graphs are expanders with coefficient CY~ 1.5 &#38;/6 > 1.1. Let s fix 
e = 0.1. Corollary 2.3. For eveTy n s 2 mod 4 (and n 1 is pnhte), and foT every positive integeT T, there 
ezi$ts a graph G = (V, l?) on n ve?Vices with maximum degree less than 7 , such that foT eveTy SCV, IN1(S; 
G) I > min{(l + ~) ] S[, n/2} . PToof: Let Go be a 6-regular graph on n vertices with expansion coefficient 
a > 1.1 as in Lubotzky et al [8]. Let G = (Go) . The maximum degree d, in G, is not greater than ~[=1 
6; < 7 . Moreover, for every j, if l~j(s; G )1 S n/2 then lNj+I(S; G)l > (1 + E)[Nj (S; G) 1, and the 
proof follows by induc­tion. s Corollary 2.4. In the graph (Go) , if A and B are sets of vertices with 
caTdinalities greateT than n/(1 + e)r/2j then theTe is an edge between them. PToof; It follows from Corollary 
2.3 that 1~~/2(A;Go)l > rnin{(l + e) /21A[, n/2} = n/2 and similarly, Nrj2(B; Go) > n/2. This im­plies 
that N,/2(A; Go) tl N,/2(B; Go) # 0 and hence in Go there is a path of length less than or equal to T 
between A and B or, equivalently, an edge of (Go)r. m Let c = 2Iogl+e 7, so that (1 + ~) i2 = 7. Proposition 
2.5. FOT eveTy n ~ 2 mod 4 (and n -1 is pTime), and foT eveTy positive integeT T, there exists a graph 
G of degree less than d = 7 with the following pTopeTty: if tc = d, then every two disjoint sets A and 
B of vertices of G, such that Idl = IBI = n/t, aTe connected by an edge, Corollary 2.6. In the expandeT 
of Proposition 2.5, foT eveTy two disjoint sets of vertices A and B of veTtices such that ]A[ = IBI = 
2n/t, there exist more than n/t edges between A and B. pTOOf: Suppose, on the contrary, that the number 
of edges between A and B is less than or equal to n/t. Let Al be the subset of A consisting of those 
vertices that are not adj a­scent to any vertex in B. Since Idl \ z n/t, by Proposition 2.5 there is 
an edge between Al and B, hence a cent radiction. ~ 3. Linear programming in the plane Consider the linear 
programming problem with two variables in the form: Minimize y subject to y ~ aiz + bi (i GN+) (P2) y<a~z+b~ 
(i~iV-) l~x~h, where 1~+1 + IN-I = n and {t, h} c [ cm, co]. Any two-variable linear programming problem 
can be reduced to this form in O(log log n) time wit h n processors. The algorithm proposed by Dyer [6] 
and Megiddo [9] provides a method of discarding 1/4 of the set of constraints with an effort of computing 
one median and two max­ima in sets of at most n elements. It was shown by Ajtai, Kom16s, Steiger, and 
Szemer6di [1] that selection can be done in O(log log n) time in Valiant s parallel comparison tree model 
with n processors. The selection steps of our algorithm are implemented in this model. All the other 
steps can be implemented on a CRCW-PRAM. Deng [4] gave a parallel algorithm which runs in O(log n) time, 
using O(n/ log n) processors, In fact, his algorithm applies the procedure of [6, 9] until the number 
of remaining constraints al­lows for computation of the entire ccmvex hull in O(log n) time with O(n/ 
log n) processors. Such an approach cannot yield an o(log n) time bound. Our approach discards increasing 
proportions of the set of remaining constraints without resort­ing to the computation of the entire convex 
hull of the remaining set at a relatively early stage. Suppose we are left with the lines Li = {(Z, y) 
Iy = a~z+b~} (i EN: UN:) where N: c N+ and N: CN.. Let n= IN+I+ IN-I denote the revised number of constraints, 
and we continue to employ p processors (where p is the initial number of constraints). We now describe 
how a large number of constraints can be further discarded. Denote q = p/n (where p is the initial number 
of processors). The treatment of the two classes of constraints is very similar so we describe just the 
case of N:. Let d be the largest power of 7 that is smaller than gci(c+lJ. Let t be defined by t = d. 
Con­sider an expander graph G = (V, E) of degree smaller than d, with vertices corresponding to the lines 
in NJ, that has the properties asserted in Proposition 2.5 and Corollary 2.6. For every edge (ijj) ~ 
E (i, j c N:), if Lt and Lj are not parallel, consider the intersection coordinate gij = (hi bj)/(a~ 
 aj). Denote by C the set of these intersection points. Ob­viously, ICI ~ ~nd < p, so all the points 
in C can be computed in constant time with our p processors. Partition C into intervals by points cm 
= aO<zl<xs< . <x*= co, so that each interval [~i-l, ~i] (i = 1,..., S) con­tains less than n/t points. 
This can be achieved with s < nd/(n/t) = tc+l = q. (1 Il+ II  i~~~~ <1 ,,~ I 1 I1­1; II Proposition 
3.1. If A and B are disjoint sets of lines, each containing at least 2n/t elements, then there does not 
ezist a k (1 ~ k < s) such that (ij 6 [xk_l,xk] for all Li C A and Lj C B. Proof: The proof follows from 
the fact that the number of such intersection points that are also in C is at least n/t by Corollary 
2.6, while each interval contains less than n/t points of c. [ Given the set C, we wish to determine 
in which of the intervals [Z&#38;l, $k] an optimal solution z might lie. Denote Note that an optimal 
solution must satisfy x* 6 [1, h], f+(z*) < f_(z*), and ~+(z ) is minimal. Since ~~(z) and j+(z) j-(z) 
are convex, we can test any value of x with at most three com­putations of a maximum in a set of cardinality 
n (see [9]), and conclude with one of the follow­ing possibilities: (i) the problem has no feasible solution, 
(ii) z is an optimal solution, (iv) if z is an optimal, then x* > x. Since p/s > n, we have at least 
n processors per point ~k, so in O(log log n) time we can locate the optimum in one of our intervals. 
Suppose we have identified an interval [u, v] where the minimum is attained, and there are less than 
n/t intersection points of C over [u, v]. Consider the orders induced on the set of lines by their intersections 
with the lines {z = u} and {z = v}. Call them the u-order the v-order, respectively. For every k (k = 
1, ..., n), denote by gk the set of the k lowest lines in the u-order and denote by Vk the set of the 
k lowest lines in the v-order. Proposition 3.2. FOT every k (k = 1,..., n), the symmetric difleTence 
Ukevk = (~k \vk)u(v/c \ ~k) contains at most 4n/t lines. pT(JOf: !hCe IUk\ VkI = lv~ \ Uk1,it fOllOws 
that if, on the contrary, [uk 0 Vk I > 4n/t, then [Uk\Vk] = lvk \ Ukl > 2n/t . Note that all the intersection~ 
of a line (ij Lt Cuk\vkwith afine Lj ~Vk\uk must be in [u, v]. By Corollary 2.6, the number of such intersections 
in C is at least n/t, in con­tradiction to our assumption about the interval [U, v]. , Let ok and ~k 
be the complements of uk and Vkj RSpf2Cthdy, h I the Set Of d n lines. Proposition 3.3. For k = n 4n/t, 
there exists at lea$t one line in ok ~ ~k. Proof: The claim is trivial if uk = Vk; other­wise, since 
uk 0 Vk = ok e ~k, by Proposition 3.2, l~kfi~kl = t~ku~jl -lukevkl ~ (4n/t + 1) -4n/t = 1. ( + f)/ luk~vkl 
~ 4@ I l~kn~kl 2 (n-k) -4n\t Proposition 3.4. Let k = n 4n/t. If L is any iine in ok fl ~kj then over 
the interval [u, v], the line L lies above at least n 8n/t lines. PToof: The line L lies above every 
other line, eXC(3pt possibly fOr some b3S in ~k U ~k; but l~ku~kl ~ 8n/t. I Corollary 3.5. The number 
of lines can be reduced from n to no more than 8n/t in O(log log n) time. Proof: Aline Lc~knVk(k=n 4n/t) 
can be found as follows. Compute the set ~k by selecting the k th smallest element relative to the u-order, 
and then find the line L which is maximum in the ok relative to the v-order. Given L, we can compare 
it with all of the other lines and discard those lines which are smaUer in both orders. The number of 
remain­ing lines will be at most 8n/t. D Theorem 3.6. The linear programming prob­lem with two variables 
can be solved in O((log log n)2) time. Proof: The scheme we have described so far reduces the number 
of constraints from n to 8n/t(n), so itworks only when 8n/t(n) < n. In order to satisfy the latter condition, 
we start the algorithm by running a constant number of iterations of the algorithm of [6, 9], where 1/4 
of the set of constraints is discarded in each iteration. This constant number is de­termined from t(n) 
= (p/n)l/fc+lJ >8, i. e., nfp < 8-C-1 and the number is log3/4 8-C-1. Recall that t= t(n) = (p/n)l/(c+l), 
so the value of n is reduced in one iteration to 8nl+l/(l+C)p-l/( C+l)nl = > so the next value of tis 
l/(c+l) l+l/(c+l)n-l-l/( l+c) ( 1 t = 5P ) 8-1/(C+l)tl+l/( l+C) . = Thus, after k iterations, the value 
oft is where ~ = 8-1/(C+l) and ~ = 1 + l/(c + 1), and this implies that the number of iterations is O(loglog 
n). ~ 330 4. The three-dimensional case The linear programming problem with three variables is formulated 
as follows. (P ) Minimize z subject to z ~ U~Z+ bi~ + Ci (i 6 N+) Z< UiZ+bi~+Ci (i GiV_) O~U;Z+b~y+ci 
(i c NO) , where IN+! + lN_l + INOI = n. As in the two-dimensional case, we proceed by discarding increasing 
proportions of the set of constraints. The three sets N+, N-, and No can be handled independently. We 
describe only the processing of N+. Suppose we are currently left with n planes Pi={(Z, ytZ)l Z= aiZ+bi~+ci} 
(i c N: C N+) and there are p processors. For every pair of planes (pi, Pj), if the planes are not parallel, 
let Lij = {(z$y) I ~i~+biy+ci = ~j~+bjy+cj} , i e., Lij is the projection of the line of intersec­ tion 
of Pi and Pj into the (x, y)-plane. We now use an expander graph G = (NJ, -E) of maximum degree less 
than tf(the dependence of tl on n and p will be explained later) whose vertices represent the planes, 
with the property that if A and B are disjoint subsets of N\, each of cardinality of at lesst 2n/tl, 
then the number of edges between A and B is at least n/tl. Let D={Lij I (i,j)~~} . Note that the number 
of pairs (i, j) such that Lij c D islessthan nt; . We now use an expander graph G = .(D, E ) (i.e., the 
vertices correspond to the lines in D) with maximum degree less than t$j(the depen­dence of t2on n and 
p will be explained later) so that between any two sets, each of cardinality of at least 2 [D1/t2, the 
number of edges is at least lD1/t2. In view of Corollary 2.6, this is true if tz< (p/(ntf))li(c+lJ, since 
ID[ < ntf. Denote by C the set of intersection points of pairs of lines corresponding to the edges of 
G . We proceed as in the two-dimensional case (as if D were the total set of lines). We partition the 
z-axis into t~+l intervals in the same way, and find one interval [u, v] of the partition such that, 
without loss of generality, the given in­stance of (P3) may be restricted to the stripel {(~, Y) ]u < 
x < v}. we also know that the two orders on D (induced by the intersection points with {(z, y) ]z = u} 
and {(z, y) Iz = v}) are almost the same, in the sense that for every k (k=l,..., [D[), lUk 0 Vk] < 41D[/t2 
 (see Proposition 3.2). z 1 /v IY LII u . . _ v. . _ . . __ /­ x Consider the following two partitions 
of D into r < t2/8 intervals of length 6 > 81D1/t2: (i) intervals 11, ..., 1, relative to the u-order, 
and (ii) intervals J1,... , J, relative to the v-order. Proposition 4.1. FOT every k (k = 1,..., r), 
Ikn Jk #O. Proof: Since 1~~ 0 Vk[ < 41D1/t2 (k = 1 ,.,. ,IDI), and lNote that wemayhaveu = m orv = co 
 2 21 it follows [I, e J~l so It follows that for each k (k = 1,..., r), there exists a line &#38; G 
~~ n Jk, so that the members ofill={l ~,...,4, } do not intersect in the stripe {(z, y) I u s z s v}. 
These lines partition the stripe into trapezoids. LJ v Remark 4.2. A suitable set ill can be con­structed 
on a CRCW-PRAM in O(log log n) time, First, the intervals are constructed by solv­ing r selection problems. 
Suppose each member of D knows the intervals it belongs to relative to the two orders. Each member of 
1~ (l Jk now attempts to write its name in a cell representing &#38;, and one succeeds. Proposition 4.3. 
There are at most 56 pairs (i, j) (not necessarily in 1?) such that the trape­zoid bordered hy the &#38; 
and .fk+l is intersected by Lij. PToof: The proof follows from the fact that this trapezoid may intersect 
only the lines in the union of ~k U ]k+l U Jk U J~+l, ~(k+l)6 e v(k+l)~, and U(k-l)d 0 v(k-1)~, whose 
cardinal­ ity is at most 46+ 2(41~1/tz). B Next, we identify one trapezoid to which the problem (P3) 
may be restricted without loss of generality. l?urt hermore, we can divide this trapezoid into two triangles 
and restrict atten­tion to one of them which we denote by T. Proposition 4.4. If 56< n/tlj then for every 
pair (A, l?) of disjoint sets of planes, such that [Al, [Bl > 2n/tl, there is at least one line Lij such 
that Pi c A and Pj G B, and Lij does not intersect T. Proof: We know that for such A and B, there are 
at least ri/tllines Lij in D such that Pi c A and Pj c B. On the other hand, by Proposi­tion 4.3 T is 
intersected by at most 58 lines Lij. I Thus, we need to choose tl and -tZ so that 40[D[/tz < n/tl. Hence, 
we require 40t~/tz < l/tl, i.e., 40tf+1 < tz, and since t2 < (p/\Dl)li(c+l), it suffices that pti ph 
tl<~ ; and t2= ()n () At each of the three vertices2 of T, there is a natural linear order on the set 
of hyperplanes induced by the z-coordinate. We may apply the argument we used in the two-dimensional 
case to any pair of orders as we did with the u-order and the v-order. For every k (k = 1,..., n), let 
Uk, Vk, and Wk denote the sets of k lowest planes relative to these three orders. Proposition 4.5. For 
every k (k = 1,..., n), the set sk = (~k @Vk)u (Vk e ~k) U(vk e ~~) contains at most 12n/tl elements. 
zThe ~Me of an infinite triangle can be easily han­died too. Proof: Each member of Uk\ vk intersects 
each member Of vk \ uk in T, each member Of vk \ wk intersects each member of wk \ vk in T, and each 
member of wk \ vk intersects each member of uk \ wk in T, Since Iuk \ vkI = jVj\~kl, lVk\Wk] = lWk\Vkl, 
and lWk\~~l = t~k \ Wkl, it fOllOWS frOm our choice Of tl that the cardinality of each of these six sets 
is not greater than 2n/tl. I Proposition 4.6. For k = n-12n/tI, ~kn~j n Wk# (?. PTOOf: If vk = Vk = wk 
the claim is trivial; otherwise, l~~n~kn~kl ~ l~ku~,u~kl-lskl ~ (12n/tl + 1) 12n/tl = 1. I Proposition 
4.7. If k = n 12n/tl and P c ~k (7 ~k n Wkj then over the triangie T, the plane P lies above at least 
n -36n/tl planea. Proof; The plane P lies above every plane in uknvk nwk, bUt l~knvknwk]=n-lflku~ku~kl 
~ n 3(12n/tl) . I  Corollary 4.8. The number of planes can be reduced from n to no more than 36n/tl 
in O((log log n)2) time. PTOOf: The SetS Uk, ~k, and ~k can be computed with a selection algorithm and 
then it can be decided separately (and simulta­neously) for each member of the union of these sets whether 
it satisfies the conditions of Proposition 4.7. Since we need to solve linear programming problems with 
two variables and we have enough processors for solving all these problems in parallel, Theorem 3.6 applies, 
so the effort for one iteration is O((log log n)2). B Theorem 4.9. The linear programming prob­lem with 
three variables can be solved in O((log log n)3) time. Proof: The value of n is reduced in one iter­ 
(p/n)l/((c+M+2)).  ation to 36n/tl, where tl= As in the proof of Theorem 3.6, the next value of tl,is 
36 -1/((c+l)(c+2)) t:+l/((c+Mc+V tj= > so the number of iterations is O(log log n). This implies our 
claim. s 5. The general d-dimensional case We now consider the general linear programming problem with 
d variables, which we formulate as follows. where a~ ~ Rd-l (i IN-I + lNOl = n). c N+ U N_ U No and liV+l 
+ I I 333 5.1 H yperplane queries In general, our algorithm works recursively in the dimension. First, 
as explained in [10], a linear programming algorithm for problems with d 1 variables can be used as 
an oracle for deciding the position of the set of optimaJ solutions, if any, relative to any given hyperplane. 
More precisely, it can be used to solve the following problem: Problem 5.1. Given an instance of (Pd) 
and a hyperplane H = {Z 6 12d-1 I aTx = b}, de­cide whether (i) the optimal solutions of (Pd), if any, 
may be assumed to lie in H+ = {Z c Rd-l I aTx > b}, (ii) the optimal solutions of (Pd), if any, may be 
assumed to lie in H-= {x e Rd-l I aTz < b}, or (iii) a final conclusion can be reached that either lil 
cent tins an optimal solution, the problem is unbounded on H, or the problem is infeasible. The conclusion 
in (iii) is reached when the solu­ tion of (Pd) with the additional constraint z c If yields a solution 
of (Pd), or the problem is infea­ sible and the (amount of unfeasibility is mini­ mized on H, 5.2 Locating 
the solution in a small simplex We now introduce a problem that plays the key role in the algorithm, 
but we first need to define an oracle for minimizing a function: Definition 5.2. Consider a function 
f: Rd-l + RU { co}. By an oracle jor ~ we mean a mechanism that, when presented with a hyper­ plane H 
in Rd-l , returns information in one of the following forms: (i) either the minimum of $ lies in H+ or 
j is unbounded from below on H +, (ii) either the minimum of ~ lies in H-or ~ is unbounded from below 
on H , (iii) either the minimum of ~ lies in H or ~ is unbounded from below on H. Problem 5.3. Given 
are: an oracle for a func­tion ~ as in Definition 5.2, a number p (of proces­sors), and hyperplanes Hk 
= {(z, y) E Rd I y = a$~+bk}(k= l,..., n). Either find some hy­perplane H in Rd-l such that the minimum 
of ~ lies in H (or j is unbounded on H), or find d halfipaces Fk ={ ZCRd- \C;Z+d @O} (k=l,..., d) such 
that (i) either the minimum of f lies in the simplex 3 A = ~1 fl ... fl Fd or f is un­bounded from below 
on A, and  (ii) at most n/t (t = t(p/n; d)) pairs (H~, HJ) of hyperplanes intersect over A. (The value 
of t(p/n; d) wiJl be derived later.)  Remark 5.4. When d = 2, the polyhedron is an interval which may 
extend to infinity in one direction. In higher dimensions, the polyhedron can be either a simplex or 
a simplicial cone. In any case, there will be at most d linear orders on the set of flk s such that if 
H, is above H] in each of these linear orders, then Hi lies above HJ at every point of A. Recall that 
in the case d = 2, we located an (p/~)u(c+o  interval with tl= ,and in the case d = 3, we located a 
triangle T such that the j ln general, this intersection may be unbounded number of pairs of planes that 
intersected over T (p/n)l/((c+w+m.  was at most n/tl,where tl= Denote L,3={zc Rd-1 I C&#38;+b,=cz;x+bj} 
. If H; and Hj are not parallel, then L,J is a hy­perplane in Rd-l. Let G = (V, E) be an expander graph 
with maximum degree less than Tf (the value of rl will be determined later), whose vertices corre­spend 
to the hyperplanes Hk, with the property that every two disjoint subsets A, B C V of car­dinality n/rl 
are connected by an edge. Hence, if A and B are subsets of V of cardinality at least 2n/ rl, then the 
number of edges between A and B is at least nlrl. Let r­ D={-Lj I (ij)E~} . We have IDI < nrf. Consider 
the function j : Rd-2 ~ R U { w} defined by An oracle for ~ (in the sense of Definition 5.2) provides 
an oracle for j when we extend any hy­perplane H in Rd 2 into a hyperplane in Rd l described by the same 
equation. Thus, recur­sively, we can either (i) find a hyperplane H c Rd-2 which contains the minimum 
of f , and hence its extension into a hyperplane in Rd-l contains the minimum of f, or (ii) find d 1 
halfspaces Fk = {Z c Rd-2 I c~x + dk ~ O} (k= l,..., d -1) with the properties described in Problem 5.3 
with respect to the hyperplanes Lzj in D: (i) either the minimum of f lies in A = F1 n . . . n ~&#38;l 
or f is unbounded from below on A, and  (ii) at most ]D1/~z (T2 = t(p/\Dl, d -1)) pairs of L;j S from 
D intersect over A.  Fork=l ,... ,d 1, let F~ be the halfspace in Rd-l parallel to the (Z&#38;l)-a.Xis, 
obtained by extending the halfspace Fk into Rd l. Thusj the polyhedron A is extended into a polyhedral 
cylinder AO in Rd-l which contains the min­imum of ~. Furthermore, the number of pairs of L~j s intersecting 
AO is at most ID I/r2. Con­sider the d -1 linear orders induced on the set of L~j s by their Z&#38;l 
values at the d 1 ver­ tices of A (or at infinity as explained above). Forj, =l,..., d landk =l,...,ll)l,denote 
by u; the set of the k lowest hyperplanes relative to the j th order. Proposition 5.5. FOT any i and 
j (1s i< js d 1) and joT every k (k = 1,..., IDI), 1~~ 0 ~~1 < 41~1/7z . PToof: As in Proposition 3.2, 
  lze ui=(a \ Ujju(q \ w so if, on the contrary, IUi e v~l > 41~1/7z , then Since all the intersections 
of members of V~\tJ~ with members of V;\ 17~intersect AO, we reach a contradiction. s We now consider 
d 1 partitions of D into r < ~2/(4(d l)(d 2)) intervals of length 6 > 4(d l)(d -2)lD1/rQ: for z = 
1,... ,d 1, a partition into intervals 1~,..., 1; relative to the i th order, Proposition 5.6. For every 
k (k = 1,... ,~), Proof: We have Since l;n~: n.. enIfl = ( I,/u I: U... uqp) \ U (Ze%) , t<] and it 
follows that It follows that for each k (k = 1,..., r), there exists a hyperplane L; c l; n .. n If-l, 
such that the members of M = {Li,..., L~} do not intersect in the cylinder A*. These hyperplanes partition 
A* into prisms. Proposition 5.7. There are at most (2d 1)6 pairs (i, j) such that the prism bordered 
by L; and L~ql is intersected by L~J. PToof: The prism may be intersected only by hyperplanes in the 
union of and whose cardinality is at most d 1 2(d-1)6+2 z . 41D1/rz () which is less than (2d -1)6. I 
We now find one prism that may be assumed to contain the minimum of f. In this process we might find 
a hyperplane which cent ains the minimum. We then divide the prism into d -1 simplices and restrict attention 
to one of them, which we now denote by Al. Proposition 5.8. If2d31D1/rz < n/rl, then for every pair (A, 
B) of disjoint sets of hyperplanes Hk, such that Id\, IBI > 2n/Tl, there e~ists at least one L;j such 
that Hi G A and HJ G B, and L~J does not intersect A . Proof: We choose 8> 4(d l)(d -2)lD1/~2 such that 
(2d -1)6 < 2n/~1. For A and 1? that satisfy our conditions, there are at least n/rl Lij s inDsuchthat 
H; cAandHj cB. On the other hand, A) is intersected by at most (2d -1)6 L~j s. Under the assumption of 
the proposition, the latter is less than n/T1. Thus, we will choose T1 so that 2d31D1/rz < n/rl. On the 
other hand, ID[ < nr{, so it suffices that T2 c+1 1< ()s &#38; We are thus led to the expression for 
r(d) = t(p/n, d) as follows. First, ~(i) = qli(c+l) (where g = p/n)). Next, r(d) = It follows that where 
c = l/(c + 1) (not the c of Section 3). 5.3 Discarding constraints After we have located the solution 
of our linear programming problem in a small simplex, we can discard a large number of constraints as 
follows. As in the previous sections, we consider mem­bers of the three sets N+, N-and No separately. 
Suppose we are left with a set NJ ~ N+ of n hy­perplanes, and we have now found a simplex A in Rd l, 
which is known to contain the solu­ tion, and over which at most (p/n) (d] pairs of hyperplanes intersect. 
We also know d linear or­ders over N\ (at vertices of A, such that if a hyperplane H lies above another 
hyperplane H in all these orders, then H lies above H over the entire set A., Forj=l, . . ..d and k=l,. 
... n, denote by Vi the set of the k lowest hyperplanes relative to the j th order. Proposition 5.9. 
For every k (k = 1,...,n), the set i< j contains at mod d(d -l)n/~(al) elements. Proof: The proof is 
similar to that of Propo­sition 4.5; each of sets l?: f3 l?: contains at most 2n/T(d) elements. M Proposition 
5.10. For k = n d(d l)n/r(d), n:=, ti~ # 0. Proof: The proof is similar to that of Propo­sition 4.6: 
z n k d(o!-l)n/~(d) . Proposition 5.1~j. If k = n d(d -l)n/~(d) and H G n$=l kl then over the simplex 
A, the hyperplane H lies above at least n -d2(d l)n/~(d) hyperplanes. Proo~: The hyperplane H lies above 
every member of (1$=1 U;, but Corollary 5.12. The number of planes can be reduced from n to no mo~e 
than d2(d -l)n/~(d) in one phase where (d -1)-variabte linear pTo­grams are solved in parallel, each 
with a linear number of p9 ocessoTs. Theorem 5.13. FOT any fixed d, the linear pro­ gramming problem 
with d variables and n in­ equalities can be solved with n processors in O((log log n)d) time. Proof: 
Denote C= C(d)= 121+1/cds(d!)s It follows from what we have proven that the value of n can be reduced 
in one iteration to n/t(d), where t(d) = t(d; p/n) = C(d) (~) . After one iteration the new value oft 
= t(d) is t! = t1+6d, so after k iterations, t(k) = t(l+ dl~. I Remark 5.14. We note that the algorithm 
has to start with a constant number of iterations that reduce the number of constraints by dis­carding 
constant proportions until we get t > 1, i.e., if initially n = p = m, we need to re­duce n until n < 
mC -d. In terms of d, the constant proportion is 0(3-d2 ), hence the con­stant number iterations is 0( 
log C(d)3d2 ), i.e., 0(3d d log d). Then, the variable number of it­erations is O(log log n/(log(l + 
c)), i.e., O((c + l)d log log n). 6. The problem of processor allocation All of the steps of the algorithm 
except the selection procedures can be implemented on a CRCW-PRAM. There is only one step, namley, discarding 
constraints, whose implement ation is not immediate. We solved the linear program­ming problem by discarding 
an increasing pro­portion of the remaining constraints. In a typical step of the iteration we assume 
that the remain­ing n constraints are stored in an array of n cells R[l],..., R[n], and we discard at 
least n(l -1/s) (1 ~ s s n) of them. In order to continue with the algorithm, we need the remaining n/s 
con­straints to be stored in an array whose size is essentially not larger than n/s. Proposition 6.1. 
FOT every fixed e > 0, there exists an O(log log n) time algorithm for an n­processor CRCW-PRAM for performing 
the fol­lowing compaction: given an array R[l],... , 12[n] and a subset H c {1,2, ...jn} such that IHI 
= n/$ for each i 6 H, move the contents of R[i] to some R[ji] so that j; ~ n/sl-e and ,j; # j: fOT all 
i,i G H. This implies that whereever we originally re­duced the number of constraints from n to n/s, 
on a CRCW-PRAM we will be able to reduce it from n to njs l-e. This does not affect the upper bounds 
given in the previous sections. References <RefA>[1] M, Ajtai, J. Kom16s, W. L. Steiger, and E. Sze­ mer&#38;ii, 
Optimal parallel selection has complex­ity O(log log N), J. Cornp. Sys. Sci. 38 (1989) 125-133. [2] N. 
Alon and N, Megiddo, Parallel linear pro­gramming in fixed dimension almost surely in con­stant time, 
in: Proceedings of the 31st IEEE Symposium on Foundations of Computer Science (1990), IEEE Computer Society 
Press, Los Ange­les, 1990, pp. 574-582. [3] K. L. Clarkson, Linear programming in O(n x 3dz ) time, Information 
Processing Letters 22 (1986) 21-27. [4] X. Deng, An optimal parallel algorithm for linear programming 
in the plane, Information Process­ing Letters 35 (1990) 213-217. [5] D, Dobkin, R. J. Lipton, and S. 
Reiss, Linear programming is log space hard for P, Information Processing Letters 8 (1979) 96-97. [6] 
M. E. Dyer, Linear time algorithms for two-and three-variable linear programs, SIAM J. Comput. 13 (1984) 
31-45. [7] M. E. Dyer, On a multidimensional search tech­ nique and its application to the Euclidean 
one­center problem, SIAM J. Cornput. 15 (1986) 725-738. [8] A. Lubotzky, R. Phillips, and P. Sarnak, 
Explicit expanders and the Ramanujan conjectures, Com­binatorics 8 (1988) 261-277. [9] N. Megiddo, Linear-time 
algorithms for linear programming in R3 and related problems, SIAM J. Comput. 12 (1983) 759-776. [10] 
N. Megiddo, Linear programming in linear time when the dimension is fixed, J. ACM 31 (1984) 114-127. 
[11] N. Megiddo, Dynamic location problems, An­nals of Operations Research 6 (1986) 313-319. [12] R. 
M. Tanner, Explicit concentrators from gen­eralized N-gons, SIAM J. Alg. Disc. Meth. 5 (1984) 287-293. </RefA>
  
			
