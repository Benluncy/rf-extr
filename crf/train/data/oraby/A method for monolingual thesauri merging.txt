
 A Method for Monolingual Thesauri Merging Marios Sintichakis and Panes Constantopoulos Department of 
Computer Science, University of Crete, and Institute of Computer Science, Foundation for Research and 
Technology Hellas. e-mail: {mms,panos}@csd. uch.gr, {mms,pauos} @its.forth.gr Abstract Thesauri merging 
is the activity of consolidating a set of thesauri into a thesaurus which accommodates the vocabu­laries 
and the structure of all thesauri being merged. In this paper, we introduce a general framework for monolingual 
thesauri merging. We also present a domain independent set-theoretic model for the representation of 
terms, rela­tionships, and integrity constraints. Finally, we presenta method for the merging of monolingual 
thesauri focusing on its mechemisms for the detection of equivalent terms among the thesauri being merged. 
Our method expands previous work on the problem; we introduce equivalence asaumpt ions that express similarity 
between terms and we propose a term distance model which can be used to guide the confirmation or rejection 
of equivalence assumptions. Introduction In every domain of knowledge there is a vocabulary a set of 
words and phrases used to describe concepts related to the speciftc domain. The elements of such a vocabulary 
are called terms. A vocabulary is said to be contmlied, if it consists of a restricted subset of possible 
terms [30]. Ele­ments of controlled vocabularies, are usually distinguished into p-e~erred terms (also 
called descriptors) and non prejer­red term~ (also called non descriptors or ascriptors). Prefer­red 
terms are authorized for use, while non preferred terms are alternative terms describing the same concept 
aa one or more preferred terms. Concepts are coherently connected with other concepts. These connections 
are part of the semsmtics associated with a concept. Throughout this paper such connections are called 
semantic relationships or just relationships. A thesaurus consists of a controlled vocabulary contain­ 
ing terms selected from a speciiic knowledge domain and a set of relationships between them, which reflect 
relation­ ships between the respective concepts. On the basis of the number of natural languages used, 
thesauri are distinguished into monolingual and multilingual. Within the context of information science, 
thesauri have been used to assist in the retrieval of information for more krmissiontomakedigitabhd copiesofallorpartofthismaterialfm 
Xm~ttseis8MtltCd witbOUtf=pfOVidedUtalthe copies am rrd made or distributed lbr Proffi or eomttterckl 
advsntage, the copy­right oadce, the title of the puhlicatiow and its dnte appear. and notice is gi%wnthat 
copyright is by permksion of the ACM, Inc. To copy otherwise, to republish, to post on servers or to 
redistributelists, requires specific to pamissical Srt&#38;x fee SIGIR 97 PhiladelphiaPA, USA -~sht 1997 
ACM o-897$ 1-836-3EJ7/7.. $3.5o than three decades. Although free text retrieval has become quite popular 
during the last decade, the use of thesauri as components of information retrievrd systems is recently 
gaining ground [21, 15, 17]. Thesauri are an elegant and relatively cheap tool aimed of improving the 
e%ctiveness of information retrieval systems in terms of recall and preci­sion. First, they can assist 
term selection through the se­mantic roadmap they provide [28] and second, they can be used for the automatic 
query expansion with essential ben­efits in terms of recall and precision. Experimental remrlts [14, 
13, 1s] have shown that the use of thesauri as search-aid tools leads to signMcant improvement of retrieval 
ef&#38;tive­ness. In the early 1960s, the compatibtity of information re­trieval systems and controlled 
vocabularies became the sub ject of discussion and research. One of the methods aimed to reduce the incompatibtity 
of systems and/or vocabulttr­ies, wss the construction of tables translating one controlled vocabulary 
to another. An example of such a vocabulary switching system is [27]. Nevertheless, in many cases this 
approach seems infeasible [30]. An alternative and more practical approach is the merging of controlled 
vocabnhtr­ies. Theuauri merging is the activity of consolidating a set of thesauri into a thesauruswhich 
accommodates the vo­cabularies and the structure of all thesauri being merged. This activity is of practical 
importance for (i) information retrieval systems using multiple thesauri, (ii) federations of information 
retrieval systems covering similar domains, and (iii) ditkrent thesaurus developers covering similar 
domains. In the first case the goal is to improve performance (cf. [4]), while in the second and third 
case the goal is to achieve vocabulary compatibility and extensive coverage of the par­ticular domains 
respectively. Rada, Mili and Martin [18, 24, 23] were as far as we know the first researchers who dealt 
with the problem of monolingual thesauri mergingl. Svenonius [30] and Paice [21] have touched on the 
subject, while Chen and others [4] have treated a very similar problem: the on-line activation of related 
terms of multiple thesauri. However, sptig from a computationrd point of view, several issues remain 
unclear. In our opinion the moat important of them are (i) the formal representation of thesauri and 
underlying in­tegrity constraints, (ii) the phsaes of the merging process and their role, and (iii) the 
degree of automation which can be achieved or expected. 1Throughout this paper,the term monolingual thesauri 
merging signifies the activity of merging thesauri which use the same natural language. The objective 
of this paper is to address the issues ment­ioned above, ss well aa to present a specific method for 
monolingual thesauri merging. The rest of the paper is or­ganized as follows: Section 2 provides the 
necessary background on mono­lingual thesaurus organization. A general framework for the process of thesauri 
merging es well as a brief review of in­teresting work on simiiarity detection mechanisms are also presented 
in section 2. Section 3 introduces a set-theoretic model for representing thesauri. In section 4 we present 
in detail a method for monolingual thesauri merging. Section 5 summarizes the discussion and suggests 
further work on the problem. 2 Preliminaries 2.1 Term and Relationships Facets. Each thesaurus term describes 
a concept which can be a material e.g., wood , a property e.g., elasticity , an activity e.g., management 
etc. Consequently, terms can be grouped in classes with regard to the ontologicai basis of the concepts 
they describe. Such asmauticaUY cohesive classes are called ~acets and usually constitute a sort of primary 
organization of terms. Moat authors suggest that facets should be mutually exclusive i.e., each term 
should be classitled into exactly one facet, although the clasdcation of some terms such as colors pose 
difficulties. Despite that faceting is a basic structuring mechanism, most of the struc­ture of the thesaurus 
is achieved by means of relationships between terms. Among the possible types of relationships, three 
of them are used for the structuring of thesauri: equivaienw, hiemr­ chicai and associative relationships. 
Equivalence relationships are defined between non prefer­red and preferred terms to denote terme describing 
the same concept. Nevertheless, se stated in [30], there are few reel synonyms in natural languages. 
Consequently equivalence relationships are often used more loosely than stated above, including alternative 
spellings of the same term, upward posting (the equivalence between the preferred term deacrib ing a 
class of entities and the non preferred terms describ­ing elements oft hat class), common and scientific 
or formal names etc. Equivalence relationships are distinguished into three types 1. Relationships between 
a non preferred term and the equivalent preferred term e.g., Maths USE Mathematics. 2. Relationships 
between a non preferred term and a set of equivalent preferred terms e.g., Workstations USE Minicomputers 
ORMicrocomputers. 3. Relationships between a non preferred term and its (preferred terms) syntax components 
e.g., Car Engines USECars MD Engines.  Hierarchical relationships are the feature distinguishing thesauri 
from simple term lists or glossaries. Moreover they constitute the basic structuring construct of any 
thesau­rus. Hierarchical relationships are defined between preferred terms to denote that one subsumes, 
in a sense,the other. There are three typea of hierarchical relationships [11]. 1. The generic hierarchical 
relationship which has set in­clusion semantics e.g., Canaries BTGBirds. 2. The partitiwe hierarchical 
relationships e.g., Greece BTPEurope.  3. The instance relationship e.g., ~trix BT Operation Systems. 
  The first type is used in most (but not ail) thesauri [30]. But in fact the most significant feature 
of hierarchical re­lationships is not their semantics but their properties. The set of all hierarchical 
relationships of any t hesaurus consti­tutes a relation which is transitive and arttisymmetric and therefore 
hierarchical relationships form a directed acyclic graph which we call generalization hiemrch~. Some 
authors [17] maintain that preferred terms should have at most one broader term, while others [18] propose 
that all broader terms of a term should be at the same level in the gener­alization hierarchy [cf. definition 
5]. 1S0-2788 [11] is more general and permits an arbitrary number of broader terms regardless of their 
level in the generalization hierarchy. Associative relationships are used to connect semantically related 
preferred terms which are not hierarchically related e.g., Planets RT Astronomy. The associative relation 
(the set of ail associative relation­ships) of a thesaurus possesses symmetry i.e. we are always able 
to define the inverse of an associative relationship. 2.2 Thesauri Merging Thesauri merging is the consolidation 
of a set of thesauri. A similar problem arises during database design when a set of independently developed 
viewe must be integrated into a global one. Based on the similarity of these two tasks, we sdopt a decomposition 
of the process of thesauri merging which is very similar to that of the view integration process [3]. 
We diacrimin ate the following sequence of phases. Pre-integration. As a database, a thesaurus can be 
stored using an arbitrary data model and conceptual schema. The merging procedure is simplMed if all 
thesauri under merging are expressed in a common data model and schema. Essen­tially this is the aim 
of pre-integration. Analysis. The objective of this phase is the detection of terms (one from each thesaurus 
being merged) which de scribe the same concept. We call such terms equivalent. Each cisss of equivalent 
terms should be integrated into a new term, articulating the thesauri being merged. An issue of greatimportance 
is how one cart detect or suspect the existence of such terms with automatic means [21]. In sec­tion 
2.3 we review in brief some interesting methods from various areas of research. 2we ~uat mention hem 
that thw kind of equivalenceiequitediff=~ ent from the equivalence between prekrred and non W&#38;IA 
tetrns described earlier, in the sense that the former is canceraed with terms originating from different 
thaeauri. Ram 00W on when we refer to equivalent terms, equivalence between terms of different thesauri 
u implied unleee otherwise stated. Conformation. In some cases the structure of individual thesauri makes 
merging impossible. Such cases are referred as conflicts. Conflicts arke as a result of structural dfler­ences, 
violation of desired properties such as the antisym­metry of hierarchical relationships, or dfierent 
names for the same concept, During conformation confhcts should be detected and remedied. Integration. 
When equivalent terms have been detected, and conflicts have been discovered and eliminated, the next 
step is to integrate the thesauri in order to produce the merged thesaurus. Restructuring. The result 
of the integration can be ana­lyzed and, if necessary, restructured so as to achieve comp­leteness and 
minimality. A merged thesaurus is said to be complete if it represents the union of the concepts repre­sented 
by the initial thesauri, and minimal if each distinct concept is represented by a unique preferred term. 
 2.3 Related Work As already mentioned, the major problem involved in the merging process is the detection 
of equivalent terms em­ploying automatic means. Similar problems arise in the con­text of database and 
schema integration [3], information re­trieval, software reuse etc. The general approach employed in 
most cases is to establish a model of similarity or disimmi­larity between concepts or objects, on the 
basis of structured descriptions. Gotthard, Lockeman, and Neufeld [10] propose a model for similarity 
detection between constructs (relationships, attributes, entity types etc. ) of conceptual schemata in 
the complex entity relationship data model. Similarity detec­tion is based on the computation of the 
intersection of the property sets of two constructs. If the intersection is not empty the two structures 
are supposed to be similar. The procedure is assisted by humans who have the responsibtity of decision 
making. Virtually the same approach, is adopted by Batini and Lenzerini [2] and Dayrd and Hwang [7] except 
that their criteria are more restrictive. Girardi and Ibrahim [9], propose a mechanism for the re­trieval 
of software artifacts baaed on their natural language descriptions. Similarity between descriptions is 
defined as a monotonically decreasing function of their dwtance. An essential feat ure of their approach 
is the computation of the distance between noun phrases which consist of a head (noun) and a list of 
modifiers e.g., Office Automation . The distance between simple (i.e., consisting of a single word) terms 
is derived from a thesaurus, while the distance of two noun phrases is defined as the distance between 
the two heads plus the distance between the two sets of modifiers. The latter turns out to be min ~ d(a,b) 
,i~[l ,n!] (a, b) EC, {} where Ci, is a combination of n metiers taken two at the time, d(a, b) is the 
distance of the simple terms a and b, and n is the cardirmlity of the sets of modifiers. That is, the 
dwtance between the noun phrases (Itl, {al, az}) and (h~,{bl,k}) is equal to d(hl,h~) +min{d(al, b,) 
+d(a~, b~), d(u~, bl) +d(aL, b2)}. In [29], Spanoudakis introduces a model for the concep tual d~tance 
of objects defined through the basic abstrac­tions provided by the Telos data model: clasdlcation, gen­eralization 
and attribution [see the relevrmt paragraph in section 4]. The generalization diatnce of two objects 
ia de­fined as the sum of importance of their non-common super­classes. The importance of a class is 
deiined rrathe inverse of its depth in the generalization hierarchy. The classification distance of two 
objects is defined as the sum of importance of their non-common classes, while the attribution distance 
is defined recursively on the basis of generalization, claaai­fication and value domain distance. These 
partiaf distances are aggregated in an overall conceptual distance. Mti and Rada [18] detect similar 
terms on the basis of their lexical similarity. They use a simple suffix stripping algorithm coupled 
with some a-priori knowledge about the structure of the thesauri under merging. They also detlne a d~tance 
measure between terms baaed on hierarchical rela­tionships but they mainly use it for matching documents 
to queries, rather than similarity detection. 3 Thesaurus Organization In thissection we describe in 
a set-theoretic manner, the organization of a database storing a thesaurus and we for­mulate the constraints 
it should satisfy. DEFINITION I A thesaurus is a tuple O= (T, P,F, G, E, A) where T = {t,, i2,... , tn} 
ia the set of terms, P={zl, zz, ..., z~ } is the set of preferred terms, T P = {u,, u2,..., un_m } is 
the set of non preferred term8, 7 is the set of facets and G, E, A are the generalization, equivalence 
and association relations of 6, respectively. DEFINITION 2 Each term tET, is associated with its identifier 
#t, through the bijection 18 : T -N. That is, Ie(t) = #t, VtE T. DEFINITION a Each preferred term z E 
T is represented by a tuple ~= (#z, F, B,R) where FGF B = {#y :v EP is a broader term ofz} R = {#y :v 
EP is a retated term ojz] Clearly, a preferred term can have an arbitrary number of broader terms. A 
preferred term can also be claaaitied into an arbitrary number of hcets. DEFINITION 4 Each non preferred 
term is represented by a tuple g= (#u, r,U) where = {#z :z E P is equivalent to u} if r= Ou {#z :z C 
P is a factor ofu} i~r=l { According to definition 4, a non preferred term can have one or more equivalent 
preferred terms. Syntactic fwtoring is also supported. From now on, we shall consider notations x and 
g ss equivalent and therefore we shall write z.A instead of Z. A, u.U instead of g.U etc. DEFINITION 
5 The specialization level ofprejerred term z, L(z), is giuen by the function which is recursively defined 
as: L defines a partition of P into sets called specialization lev­ els. The i-th specialization level 
is dejined as Li={~EP:L(z)=i} (2) Integrity Constraints Hierarchical paths should not form cycles if 
the antisymme­try of the generalization relation is to be preserved. A hier­arclucal path from ~il to 
Zil IS a sequence Zil, Ziaj ....Zil of terms, such that i z 2 and #~ij+l E ~ij.B, Vj E [1, I~ 1]. We 
shall denote such a path .ss ~ilw ~il. A hierarcluca.1 path z + y is a cycle if #z = #y. In order to 
preserve the antisymmetry of the generalization relation it must hold that z* Y+#z ##Y (3) DEFINITION 
6 The generalization relation G of thesaurw O is the smallest subset ofPxP sdtisjying the following conditions: 
y~Pand#y~z.B + (z, Y)EG (4) (z, y) EGand(y, z)EG * (z, z)EG (5) The inverse relation of G,S= G-l, is 
the specialization relation. Conditions (3) and (5), ensure the antisymmetry and trau­sitivit y of G, 
respectively; therefore G is a partial order on P. Since G is transitive, if y is a broader term of z 
and z is a broader term of y, z is also a broader term of z. We denote as G+ (z) and S+ (z), the set 
of rdl broader and narrower terms of a term z respectively. G+(z) = {v EP:(z, v)EG}  s+(z) = {vcP:(Y,z)EG} 
 Furthermore, hierarchical relationships should not be redun­dant: a hierarchical relationship should 
not be explicitly stat ed if it is implied through the transitivity of the gener­alization relation. 
Therefore it must hold that #YE x.B*#z EG+(z) : #y E z.B (6) As stated in section 1, non preferred terms 
are not au­tonomous they are always related with one or more pre­ferred terms through equivalence relationships. 
Therefore it must hold that DEFINITION 7 The equivalence rektion E of thesaurus @ is a subset of (T P) 
x P satisfying the following condition: E={(u, z):u ET-Pandz EPand#z~u.U} (8) DEFINITION a The associative 
relation A of thesaurus is the smallest subset of P x P satisfying the following con­ditions: yEPand#y 
Ez.R * (z,Y)EA (9) (z, y)EA a (y, z)~A (lo) In addition, any thesaurus should satis&#38;two more con­ditions. 
First, relations G, S, A and E should be pairwk disjoint. That is, two terms related through a relationship 
of a particular type, should not be related through any rela­tionship of diferent type. Consequently 
it must hold thata SnA=Gn A=O (11) Second, a term should not be related to itself through any type of 
relationship. That is {#z} nz.B = {#z} nz.R= OVz E P (12) 4 Merging Thesauri In general, a merging procedure 
is called rn-ary, according to the number of arguments (in our case thesauri) it has. Our method is b-, 
having the advantage of simplicity, although a more complex implementation (m > 2) might be more effiaent. 
Throughout this section we assume that 81 = (TI, PI,7i, GI, EI, AI) and 02 = (Tz, P2, X2, G2, &#38;,A2) 
are two monolingual thesauri being merged, and 0= (T, P,F, G,E,A) is the result of the merging. The 
basic idea is simple; we must detect equivalent terms and integrate them. Detection of equivalent terms 
is based on the general approach presented in section 2.3 i.e., we treat terms and relationships as structured 
descriptions of concepts and we establish a model of sirnikity of these de scziptions. However it is 
obvious that simikity of such de­scriptions can not guarantee that the respective concepts are identic~ 
it reflects potential equivalence of them. This holds in the cpae of thesaurus terms as w~ one can com­pute 
pairs of potentially equivalent terms which should be confirmed or rejected. Thronghont this paper, such 
pairs are called equivalence as8umption8. As a consequence of adopting this approach, merging phases 
are organized in two interleaving and iterative stagea called confirmation and merging. The former is 
part of the analysis phase, while the latter comprises the phases of con­formation and integration of 
equivalent terms; thesaurus re­structuring is ignored. Figure 1 and table 1 present the decomposition 
of our merging method. The steps of the method are discussed in detail within the following sections. 
 4.1 Pre-integration During pre-integration we ibrm the thesaurus @ by taking the union of the corresponding 
elements of 01 and 62. Yet we require that t?l and 02 satisfy the following conditions T1nT2= $ (13) 
FI= F2 (14) 3It ia ~bvi~u~ ~m &#38;flnition 4 that the intersection of E with A other relation is the 
empty set. Fbtherrnore (3) ~ S n G = . .  Icw--c=es L={} FCT 6 Iyes RES 8 + &#38;mnempty SRC 3 Alyen 
RES 8 yes +1 &#38; Figure 1: The steps of the merging method The validity of ( 13) can be ensured by 
inserting term-prefixes e.g., AAT.sculptures . For the actual representation of the thesauri we use the 
Semantic Index System (S1S) a knowledge management system which adopts the Telos data model [20]. Readers 
interested in a extensive description of S1S are referred to [6], [8] and [1]. Here we briefly sketch 
the structural part of Telos. The Telos data model. Telos provides two types of objects: individuals 
used to model entities, and attributes, used to model relationships between objects. Three basic abstrac­tions 
are also provided: classification, genemlization and at­tribution. Classification defines an infinite 
dimension along which objects (individuals or attributes) can be claesiiied in predefine disjoint clesses 
which distinguish the successive levels of classification (tokens, simple classes, metacia.wes, metametaclasses 
and so on). Additionally objects can be claasitied as instances of user-defined classes. Classes in Telos 
can be generalized into other classes, through M relationships. Such relationships have a set inclusion 
semantics, they are transitive and acyclic. They allow multiple, strict inheritance of attributes from 
a super­ckas to its subclasses. Attribution allows the attachment of attributes to ob­jects. Since attributes 
are objects, they can be classified into attribute classes, generalized and have attributes of their 
own. Using the abstractions described above, a designer can create conceptual schemata often called models 
in the ter­minology of Telos. A model for the representation of a the­saurus is shown in figure 2. 4.2 
Computation of Equivaknce Assumptions Following the approach adopted in [18], we use lexical simi­larity 
in order to detect terms describing the same concept. o INI Initmhze. 1 EQV ~ etect equi 2 NXT selecta 
set of equwal ence aaeumptlons for further processing. 3 SRC Determme lf any of the equivalence e sumptions 
selected in step Z, has already been confirmed. 4 EVL Evaluate and confirm or reject equwal ence assumptions. 
\ !UPD u 5 palate the sets of contirmed and reycted assumptions according to the results of the II step 
4. 6 I-CT Deterrmne S the set of coni%rrned asaump tiona has been exhausted. 7 CFL Determine if the in-ration 
of two eaniv­ alent terms gives rise-to conflicts. 8 RtS Report and resolve codicts. 9 INT Integrate 
two equwalent terms. 10 END Termmate the mergmg process. Table 1: Description of the stepa of figure 
1. Nevertheless our approach comprises several additional fea­tures. First, we consider as equivalent 
not only terms having a common stem such as sculleries and scullery , but also terms consisting of sirnikr 
words but having different syntax such as sculpture, direct metal and k&#38;et metal sculp ture . To 
detect such terms, we compare term signature~ instead of comparing the terms themselves. A term signa­ture 
is the string which results if we remove high-frequency words e.g., of , from , the etc., remove suffixes 
from all remaining words [22] of the term, permute the resulting stems in alphabetical order and concatenate 
them. Obvi­ously, term prefixes are not taken into account in the compu­tation of term signaturea. For 
instance, the terms System Theory and Theory of Systems have the same signature: syste~theory. We shall 
denote the signature of the term z as Sig(z). Second, the equivrdence relationships embodied in the thesauri 
being merged are exploited in the computation of equivalence assumptions:  DEFINITION 9 Two prejerred 
terms z, g E P an? assumed to be equivalent (we shall write z ~ y) if at Ieaut one of the following conditions 
hold: Sig(l!) = sig(~) (15) sig(z) = sig(u) and #y E u.U (16) sig(g) = sig(u) and #z E u.U (17) sig(u) 
= sig(v) and {#z, #v} S u.U l-Ju.U (18) Finally, the set of equivalence assumptions A, is delined as 
the transitive closure of the set {(z, y) E PxP :z ~ y). .4={(z, y) EPx P: z-&#38;}* (19) Obviously, 
A is an equivalence relation on T,4={XEP:(Z, ~)EA} since its reflexivityy and symmetry are inferred from 
equw tions (15)-(18). Mets Ua$s level   i ! , I ,J  , , r a+cistsar ssm Hi*rarehyT.m ,,, t: , \ 
; , ,,,, ! $ U-8 ~m esrrlsuruw ,). ,, , , , m=+ , . ,;$ CnaLansv&#38;@Cd-mb*b /@E@ 7 <:. ..!T., y 
, ,.f;: !  IL!- :­ , :,.. ;... t, , , ., .. \, Figure 2: A model for the representation of thesauri 
in Telos Ellipses represent individuals, thick solid edges indicate generalization (IsA relationships), 
thin solid edges indicate attributes, and dashed edges indicate classification (InstanceOj relationships). 
The attribute classes BT and KTmodel hiermchical and associative relationships respectively, while USE, 
USE+ and USE* model the three types of equivalence relationships described in section 2. Inverse relatiomddps 
(e.g., IT or UP) are not part of the model since the storage mechanism of S1S keeps them implicitly. 
The token SCULPTUSE is a preferred term which is a broader term of both LIFE IIASKSaud DEATH MASKS,and 
related with the term SCULPTUSE TECEIIQUES. sculptors is au alternative (non preferred) term for SCULPTUKE. 
It is obvious that we try to detect similar preferred terms only. This is because preferred terms are 
nodes in the gen­ervdization hierarchy while non preferred terms are not and consequently, cannot be 
used to articulate thesauri. 4.3 Selecting Assumptions Step 2 in figure 1 selects a subset CA from the 
set of equiv­alence assumptions A. Obviously this step determines the order in which equivalence assumptions 
are evaluated and therefore is critical. As figure 1 indicates, a topdown strat­egy is adopted; the terrns 
which participate in equivalence assumptions are exarnined according to the ordering im­posed by the 
generalization relation G i.e., L(z) < L(y) * z is examined before y. The term which is examined in 
each execution of step 2 is called the current term and determines the set CA. More speafically, if z 
is the current term, the set of equivalence ssaumptions selected wiIl be: C.4(t) = {(~, Z) E An(P, X 
p ): {~, Z} n [Z]A # 0} (20) Readers are reminded that A isan eguivaience rviation and therefore it 
imposes a partition of TA into equivalent classes [25]. The equivalence class of the term x with respect 
to A, is denoted as [z]A. According to (20), CA(Z) is the set of equivalence S8sumptions hto which elements 
of [2]A p~­ ticipate. It would be perhaps more natural to select only those equivalence assumptions involving 
the current term, nevertheless this may give rise to problematic sitnationa as the following example 
illustrates: Consider figure 3 and let us assume that the currentterm is5( B. Microcomputers ). If we 
select ordy the equivalence assumption (5, 2), we will force the supervisor ta make a de­cision based 
on incomplete knowledge, since he/she ia proba­bly not aware of the existance of the equivalence assumption 
(2, 4). Therefore both equivalence assumptions should be se­lected. Clearly this strategy can lead to 
the conformation of some equivalence assumptions which do not comprise the current term. Such confirmed 
assumptions should be stored (step 5) in order to be used later (step 3).  4.4 Evaluation of Equivalence 
Assumptions As stated earlier, terms involved in an equivalence ~P­tion do not always render the same 
rue-. I%@ ~ occur either because of homographs e.g., cranesm (bikla or lifting equipment ) or because 
different terms have a common &#38;­nature e.g., Management Information Systems and %­ 134 AJvlWxxn@&#38;ss 
A. MlcmcornPJWS II I  1 ? - 1 A. ParsofnYl COmFUWS I B. Paaonol Computers I ! (o) 1 2 1 A.WdcarrWlars 
2 A.Micrwump@aa L/3 3 A, Psrtorral Computen 4 &#38;Peaond Cc!4nPlI@IS 5 B. Mlcrccomputers 6 4 5 6 B. 
Mlnkornputefs TmMs (b) (c) Figure 3: An example of selection of equivalence assumptions (a) A thesaurus 
excerpt. (b) Terms and respective identifiers. (c) The set of equivalence assumptions A represented as 
a graph; nodes representtermz and edgesrepresentequivalenceassumptions. formation Systems Management 
. As a result, we need a mechanism by which we can (to a certain degree) evaluate if two terms describe 
the same concept or not. Our approach is guided by the following assumption: if two terms describe different 
concepts, they should be rel­atively far in the generalization hierarchy and probably are claaahied into 
different facets. Conversely, terms which are close in the hierarchy, should describe the same con­cept. 
One could oppose the example of the terms %xono­metric drawings and orthographic drawings , which aJ 
though they are close (both narrower terms of the term scale drawing ) in the AAT thesaurus, do not describe 
the same concept at all. Indeed the closeness of terms in the hierarchy does not necessarily imply their 
equivalence. But this closeness, combined with lexical similarity is a very strong evidence about their 
potential equivalence. Term distance models in thesauri have been proposed by Paice in [21], Mili and 
Rada in [18] and [24], Chen et al in [4] and others, All these models ae based on spreading activation 
theory. We introduce a model of term dieeirrtilar­ity inspired by the model of analogical similarity 
of objects proposed by Spanoudakis in [29] and the contrast model in­troduced by Tversky in [31]. DEFINITION 
10 l heterm identification absolute distance is given b~ the function DI:PXP {0,1) which is defined as 
O if#z=#g Dr(z,l/) = (21) 1 if#z ##y { DEFINITION 1I The absolute term generalization distance is given 
b~ the function ~G:px~-[O,+IX)) which is defined as DG(z, y) = (22) ZEG+(~G+(,,+ The generalization distance 
between two terms depends on both the number and the specialization level of their non-common4 broader 
terms. We consider general terms to be more significant than specitic terms and therefore the contribution 
of a term to the generalization distance of two other terms is an increasing function of its generality. 
DEFINITION 12 The absolute term ctication distance is given bg the function DC: PXP [0,+00) which is 
defined as Dc(z, y) = IZ.F + y.Fl (23) That is, the classification distance of two terms is the num­ber 
of their non-common facets. DI, DC, and DG are partial distance functions in the sense that each of them 
computes a distance according to different criteria. In order to obtain an ovemll distance func­tion, 
these partial distances should be aggregated. DEFINITION 13 The absolute overall term distance is given 
by the function  A: PxP--+[o, +m) which is dejined as A(z, y) = w~~~(m, y) + WGDG(Z, y) + wc~c(z, v) 
(24) where the coefficients WI, WC, V.@ control the reiatiue contri­bution of each partial distance to 
the overall distance. DEFINITION 14 The normalized overall term distance is given b~ the function 6: 
PXPX(O,l] -[0,1] which is defined as 6(z, y,w) = 1 e-WA( g) (25) where w controls the behavior oj 6. 
In contrast to A which can be arbkrary large, 8 is bounded and consequently more convenient for comparisons. 
4The operator + computes the symmetric difference of two sets A, Bi.e., A+ B=(A-B)U (13-A). 135 Using 
the conceptual term distance. Consider the thesau­rus excerpt in figure 4a. According to (22) itis =3. 
~c(q, s) = J--+ J-+~+ 1 L(W) L(p) L(z) I&#38;) Also assume that terms z and y are integrated into term 
z (figure 4b). Now lk(q,s) = O. As thisexampleillustrates, the computation of the absolute genemlization 
distance be­tween ang two terms is valid only when all their equivalent broader terms have been integmted. 
This is ensured by the topdown strategy of the method. The objective of the conceptual term distance 
is to pro­vide assistance in evaluating equivalence assumptions. This can be done in two difFerent ways: 
The first is to choose among the set of equivalence assumptions selected in step 2 (be it CA ~ A), that 
one which demonstrates the minirmd conceptual distance between the relevant terms i.e., choose (iz,gf): 
8(2, g,w) = &#38;l#lA{qz, W,w)) and confirm it if the corresponding distance is below a given threshold 
M. The second one is to present all assumptions selected and the corresponding conceptual distances to 
the supervisor and leave the responsibility of conilrmation to him/her. In our implementation both choices 
are provided.  4.5 Term Integration The integration of two terms does not pose any difficulties; termss 
and y shown in figure 4 are integrated, resulting the production of term z. It should be mentioned that 
the set of direct broader terms of the integrated term z, is calculated by Algorithm 1 such so to prevent 
the violation of integrity constraint (6) ALGORITHM 1 (integrate) input #z, #y: The identifiers of the 
terms to be integrated z : The term to be created output #z The identifier of the integrated term begin 
#z-create(z) z.F+ z.F U y.F z. A+-z.A U y./i z.Bt (zJ3 (G+(y) -gI.B)) U (y.B (G+(z) z. B)) foreach 
w : #u G u.U and #tJ E {#z, #y} do U.u+ (U. u -{#v}) u {#z] return #z end 4.6 Detection of Conflicts 
and Conformation The integration of two terms, performed by Algorithm 1, may result the violation of 
integrity constraints (3) and (11). Thus, before each integration we should ascertain if these const 
mints are going to be violated. In such case we can either abort the particular integration or conform 
the con­ fecting relationships and try again. In [18] the conformation is done in a predetermined manner: 
conflicting hierarchi­ cal relationships are replaced with association relationships. In our method, 
we leave the responsibility of conformation to the designers. This follows from our belief that since 
thesaured relaticmships reilect certain design decisions, they should not be modified in a predefine 
manner. Violation of antisymmetry. Let z, y be two terms which are going to be integrated and L(z) < 
L(y). Constraint (3) is violated M there is a hierarchical path y -z. Clearly if such a path exists its 
length cannot be greater than / = L(y) -L(c). Suppose that G1(y) is the set of terms z such that there 
is a path y * z with length at most 1. Then the integration of z and y by Algorithm 1 violates (3) M 
z E G1(y). V{olation of relation disjointneaa. If z and v are going to be integrated, constraint (11) 
will be violated Mat least one of the following conditions hold: G+(z) nY.A # 0 (26) G+(Y) nz.A # O (27) 
S+(Z) ny.A # 0 (28) S+(Y) n z.A #0 (29) Conditions (26) and (27) do not pose any diiliculties. On the 
contrruy, if L(z) or L(y) are small, S+(s) or S+ (y) may be very big sets. In such cases we can exploit 
the fit that if for example (28) holds, there is a path w -z, w E y.A. Thus if I = L(w) -L(z) >0 we can 
compute G1(w) instead of s+(z). 5 Concluding Remarks and Future Work A method for merging monolingual 
thesauri, has been pre­sented, emphasizing the features of its mechanisms for de­tecting equivalent terms. 
Our method is an iterative proc­dure for the incremental articulation of two initially disjoint thesauri. 
Unlike older attempts on the problem, our method is application independent and focuses on the properties 
and the semantics of thesaural relationships as detined in [11] and other related work such as [30] and 
[19]. Although this increases complexity, we are primarily concerned with the tiectiveness of the method, 
that is its successful use for thesauri merging. We have implemented a prototype of our method in C++ 
using the storage and retnevrd mechanisms of SIS; it has helped us to get insight about the whole procedure. 
We are now in the final phase of the construction of an integrated tool for thesauri merging. The next 
step is to conduct experiments in order to w seas the performance of the two mechanisms employed for 
the detection of equivalent terms: equivalence assumptions and conceptual term distance. We are also 
interested in the experimental evaluation of the computational complexity of similmity and conflict detection 
in combination with cez­tain properties of thesauri such es the number of preferred terms, the depth 
of the hierarchy, the number of polyhier­archlcal relationships etc. Such experiments are currently under 
preparation. Although thesaurus restructuring has not attracted much of our attention in this paper, 
we are deeply concerned in exploring mechanisms for assisting restructuring. We feel that the key-issue 
in this context is to develop mechanks for the detection of redundant terms and relationships, but we 
also recognize that much more acquaintance with the structure of merged thesauri should be obtained fust. 
Acknowledgments The authors would like to thank Martin Doerr for his contri­bution through long, stimulating 
discussions, an anonymous  E? &#38;K (a) (b) Figure 4: Term integration Solid edges indicate hierarchical 
relationships, dotted edges indicate equivalence relationships and dashed edges indicate associative 
relationships. (a) Terms z and y are to be integrated producing the new term z. (b) The result of the 
integration. referee for thorough, constructive comments, Anastasia An­aiyti for her valuable remarks, 
and Manolis Kalykakis for help with the manuscript. References <RefA>[1] A. Analyti, N. Spyratos, and Constantopoubs 
P. On the Definition of Semantic Network Semantics. Tech­nical Report 187, Institute of Computer Science, 
Foun­dation of Research and Technology Hellas, 1997. http: Ihrm. ics .forth. gr/pro_j/isst/Publicat ionc/. 
[2] C. Batini and M. Lenzerini. A Methodology for Data Schema Integration in the Entity Relationship 
Model. IEEE Transactions on Software Engineering, SE-10( 6):65O-664, 1984. [3] C. Batini and M. Lenzerini. 
A Comparative Analysis of Methodologies for Database Schema Integration. ACM Computing Surveys, 18(4):323-364, 
1986. [4] H. Chen, K. Lynch, K. Baau, and T. Dorbk. Generat­ing, Integrating, and Activating Thesauri 
for Concept-Based Document Retrieval. IEEE Ezpert, April 1993. [5] P. Constantopoulos and M. Doerr. Component 
Classi­fication in the Software Information Base. In Nierstrasz O. and Tsichritzis D., edkors, Object-Oriented 
Software Composition. Prentice Hall, 1995. [6] P. Constantopoulos, M. Jarke, J. Mylopoulos, and Y. Vsssiliou. 
The Software Information Base: A Server for Reuse. The VLDL3 .lournal, 4(1), 1995. [7] U. Dayrd and H. 
Hwang. View Definition and Gener­alization for Database Integration in a Multidatabase System. IEEE Tmnsactions 
on Software Engineering, SE-10(6):628-644, 1984. [8] M. Doerr, P. Klimathianakis, and M. Theodorakis. 
S1S Data Entry Language User s Manual. Institute of Com­puter Science, Foundation of Research and Technology 
-HeUas, Iraklion, Crete, 1995. [9] M. R. Girardi and I. Ibrahim. A Similarity Measure for Retrieving 
Software Artifacts. University of Geneva, Centre Universitaire d Informatique, 1994. [10] W. Gatthard, 
P. Lockemann, and A. Neufeld. System-Guided View Integration for Object Oriented Databases. IEEE Transactions 
on Knowledge and Data Engineering, 4(1):1-22, 1992. [11] ISO 2788. Documentation Guidelines for the Devel­opment 
and Establishment of Monolingual Thesauri, 1986. [12] 1S0 5964. Documentation Guidelines for the Devel­opment 
and Establishment of Multilingual Thesauri, 1985. [13] K. Jiirvelin etal. A Deductive Data Model for 
Query Expansion. In Proceedings of the 20th International Conference on Research and Development in Informa­tion 
Retrieval, pages 235-243, 1996. [14] J. Kriatensen. Expanding User Queries Using a Search-Aid Thesaurus. 
Information Processing and Manage­ment, 29(6), 1993. [15] J. H. Lee, M. H. Kim, and Y. J. Lee. Ranking 
Docu­ments in Thesaurus-Based Boolean Retrievrd Systems. Information Processing and Management, 30(1):79-91, 
1994. [16] M, V. Mannino, S. B. Navathe, and W. Effelaberg. A Rule-Based Approach for Merging Generalization 
Hier­archies. ]n~ormation S@ems, 13(3):257 272, 1988. [17] Z. Mazur. Models of a Distributed Information 
Re­trieval System Based on Thesauri with Weights. infor­mation Processing and Management, 30(1):61-77, 
1994. [18] H. Mfi and R. Rada. Merging Thesauri: Principles and Evaluation. IEEE Transactions On Pattern 
Analysis and Machine Intelligence, 10(2):204-220, 1988. [19] J. Milstead. Specifications for Thesaurus 
Software. in­formation Processing and Management, 27(2):165-175, 1991. [20] J. Mylopoylos, A. Borgida, 
M. Jarke, and M. Koubarakis. Telos: Representing Knowledge About Information Systems. ACM Transactions 
on In­formation S@ems, 8(4), 1990. [21] C. Paice. A Thesaural Model of Information Retrieval. Information 
Processing and Management, 27(5):433­447, 1991. [22]M. F. Porter. An Algorithm for Suffix Stripping. 
Pro­gmm, 14(3):130-137, 1980.  [23]R. I&#38;da and B. K. Martin. Augmenting Thesauri for Information 
Systems. ACM Tmn9actions on Of)ice In­formation S@ems, 5(4),1987. [24]R. Rada and H. Mili. A Knowledge-Intensive 
Learn­ing System for Document Retrieval. In K. Morik, ed­itor, Knowledge Representation and Organization 
in Machine Learning, volume 347of LNAI, pages 65-8 ?. Springer Verlag, Berlin, 1989. [25]K. D. Ross and 
Wright C. R. B. Discwte Mathematics. Prentice Hall, 1985. [26]G. Salton. Automatic Text Processing. Addisaon 
Wes­ley, 1989. [27]S.P. %lvester and P. H. Klingbiel. An Operational System for Subject Switching between 
Controlled Vo­cabularies. Information Processing and Management, 29(1):47-59, 1993. [28]D. Soergel. The 
Arts and Architecture Thesau­rus (AAT): A Critical Appraisal. Visual Resources, 10(4):369-400, 1995. 
[29]G. Spanoudakis and P. Constantopoulos. Elaborating Analogies from Conceptual Modela. International 
3our­nal of Intelligent S@ema, 11(11):917 974, 1996. [30]E. Svenonius. Design of Controlled Vocabularies. 
In Encyclopedia of Library and Information Science, pages 83-109. Marcel Dekker} 1989. [31]A. Tversky. 
Features of Similarity. Psgchologicol Re­view, 84(4),1977. </RefA>
			
