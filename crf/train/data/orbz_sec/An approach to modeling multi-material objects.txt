
 An Approach to Modeling Multi-Material Objects Vinod Kumar Debasish Dutta vinodk@engin.umich.edu dutta@engin.umich.edu 
Department of Mechanical Engineering and Applied Mechanics University of Michigan, Ann Arbor, MI 48109-2125 
Abstract Currently, solid modeling techniques are capable of capturing only the geometric and topological 
information of an object. However, there is a growing need for including additional information (such 
as material) in the solid model. Our focus application is Layered Manufacturing (LM), a process which 
is capable of fabricating a part made of several materials. In this paper, we present an approach to 
model multi-material objects and define new modeling operations for their manipulation. We also develop 
a computer rep- resentation for these new models. Finally, we present some exam- ples highlighting the 
implementation and fabrication by LM. 1.0 Introduction Traditional geometric/solid modeling has focussed 
on modeling objects based on their geometry and topology [ 1][2][3]. The solid model of an object contains 
geometry information stored as data, and topology information incorporated in the data structure. How- 
ever, it is becoming increasingly important to develop more gen- eral models of solids to serve the needs 
of applications such as motion planning, composite and geological structure modeling, CAD/CAM, medical 
imaging etc. [6][7]. Some of these applica- tions require modeling the solid interior of a non-homogeneous 
object [6]. Layered Manufacturing (LM) is one such application that requires information about the interior 
of an object for fabrica- tion. LM is a process in which material is (selectively) deposited, layer by 
layer, to manufacture a part. It has the capability to manufacture objects composed of multiple materials. 
Some typical examples are shown in Figure 1 [5]. Hence, the inclusion of material data in the solid model 
(along with geometry and topology information) becomes crucial for fabricating multiple-material objects 
using LM. An assessment of existing representations for LM is presented in [8] highlighting the need 
for new solid models which represent an object s interior. ACKNOWLEDGEMENTS: Financial support received 
from Office of Naval Research grants NOOOl4-94-I-0022 and N00014- 95 l-0767 is gratefully acknowledged. 
FIGURE 1. Examples of multi-material objects In this paper, we focus on developing an enhanced solid 
model which in addition to representing the geometry and topology of an object, can be used to incorporate 
additional information about the object. We consider layered manufacturing as an application where material 
information needs to be included in the solid mode1 of an object. It is assumed that the objects to be 
modeled are made of finite number of unique materials. The new (enhanced) solid model must inherit the 
structure of the traditional solid model for compatibility in addition to including material information. 
Also, the new modeling scheme must handle any material based opera- tions as well as traditional modeling 
operations. We briefly describe current solid modeling schemes in Section 2.0. Next, in Section 3.0, 
we extend the notion of r-sets used in current solid modeling to include material information. We also 
propose new modeling operations necessary for the creation, manipulation and interrogation of the enhanced 
solid model. In Section 4.0, we describe the computer representation of the new model and its implementation. 
We also present some examples and discuss the fabrication of these models using LM. Finally, we conclude 
in Sec- tion 5.0. 2.0 Current solid modeling system Generating a solid mode1 is a two-step process [2]. 
First, a valid mathematical model has to be created which precisely and fully describes the shape of 
the object. Then, the generated mathemati- cal model has to be stored in the computer unambiguously with 
minimal loss of information. See Figure 2 below. FIGURE 2. Steps in modeling an object  2.1 Mathematical 
Model The Euclidean space R3 being an acceptable idealization of the physical world, forms an ideal choice 
for the modeling space T in which mathematical models are created. Certain subsets of this space called 
r-sets and manifold solids are widely accepted as valid mathematical abstraction of physical objects 
[2][3]. An r-set is a compact, re ular, semi-analytic subset of R3. A manifold solid is a 3 subset of 
R whose boundary is a 2-manifold realizable in R3. Other valid abstractions of physical objects include 
s-sets [lo] (bounded, open, regular pointsets of R3) and Selective Geometric Complex (a combination of 
mixed dimensional entities and inci- dence graph) [I 11. From now on, we consider only the class of r- 
sets (denoted by A). For ease of creation, a subclass B c A is cho- sen as primitives or basis to generate 
other r-sets in A. Any two r-sets can be combined using a set of model;lng operations called regularized 
boolean operations (reg-union u , reg-intersect n*and reg-difference /*). Given two r-sets P and Q, the 
regularized booleans (denoted as Cl ) are defined as: q*: AxA-+A (EQ1) where d (P E A, Q E A) = PO *Q 
= clo(int(POQ)) where 0 represents one of the set theoretic operations (union U, intersection A, and 
difference /) and, clo(int(S)) represents regu- larization of the pointset S (i.e., closure of the interior 
of set S). The class of r-sets has the advantage of closure with respect to the regularized boolean operations. 
An r-set can be disconnected and hence, an object with many com- ponents (components are connected sets) 
can be modeled with a single r-set. Also, homogeneity of an object s interior is an implicit assumption 
in modeling objects using r-sets. Thus, an object mod- eled as an r-set is assumed to be composed of 
a single material. 2.2 Computer Model A computer representation of a mathematical model is a symbol 
structure that designates the mathematical model to a physical object i.e., it defines the way in which 
the abstract mathematical solid correlates to the physical object. The most commonly used representation 
schemes are the Constructive Solid Geometry (CSG), Boundary Representation (B-Rep) or a hybrid of these 
schemes. A detail discussion of these methods can be found in [11[21. In this paper, we primarily use 
a hybrid system. As r-sets are used as the basis for modeling, the core of the modeler is a non-mani- 
fold B-Rep scheme. The use of a non-manifold scheme [9] allows non-manifold topologies like internal 
faces, non-manifold neigh-borhoods etc. Some of these features are necessary for the enhanced solid modeling 
system to be described below. 3.0 Enhanced solid modeling system: Material inclusion In the previous 
section, we briefly looked at the existing solid mod- eling system for representing a physical object 
in the computer. No information regarding the material of the object is incorporated and so, objects 
made of multiple materials cannot be modeled directly in such a scheme. In this section, we discuss how 
the exist- ing system can be enhanced to include material information along with the geometry and topology 
of the object. As mentioned in Section 1.0, the focus of this work is to include material informa- tion 
of objects made of finitely many unique materials into the computer model along with their geometry and 
topology. 3.1 New Mathematical model: r,-sets and r,- classes In order to represent objects made of 
multiple materials, the math- ematical space T must be modified. The space T must now include a material 
dimension (M) apart from the spatial dimensions Fi3 that captured the geometry and topology of the object. 
As we are only considering objects made of a finite number of unique materials, the simplest choice for 
the material dimension M would be the set of integers I. Then, the product space T = R3 x I with the 
product topology can form the new modeling space for representing multi- ple-material objects. Previously, 
the class of r-sets A in R3 was used as the valid mathe- matical model for objects. To include the material 
information, a new class A,,, = A x K is defined where A is the class of r-sets and K c I is a finite 
set of integers, each material characterized by an integer. A typical member Q E A,,, (Q = {P, k]) is 
called an r,,,-set and is composed of an r-set P E A with an integer k E K which represents the material. 
Thus, each r,,,-set is homogeneously filled with one material. We now define the following functions. 
Given an r,-set, Q E A,,, such that Q = (P, k), where P E A is an r-set and k E K, Dimension (dim): Obtains 
the dimension of the given set. dim: A,,.,+1 (EQ2) where dim(Q) = dim(P E A) + dim(k E K) Geometric 
Projection (geom): Projection function defined on a r,-set to obtain the geometry. geom : A,+A (EQ 3) 
where geom(Q) = P Hence, geom retains only the geometry of an r,-set ignoring the material dimension, 
thus converting it to an r-set. Material Projection (matl): Projection function to obtain the material 
of an r,-set. mat1 : A,.,, + K (EQ4) where matl(Q) = k Material Selection (msel): Selection of material 
for an r-set, thus converting it to an r,-set. msel: AxK-+A, V=AxAx...xA (Ntimes) (EQ 5) (EQ 10) where 
mseZ(P E A, k E K) = (P, k) = Q assuming K = {I, . . ..N) Unlike r-sets, a single r,,,-set cannot model 
an entire object if the object is composed of many materials. However, a single r,-set can model disconnected 
regions of the object made of one mate- rial. So, a finite collection of r,-sets would be required to 
model an entire object made of a finite number of materials. Thus, a multiple material object can be 
mathematically modeled as a finite class of r,-sets, D = {DJ, i = l...n (finite), D c A,,,. Each Di is 
an r,-set and SO, Di E A,,,. Also, Di = (Pi, kJ where Pi E A is an r-set and ki E K. And, each of the 
r,-sets (Di) must satisfy the following con-ditions: l Cl: Each r,-set in D is interior disjoint, i.e. 
geom(Di) (-I* geom(Dj) = $ e (EQ6) geom(Di) n geom(Dj)= I+ or Sij Vi,j = 1, . . ..n.ifj where dim(Sij) 
< dim(geom(Di)) Here, Sij is a lower dimensional entity and belongs to the inter- nal boundary of D. 
This condition makes sure that identical r,,,-sets are not allowed. l C2: The class D must be mi%mal, 
i.e., it must not contain two r,-sets having the same material: matl(Di) #mmatl(Dj) \Ji,j = 1 . ..n. 
i # j @Q7) Thus, an object made of finitely many materials is modeled as a minimal subset of A,.,, satisfying 
the above mentioned conditions C 1 -C2. We call such a model of an object an r,,,-class. It would be 
appropriate to define a set of all valid models, denoted by U, where each element in U is an r,-class: 
U = {DIDcA, , such that D satisfies C 1, C2) (EQ 8) It can be seen that U c @(A,), the power set of A,. 
U can be obtained from @(A,) by removing all subsets of A,,, that do not satisfy Cl-C2. Each object made 
of multiple materials is modeled as an element in U (an r,-class) similar to the representation of an 
object as an element of A (an r-set). Note that each D, has the same dimensionality as D, i.e., dim(D) 
= dim(Di) 3 dim(Dj), Vi, j = 1, .., n (EQ 9) Here dim(DJ = dim(PiE A) + dim(kiE K) = 3 + 1 = 4 (assuming 
an r-set has a dimension of 3). This condition can be relaxed if mixed dimensionality is required in 
the modeling scheme.  3.2 Alternate mathematical model: r,-vectors Thus far, an r,-class was represented 
as D E U such that D = (Di E A,,,} where D, = (P, E A, k, E K). An alternate way to represent the set 
of all valid objects (instead of U) is in the form V similar to vectors: Each dimension in V represents 
a unique material in K and so, a component of a vector in a particular dimension would represent an r-set 
made of that corresponding material. Thus, each r,-class D can be considered equivalently as a vector 
E in V (called an rm- vector) such that, E = (P,, P,, . . . . PN), P, E A Pin*Pj = 4 Vi,j = 1, . . ..N.i#j 
In the above equation, any component P, is an r-set and it is assumed to be made of material i E K. Hence, 
an element of the r,-class D, Di = (Pie A, ki E K) is implicitly defined as a compo- nent of E, P, The 
two definitions of valid objects (as an r,-class D or as an r,!vector E) are equivalent. Note that (EQ-I 
1) is same as (EQ-6), which is condition Cl. Also, by forcing each compo- nent of the r,-vector to be 
an r,-set (the geometric projection of it being an r-set), condition C2 (EQ-7) are implicitly satisfied. 
By defining the object as an r,-class, we denote it by a set of r,,,- sets and the class does not contain 
any empty r,-set. Hence, the number of r,-sets in an r,,,-class is n I N, where N is the number of elements 
in K. In the second definition of a valid object as an r,,,- vector in V, we classify it according to 
the material and allow empty r,-sets as components. Hence, the i-th component in the vector denotes the 
r,-set made of material i E K and the r,-set could be empty. The advantage of the vector space representation 
is that a single index can be used to tag a material as well as a com- ponent (r,-set) of E. Whereas 
by representing the object as a set (r,-class) of non-empty r,-sets, two indices are needed, one run- 
ning over the material dimension and one running over the ele- ments (r,-sets) in the class. Henceforth, 
we use the notation D to denote a typical member of U or V as both of them are equivalent. Similar to 
the primitives B defined for the class of r-sets A, a natu- ral choice of primitives (basis) for A,,, 
= A X K would be B, = B X K. It is not possible to consider sets of r,-sets (i.e., r,-class) as basis 
because each r-set can be filled with any material to form an r,-set, and any two r,-sets can be combined 
to form an element of U. Thus, it is necessary to have primitives which are r,-sets (or r,,,- classes 
which have only one element). WC ignore the subtle differ-ence between an r,-set and an r,-class having 
only one element, and assume both are identical. In the vector notation, we can denote a typical element 
of B, as an r,-vector bk with only the i- th component being a non-empty r-set made of material i E K, 
and the rest of the components empty: bk = (4~ . . . . @, b, I$, . . . . $), b E B, i E K (EQ 12)  3.3 
Modeling Operations on r,-sets and r,-classes To generate r,-classes (r,-vectors) and to manipulate them, 
mod- eling operations similar to the regularized boolean operations must be defined. These modeling operations 
must be capable of operat- ing on r,-sets (Le., members of A,) as well as on r&#38;asses (i.e., members 
of U). The main difference between the operations on r,,- sets (or r,-classes) and the regularized booleans 
on r-sets is the inclusion of material dimension. Figure 3 shows the categorization of these operations. 
The operations in category MO1 act on r-sets (elements of A), those in MO2 act on r,-sets (elements of 
A,.,,), and those in MO3 act on r,-classes/r,-vectors (elements of U which are subsets of A,,,). Modeling 
Operations Material not Material included included   1 --L Iperating on r-sets I I (MOl) Operating 
Operating on on r,-sets r,-classes (MO21 (M03) FIGURE 3. Categorization of modeling operations Geometric 
Regularized Booleans: These are regularized boolean operations (categorized under MOl) defined for r-sets 
(EQ-I) and are non-material based. They cannot directly operate on r,-sets but can operate only on the 
geometric projections of r,,,-sets. They can be re-defined to accommodate r,-sets (as before, III* represents 
the regularized operations reg-union U*, reg-intersect n* and reg- difference /*): q*: CxC+A PU*Q ifC=A 
 qI*(PE C,QE C)= geom(P)O*geom(Q) if C = A,,, i (EQ13) Regularized Difference on r,-sets: This operation 
operates on r,-sets and falls under the category of M02. It does a regularized difference on the geometry 
of one r,,,-set from another, retaining the material of the first r,-set. /;: A,xA,+A, (EQ14)/;(PE A,,QE 
A,,,) =-P/;Q = msel(P /* Q,matl(P)) Note that the operation P /*Q is performed according to EQ- 13. 
Regularized Intersection on r ,-sets: Operates on r,,,-sets and is classified under M02. f-( : A,xA,+A, 
n;(P E A,,,, Q E A,) = Pn;Q @Q 15) = msel(Pn* Q, opt(matl(P), marl(Q))) where the function opt is used 
to select the material for the inter- secting region (an r-set) from a set of choices. i if i=j opf(i, 
j) = (EQ 16) choose(i, j) ifi #j choose&#38;j) is a function to choose either i or j or some new user 
defined material k E K. Regularized join on t-,-sets: This operation (in M02) is needed to join two r,-sets 
which are made of same material. This opera- tion makes sure that condition C2 (EQ-7) for an object is 
satisfied. This operation would have no effect on the geometry if the geo- metric projections of the 
two r,-sets do not intersect in the set-the- oretic sense. V :A,xA,+A, V(PEA,,QEA,) =P V Q (EQ17) = msel(Pu*Q, 
mat&#38;P)) If mad(P) = mat/(Q) Regularized Union on r,,,-sets: This operation again is classified as 
MO2 and operates on r,-sets. It performs the union on two r,- sets by separating them into three parts 
and joining them. For the overlapping region, there is an option of choosing new material if the materials 
of the two initial r,-sets are different. : A,xA,+A, 4 ~J;(PEA,,QEA,) =Pu;Q @Q 1% =(P/;Q)V(Q/;P)V(PniQ 
1 For the operations defined above on r,-sets, only the difference operator m/* is associative. The 
intersection is not associative as the material of the resultant r,-set may be totally different from 
the two initial r,-sets. As the union operator involves the intersection operator, it too is not associative. 
Hence, the order in which the intersection/union operation is performed becomes important, If the function 
choose (in EQ- 16) is associative, then the intersection operator (and so, the union operator) becomes 
associative. Next, we proceed to define the booleans which operate on sets of r,-sets i.e. on r,,,-classes. 
First, we define a function called shape that generates the overall geometry of an object i.e., an r,-class/ 
r,-vector. Shape function: This function is similar to the geometry projec-tion (geom) defined for an 
r,-set. It obtains the geometry of the valid r&#38;ass as an r-set, i.e., shape: U -+ A (EQ 19) shupe(D 
E U) = ui(Dj E A,,,) Thus, the shape operation performs a geometric regularized union (EQ- 13) of all 
r,-sets that comprise the r,-class. Regularized Difference on r,-classes: This operation (in MO3 category) 
is an extension of the regularized difference on r,,,-sets. /;: uxu+u /, (DE U,GE u) =D /;G = msel(geom(D,) 
/*shape(G), ma~Z(D,))IVD, E D (EQ20) Thus, the overall geometry of G is removed from each r,-set of 
D. To denote the same in the vector notation, each component of the flew resultant i-,-vector is: (D 
/z G )j = msel(geom(Dj) /*shape(G), mutl(Dj)) j = 1 . ..N (EQ 21) Note that the above operation is not 
defined in terms of the regular- ized operations on individual r,-sets. This can be done with a compromise 
on efficiency as: (D /; G )j = n,!,, (Dj 1; Gi), Vi = l...N (EQ 22) j = 1 . ..N Regularized Intersection 
on r,,, -classes: This operation (in M03) performs the intersection of two r,-classes. The intersection 
is obtained by performing a regularized join on the intersections of all r,,,-sets of one r,,,-class 
with the r,-sets of the other. :uxu-+u6 ni(DE U,GE U)=DniG (EQ 23) = VD,E D,G,E G In the vector notation, 
the k-th component of the new r,-vector is: (D niG)k = V (Di nGGj )imarl(Di nLGj )= k i &#38;,j = 1 . 
..N (EQ24) Regularized Union on r,-classes: This operation (in M03) per-forms the union of two r,-classes. 
 u; :uxu+u &#38;(DE U,GE U) =Du;G= D, n; G, IVD~E D,G,E G , msel(geom(D,) /*shape(G), matl(D,)) Ve IVDte 
D msel(geom(G,) /*shape(D), mutl(G,)) IVG, E G (EQ25) It can be seen from the above equation that the 
union is generated as a regularized join of three sets of r,-sets -the intersection of the two r,-classes, 
the difference of the first r,-class from the sec- ond and the difference of second r,-class from the 
first. The union operator can also be written completely in terms of the regularized operators on r,-sets 
without using the functions msel, geom or shape as: Du;G= D, n,: G, Ii D, D,G,E G , I v n* (q 1; G, +D,E 
D ,  i m V (GwEC) (G, /,:: D, )IVG, E G 6 VP, E D) (EQ 26) As with other operators, the union operator 
can also be cast in the vector form for simplicity. Thus, the k-th component of the result- ing r,-vector 
would be: (D U; G)k (EQ27) = V {(DniG),,(D/zG )k,(G/~D)kl The above equation is defined in terms of the 
difference and inter- section operations on the r,-classes which were defined in (EQ- 21)/(EQ-22) and 
(EQ-24). Note that the union operator defined above resembles closely the non-regularized union operation 
on r- sets. Split Operation: This operation is material independent and acts only on the geometry of 
the object. Given a surface S, the split operation divides the object into two parts. If the surface 
does not intersect the object, one of the parts would be an empty set. The split operation (denoted by 
0) is defined for r-sets as: sp(w E A, S) = W 0 S = {(W 0 S), E A, (W 0 S), E A) such that (W 0 S), 
u* (W 0 S)> = w (EQ 28) where (W 0 S), and (W 0 S), are the two parts of the object W which lies in 
the halfspaces S < 0 and S > 0. For an r,-set, it can be defined as: Sp(w~ A,,S)=WOS= {OlrOrnS)<~ A,,(W%, 
9,~ A,> where (W 0, S)< = msel( (geom(W) 0 S)< , mall(W) ) (w 0, S)> = msel( (&#38;Tom(W) 0 S)> , mat&#38;W) 
) such that w %I S)< u; w 0, 9, = w (EQ29) Finally, the split operation for an r,-class is defined in 
terms of the split operation on the i-,-sets: Sp(W E u, S) = (W, om s [VW, E W} = uYo,s)<~ww%J)>~w such 
that (W 0 $I< u; (W 0 $1, = w (EQ30) As mentioned earlier for r,-sets, the intersection operator or 
any operator defined in terms of the intersection operator is not asso- ciative. This is because of the 
option of choosing a material for the intersected region using the choose function used in (EQ-16). In 
order to maintain the associative property for all operations (simi- lar to those of regularized booleans 
on r-sets), the choose function must be associative. The regularized join operator has to be used for 
every boolean operator to combine different r,,,-sets having same material into a single r,-set thus 
retaining the minimality of the r,-class and maintaining the geometry of each r,-set to be an r-set. 
Note that the operators defined in the category MO3 can be applied not only to r,-classes but also to 
individual r,-sets (considering an r,-set as an r,,-class with one element). As mentioned earlier, the 
subtle difference between an r,-set and an r,-class with one ele- ment can be ignored. This makes all 
the operators under the cate- gory MO2 (excluding the regularized join operator) equivalent to those 
in M03. Hence, we use the same notations for the operators under the categories MO2 and M03. Thus far, 
we have assumed that the material dimension K is finite based on the practical assumption that objects 
are usually com-posed of finite number of materials. The finiteness condition of K can be relaxed without 
affecting any of the above development. This would imply K = I and would make the vector representation 
V (countably) infinite dimensional. 3.4 Mathematical model based on Manifold Solids The proposed mathematical 
model along with the modeling opera- tions can also be applied to manifold solids: l Similar to an r,-set, 
an m-manifold solid can be defined which is a manifold solid with material dimension. The class of such 
m-manifold solids is F, = F X K. Thus, a typical m-manifold solid H has geometric projection P (which 
is a manifold solid) and material projection k (an integer). l Each object (D) is represented as a disjoint 
collection of m-manifold solids (D = (Hi E F,)) i.e., an m-manifold class such that each of its m-manifold 
solids satisfy condition Cl. The minimality condition C2 has to be modified as: If geom(Hi) n geom(Hj)= 
Sij (EQ31) mutl( Hi) # mutl( Hj) Vi,j = l...n;i#j where Sii,is a lower dimensional entity. Thus, there 
could exist many disjoint m-manifold solids in an m-manifold class made of same material. This is obvious 
as we are trying to represent an r-set made of one material as a set of manifold solids. In the vector 
notation of an m-manifold class (an m-manifold vector), each component now would contain more than one 
m- manifold solid unlike an r,-vector which had only one r,-set for each component. l All boolean operators 
that were developed for r,-sets and rm- classes can be applied to m-manifold solids and m-manifold class 
(similar to the application of regularized booleans delined for r-sets to manifold solids). Manifold 
solids are not closed under geometric regularized operations. To circumvent this problem, Euler operators 
are used which ensures that the resulting set is a manifold solid [2]. Thus, with appropriate minor modifications, 
all the results can be applied to models based on manifold solids. 4.0 Implementation In this section, 
we present a computer representation of the multi- material model. We also present examples of multi-material 
mod-els and finally, discuss the fabrication issues of these models using LM. 4.1 Computer Representation 
As mentioned in Section 2.2, the mathematical model has to be represented in the computer and hence, 
a suitable representation has to be adopted for the model. We use a hybrid system with a B- Rep kernel. 
The data structure of the kernel has to be modified to accommodate the material dimension of the object. 
Each object is now modeled as an r,-class and so, the geometry is defined through a set of r-sets instead 
of a single r-set. And, each r-set has to be tagged with material information making it an r,-set. r----- 
--ir-----7 I BODY II I I I A II I I I MBODY I I it I I MCOMP I I I I I ct MCELL I I I I IL------l I Added 
data structure for material information I EDGE is 1 VERTEX 1 I L--------l Standard BRep data structure 
(ACIS based) FIGURE 4. Hierarchical view of the modified data structure Figure 4 shows the modified 
data structure of our implementation which was derived from the data structure of the commercial ACIS 
modeler [12]. There is a material related data structure that is added on top of the original data structure. 
MBODY classifies the entire object in terms of the material dimension. It represents the object as an 
r,-vector. Each MBODY is made of only one mate- rial, and is equivalent to an r,-set. MCOMP is an intermediate 
structure, which represents all parts of MBODY in COMP. COMP is a connected portion of a BODY. Each component 
(which is con- nected) may have parts made of more than one material. MCOMP is a collection of such parts 
made of one particular material. Each of those parts is then classified as MCELL whose euclidean coun-terpart 
(the geometric projection) is CELL. Thus, a COMP can be made of several CELLS. Each CELL can be made 
of SHELLS and so, requires the rest of the hierarchy. However, a separate hierarchy can be maintained 
for the COMP which stores the overall geome- try of the object. This is equivalent to performing the 
shape opera- tor and keeping all the information before hand in the data structure. Thus, two sets of 
hierarchies (starting from SHELL) are maintained -one for the entire component COMP and one for the CELL 
structure. 4.2 Examples Figure 5 shows an example of a two-material object and how it is modeled using 
the modified data structure. Here we use the letters a and b for the two materials. Although the regions 
1 and 2 can be combined into a single r-set, they are maintained separately for clarity. 342 { (123456)) 
7 7 9 3 9 a:(1,2,4,5), W,6)1 a: { (1,2,4), b :{ (3), (6) ; Rest of ; { a:(l), a:(2), b:(3), L Fef_arcJyJ 
a:(4),a:(S), b:(6) } FIGURE 5. Example of a 2-material object and its representation Figure 6 shows an 
example of boolean operations performed on two r,-classes. Note that in the intersecting regions, the 
function opt is used to select the material. Object A = (a:&#38; b:2} A combining with B A 1; B B /;A 
An;C,B opt(b, c) = c opt(a,c)= e opt(a, b) = a opt(b, b) = b Au;B B,A/,; B,B/;A) FIGURE 6. Boolean operations 
on two t-,-classes The modified data structure for multi-material models and the material based boolean 
operations were implemented using ACIS. Some examples are shown below. Figure 7 shows a model obtained 
from three co-axial cylinders (R, G and Y) each made of different material (shown in different col- ors 
- Red, Green and Yellow). Wireframe model of three co-axial cylinders. The red cylinder penetrates the 
green cylinder using the opt function as follows: matl(R n G) = opt(marl(R), matl(G)) = R and matl(Y 
n G) = opt(marl(Y), matl(G)) = G. The join operation makes sure that there are no internal boundaries 
within regions of same material. See the wireframe shown in Fig- ure 7. Figure 8 shows the combination 
of three mutually perpendicular cylinders (C, R and B) of different radii (C being the largest and B 
the smallest) and different material (shown in Cyan, Red and Blue). The cylinders were united ((C u R) 
u B). For the intersect- ing regions, the choice of material is made using the opt function as follows: 
mat&#38;C n R) = G (shown in Green), mat&#38;C n B) = Y (shown in Yellow) and matl(G n B) = B (the original 
material, Blue). Finally, the join operation ensures that regions of the same material are combined into 
a single r-set. Shaded image of the , inder model: the three material regions are shown in red, green 
 and vellow Union of three mutually perpendicular cylinders. The selection of material for each region 
is shown in different color. FIGURE 7. Example - 1 FIGURE 8. Example - 2 The three cylinders were united 
((R U G) U Y) using EQ-25 / EQ- 26. The two smaller radii cylinders (R and Y) intersect the larger one 
(G). For the intersecting regions, the material was chosen 4.3 Fabrication of multi-material models 
by LM There are three major steps involved in fabricating a part using lay- ered manufacturing. In the 
first step, a suitable build direction (i.e. orientation) is selected for the model and is normally assigned 
the Z direction. The model is then oriented to be built in that direction. The second step involves generating 
support structures for the overhang regions of the model in that direction (i.e., portions of the model 
which have no material underneath them have to be pro- vided suitable support). Some LM processes do 
not require sup- ports to be built explicitly as the processes have built-in support material. In the 
third step, the model is intersected (sliced) with planes at different Z-heights (i.e. planes perpendicular 
to the Z (build) direction and parallel to XY plane) to obtain the slices (cross-sections). The gap between 
two adjacent slices defines the layer thickness. The final step involves generation of tool paths for 
each layer and is process dependent. The previous example (Figure 8) is processed for fabrication using 
LM. Its initial orientation is chosen as the fabrication orientation. The generation of supports is ignored. 
The model is adaptively sliced using the algorithm of [13] to generate the layer informa- tion. Adaptive 
slicing varies the layer thickness for each layer depending on the curvature of the surface at each slice. 
Various views of the sliced model are shown in Figure 9 and Figure 10. Note that the slicing algorithm 
has to maintain all the internal material boundaries in order to obtain separate material domains in 
each layer. Figure 11 shows an example layer for which tool paths have been generated. This layer is 
made of five materials (C, R, B, G and Y). The tool paths for each material region are distinguished 
by different fill patterns. FIGURE 9.3D view of the adaptive sliced model FIGURE 10. Front &#38; right 
view of adaptive sliced model FIGURE 11. Tool paths for a single layer This model was not fabricated 
because we do not possess a LM machine that can be used to deposit multiple materials. There are processes 
(such as SDM at Stanford/CMU, Stratasys, Sanders etc.) that can be used for depositing more than one 
material. We show a part that is fabricated using the Stratasys 3D Modeler in our lab. This machine does 
not have the capability to deposit more than one material simultaneously. However, we fabricated a part 
made of two materials with one material region lying above the other. The bottom region is a block made 
of polymer P300 and the top region is a cylinder made of wax ICW. See Figure 12. FIGURE 12. A two-material 
model and the fabricated part   5.0 Conclusions Current solid modeling techniques model physical objects 
using r- sets by capturing the geometry and topology of the object. Regu- larized boolean operations 
are used to manipulate these models. In this paper, a new mathematical model is proposed which extends 
the theory of r-sets and regularized booleans to include the mate- rial information in addition to the 
geometry and topology. This permits the modeling of objects made of a finite number of materi- als using 
r,-classes. Material based boolean operations are defined to facilitate the creation and manipulation 
of such models. This proposed theory of r,-classes (or r,-sets) and the material based boolean operations 
encompasses the earlier theory of r-sets and regularized booleans. The advantage of such a modeling scheme 
is that it can be built on top of existing solid modelers incorporating the new theory with no modifications 
to its basic internal structure. The inclusion of additional information (like material) in the repre- 
sentation has potential for use in many applications. Specifically, our focus is on Layered Manufacturing 
(LM) whose current capa- bility include fabrication of objects made of multiple materials. Hence, this 
work is aimed at incorporating material information into the solid model. However, this method can bc 
used to include other information (like color, density etc.) as the added dimension (instead of material) 
depending on the application. Thus, using this modeling strategy, solid modeling capabilities can be 
extended beyond the scope of geometry and topology to include additional information and related rules 
to generate the model. The limitation of this work lies in the fact that the values of the added dimension 
must belong to a finite, discrete set. Our ongoing work involves extending this theory to include vector-valued, 
continuous data as additional information into the solid model apart for the usual geometry and topology. 
 6.0 References <RefA>1. C. M. Hoffmann, Geometric &#38; Solid Modeling, Morgan Kaufmann Publishers, 1989. 
 2. M. Mgntyla, AnIntroduction Computer Science Press, 1988. 3. A. Requicha, Representations for Rigid 
Solids: Theory, Meth- ods and Systems, Computing Surveys, Vol 12, No. 4, 1980. 4. M. Bums, Automated 
Fabrication, Prentice Hall, NJ, 1992. 5. R. Merz, eDeDosition Dissertation, Technical University of 
Vienna, Austria, 1994. 6. C. M. Hoffmann and J. R. Rossignac, A Road Map to Solid Modeling, IEEE Transactions 
on Visualization and Computer Graphics, Vol. 2, No. 1, March 1996. 7. P. Hanrahan, Future Directions 
in 3D Medical Imaging, Sig- graph Course 2 1,2Oth International Conference on Computer Graphics and Interactive 
Graphics, 1993. 8. Vinod Kumar and Debasish Dutta, An Assessment of Data Formats for Layered Manufacturing, 
accepted for publication in Advances in Engineering Software, available as Technical Report UM-MEAM-95-22, 
Department of Mechanical Engi-neering, University of Michigan, Ann Arbor, November 1995. 9. K. Weiler, 
The Radial Edge Structure: A Topological Repre-sentation for Non-Manifold Geometric Boundary Modeling, 
in Geometric Modeline: for CAD Aoulications, M. J. Wozny,  H. W. McLaughlin and J. L. Encamacao (Editors), 
North Hol- land, 1988. 10. F. Arbab, Set models and Boolean operations for solids and assemblies, Technical 
Report CS-88-52, CS Department, University of Southern California, Los Angeles, July 1985. 11. J. R. 
Rossignac and M. A. O Connor, SGC: A dimension independent model for pointsets with internal structures 
and incomplete boundaries, in Geometric Modeling for Product Enpineering, M. J. Wozny, J. U. Turner and 
K. Preiss (Edi- tors), 1990. 12. ACIS Geometric Modeler: Auolication Guide, Spatial Tech-nology Inc., 
1995. 13. P. Kulkarni and D. Dutta, An Accurate Slicing Procedure for Layered Manufacturing, Computer 
Aided Design, Vol 28, No. 9, pp. 683-697, 1996.  
			</RefA>
