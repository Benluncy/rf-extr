
 An IS1 Workbench for ACM Information Systems Curriculum 81 Leslie J. Waguespack, Jr. Computer Information 
Systems Department Bentley College Waltham, Massachusetts, 02254 Abstract This paper describes the System 
Architects Workbench, a per- sonal computer-based teaching environment for courses in computer organization 
and systems programming. This tool set provides an integrated learning and teaching environment for computer 
sys-tems concepts defined in ACM IS Curriculum 81 El. The central tool is a computer simulator based 
on a pedagogical model of com-puter system resources which allows students to study principles without 
becoming too involved in the implementation idiosyncra-sies usually associated with machine level programming. 
Pro-grams may be written directly in machine language or in a Pascal- like language, TP, which includes 
features that aIlow complete access to and control of host level resources. The TP compiler sup ports 
separate compilation, IPL load module generation, and de-tailed translation output used for machine language 
modification and debugging. The simulator supports interactive execution, trac-ing, modification, and 
debugging. Introduction ACM Curriculum for Information Systems 81 was established to serve the person 
who wants to learn computers as a part of prep aration for a general management career... and ...the 
person who wants a lifetime career in information systems [ACMBl]. The ISI course, Computer Concepts 
and Software Systems, is designated to provide a broad familiarity with fundamental concepts and terminology 
associated with computer hardware systems and op-erating systems (ACM821. Similar concepts are described 
in the ACM Curriculum for Computer Science requirements for hardware systems and operating systems [ACM791. 
However, the IS curricu- lum objectives specify a different focus and therefore require a dif- fcrcnt 
means of pedagogical delivery than are commonly found in CS curricula. In this paper I review the distinctive 
focus on computer architec-ture and operating systems principles found in the ACM IS 81 Cur- riculum 
and describe a student workbench which has been de-signed to support the IS focus. The workbench, the 
Computer System Architects Workbench is a personal computer based soft-ware development and simulation 
environment specifically suited for IS1 coursework. I will briefly describe the workbench s fea-tures 
and operation which specifically satisfy the learning objec-tives of El. Finally, some future evolution 
of the workbench and the associated course ware will be discussed. Permission to copy without fee all 
or part of this material is granted provided that the copies are not made or distributed for direct commerical 
advantage, the ACM copyright notice and the title of the publication and its date appear, and notice 
if given that copying is by permission of the Association for Computer Machinery. To copy otherwise, 
or to republish, requires a fee and/or specific permission. 0 1989 ACM 0-89791~298-5/89/0002/0083 $1.50 
The Demands of IS1 This is the rationale for the 1st course in the ACM Information Systems Curriculum 
81: It is important to provide a broad famil-iarity with fundamental concepts and terminology associated 
with computer hardware systems and operating systems [ACMB?.]. The instruction notes in the curriculum 
recommendations are quite explicit: l the course must emphasize breadth rather than depth l coverage 
of assembly language must be limited severely l only those concepts and techniques that are necessary 
to understand . . . concepts of computer architecture and operating systems should be covered l the assignment 
of programming projects on a specific computer is valuable but, these projects should be few in number, 
small, and carefully constructed to convey the experience of assembly language programming without that 
experience dominating the course There are three objectives in the course: to introduce computer architecture 
(computer structure, machine language, and assembly language) to introduce the major concept areas of 
operating system principles (memory management, process management, I/O management) to introduce the 
interrelationships between the operating systems and architecture (program control, interrupt structures, 
interprocess communication)  Key words in the course rationale are breadth, familiarity, and interrelationships. 
In a computer science curriculum it may be as sumed that students will develop breadth in a series of 
entry level technica courses (e.g. assembly programming, data structures, computer organization), develop 
familiarity in more advanced courses with more extensive programming projects (e.g. operating systems 
projects, compiler projects, systems programming projects) and finally, realize interrelationships in 
a capstone synthesis course such as computer architecture. In the information systems curriculum breadth, 
familiarity, and interrelationships must be conveyed, for the most part, in a single semester course. 
A Workbench Approach to Meet IS1 Demands Traditionally computer architecture and operating systems prin- 
ciples have been delivered in courses using real hardware hosts 83 such as the IBM 370 or DEC Vax and 
(sometimes more recently) the concepts. Intel 8Oxx or Motorola M68xxx microcomputers. This tradition 
in-cluded using the same software development tools and environ- ment used by system programmers to perform 
professional pro-gramming projects. In the computer science context the cost of using such complex hosts 
and tools can be amortized over a series of courses which can take advantage of the initial training 
cost. In an IS curriculum it is unlikely that much of these training costs will provide direct benefits 
in subsequent course work. It is desira- ble to minimize these training costs as much as possible in 
the IS1 course. Training costs can be lowered in IS1 by attempting the meet the following objectives: 
1 choose a minimally complex target machine focused on the learning objectives of the course 2 provide 
a programming and testing support environment specific to that machine 3 use a high level language to 
demonstrate the operating system principles in lieu of assembly language 4 provide all the tools in 
a personal computer environment to take advantage of the easy access and productivity tools the students 
have become accustomed to The System Architects Workbench is an attempt to meet these objectives. The 
first design decision in the workbench was the use of a simulated rather than real hardware host. Simulation 
in-creases the course designer s control of the student environment (and thus the experience the student 
will have). The second design decision was to use a model host rather than a simulated real host. This 
choice allowed focus on function rather than detail with the opportunity to trade each off against the 
other for peda- gogical purposes. The sections that follow describe the simulated hardware sys-tem and 
the language tools which are used for software develop-ment on the host. The Simulated Computer Architecture 
 The simulated architecture, the Total Virtual Access Architec- ture (TVAA), is based on a theoretical 
model of machines and pro- grams which has been used for virtual machine research and de- velopment [Waguespack85a]. 
This model has been chosen to simplify the explanation of several computer architecture con-cepts: l 
machine language l data representation l addressing l instruction execution l interrupts l interprocess 
communication l operating systems architecture l virtual machine implementation 9 multi-level systems 
design l host support for high level language The TVAA possesses a broad scope of characteristics attributa-ble 
to both 3rd generation mainframe computers such as IBM 360/ 370, DEC Vax, Burroughs B7700, and a wide 
variety of micro and mini computers. In addition, the TVAA may be used to illustrate characteristics 
of object based architectures such as the Intel 432 Ada Engine, and the IBM System/38. The .TVAA is a 
reduced in-struction set computer, RISC. This RISC approach to the TVAA s design extensively simplifies 
the writing of system programs and diminishes the volume of code required to illustrate computing The 
description below depicts the TVAA from three vantage points based on areas of familiarity to be developed 
in the stu- dent. They are 1) a view of the system by a machine language ap-plication programmer, 2) 
a view of the system by a systems pro- grammer, and 3) a view of the system by the computer architect.The 
Machine Language Programmer s Model The TVAA is a reduced instruction set computer (RISC). Comput- er 
memory is composed of words. All memory references are made in word granularity. All words contain the 
same number of bits. There are 17 operation codes [Table 1 1. No Operation Add Subtract Multiply Integer 
Divide And Logical Or Logical Xor Logical Shift Right Logical Shift Left Logical Branch on Condition 
 Move Data Create Storage Segment Destroy Storage Segment Compare Word Push Onto Stack Pop from Stack 
 Table 1 TVAA Instruction Operation Codes  There is only one instruction format. Every instruction has 
two operands [ Exhibit 1 I. TVAA Instruction Format Exhibit 1 An operand refers to a word in the memory. 
An operand reference has three parts: the mode (designates standard, indirect, stack or immediate operand 
addressing), the base (designates which stor-age segment of the program contains the operand), and displace- 
ment (designates which word in the storage segment is the oper-and). A process is defined by its environment 
base (EB). The EB is a storage segment that contains pointers to all the storage seg-ments owned by the 
process. Each of these pointers is called a storage base. f Storage Base Addressing Exhibit 2 The EB 
also contains entries that define the state of the process, a structure often called the Process Control 
(status) Word. It con- tams the current instruction pointer (the Program Counter Base and Program Counter 
Displacement), the Condition Flags (the status result of the last instruction s execution), and the process 
s clock. Input and Output in the TVAA is accomplished by using IO inter- face ports. An interface port 
is a one word storage location. Each IO device has three ports: a command port (where a binary integer 
is placed by the programmer to request an IO operation), a data port (to which (from which) the programmer 
moves the data to be transferred), and a status port (which indicates any exception con-ditions that 
may have occurred due to the IO request). These 10 ports appear simply as memory locations which the 
programmer moves data to and from. There are no special IO instructions. This brief overview is all that 
the beginning programmer needs to understand to attack a variety of problems related to data rep resent&#38;ion, 
Boolean arithmetic, integer arithmetic, and basic ma-chine language implementation of algorithms. This 
entire model of a machine can be taught in a one hour lecture and programming can begin. Programming 
problems such as loading a program or per- forming input and output to the outside world become important 
to the system programmer at which time the students understanding is extended with the following. The 
System Programmer s Model Initially the student sees the computer system as dedicated to one process 
(their own process). As a dedicated system virtually all of the problems associated with operating systems 
are absent. The student can learn how subprogram libraries may be developed to ease the programmer s 
task; how subprogram libraries eventu-ally evolve into language extensions or language features. Once 
the student is introduced to the notion that more than one process may exist in this environment, the 
focus must change from applica- tion programmer to systems programmer. The basic difference is the expanded 
focus of machine features which now includes pro-cess control architecture. Memory on the TVAA is organized 
in segments. A segment is a logically contiguous groups of words that has a name called a handle. In 
order for a segment to be referenced by a process, that segment s handle must be present in that process 
s EB. That is why a program refers to memory via a storage base. Storage bases con- tain segment handles. 
Processes may create segments dynamically using the CREATE instruction; a segment is allocated and assigned 
a handle and that handle is placed in the appropriate storage base of the process. Once created, the 
contents of the segment are routinely accessed by ( base, displacement ) references in ordinary machine 
instructions. Storage segments may be shared by copying the segment s handle and placing that value in 
the EB of the sharing process. The DESTROY instruction deallocates a memory segment and renders is non-existent. 
References to storage bases without valid handles result in program exceptions usually causing interrupts. 
On the TVAA, process activation is achieved by indicating which EB in the memory is the one whose instructions 
should be currently executed. This designation is made by placing a pointer to the active process s EB 
(that EB s handle) into a pointer called the environment pointer, EP [Exhibit 3 I. Exhibit 3 Switching 
control from one process to another is as simple as activation t h changing the contents of the BP. 
This is how control is passed from process to process; either voluntarily by changing the EP or invol- 
untarily as in the case of interrupts. The system programmer needs to be able to restrict the process 
s ability to change the value of the EP. Indeed, a wide variety of machine resources (clocks, inter- 
rupt vectors, the IO ports) should be protected from haphazard modification by non-operating system processes. 
The means of this protection is simple memory protection. The EB s role as di- rectory to storage segments 
also doubles as access list . Memory segments may only be accessed if their handles are in a process 
s EB. The operating system can gain control of the system anytime a process attempts to access a storage 
base with an invalid handle by setting up the interrupt vector for that purpose. The last piece to this 
brief description is the means that distin- guishes a process as an operating system (or control) process 
rather than an ordinary process. Again the EB is involved. The EB is com-posed of storage bases and process 
control information. These are collectively referred to as process status resources. (This informa- tion 
exists for each process.) The resources that control the ma-chine itself (the EP, IO ports, interrupt 
vectors, etc.) are not virhr- al but, real locations in the computer memory. There is only one instance 
of these resources which are called machine status re-sources. But, since memory can be only referenced 
via an EB and storage bases, the machine status resources may only be accessed if a memory segment happens 
to overlay these real memory loca-tions. That is exactly what happens at Initial Program Load time when 
the machine is powered up . The boot program automati-cally becomes the kernel of the operating system 
because the first segment created at IPL overlays the machine status resources. The Computer Architects 
Model The same TVAA system may be presented from yet another per-spective, that of the computer architect. 
This is actually the ar-chitecture of the TVAA simulator. Exhibit 4 Total Virtual Access Architecture 
The hardware is composed of functional units performing spe-cialized subfunctions. The instruction set 
is implemented by the Transformational Unit. Memory management functions are pcr-formed by the Virtual 
Access Control Unit. Input and output are performed by the Input Unit and Output Unit, respectively. 
These allow IO in human readable form with special IO operations to read and write data in integer, hexadecimal, 
character, and word formats. A special format, pseudo-assembly, allows the direct in-put of machine instructions 
without resort to translators or binary codes. Peripheral storage Facility is provided via the Store 
Unit. Finally, interactive debugging and performance measurement and evaluation services are provided 
by the Probe Unit. (Detailed specifications may be found in the TVAA Fundamentals of Opera- tion \ [ 
Waguespack87al). In advanced courses it may be appropriate to require the student to design and implement 
new functional units (e.g. Backend Data-base Unit, Graphics Unit, Network Control Unit, etc.). This would 
be accomplished by modifying the simulator itself. The TVAA Pascal Language System Systems Programming 
in High-Level Language It is possible to author and execute programs on the TVAA di-rectly in machine 
language. Pedagogically this may be useful for orientation and/or awe inspiration . However, useful program-&#38;oroiccts 
in machine IaneuaPe is an oxymoron. This is particu- larly true of students who don t have long experience 
programming in any language much less machine language. The TVAA Pascal (TP) language system allows the 
student to solve computer organi-zation or operating system problems without resorting to machine language. 
This is largely accomplished with a location specifi-via Pascal syntax (as long as its location in memory 
is known). The example below illustrates IO via TVAA Pascal. Program Demo-OU-Output; Const Message = 
Hello! (a literal to be printed by the OUJ; Var OUcommand : word[0.96] [a vuriuble to be mapped to rea;l 
address 96); OUdata : word[0.97] {a variable to be mapped to real address 97J; OUstatus : word[0.98] 
(a variable to be mapped to real address 981; Begin ( Demo-OU-Output J OUdata := Message (move the Iiteral 
Hello! to the OU data port]; OUcommand := 4 {moue the code WriteWord to the OU command portJ; OLJcommand 
:= 6 {move the code WriteEol to the OU command portJ; End{ Demo-OU-Output J. TVAA Output Example in 
TVAA Pascal Exhibit 5 In this example (Exhibit 5) the variables OUcommand, OUdata, and OUstatus have 
been bound to real locations corresponding to the IO ports they will model. Once bound in this manner 
they may be manipulated in the body of the program as simple Pascal vari-ables. (Notice that the literal 
Message is a word containing 6 AS- CII characters which is the current word size of the simulator, 48 
bits). I---J Procedure Write-Word( data : word ); Intrinsic [0.123:1]; Procedure Write-Eol; Intrinsic 
[0.321:0]; I---J Procedure Access-Dynamic-Segment; const an-unused-base = 30 {this must be chosen carefully 
within a systemJ; how-many-words = 365 (locations 0..364 an arbitrary vaIueJ; an-unused-dummy-parameter 
= 0; Var the-segment : array[0..8192] of word [an-unused-base.01; i : integer; Begin [ Access-Dynamic-Segment 
J Createcan-unused-base, how-many-words); for i := 0 to how-many-words -1 do the-segment[i] := i; (perform 
some other manipuIationJ; Destroy&#38;n-unused-base, an-unused-dummy-parameter ) [when finished; dispose 
of segment cleanly}; E!nd( Access-Dynamic-Segment J; Dynamic Memory Access Example in TVAA Pascal Exhibit 
6 er extension to Pascal. By placing a tuple in brackets behind any The example shown in Exhibit 6 illustrates 
the use of CREATE variable declaration (e.g. COUNT : INTEGER [ 4.56 1; ) the pro- and DESTROY instructions 
from TP. These instructions have been grammer associates that variable with the memory reference incorporated 
in TP as built in procedures; and unlike most other Base($) and Displacemcnt(56). Given this extension 
any host re- procedure calls, the compiler generates single machine instructions source (El , IO port, 
Clock, EB entry) may be manipulated directly for them. This example also depicts the use of intrinsic 
modules. An intrinsic is a module compiled separately from the current com-pile unit and the entry point 
to that module is indicated by the lo- cation specifier that follows it. (The integer following the colon 
in the location specifier indicates the size of the activation record for the module upon block entry. 
The declarations for these intrin- sic modules may be automatically generated by the compiler.) The compiler 
generates a comprehensive listing of the program s translation which of itself is useful pedagogically. 
The compiler listing has been used to demonstrate the use of a stack in the eval- uation of arithmetic 
expressions. The object code for a number of different arithmetic expressions was used to explain reverse 
polish notation. Examples of module linkage, recursive program code, and operating system calls may be 
demonstrated in like man-ner. Conclusion A variety of example system problems may be developed to ac- 
commodate almost any style of pedagogy in this subject area. A series of systems programming and operating 
systems examples have been prepared to accompany the Workbench as a starting point for co&#38;se preparation. 
C&#38;r&#38;t examples include a file con: trol processor supporting sequential and random file organization 
with file directory and file storage management features. There is a program termination analysis module 
that performs a post- mortem process analysis. There is a single process operating system that includes 
the file control processor, extended input output in-trinsics and the post-mortem facilities. The TVAA 
simulator and TVAA Pascal compiler are implement- ed in Borland Turbo PascalTM. Running on a MacPlusTM 
based host the simulator is capable of executing 45+ TVAA instructions per second and the TP compiler 
is capable of translating 300+ lines of TVAA Pascal per minute. The translator s performance compares 
admirably with vendor production compilers. The performance of the simulator is adequate to allow simulation 
of moderately com-plex operating systems activities. Together they are appropriate for course laboratory 
use. Running on a Mac IITM based host the simulator is capable of executing 175+ TVAA instructions per 
sec-ond and the TP compiler is capable of translating 1600+ lines of TVAA Pascal per minute. This platform 
would be more appropri-ate for advanced OS exercises. The System Architects Workbench is compatible with 
the Com- puter Science Scholars Workbench [Haas83, Waguespack841 since the TP syntax is compatible with 
the source level manipulation tools found in the later. These include macro generation, identifier level 
and module level cross reference indexing, pretty-printing, and source compare / archiving tools. Future 
projects include additional course ware and expanding the base of personal computers the workbench will 
accommodate. In course ware, a multiprogramming operating system is planned along with cxtcnsions to 
the model architecture to allow multi-processing. All of the workbench software is implemented in Bor- 
land TurboTM Pascal. Porting the workbench to MS-DOS based personal computers seems likely in the near 
future. Consideration is being given to making the workbench available through Kinko s Academic Courseware 
Exchange. Space dots not permit a more exhaustive description of the sys- tem here. A complete description 
may be found in the reference manuals which are available as Technical Reports from Bentley College s 
Institute for Research and Faculty Development [Wa-gueapack 88a, 88b, 88~1. Acknowledgement I wish to 
acknowledge the contribution of Don Chand and my col- leagues in the CIS department for their careful 
readings of earlier versions of this paper. Special thanks to Ann O Connell my gradu- ate research assistant 
who spent many hours testing and develop- ing example problems on and for the workbench. I would also 
like to recognize the commitment and enthusiasm of the Advanced Computer Architecture students at Louisiana 
State University and the Computer Systems Architecture students at Bentley College for their patience 
during rough spots in the development. Bibliography <RefA>[ACM791 ACM, Curriculum 78 - Recommendations for 
the Under-graduate Program in Computer Science, Report of the ACM Curriculum Committee on Computer Science, 
Communications of the ACM, Vol. 22, No. 3, March, 1979, pp. 147-164. [ACM811 Nunamaker, Jay F., ed., 
A Report of the ACM Curricu-lum Committee on Information Systems , Communications of the ACM, Vol. 24, 
No. 3, pp. 124-133, March 1981. [ACM821 Nunamaker, Jay F., Couger, J. Daniel, and Davis, Gordon B. eds., 
Information Systems Curriculum Recommendations for the 80 s: Undergraduate and Graduate Programs, CACM, 
Vol. 25, No. 11, pp. 781-805, November, 1982. [Haas83] Haas, David F. and Waguespack, Leslie J. , An 
Intro- duction to the Computer Science Scholars Workbench for Re- search and Teaching, Technical Report 
TR 83-019, Department of Computer Science, Louisiana State University, Baton Rouge, Louisiana, August 
1983. [Waguespack84] Waguespack, Leslie J. and, Haas, David F. A Workbench for Project Oriented Software 
Engineering Courses, Proceedings of the Fifteenth SICCSE Technical Symposium on Computer Science Education, 
Philadelphia, Pennsylvania, Feb-ruary 1984, pp. 137-145. [Waguespack85a] Waguespack, Leslie J., A Structural 
Computer System Resource Model For Teaching Computer Organization, Proceedings of the Sixteenth SIGCSE 
Technical Symposium on Computer Science Education, New Orleans, Louisiana, March 1985, pp. 63-67. [Waguespack85b] 
Waguespack, Leslie J., Personal Student Work- s&#38;ions: Prospectus and Requirements, Proceedings of 
the Six- teenth SIGCSE Technical Svmoosium on Comuuter Science Edu- cation, New Orleans, Lo&#38;&#38;a, 
March 1985, ~~. 145-151 [WaguespackSda] Waguespack, Leslie J., TVAA: Fundamentals of Operation, Technical 
Report TR-88-21, Institute for Research and Faculty Development, Bentley College, Waltham, Ma., June, 
1988. [WaguespackBbb] Waguespack, Leslie J., TVAA Pascal Program- mers Guide, Technical Report TR-88-20, 
Institute for Research and Faculty Development, Bentley College, Waltham, Ma., July, 1988. [WaguespackBBc] 
Waguespack, Leslie J., TVAA Programmers Guide , Technical Report TR-88-19, Institute for Research and 
Faculty Development, Bentley College, Waltham, Ma., Au- gust, 1988.  
</RefA>			
