
 AN OBJECT-ORIENTED APPROACH TO ALGOIUTHM VISUALIZATION -EASY, EXTENSIBLE, AND DYNAMIC Thomas L. Naps, 
Lawrence University napst@lawrence.edu Brian Swander, Lawrence University 90280 @lawrenoe.edu ABSTRACT 
 A key component of oor attempt to integrate the object+fiented paradigm into introductory and interrnedMe 
comses is algorithm viatudization. Such vieualiition depicts an algorithm as a sequence of graphical 
Snapshotsof data Stmcnmm that are operated upott at inten%ting events in the algorithm s execution. Using 
object-oriented techniques, we have eigdficantly enhanced a ptwioua version of the algorithm viauaMation 
system called GAIQS, developed at Lawrence-llwse enfmncementa allow inatnmtom end students to develop 
dynendc vieualimtions with relative ease aud, if deaiia extend the graphic operations that are built 
into GAIGS to allow more pemmtelkd visualizations. The resulting aofhvare package is being used m a core 
of coumeaasa meauaof ilhmtmting the power of the object+riented approach while at the same time advancing 
students understanding of difficult algorithms. Because of the extensibility of the object+xiented featmss 
of the system, we envision many More epplicetinna in which it could be used. To encoumge the development 
of such applications, tbe system is convrmiently available via ftp. BACKGROUND In 1991 Lawrmce University 
received en NSF ILI gmrtt (USE 9250793) for the express purpose of incmpmating the object+x%snted ~:gm 
into a com of four intmductoq end intermediate coursew Introduction to Computer Science (s CS1 course), 
Principles of Software Desigo (a CS2 coarse), Systems Analysis end Design, and Data Structural/Algorithm 
Analysis. Our success in this project relies upon making students appreciate the power of ektmction inherent 
in the ob@tÂ­ otiented approach to software development. This power manifests itself in tools th* once 
learnx allow studentato ccwentrate on algorithms instead of the syntax-laden code that implements the 
algorithms. For instanw, in the systems analysis and design course, students cart use GUI classes such 
as those provided by Bmiand s IluboVbdoo for PCs and MPW S MSCAPP for Macintoahea. In tie fntroductkm, 
Priuciplea, end Data Structuma mums, students am often given object libraries for classical data atmctmw 
such es arrays, stacks, queues, linked lists, bmery tree-e,general tmea, srsPM end netwo* (wei@@f g@@. 
tic= they understand the interfaces to these data structure classes, they can develop aopbiaticeted algorithms 
very quickly becausethey no longer must code end debug the implementations of the structures that their 
algorithms manipulate. In additicit to the above, we also want to use GOP to make the study of computer 
science viauatly exciting for our atndants. A panel at the 1993 SIGCSE symposium addreseedthe possibilities 
of itt~rpomtbtg graphics into courses across the computer science curriculum [2]. A central theme of 
thk panel was that students become energized for further Permission to copy without fee ell or pert of 
this materiel ie granted provided thet the copies ara not made or distributed for direct commercial advantaga, 
the ACM copyright notica and tha titla of the publication and its date appaar, and notice is given thet 
copying is by perrnbsion of tha Association for Computing Machinery. To copy otherwise, or to republish, 
requires a fee and/or specific permission. SIGSCE 94-s/94, Phcenk Arizort@SA @ 1994 ACM 0-s9791 440%/9410003..$3.5o 
 study when they cm easily see the maulta of their work displayed graphically. This is exactly whet algorithm 
vmudimion (abbreviated A% ) attempts to do. Algorithm vkueliaation smo&#38;tea thescdmatakmbyan algorithm 
with a corresponding set of ilktmtione. llwae illustrations take the formofana@cla ofmenipulatcd dstsstNctmea 
at"hltcms@ g events [1] during the execution of the algorithm. We do not require rhat rdgolithrn viauahb 
on be attimated, continuous motion. Rather GAIGS, the system that we will discuss, portrays en algorithm 
es a sequence of diacmte snapshots that the viewer can proceed through at her own pace. Though petbaps 
1s8sSophisticated graphically than Systems that do trw algorithm animation (e.g., MscBALSA sod XTaugo), 
the eyetanrthat we ve developed has mte distinct pedagogic advantage -the ebi~ to mwrnd art algorithm 
to a ptevioua atate of its executim and review a aubaequmca of the previously presented snapshots. w-thisCapsbilby,studentsCal 
easily become lost in viewing an algorithm s executim and revert to passively gazing instead of actively 
using the AV system asa leandng tool. The failure of meny rdgorithrn animation systems to provide a rewind 
faciMy is rec@zod as a serious pedagogic weakness [8]. GAIGS (Gmeraliaed Algorithm Illustration through 
Graphical Softwrus), Veraion 2.x, is an AV system developed at Lawrence from 19W-1P90. A paper at the 
1990 SIdCSE Symposium d~ how we have inmrporated AV (using GAIGS) into computer science leboratoty sessions 
[4]. GAIGS wee also the primary vehicle used et workshops on algorithm vimaWation presented under the 
auspices of the NSF% undergraduate Facrdty Udmrtcement Program (Appleton, WI -1991) and the ACM SK3C!SE 
Symposium @neaa Cii, MO -1992). It has been used by computer science faculty at over sixty inatitutkma. 
WMt the advent of ourobject-orktted project, we set about improving GAIGS. The matd~ GAIGS Veraion 3.0, 
uses object-oriented methodology to achieve three goak 1. We want to make it easier for algorithmedciana 
(students and facdty) to Cmattuct viadxadona of a@bhrna.  2. GAIGS 2x drew snapshots of eight basic 
data structures. We want algorithmeticiane to be able to extend the display capsbilitiea of GAIGS beyond 
these eight built-in etrwuma. In effect we wrmt to allow the algorithmeticiau to match the display capabilities 
of GAIGS to her own pemonelized mental vieualiion of an algorithm s actions. 3. GAIGS 2.x was a static 
viaualiaer of algorithms ht the sensethat the algorithm must firat run to oompletim, producing a fide 
of snapshots which are than loaded into GAIGS for graphic rendering. We want GAIGS to be a dynamic viaurdii%r 
of algorithms. lltat is, the algorithm should run under the cmtml of GAIGS. When en intermtiog event 
in the algorithm occurs, GAIGS should display that event rather then having the event written to a file 
that GAIGS loads after the algorithm s execution.  GAIGS 3.0 bea ma these goals by employing the object-oriented 
featurea of Borland Psscal 7.0 the source language for GAIGS and many of the algorithms it viaualii. 
By doing SO,we have developed a tool that combmes graphica and GGP to make the study of algorithms visually 
interesting for our students. MAKING IT EASY TO CONSTRUCT VISUALIZATIONS Thekeytomaking viaualizatica 
eaayiatotmatitaaao abstraction. We noted earlier that we have developed (in Borland PaacsJand C++) object 
libraries for classical data structures. l%eeeclass libraries typically provi&#38; a method for each 
operation on the data structure. For inatanee, our Borland Pascal object Iibmry for the stack ADT is 
declared as follows. StackNodePtr = StackNode; StackNode = RECORD Data :pointer; Next :StackNodePtr END 
; . Stack OBJECT private top : StackNodePtr; lpn : in teger; Public -CONSTRUCTOR Ini t (Iinespernode 
: in teger); DESTRUCTOR Des troy; FUNCTION Empty : boolean; FUNCTION OnTop : pointer; PROCEDURE Push 
(item: pointer ) ; FUNCTION POP : pointer; PROCEDURE PrintNode(i tem:pointer; VZR F:text); VIRTUAL; PROCEOVRE 
Show(VAR ShoFiZe : text ; TS: Ti tleString ); VIRTUAL; END ; (* Stack object *) Ignoring the MWed poxtkns 
of this declaratiq we fmd oumelves with puMIc access to the usual operations ss a stack of generic pointem. 
Generic pointere amuaedso that anytype ofdatamay bestomd inthe stack. The abstraction of visdzatioo ia 
incorporated in the italicized PrintNode and Show methods. Given a stack S, we aend a Show message to 
S wherewe want S to produce a viaualintion of itself. he tit is that a snapshot of the stack S is sent 
to the text fiie Shofde with the accompanying caption TS. llds snapshot can then be mdemd by GAIGS. lhe 
Show that we provide is without frills in that it provide-s a plain, black-on-white rendering of the 
stack. Show is alao vhtutd. Hence, should an algorithmetician have a particular kind of derived stack 
for which ccdom will enhance the ma-she can rewdte Show for this derived stack Vl= lhe PrintNode method 
is pure virlual in the sense that any aigonthmetician using our stack type must derive a class fmm it 
in which the PrintNode method is implemented. Relative to viauakadon, PrintNode is wed by the Show method 
to determine how one element (node) of the stack should appear. Every abstract data type in our object 
library employs PrintNode and Show in these same contexts, so they are abstmcdona that users of the library 
quickly become familiar with. As an example, suppoeethat we want to ccmtmctaviadzationof the system stack 
during execution of the recumive Towera of Hanoi algorithm. We start with a typical Towem of Hanoi pmcdure. 
PROCEDURE Hanoi (Number discs : integer; Source, Intermediate, Destination :string) ; BEGIN IF Numberdiecs=l 
THEN SwitchDiscs (Sour ce, Destination) ; ELSE BEGIN Hanoi (Number discs-l, Source, Destination, Intermediate) 
; SwitchDiscs (Sour ce, Destination) ; Hanoi (Numberdiscs -1, Intermediate, Source, Destination) ; END 
END; ( Of PROCEDURE Hanoi ] We then must derive a ptimdar stack object from the haae Stack ob@ct described 
earlier. This new stack object is to be a stack of fmrnee that would atoxs parameters to Hanoi and the 
return point from each mcurdve call. FrameStack PROCEDURE END ; -PrintNVIRT OBJECT ode (UAL ; (Stack) 
Item: Pointer ;VAR F: text) ; FrameData Sour ce, Dest, = Intermediate NumberDisks, RetPt END ; RECORD 
: string; : integer [ of FrameData RECORD } FramePointer - FrameData; The PriatNode method most be implemented 
for a node on a FrameStack. In particular, one node of such a stack will cmsist of five textuai lines, 
as illuatmted in Figure 1. Hence FmmeStack s PrintNode iw PROCEDURE FI ameS tack. Pr intNode (It em: 
Pointer; VAR F:text) ; BEGIN writeln (F, Nusber Discs= , FramePointer (Item) A . Number Disks) ; writeln(F, 
Source- , FramePointer (Item) . Source) ; write ln (F, Destination=t , FramePointer (Item) .Dest) ; 
writeln (F, Intermediate-1 , FramePointer (Item) . Intermediate) ; IF FramePointer (Item) .RetPt -1 
THEN writeln(AlgoFile, Return to SwitchDisks ) ELSE IF FramePointer (Item) . RetPt -2 THEN writeln 
(AlgoFile, Return to end of Hanoi ) ELSE writeln (AlgoFile, Return point -main ) ; END ; To complete 
the viauabd version of the algorithm, we augment the Hanoi procedure with calls that send a Show message 
to the stack of fames at the points where interesting events occur, that ia, as we ester Hanofi as we 
math a mcumive terminados conditiow and then as we tstum fmm a nwumive call. In the following code S 
is a FmmeStack wkse Isit method has been called prior to entering Hanoi. PROCEDURE Hanoi (Number Discs 
: integer Soux ce, Intermediate, Destination : string) ; VAR A : string; { Ueed to etore a snapshot caption 
} ItemPtr : FramePointer; BEGIN (Produce captioned snapshot ) S .Show (AlgoFile, Entering Hanoi ) ; IF 
NumberDiscs-l THEN BEGIN {create caption] A:= Only one disk, so. , ,\nMove t + Source + to + Destination 
+ \n 8; (Produce captioned snapshot} s,show(AlgoFile, A) ; SwitchDiscs (SOurce, Deritination) ; END ELSE 
BEGIN . . . { Here prepare a stack frame ) mu Ons dls!l, so... the monks move the dmks tlom pillar to 
pillar. Toward this end, we need IlOvofi *OC tobeabletovkwdize athree-piilarstructure, withanarbitrmynmnber 
of d~ks on each pillar. 1+ tkMcrmsa-2 Surm Lbstinmicm-B xrlwrmdhw-c rmtun to StIItc?Oiscs -ruscs=s 
Sara-n DD8tinatl-E Imumsdima-s S3twrmd froa first r-81v9 cdl, so... KA tOB  JI1+ SOLrcc-m Ontirntim=c 
 sawn paint -main FIGURE 1 1,II mpmsent two successiw screens in GAIGS visusliition of stsdt frsmes in 
Towers of Hsnoi. S. Push (ItemPtr) ; Hanoi (NumberDiscs -l,source, Destination, Intermediate) ; ItemPtr 
:= s. Pop; A:-g Returned from firet recur eive call, + so. ..\nMove + Source + to + Destination + 
\n ;  {Produce captioned snapshot} s,show(AlgoFile,A) ; SwitchDiscs (Source,Destination) ; . . . { Prepare 
stack frame for next call } S.Push(ItemPtr) ; Hanoi (NumberDiscs-l, Intermediate,Source, Destination) 
; ItemPtr := s.Pop; {Produce captioned snapshot) S.Show(AlgoFile, Returned to end of Hanoi ); END END 
; ( of PROCEDURE Hanoi } GAIGS rendedng oftwosnspahotaproduced bythisaugrnented Hanoipmeedureappeaminfigurel. 
Notethsttheseanapahotapmdwe cneparticularview ofthe Hanoi slgorithm,thst i.s,aviewofhowthe ayatemactually 
implements themcumive ealis. Ildaviewis fine for illuatmtinghowrecumion isearriedou~butdoea littletoshowthehigherÂ­levelactionathstare 
aasociatedwiththis mcumiveslgorithm, thatis,how EXTENDINGQAIQS TOVISUALIZE NEW STRUCTURES Unfortunatdysucha 
thme-pillaratmcture ianotbuiltintoGAIGS. However, using GG methodology, GAIGS 3.0 now allows the algorithmetician 
to dafwnewstmetures sndtotell GAIGS how their graphicrenderingahouldappear. ~ekeytothisistheobjecthierarchy 
towhichallGAIGS stmetumabelong. l--Structure~pe @d_Array ~LinearLiet I >Stack I ~ueue I -LinkedList l------BinaryTree 
@eneralTree ~--map:z;;twor k ~Network The base class StructumType eetabliiea two vhtual methods, LoadStmctureand 
DmwStructum,thst allderivedclasaesmust implement. LOad!ltructu miamsponaible for paraing the textual 
representation ofa SOS@Ot@froma ffie. lldspamingtakeetheformofbreaking down thedataatmcturebeiiglosdedintoaliat 
ofnodeathatisatomdina genedcliiedlii llma,l.oad!huctum works upontheprernisethst eve~ structure haaamapshot 
representation saapacket of ASCII texttbatis passed from the algorithm to GAIGS (by file or other means). 
llda pmnise &#38;kcta au attitude recently sdvomted by Rettig, Simona, and Thomson P], namely that every 
object should be able to psme a textual representation of itself into an imtance of itself. The Draw!huetnm 
method is responsible for graphically fashioning the layout of the nodes that have been parsed into a 
node list by badstructum. Dmw!ilructure atoms in a GKS-lii segment the graphical prhnitivu that will 
render the snapshot. The segment containing these printitivea esn be redrawn anytime the viewer wsnta 
to rewind the algorithm to a previous atate. To mate a gmphic of the three Hanoi towers that complements 
the view consisting of the stack frame% the algorithmetieian would have to extend the object hierarchy 
for !hwture~ to include a new object. Below this new @ject is identified as HsnTower. HanTower = OBJECT 
(Structur eType) Maxdiecsize : integer; CONSTRUCTOR Init; PROCEDURE DrawStructur e (VAR Snapsht: Snapshot) 
; VIRTUAL; PROCEDURE LoadS true tur e (VAR Snapsht: Snapshot; VAR Error, Linenum: integer ) ;VIRTUAL; 
END; /Uler defining the textual form that a HanTower snapshot would take and adding statements to the 
Hanoi procedure that direct such textual output to the algorithms s snapshot file, she would then have 
to write Load!ltmcture and DmwStnmture methods for this new object. Ihe new object type and its methcda 
are then linked into GAIGS. When GAIGS (augmented by the HanTower atrochue) nma and the viewer chooses 
to move to the next mapsbo~ GAIGS calls LoadStmoture snd DmwStrueture in suceessirm. Polymo@d.sm inaumsthst, 
ifthiasnapahot happens toke a three-pillar HanTower, the correct LoadStructure and DrswStnwture are invoked. 
Recapping, all the algoritbmetician must do to add new structures and viewa for them to GAIGS is 1) augment 
the algorithm to produce a textual rapnxentation of such a ahuctme, 2) write a parser (LOadStructure) 
to load the textual repmaedation of the structure into GAIGS internal node 1~ and 3) write a gmphical 
layout routine (DrawStruetum) to nmder the atmcture. l he nxmlt of viaualiig the Towem of Hanoi rdgorithm 
using the new HanTower object appears in Pigrns 2. llria figure shows a view of the system stack frames 
side-by-side with a view of the dish that move fi-om pillar to pillar. GAIGS has thus provided an object-otiented 
shell that SI1OWSthe algorithmetician to hook her peraonrdisedviewa of an algorithm into a graphical 
user succession of states. mg am d-, -.. ItOwOh toc 1+  II WLTW +rm firs rcarslva I!wofl WB 31+ -oLas-a 
Sc4rc,-n Omninula-a I I==-l -ma-a Sard D9stlm$Â­@lcmMLaw-9 I am. ram -d interface designed to explore 
an algorithm as a Red pillar moved object-oriented perspective. fhe key is to regard the algorithm itself 
as an object Though this may at fimt seem foreign to us sinco we typically look uptm algorithms as manipulators 
of objects, it is a very natnml poatunefor artAV ayatmntotake. AV systemsamdesignedtolt16QipUlStealgoritihrna. 
In particular, when the viewer wanta to start an algorithm, the AV system should be able to send a meaaageto 
the algorithm to atmt its executkm. Consequently, GAIGS 3.0 now offers the option of loa&#38;mg a viaurdimtirm 
fkom a static ahow fle or running art algodthm that dynamically produces the snapshots rendered by GAIGS. 
Algorithms that are dynamically viaudzed must mgiater themselves in the algorithm object hlenuchy given 
r+ B Red pLllar coup m.. c moved I A Bc FIGURE 2 1,II represent two aucceaaive acreene, each with two 
view of the Hanoi algotithm. Gray shad~ hem replacea the red cobr that appeare on a VGA aoreen.  VISUALIZING 
THE ALGORITHM DYNAMICALLY Aa described to this poinL GAIGS will still render the Towers of MI (or any 
other) algorithm statically. The algorithm must first execute, writing ita snapshots in textural form 
to SDASCII fiie. @er the algotithm temdaatea, the snapshots in this ASCII fde are then loaded and rendered 
in GAIGS. To vkualixe the algorithm dynamically, we must be able to start the algorithm fmm within the 
t3AICiS mwhonmerrt and have GAIGS render a snapshot 66 the algorithm reaches the caresponding interesting 
event in ita exemticn, not after the algorithm txmcludea. Achieving such dynamic viauelizatkm is surprisingly 
simple when approached from so below. l--Algotype >ShowDumrsyAlgo iteratively >.Sorter ~uickSorter >HeapSorter 
1Â° >Parser Tower sOf Hanoi The base class, AlgoType, method called Execute. Algot ype -CONSTRUCTOR { 
An algor ithmit that reade static show file ) { Selection sort } ( Quick Sort } ( Heap SOI t } ( Algebraic 
expression parsing ) ( Tower e of Hanoi 1 in this hierarchy declares a purely virturd OBJECT Ini t; DESTRUCTOR 
Done; PROCSDURE Execute; VIRTUAL; END ; Each pmticular algorithm must know how to respond to art Exeane 
message. In the case of the Towera of Hanoi example, this means merely putting an Execute wrapper around 
the Hanoi procedm that we deamibed earlier. I%e Hanoi procedure still writea ita textual snapshot to 
a ffle, but now it is a temporary file consisting of a dynamically produced snapnhot The Hanoi pmcedum 
must be augmented with a call to a supplied procedure ReturnToGAIGS at each interesting evmrt, This procedrrm 
n4b@ahea control from the algorithm back to the GAIGS viewing environment where the dynamically produced 
snapshot is loaded and rendered. When the viewer selects Next in the viewing environmettt control is 
nXmned to the algorithm to continue ita execution. Tower sOf Hanoi -OBJECT (Algotype CONSTRUCTOR ini 
t; DESTRUCTOR done: PROCEDURE Execute; END; PROCEDURE Tower sof Hanoi. BEGIN VIRTUAL; Execute; { Perform 
Various initializations Hanoi algorithm, such as diske and pillar designators calling constructors for 
HanS tack. Then feed these initialized structures to algorithm. ) ... ) for Towers of obtaining number 
of from the user, FrameStack and for inputs and traditional Hanoi Hanoi (NumberDiscs, Source, Intermediate, 
Destination) ; END;  Any (Borland Pascal) algorithm that previously produced a (static) snapshot file 
cm now be vbmalimd dynamically by calling it from auciI an Executs wrapper. A single line added to the 
initialiiion code far the algorithm inarnsa that it appeara among the algorithm choices in GAIGS Run/Gpen 
menu. FUTURE DIRECTIONS 1. It will now be possible for students familiar with object-oriented PW ramming 
to create their own personalized vhmkations of algorithms in a variety of courses. We hope this abii~ 
will inmase their tmdemtanding and enthusiasm for the material Wmg studied as well as providing learning 
tools to be used by other stu&#38;nts studying the same material. 2. Reid-time dynamic viauakm ens of 
algorithms will enable AV to become mom interactive, that is, the viewer cau interact with the algorithm 
as it is Mmg visurdii This should open new avenues of exploration for tie viewer, for example, bdmg able 
to dynamically change the heuristic in a network search algorithm as we vimrdly detec%that the old heuristic 
is ltimg us astray. 3. Because the aigoritbmeticiao can now add new information atructurw and instructions 
for their rendering to GAIGS, it dmuld be possible for GAIGS to visualize a vast new spectrum of kehaviom 
that can be viewed as transformations in the state of a system over time. lbese behaviors mnat no longer 
be limited strictly to computer science rdgorithma. 1% inatauce, them is no reasonwhyabiologist couldnotuseGAIGS 
astheviewing shellto visualize the changes in a marine ecological system over time (a projectthathasalreadybeensuggestedbyalocalbiologist). 
Indeed GAIGS could now beusedasaframework for avari~ of scientific visualizations --we need only be able 
to define the state of the visualized system as a textual snapshot and then defhw the approptiste LosdSttuctnm 
sod DmwStmctum methods for GAIGS rendering of such a snapshot. 4. Pteaently GAIGS visualizes an algorithm 
s Wmaforrnations of a data  atmctum but does not simultaneously display the de for that algorithm. In 
this regard an effective addition to GAIGS would be the capeldlity to view a code window highlighting 
that potion of tbecOdethat affected acatsintranaforrnstiononadatastmctnm. According to Schweitzer [9], 
this ode window should not be a detailed rdgofithm as implemented in a computer language such as Pascal 
or C, but rather a paendocade version of the algodthm that will rdlow the viewer to focus conceptually 
on the tmosformations affected by the algorithm. AVAILABILIN OF GAIGS 3.0 Our experience with earlier 
versions of GAIGS was that our own perspective on algorithm vianabtion was greatly broadenedby comments 
we received from its users --both at Lawrence and other Mitutions. We hope for similar results with GAIGS 
3.0 aml as suclL would like to diatrlbnte it to anyone interwted in using the viaualiions that are furnished 
with it or in mmtmcdng theii own viw&#38;&#38;ma. lhe former requires nothing more than GAIGS itself. 
The latter requkes that you have Borland Paacrd7.0 to link your new objects into GAIGS. To receive a 
copy of GAIGS, merely contact the primary author of this paper for a guest log-in that will allow you 
to dowrdoad it via ftp. BIBLIOGRAPHY <RefA>1. Bm~ Marc. Algotihm Animation. MIT Press, Cambridge, A@ 1987. 
 2. Hnnkina, Dalton R (moderator) and hdrianoff, Steven K. and Naps, Thomas L. and Nerbeii-Wolfe, Rmslee. 
CompmerGraphics Across the Computer Scierm Curriculum. Papers of the 24th SIGCSE Technical Syrnposiam 
on Computer Science E&#38;cation, February 1993, Vol. 25, No. 1, Iudisnspolis, IN, p.295. 3. Nap, lhomas 
L. DrAgn of a Completely General Algorithm ViauaMation System. Proceedings of the 22nd Small College 
Compating Symposium, April, 1989, Eau Claire, WI, pp. 233-241. 4. Naps, Thomas L. Algorithm Visualization 
in Compnter Science Laberatorh?s. Papers of the 21st SIGCSE Technical Symposium on Computer Science Education, 
Vol. 22, No. 1, Washington, DC, pp. 105-110.  5. Naps, Thomas L. and Hundhauseu Christopher D. he Bvolution 
of an Algorithm Viizttkm system. Proceedings of the 24th Small (hlkgt Computing Symposium, April, 1991, 
pp. 259-263. 6. Naps, Thomas L and Htmdbausen, Christopher D. and Swauder, Brian, GXfGS User Manual, 
Ver. 3.0. Lawrence Computing Center publications, Appleton, WI, 1993. 7. Rettig, Mark sod Siiona, Gmy 
and Thomson, John. Extended Objects. Conmtunicatiwu of the ACM, August, 1993, Vol. 36, NO.8, pp.19-24. 
 8. Stssko, John and Bsdm, Albert and Lewis, Clayton. Do Algorithm Animations Aasii Learning? An ~piticd 
Study and Analysis. Proceedings of the INTERCHI 93 Conference on Human Factors in Computing System,April, 
1993,Anatdam, Netherlands, pp. 61Â­ 66. 9. Schwetixer, Dine. Designin8 Intemctive viiott Tools forthe 
Graphics classroom. Papers of the 23ni Technical $vnparium on Compater Science JMucatiq March 1~ Vol. 
24, No.1, Kansas city, MO, pp. 299-303.  50  </RefA>
			
