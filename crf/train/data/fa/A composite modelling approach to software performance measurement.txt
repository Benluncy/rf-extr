
 A Composite Modelling Approach to Software Performance Measurement Vldar Vetland Peter Hughes Arne 
S@Ivberg Facultyof Electrical Engineering Modicum Ltd. Faculty of Electrical Engineering and Computer 
Science Congleton and Computer Science The University of Trondheim Cheshire CW123HZ The University of 
Tmrndheim N-7034 TRONDHEIM, NORWAY ENGLAND N-7034 TRONDHEfM, NORWAY Emaik vidar@idt.unit.no Traditionally 
performance modellers have tended to ig­nore the difficulty of obtaining parameter vahres which repre­sent 
the resource demands of multi-layered software. In prnc-Iice the use of performance engineering in huge-wale 
sys­tems development is limited by [he cost of aequirtng appro­priate performance information about the 
various software components. However, if this information cart be reused when components are combined 
in different ways, then the cost of measurement can be more easily justified. Such reuse c,anbe achieved 
by means of a composite work model. Composite Work Models A composite work model for a client-server 
application is shown in Figure !. The model describesa bank application where the file server, remote 
procedure cat] library, and op­erating system level communication are distributed between CPU# 1 and 
CPU#2. The arrangement of the components and the edges describes the dependencies between the compo­nents. 
The work demand of a software component function is specified in terms of invocations of other software 
compo­nents and/or use of hardware devices. In a relationship be­tween two components, the superior component 
initiates ex­eeution in the inferior component. Thus, any functions that are invoked by the users of 
the system must be represented by the top-level components of the hierarchy. l%e SP mefhod [1] guides 
lhe construction of composite work models. Permission to copy without fee all or part of this material 
is granted provided that the copies sre not made or distributed for direct commercial advantage, the 
ACM copyright notice and the title of the publication end its date appear, and notica is given that copying 
is by permission of the Association for Computing Machinery. To copy otherwise, or to republieh, requiras 
a fee and/or specific permission. 1993 ACM SIGMETRICS-5/93 /CA, USA e 1993 ACM O-89791 -581 .X/93 /0005 
/0275 ...$l .50 Emaik esolvbee@idt.unit.no I Bank SppsmtloaI Figure 1: An example of an SP model flte 
rationafe for composite work modelling is that most of the measurement data can be reused when some 
Iod change is made to the software. At the start of a development, information about about some components 
will be incom­plete and the work model will contain many estimated vaftres. These can be replaced by 
more accurate data as development proceeds. The maintenance of up-to-&#38;~te component infor­ mation 
enables the evolution of system performance to be tracked and early warning to be given of potential 
deviations from overatl targets. In addition, it is possible to experiment with attemative software configurations 
and workloads. Performance ModelIing In a performance modelling study a conrerrrion model is builttoinvestigateandexperiment 
with theeffectsofcompe­tition for computer resources. A workload model describes howtheservicesofferedbythesystemarebehg 
used.llre 275 Scrvlm ot user interface work Wo Ink Danmids ............. ... .... Rcsourm Figure 2: 
The load parameters are applied directly to the contention model while the mapping between of­fered services 
and resources is modelled by a compos­ite work modef. workload model provides parameters to the contention 
model via a mapping of service demands to resouree demands which depends on properties of the software. 
Crystal is an exarnpte of a commercial tool which provides such mappings. Ex­ecution graphs [3] are an 
example of a technique for esti­mating resouree demands for software under development, The composite 
work modelling approach is only possible when work and work intensities (e.g., rate of work) are sep­arated. 
A method is required to specify the perforrnance­related attributes of any software component independently 
of its environment and independently of any particular work­load. This is provided by (he structure and 
performance spec­ification method (SP). Work and work intensities are eventu­ally brought together as 
parameters to the contention model. Another term for work intensity is load. Thus, a workload model can 
be divided into a static work model and a dynamic load model which are applied as parameters to a contention 
model (see Figure 2), The SP Method An SP model consists of components arranged in a dircctcd acyclic 
graph, Each SP component represents a software component and is defined by a set of operations on encap­sulated 
data structures (abstract data types) and a descrip­tion of its implementation in terms of invocations 
of its sub­components. I%ch component-strbeomponent relationship in the SP model is represented by an 
complexity matrix, ~component Each row of the matrix represents the num­ subcomponent. ber of invocations 
from a component operation to the set of subeomponent operations. Components which have subeom­ponents 
are termed non-primitive components. The rules of the SP method which are explained in [1], are based 
on a general view of information proeeasing which makes no assumptions about architecture or implementation 
other than those stemming from the hierarchical nature of complex systems. The prime quantitative result 
of SP model is the number of operations on primitive components which result from a top-level operation. 
This calculation can be formulated as a set of matrix multiplications and additions. The results rep­resent 
the devolved work on the hardware which maybe used for calculation of resouree ulilisarions or as parameters 
in a contention model. The devolved work must be combined with hardware device speeds to obtain contention 
model pa­rameters. For instance, the SP model results can be used as visit counts in queueing network 
models. % cheek the accuracy of the SP model, the parameters provided by composite work model calculation 
should be compared with the parameters that can be provided by direct measurement of hardware resouree 
usage. . Feasibility of the Approach The practical application the SP method involves a trade­off between 
availability of measurement data of software component interactions, aecttraey, reusability of work model 
components, and the cost of building and using the 5P model. The nature of this trade-off has been explored 
in the DAIS development project at International Computers Limited in Manchester, England. This involves 
the development of dis­tributed Wtnsaction-processing software which is designed to operate transparently 
over a number of different platforms. The 5P tool [2] developed during the IMSfii projeet was used for 
this investigation. Work is now proceeding on the acqui­sition of measurement data.  References <RefA>[1] 
<SinRef><author>Peter H</author>, <author>Hughes, S</author><title>p I%nciples, Tkchnicat Report 059/fCL226/0</title>, <institution>STC fkehnology Limited</institution>, <date>July 1988</date></SinRef>. [2] 
<SinRef><author>Cydney Minkowitz</author>. <title>The structure. and performance specification tool design document</title>. <booktitle>Document IMSE D4,1-1 
version 2</booktitle>, <institution>BNR Europe Ltd</institution>, <date>JanUWY 1991</date>. </SinRef>[3] <SinRef><author>Connie Umland Smith</author>, <title>Pe&#38;ormance Engineering of Software 
Systems</title>, <publisher>Addison-Wesley</publisher>, <date>1990</date></SinRef></RefA>. 276  
			
