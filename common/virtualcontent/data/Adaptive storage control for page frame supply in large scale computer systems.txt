
 ADAPTIVE STORAGE CONTROL FOR PAGE FRAME SUPPLY IN LARGE SCALE COMPUTER SYSTEMS Yasufumi Yoshizawa,Toshiaki 
Arai,Takashige Kubo Systems Development Laboratory, Hitachi, Ltd. 1099 Ohzenji, Asao-ku, Kawasaki, 215 
Japan Toshiharu Shinozaki Software Works, Hitachi, Ltd. 5030 Totsuka-cho, Totsuka-ku, Yokohama, 244 
Japan So there is an increasing demand for subsecond response times in conversational processing and 
for ABSTRACT  high level throughput in batch-processed king-size A real storage management algorithm 
jobs.called Adaptive Control of Page-frame Supply Virtual storage has been widely employed in  (ACPS) 
is described. ACPS employees three modern computer systems. The major aim of a virtual strategies: prediction 
of the demand for real storage operating system is to provide a large address page frames, page replacement 
based on the space for each process by efficiently using the prediction, and working set control. restricted 
main storage capacity. That is, the control  Together, these strategies constitute the real of real 
storage allocation is a major area of concern in a page frame allocation method, and contribute virtual 
storage operating system. Among computer to short and stable response times in resources, real storage 
has a great influence on the conversational processing environments. performance. The largest component 
of the response ACPS is experimentally applied to the time was reported to be paging delay by W.H. Telzlaff 
 VOS3 operating system. Evaluation of ACPS in Conversational Monitor System [TET87]. To avoid on a real 
machine shows that TSS response the paging delay and to get steady response times, the times are not 
affected too strongly by king- operating system must always replenish the free pages size jobs and ACPS 
is successful in avoiding adequately for real storage requirements. The first paging delay and thrashing° 
ACPS prevents objective of this paper is to discuss how to determine extreme shortages of real storage 
in almost the optimum threshold value for the number of free  all cases. pages in a virtual storage 
operating system. We propose to solve this problem by periodically predict the storage requirements of 
the near future to decide 1. INTRODUCTION the optimum threshold value. With the spread of computer 
systems and The second objective of this paper is to develop increase in computer users, conversational 
processing the methodology which gives the number of free pages has become more popular. Conversational 
processing, that satisfies the threshold value. This problem has on today's huge computer resources, 
can handle many been studied as a page replacement algorithm tasks which were batch processed several 
years ago. [PAR72,SMI78] to evaluate the prediction for future Batch-processed jobs frequently require 
a tremendous page references based on the past history of program storage area due to the virtual storage 
which is very behavior. The operating system discussed in this common today. We call such jobs as "king-size 
jobs". paper employs a practical sampled working set [FER83] instead of the exact working set [DEN68a,DEN80]. 
And the operating system also uses the logical swap method [YOS80,TET87] which can save paging I/O's 
and is especially valid in the conversational environment such as time sharing Permission to copy without 
fee all or part of this material is granted provided that the copies are not made or distributed for 
direct systems (TSS's). Address space is logically swapped- commercial advantage, the ACM copyright notice 
and the title of out when the process enters a long wait such as a the publication and its date appear, 
and notice is given that copying terminal wait. Therefore, there are two candidates for is by permission 
of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or 
specfic permission. &#38;#169; 1988 ACM 0-89791-254-3/88/0005/0235 $1.50 235 the free page replenishment: 
the outside page of the working set and the page of the logically swapped-out working set. This paper 
proposes a page replacement algorithm which uses the same criterion to choose the free page from these 
two candidates. The logically swapped working set is called the "survived working set" in this paper. 
A king-size job accesses a large virtual storage area compared with the available real storage. Although 
more and more virtual and]or real storage has become available year by year, the requirements of these 
king-size jobs have also increased. So there is a need to improve the throughput of king-size jobs without 
worsening the response time in conversational processing. Throughput control by swapping [LYN74,CHO77] 
has been studied. However, excessive swapping sometimes reduces system performance because of increased 
swapping overhead [BER78,BUZ78]. Thus, the third objective of this paper is to propose a variable window 
size in the sampled working set instead of a fixed window size (delta tau; P.J. Denning's terminology[DEN68a]) 
according to the main storage load. A.J. Smith proposed the "damped working set (DWS)" which also varies 
the window size [SMI76]. DWS is useful when a single job requires multiple program execution phases. 
The proposed variable window size method in this paper replenishes the free real pages especially from 
the king-size jobs. That is, the number of allocated real pages for the king-size job is controlled by 
varying the window size. This approach can replenish the free real pages, depending on the real storage 
load, without swapping-out such a king-size job. These three objectives are our research targets. The 
load of large-scale general purpose computer systems is usually changing. A virtual storage operating 
system must supply an adequate number of free real pages to meet the demand for real storage in the near 
future. If the operating system can supply these free pages adequately, the paging delay will be removed 
and the demand for subsecond response times in conversational processing will be satisfied. The threshold 
value of the number of free real pages and allocated pages for a king-size job should be adaptively determined 
according to the real storage load. The proposed page replacement algorithm of this paper is called "adaptive 
control of page frame supply (ACPS)". ACPS predicts the demand for real storage dynamically, replenishes 
the free pages to prevent paging delay, and controls the working set by varying the window size. 2. ADAPTIVE 
CONTROL OF PAGE- FRAME SUPPLY   2.1. Prediction of Real Storage Shortage The main objective of ACPS 
is to guarantee stable and reasonable response times by avoiding paging delay and thrashing[DEN68b]. 
To shorten the waiting time for real frame allocation, an adequate amount o£ available page frames is 
necessary. The available page frame means the same as the free real page in this paper. The key factors 
in designing a virtual storage operating system determine how many page frames must be available. A excess 
of available page frames results in a low multiprogramming level and low throughput. A shortage causes 
thrashing and a bad response time for conversational processing. ACPS predicts the demand for real storage 
and supplies available page frames to prevent paging delay and thrashing caused by page frame shortage. 
Two typical instances of demands for real storage in a virtual storage operating system are paging-in 
and swapping-in. Fig. 1 shows a state transition schema of real page frames in the virtual storage operating 
system discussed in this paper. The available page frames are replenished from the outside of working 
set and from the surviving working set by page steal and physical swap-out respectively. The available 
page frames are counted by the "available frame counter (AFC)". These demands for real storage vary depending 
on the number of TSS users, the multiprogramming level, and the behavior of the program. A virtual storage 
operating system must keep track of the real storage requirement of the computer system and supply the 
optimum number of available page frames. -r J Data Set J I I Data Set I I I I .......................................... 
; I Data i i rage-in/Swap-in ~ I i Logical Swap-in ~A!'""2"t'a'""! i Transfer i ~"'" I ""1'4 I ........................................ 
 ....................................T Trtaasfer [~ I Surviving Available JOB A JOB B ~ II Working Page 
WS WS "" I WS I l~11 Sets F ..... ~_~ II ( WS's ) al Swap i {ide -~ I ! Physical i )ut-I l fWSI ~' ~i 
Swap-Out i  iii!?i iil}i! ili* *i * ,4. ................. ~' Replenishment of free pages by ACPS Figure 
1: State Transition Schema of Real Page Frames When AFC becomes less than a certain threshold value 
(L3) the operating system cannot operate efficiently. For example, I/O operation will stop because the 
I/O buffer area must be allocated real pages before I/O operation. The storage manager must therefore 
supply available page frames rapidly by swapping or page steal. If this status continues, the system 
response time become long and the batch throughput becomes low. So, the operating system must avoid real 
storage shortages. ACPS is called periodically and replenishes the real free page frames. Then, ACPS 
defines two threshold values based on the storage load of the system, and supplies the available page 
frames according to these thresholds. ACPS predicts the real storage demand for the interval until the 
next call, and computes the relation between the probability of a real storage shortage during that interval 
and the number of available page frames. The real storage shortage defined in this paper as the AFC is 
less than or equal to L3. The value of L3 is fixed based on the structure of the operating system and 
known by our experiences. The threshold values are expressed as numbers of available frames. These threshold 
values are L1 and L2. ACPS is called periodically, so let AFC(t) be the available frame count at time 
t. Each Li is defined depending on the real storage demand, as follows: Ll:The number of free page frames 
such that the probability of a real storage shortage before the next page frame supply is less than l 
1 . When the operating system can supply L1 free pages, a real storage shortage seldom occurs. That is: 
Pr{AFC(t+I) <=L3] AFC(t) >-- L1} <= ll. L2:The number of free page frames such that the probability of 
a real storage shortage before the next page frame supply is less than 12. The probability, 12, is greater 
than ll. Although the operating system can supply L2 available pages, a real storage shortage will occur. 
But system performance will not deteriorate so much. That is: Pr{AFC(t+I) <= LzlAFC(t) >= L2} <- 12. 
 The values of ll and 12 are experimentally determined. That is: 11=0.05 (5%) and 12=0.30 (30%). To establish 
the above two levels, ACPS predicts the average number of real page frames, N, required in time interval 
T. N is composed of two components : the number of page faults caused by current jobs, and the number 
of pages required by swap-ins of TSS jobs at the completion of thinking time. ACPS computes the value 
for N as follows: N: number of real flames required during the interval p: average number of page faults 
per second n: number of TSS users logged on :k'l: average thinking time of TSS users w: average working 
set size of TSSjobs T: interval between the calls of page replacement. To compute the Li threshold values 
, ACPS predicts the number of TSS users who complete their thinking time within the interval T. Li means 
the probability of a real storage shortage occurring is less than li. Therefore, ACPS should provide 
enough free real page frames to swap-in Ni working sets within the time interval T satisfying the criterion 
li . To obtain Ni, a stochastic model of a TSS user is introduced. The observed thinking time distribution 
tends to be a biphase or triphase hyperexponential distribution rather than an exponential distribution 
[YOS80]. This result is like the distribution of interarrival times in SDC-ARPA TSS [COF66]. However, 
in this paper we assumed that thinking times are independent and exponentially distributed with mean 
:k "1. Let k be the number of completed thinking times during T. Thus the distribution of k is a Poisson 
distribution, and is givenas: Pk =exp(-n k T)(n ~. T)k/k! (2) The probability that at most Ni TSS users 
have completed their thinking times during T is: ~i Pk. k=O ACPS computes the relation between Ni and 
li and determines the number of available page frames needed. Ni ~Pk <= (1-1i) (i=1,2) (3) k=O  When 
11 is 0.05, N1 can be computed by Eq.(3) That is, the probability of a real storage shortage due to interactive 
swapping is less than or equal to 0.05 if free page frames are prepared for swapping-in N1 working sets. 
Computing N1 by Eq.(3) allows us to determine L1 as defined before. L2 is obtained in the same way, by 
setting 12 to 0.30. In principle ACPS controls the number of available page frames every second. Thus, 
time T is one second. Ni is a function of the number of TSS users and their thinking times. L1 and L2 
are computed using Eq. (2) and (3). Li --Ni w +p (i =1,2) (4) N=(p+nklw)T, (1) ACPS is intended to maintain 
the number of where available page frames between L1 and L2. A conceptual schema of available page frames 
controlled by ACPS is shown in Fig. 2. If the number of available page frames drops below L3, the system 
is in a critical condition because not even system tasks can be executed efficiently. The value of L3 
in our experimental system is fixed to 10 based on the structure of the operating system. MB 1.0 L1 
 f:~ 0.8 ~ , ~ . g 0.6 "T "'~''" CPS Control 2 L2 / i ~". .o i ~ ~ No-ACPS Control 0.4 / i , ! ,., 
~'~ < .,,.-/ 0.2 " ~ / L3 "/ i/ , / ~i ~.i  + ÷ ÷ ÷ ÷ + + ACPS Called periodically Figure 2: Conceptual 
Schema of Available Page Frames Controlled by ACPS 2.2. Methodology of the Page Frame Supply 2.2.1. Criterion 
for page frame supply ACPS is called every second and computes L1 and L2 to predict the real storage 
demand until the next call. The values of n, w, p and k are checked continually to calculate the thresholds. 
Therefore, the estimated real storage demand always reflects the current status of the system load. ACPS 
compares the current number of page frames with the values of L1 and L2 just computed, and determines 
how many average page frames should be frames is greater than L1. "Installation Specified Storage Control 
(ISSC)" is intended to prevent certain jobs with no-locality from eating up real storage and to stabilize 
system response times and throughput. Pages are stolen from jobs on an LRU (Least Recently Used) basis. 
(2) Surviving Page-frame Control ACPS always supplies available page frames by ISSC at each call. When 
the number of available page frames is greater than or equal to L1 as a result of executing ISSC, ACPS 
does not need to supply more page frames, and the supply process will be stopped. Otherwise, ACPS performs 
"Surviving Page-frame Control (SPC)" to obtain more page frames. SPC frees the surviving pages. The surviving 
pages are classified into two categories: outside pages of the working set and the surviving working 
set pages residing in the main storage after a long wait such as a thinking time. SPC implements the 
working set policy and the demand swapping policy. SPC frees the surviving pages on an LRU basis. The 
pages outside of the working set should be paged- out, and the surviving working sets should be swapped-out. 
One important problem in SPC is how to unify the criteria for stealing pages from outside of the working 
set and swapping-out the surviving working sets. The algorithm is shown in detail in a later section. 
(3)Space Time Control If the number of available page frames is greater than or equal to L2 after Space 
Time Control (SPC), ACPS stops supplying available page frames. Otherwise, the "Space Time Control (STC)" 
feature is called. In this situation, the main storage capacity may be small for the current multiprogramming 
level. That is, all surviving working sets have been swapped- out, and there are no pages outside of 
the working set because of SPC. supplied. ACPS chooses between three page frame supply features according 
to the current number of available page frames. These features are as follows. (1) Installation Specified 
Storage Control The installation manager can specify the minimum and maximum number of real pages to 
be allocated to jobs in each job class. ACPS keeps these limits and steals real pages allocated over 
the maximum limit. These values of minimum and maximum are defined at the system set-up time, or by the 
operator's commands. Thus, ACPS always checks the number of allocated real page frames and steals pages 
if the number of allocated real pages is over the maximum value even if the number of current available 
page STC forcibly steals pages of the job with the maximum working set in the system. But STC guarantees 
the minimum number of real page frames specified in ISSC. STC continues the above operations until the 
number of the available page frames reaches L2. The storage management functions must be divided into 
two strategies. ACPS is the short-term strategy in the storage management. The long-term strategy is 
multiprogramming control. If the STC feature is frequently called in ACPS, the long-term strategy must 
be called. But in most cases of the real storage shortage, the main storage is occupied almost entirely 
by no-locality programs, i.e. the king-size jobs. Thus STC is vital to prevent king-size jobs from eating 
 out real storage instead of relying on the long-term strategy. The multiprogramming level control swaps 
jobs. Usually swapping such a king-size job wastes too much CPU, and too many I/O channels, and devices. 
And too many pages will be freed as the result of swapping-out such a king-size job. STC pages-out only 
a portion of such a king-size job on an LRU basis. So the paging cost of STC is less than that of the 
swapping control. A flow chart of ACPS is shown in Fig. 3. In general, the working set of a job that 
enters a long-term wait status such as a TSS thinking time period will not be accessed for several seconds. 
Such working sets can be swapped-out to secondary storage. But the demand swapping policy maintains working 
sets in main storage and swaps them only when there is a shortage of available page frames. These working 
sets are called "surviving working set". If working sets can be left resident until users complete their 
thinking time period, the swapping overhead can be neglected [YOS80]. The operating system selects a 
swap-out candidate among surviving working sets on an LRU basis. Called every second ACPS CONTROL Predict 
demand for real storage I Calculate level of AFC; L1 and L2 H Guarantee ! + maximum and I-- -- Installation 
Specified space Control I minimum : [issc]  : t II .... w__°rki2_g._se.t! _.. ] ÷ Yes End ~ r .................... 
Steal pages out of i working setsand i . . r--......... t Surviving Page Control surviving working 
,, [sPc] sets i L .................... + Yes End ~ ..................... Steal pages from i working 
sets of ~--: ........ ~ Space Time Control [STC] U .... ~f AFC:Avaitable End Frame Count Figure 3: Page 
Frame Supply Method in ACPS Control 2.2.2. Algorithms for supplying page frames SPC is the key function 
of ACPS. SPC supplies available page frames by maintaining sampled working sets and by using a demand 
swapping policy. Pages outside of the working sets and pages in the surviving working sets are the candidates 
to be freed and to be available. However, the two kinds of candidates of available page frames are measured 
differently. The pages outside working sets are measured by "Unreferenced Interval Counter (UIC)" values 
which are based on a job's virtual time. On the other hand, the surviving working set pages are measured 
by the thinking time which is based on real time. Thus, they cannot be considered under the same criterion. 
If the pages outside working sets are first freed by being paged-out, the surviving working set pages 
may be left in main storage even if thinking times are too long. In this case, such surviving working 
sets waste real storage. On the other hand, if the surviving working sets are freed by the swapping-out 
first, the outside working sets with large UIC values will be allowed to stay in the main storage longer. 
In this case, considerable interactive swapping will be introduced and will decrease the effects o£ the 
demand swapping policy. In both cases, the operating system does not free pages in strict LRU order. 
That is, uniform criterion for paging-out and swapping-out among the pages outside of the working sets 
and the surviving working set pages is required to keep the LRU principle in the operating system. We 
have introduced a criterion applicable to both a UIC value and a thinking time. That is, UIC values based 
on a job's virtual time are transformed into real time. When the uniform criterion is obtained, SPC can 
uniformly get the available pages from frames among the outside of the working set pages and the surviving 
working set pages on an LRU basis. UIC is increased by one if the page frame has not been accessed for 
one third of the window size in each job's virtual time. This operation is made to every real page frame 
allocated to all active jobs every second of real time. We assume the following clauses to consider the 
variation of UIC: (a)There are m ( >1 ) active running jobs in the system. These jobs are not in a long-term 
wait status such as thinking time. (b)Each job is equally scheduled for CPU resources. (c)CPU utilization 
is p (0 --< p =< 1 ). (d)The window size is seconds. Let us consider the average increment of U1C in 
one second under the above assumptions when the page is not accessed. The CPU runs for p seconds, so 
each job consume on the average p/m seconds of CPU time. The UIC value is increased by one every ~/3, 
so UIC is increased by 3p/m~. Thus, when the page has not been referenced for a second, the UIC increment 
 (hUIC) for one second of real time is 3p/mz. So, if a page has not been accessed for t seconds of real 
time, the UIC value equivalent to a thinking time of t seconds is 3pt/m~. We conclude that: (thinking 
time t seconds)=(UIC=3pt/m~). (5) A concrete example of the application of this uniform criterion in 
SPC is shown in Fig. 4. This criterion is employed in the HITAC M180, which is a medium scale computer 
system. The window size is 1.5 seconds, and we assume that the CPU utilization is i00% (p=l.0), the multiprogramming 
level is 10 (m=lO). From Eq.(5), we have AUIC = 0.2 t. Classified Surviving Page frames Based on Unreferenced 
Time Interval Running processes Logically swapped-out TSSs Item UIC Supply Item Thinking Supply Value 
Order i Time Order Greater = Longer than 2 I than 1 6 30 sec Out I of 6 4 During 25--30 3 Working 5 6 
Thinking / 25~20 5 Set Time J II at 4 I 8 J 15-20 7 Terminal 3 ! 10 i 15-20 9 I Working Less than I Not 
5~10 11 Set or equal paged-to 2 Out o-s 12 Figure 4: Page Frame Supply Order in Survived Page Control 
(SPC) This means that 5 seconds of thinking time is equivalent to one unit of UIC. SPC can get available 
page frames among the pages of the working set and the surviving working set pages using this criterion 
for stealing pages. At the beginning, SPC swaps-out the surviving working sets whose thinking times are 
longer than 30 seconds. If SPC gets more than L 1 available page frames, SPC stops supplying available 
page frames. Otherwise, SPC turns to pages with values greater than 6 and pages them out. The supply 
process of available page frames by SPC alternates until the number of available page frames is greater 
than or equal to LI, as shown in Fig.4. But SPC does not steal working set pages with UIC values less 
than 3, and keeps those working sets in main storage. Also, SPC keeps for each job the minimum pages 
guaranteed by ISSC even if their UIC values are greater than or equal to 3. The supply order in SPC is 
shown in Fig. 4. The machine dependency of Eq.(5) should be considered. The window size, r, and mul~iprogramming 
level, m, in Eq. (5) depend on the computer system. If the window size is inversely proportional to the 
multiprogramming level, Eq(5) is independent of the machine characteristics. In the next section it is 
proposed that the window size should be made dependent on the machine's power. That is, the window size, 
~, must be in inverse proportion to the MIPS (million instructions per second) of the machine. And it 
is possible to predict that the multiprogramming level might be large in proportion to the enlargement 
of the main storage. In general, we can consider the main storage capacity as proportional to the CPU 
power in the same series of computer systems. Therefore, the value of m, in Eq.(5) can be considered 
as a constant. From the above arguments, the relation between UIC and 'the thinking time given in the 
Eq.(5) can be assumed to be machine independent. 2.3. Working Set Control in ACPS ACPS employs the sampled 
working set method. The window size in this method is usually determined by experimental studies on many 
applications and by considering the operating system overhead of the working set strategy. However, the 
window size should not be constant. The window size, if anything, should be used to control the working 
set size. If the window size is enlarged, UIC values take a longer time to increase, and the working 
set will be larger, Conversely, if the window size is small, UIC values increase more rapidly, and the 
working set will be smaller. Thus, the operating system can control the working set size by changing 
the window size using this principle. The working set of a particular program is a logical page set and 
is independent of the machine. Thus, the operating system must keep the same working set even if this 
program is executed on another machine. From this point of view, the window size must be in inverse proportion 
to the MIPS of each computer system. From the above reason, ACPS changes the window size depending on 
machine power. ACPS controls the window size depending on real storage requirements. The available real 
storage requirements are desired from the computed values of L1, L2 and the current number of free page 
frames. If ACPS has to supply free page frames rapidly, the window size will be made small. Conversely, 
ACPS makes the window size large when the free page frames are sufficient for the current storage requirements. 
ACPS varies the window size from q to 4q. The value of q depends on the machine power. The value of q 
is set almost equal to the time for 1.0 million instructions. The window size is determined after against 
a no-locality program, (king-size job). TSS computing L1 and L2. The algorithm is as follows: response 
times were observed for this purpose. When L1 < AFC, then "~=4q. When L2 < AFC <=L1,then~=3q. When L3 
< AFC <= L2, then ~-=2q. When AFC <= L3, then ~=q. where AFC is the number of free page frames. ACPS 
interprets L1 < AFC as meaning the system has a sufficient amount of real storage. Consequently, the 
maximum window size is given. Fig. 5 shows the relation between the levels of Li and the window sizes. 
AFC (available frame count) I IMaximum Window Size i Enough real storage "~ =4q i L1 I I "6 = 3q I i 
Symptom of real storage shortage I L2 I i "~ :2q , Shortagestatus I L3 Minimum Window I i Size Critical 
status I ~=q q: approximately 1.0 million instructions Figure 5: Window Size Control in ACPS 3. PERFORMANCE 
MEASUREMENT 3.1. Purpose and Environment ACPS has been experimentally developed on VOS3 (Virtual-storage 
Operating System three) of Hitachi, Ltd.. Performance measurements on a real machine confirmed the effects 
of ACPS. Measurements, with ACPS and without ACPS were collected and compared. In the no-ACPS control 
version, replenishment of free pages by page-out and swapping-out are independently called and the window 
size in sampled working set is fixed. There are two conditions to call the page replacement. Two fixed 
values of AFC which are used for page-steal and swapping are fixed. From this reason, the no-ACPS version 
is independent on the storage load such as number of TSS users and multiprogramming level. The main objective 
was to measure the ability to limit the influence of a king-size job and sudden chang e of work load. 
ACPS is designed to guard TSS and batch jobs were executed in each environment. Communication Input and 
Output Simulation (CIOS) simulated thirty TSS terminals and generated typical command sequences. The 
simulated thinking times were exponentially distributed with a mean value of twenty seconds. The TSS 
command sequence consisted of several file editing commands, FORTRAN compilation commands, and commands 
to create and delete files. Forty different jobs, including a job executing a king- size job, constituted 
the batch jobs. The multiprogramming level for the batch jobs was four. The measurements were stopped 
when these forty batch jobs were completed twice. A special measurement tool was developed to observe 
ACPS control activities. This tool could monitor'the freed page frames, CPU utilization, TSS response 
times, and so on. When the system fell into an extrerr/e real storage shortage, that is, into L3 state 
defined previously, this monitor recorded the start and end times of L3 state. The hardware configuration 
for these measurements is shown in Fig. 6. The HITAC M 180 with 8 MB(106bytes) main storage is a medium 
scale computer system. System Configuration Work Load TSS: -30 terminals using terminal I/O HITAC M180 
simulator (CIOS) -Fortran program edit and compile-and-go main storage 8 MB i -average thinking time 
is 20 seconds ,MPx Px I .... Batch ~ob: -benchmark jobs(4O Fortran jobs) -level o f muitiprog ramming 
is4 Measurement tools: -Extended RCM* monitor (to get AEPS control information)  / iii.:==::==-Tii -SAR** 
(hardware information) /~ i i ", TSS i da~ase'l, ~ ~i " ............ ~ i -CIOS (to get TSS response time 
distribution) -SMS*** (to get batch throug hput rate) ............................ CIOS: Communication 
I/O Simula tor *: resource centralized manager * : system activity reporter ***: system management support 
Figure 6: Hardware Configuration Used in the Measurement 3.2. Results and Analysis The results are shown 
in Fig. 7 and Fig. 8. These two measurements were done in the same environment, that is, under the same 
workload and hardware configuration. The measurement intervals with ACPS and without ACPS was 29.4 minutes 
and 36.5 minutes, respectively This means that, ACPS improved the batch throughput by 24%. To observe 
the CPU utilization is important. Fig. 7 illustrates the variations in CPU utilization. Fig. 7 represents 
the utilization of the CPU with ACPS, and without ACPS. The average CPU utilizations were 93.1% and 80.6% 
respectively. ACPS increased the CPU utilization by 16% -- ACPS Control (%) ..... non-ACPS Control lOO 
80 N - 60 ~ 40 tj ! 20 I I I f I I I 0 10 15 20 25 30 35 40 T (min. Initiation of batch jobs (%) 
O -- ACPS Control ~6 ..... non-ACPS Control % ' ~ ', ~4 i o \ ~ ', / Execution of klng- slze -2 ,,, 
/yio E  g \~ "" m 5 10 15 20 25 30 35 40 e~ T (min.) Figure 7: CPU utilization and real storage shortage 
status ratio Two periods of low CPU utilization in no-ACPS are conspicuous in Fig. 7. The rate of real 
storage shortage is also shown in Fig.7. This rate is computed as the ratio between the duration of a 
period in which the number of free page frames was less than or equal to L3 and the length of the measurement 
period. Thrashing was observed in those two periods. At the beginning of each measurement, LOGON commands 
were entered from the 30 simulated terminals all at once, and the four job initiators were invoked to 
execute batch jobs. The king-size job was also executed in these periods. Thus, the initial real storage 
requirements were very high and concentrated within a short time. The system with ACPS, however, did 
not reduce in system performance so strongly, and eliminated thrashing in a short time. TSS commands 
were classified into three categories. ACPS improved TSS response times. The mean response time for file 
editing commands was improved 22%, that for file creation and deletion commands was improved 21%, and 
that for FORTRAN compilation and execution commands was improved 29% by ACPS. The performance improvements 
caused by ACPS are summarized in Fig. 8. The relative improvements due to ACPS are shown also in Fig. 
8. ACPS supplied 1.27 times as many free pages as without ACPS, as shown in Fig. 8. Providing adequate 
quantities of free page frames shortens the waiting times for real storage allocation requests and prevents 
thrashing. This 1.27 factor is an average value, but we conclude that the adaptive supply method of free 
page frames is an important and effective means of improving the performance of a virtual storage system. 
(TSS response time) -1 Available frames , "" (Edit commad response) "1 "'"'"-JjO I" 4<,.,6 ,houghput 
CPU utilization (Storage shortage rate) -1 .... non-ACPS(stand a rdized) --ACPS(relative value} Figure 
8: Effectiveness of ACPS 4. CONCLUSION A methodology was presented for predicting the real storage demand 
and supply of available page frames in a virtual operating system. This methodology is named ACPS. The 
ACPS approach is to: (1) periodically call ACPS, (2) predict the real storage demand based on the observed 
system loads, (3) establish the target number of available page frames needed according to the predicted 
values,  (4) control the window size of the working set policy depending on the current and target 
numbers of available page frames, (5) supply the available page frames by three features, ISSC, SPC, 
and STC.  ISSC guarantees the real storage allocation for each job specified by the installation manager. 
Thus, ISSC removes page frames allocated to a job if their total number is greater than the maximum value. 
SPC frees surviving pages and supplies available page frames. A uniform criterion was introduced for 
paging-out and swapping-out based on an LRU policy. STC selects the job having the maximum space-time 
product and steals pages from it when the system falls into an extreme shortage of real storage. STC 
is also effective for no-locality programs, so-called king-size jobs. ACPS was experimentally applied 
to the VOS3 operating system. ACPS was evaluated on a real machine. It was confirmed that TSS response 
times were not affected too strongly by king-size jobs and ACPS was successful in avoiding thrashing. 
We can conclude that ACPS stabilizes response times. ACPS prevents extreme shortages of real storage 
in almost all cases. In addition, even if the operating system falls into an extreme shortage, ACPS is 
able to supply available page frames quickly by controlling the window size.  Acknowledgment ACPS was 
completed thanks to the united efforts of several persons form the Software Works, Systems Development 
Laboratory (SDL), Hitachi, Ltd. and a subsidiary company. The authors would like to thank Dr. Jun Kawasaki 
(Former General Manager of SDL) and Mr. Mitsuhiko Kodaira (Dept. Manager of the Software Works) for their 
constant encouragement and constructive suggestions. We are also grateful to Prof. Domenico Ferrari and 
Prof. Alan J. Smith, University of California, Barkeley, for enlightening conversations and helpful comments 
on the subject of this paper. REFERENCES <RefA>[BER78]<SinRef> <author>Bertvas,T. </author><title>Performance tuning in OS/VS2 MVS</title>,<journal> IBM Systems 
Journal</journal>, <volume>Vol.17, No.3</volume>, pp.<pages>290- 313</pages>,(<date>1978</date>). </SinRef>[BUZ78] <SinRef><author>Buzen,J.P. </author><title>A queueing network model of MVS</title>, <journal>ACM Computing 
Survey</journal>, <volume>Vol.lO, No.3</volume>, pp.<pages>320- 331</pages>, (<date>Sep. 1978</date>). </SinRef>[CHO77] <SinRef><author>Chow,W. M. </author>and <author>Chiu,W.W. </author><title>An analysiss of swapping 
policies in virtual storage systems</title>,<journal> IEEE Trans. on Software Eng</journal>. <volume>Vol. SE-3, No.3</volume>, (<date>Mar. 1977</date>). </SinRef>[COF66] 
<SinRef><author>Coffman,E.G.Jr.</author>, and <author>Wood,R.C. </author><title>Interarrival statistics for time sharing systems</title>, <journal>Comm. of ACM</journal>, <volume>Vol.9, 
No.7</volume>, pp.<pages>500-503</pages>, (<date>July 1966</date>). </SinRef>[DEN68a] <SinRef><author>Denning,P.J. </author><title>The working set model for program behavior, Comm</title>.<journal>ACM</journal>, 
<volume>Vol.11, No.5</volume>, pp.<pages>323-333</pages>,(<date>May 1968</date>)</SinRef>. [DEN68b] <SinRef><author>Denning,P.J. </author><title>Thrashing: Its causes and prevention</title>, <booktitle>AFIPS 
Conference Proc., FJCC</booktitle>, Voi.<volume>33</volume>, pp.<pages>915-922</pages>,(<date>1968</date>). </SinRef>[DEN80] <SinRef><author>Denning,P. J. </author><title>Working sets past and present</title>, 
<journal>IEEE Trans. on Software Eng</journal>., Vol.<volume>SE-6</volume>, (<date>Jan. 1980</date>). </SinRef>[FER83] <SinRef><author>Ferrari,D., </author>and <author>Yih,Y. </author><title>VSWS: The variable-interval 
sampled working set policy</title>, <journal>IEEE Trans. on Software Eng.,</journal> Vol. <volume>SE-9</volume>, (<date>May 1983</date>)</SinRef>. [LYN74] <SinRef><author>Lynch,H.W. </author>and 
<author>Page,J.B. </author><title>The OS/VS2 Release 2 System Resources Manager</title>, <journal>IBM Systems Journal</journal>, <volume>Vol. 13, N o.4</volume>, pp.<pages>274-291</pages>, 
(<date>1974</date>). </SinRef>[PAR72] <SinRef><author>Parmelee,R.P.,</author><author>Peterson,T.I.,</author><author>Tillman,C.C., </author>and <author>Hatfield, D.J. </author><title>Virtual storage and virtual 
machine concepts</title>,<journal> IBM Systems Journal</journal>, Vol.11, No.2, pp.99-130, (<date>1972</date>). </SinRef>[SMI76] <SinRef><author>Smith,A. J. </author><title>A modified 
working set paging algorithm</title>, <journal>IEEE Trans. on Computers</journal>, <volume>Vol. C-25, No.9</volume>, pp.<pages>907-914</pages>, (<date> Sept. 1976</date>)</SinRef>. [SMI78] 
<SinRef><author>Smith,A.J.</author>. <title>Bibliography on paging and related topics</title>, <journal>Operating System Review</journal>, <volume>Vol.12, No.4</volume>, pp-<pages>36-56</pages>, 
(<date>Oct.. 1978</date>). </SinRef>[TET87] <SinRef><author>Tetzlaff'W'H</author>"<author>Bertvas'T"B </author><author>uc°'W'M</author>"<author>Greenberg'J</author>" ,<author>Patterson,D.R</author>., and <author>Spirak,G.A. </author>
<title>A page-swapping prototype for VM/HPO</title>, <journal>IBM Systems Journal</journal>, <volume>Vol. 26, No.2</volume>, pp.<pages>215-230</pages>, (<title>1987</title>)</SinRef>. [YOS80] 
<SinRef><author>Yoshizawa,Y.</author> <author>Kinoshita,T., </author>and <author>Arai,T. </author><title>Analysis of Demand Swapping Policies in Large Scale Time-Sharing 
Systems</title>, <journal>Information Processing Society of Japan</journal>,<volume> Vol.1, No.2</volume>, pp.<pages>314-324</pages>, (<date>July 1980</date></SinRef>).</RefA>   
			
