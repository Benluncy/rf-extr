
 A Linkage Analyzer for Process Nlanagement Alan T. Yaung IBM Corporation Abstract A major challenge 
in process management is to ensure the connectivity of the process linkage among the numerous interacting 
processes in software development organizations. Process linkage analysis is necessary to achieve interprocess 
comectivity and to improve intraprocess consistency. This paper describes a practical approach to the 
analysis of process linkage. Current problems in process linkage analysis are examined and basic concepts 
of process linkage are introduced. A methodology is proposed to provide a structured approach to process 
linkage analysis. An automated tool supporting the methodology, is described. The methodology and tool 
ha~re been applied to the analysis of process linkage in a soft~vare development laboratory. The results 
gained from our experience are discussed. Introduction Process management has received considerable 
attention in recent years as a means to improve productivity and quality in the software industry. As 
indicated by Brooks [1], advanced software technology cannot solve the software crisis without the right 
focus on process management. The SEI software process maturity model proposed by kIumphrey [2] is one 
of the major driving forces behind process management. Based on a recent report [3] discussing SEI-assisted 
assessments on ten U.S. organizations with four to six projects involved in each organization, 74 percent 
of total 55 projects are at the initial process level. A major symptom of the initial process level is 
that the process is not formally documented or modeled. Process models are well discussed in literature. 
Common process models [5] are: waterfall model, iterative model, and prototyping model. Nevertheless, 
these models provide a high level picture of a process. They are useful in helping readers understand 
the underlying activities, but they fail in being readily usable to perform the activities of a process. 
As indicated by Curtis and others [7], process modeling community has not satisfied with using existing 
life cycle descriptions as process models. In a real industrial setting, a large software development 
organization may have a set of processes (e.g., requirements process, planning process, design process, 
test process, and scnice process). These processes interact with each other across the organizational 
boundaries. The interprocess dynamics is a key factor that determines the effectiveness of an organization 
as a whole. A major challenge in process management is to ensure the connectivity of the process linkage 
among the numerous interacting processes in software development organizations. Process linkage analysis 
is necessary to achieve interprocess connectivity and to improve intraprocess consistency. Process linkage 
analysis is used to detect the discomccted links and to measure how well processes are conncctcd together, 
so that linkage integrity is restored and interprocess comcctivity can be achieved. tntraprocess consistency 
also benefits from process linkage analysis through the validation of customer and supplier relationships. 
No established methodology is a major problem o! process linkage analysis. Process management is at its 
infancy. }Iany concepts of process management arc relatively new to the practitioners of softwxr: cngincming. 
In particular, linkage analysis is done in an ad hoc fashion. A methodology is esstmtid T,J facilitate 
accurate and efficient process link.]gi analysis. .\nothcr problem is the lack of tool support. Computer-aided 
software engineering tools have been used as process modeling tools. However, they mainly serve as dlagrarnming 
tools supporting the creation, revision and retrieval of process models througJ-i a user-friendly graphical 
interface. Process linkage analysis is not well supported in these tools. Linkage analysis is a labor-intensive 
activity, and its turnaround time is slow. Process linkage analysis is time-consuming due to no established 
methodology and lack of tool support. Errors are easily introduced due to the labor-intensive nature. 
Wth the use of an enabling methodology and a supporting tool, turnaround time can be reduced and defects 
in the linkage analysis carI be greatly eliminated. This paper describes a stmctured approach to the 
analysis of process linkage. A methodology for process linkage analysis is proposed, which is based on 
graph-theoretic techniques. Process analysts can apply the methodology to ensure the connectivity of 
process linkage in the organization. An automated tool supporting the proposed methodology, is described. 
The results gained from applying the methodology and tool to a software development organization are 
dkcussed. Finally, concluding remarks are given, and future directions are also presented.  Linkage 
Analysis A process link (we hereaher use process Iink and link interchangeably) is a data flow passing 
information from one process to another. Assume that a process link exists between two processes. The 
process that delivers the information (i.e., deliverables) through the link is a supplier of the other 
process. On the other hand, the process that receives the information (i.e., receivables) through the 
link is a customer of the other process. Therefore, a process link is simply a customer-supplier relationship. 
After a close examination of the linkage between two processes, one of four situations (i.e., link types) 
may occur: 1. No link is identified between two processes. 2. A connected link -Both processes fully 
recognize the link between them. One process  delivers information, and the other receives it. So linkage 
mismatch exists. 3. A delivering link -The connection between two processes is dkjointed. Even though 
the delivering process is passing deliverables through the link, the customer process does not recognize 
its supplier. 4. A receiving link -The linkage is also discomected in this case. Although the receiving 
process is expecting receivables passed through the link, the supplier process does not recognize its 
customer. A process linkage mo&#38;l is defined as a directed graph G= (V, E), where V is the ftite set 
of vertices suchthatV ={Pi]P,isaprocess, where 1< i< n}, and E is the ftite set of edges such that E 
= {Eij I Eij is a link from process Pi to process Pjj where 1 < i,j < n}. If Eii is a comected link, 
assign code C to Eij. If Eij is a delivering lid, assign CO&#38; D to ~j. If Eij is a receiving link, 
assign code R to ~j. As mentioned earlier, a link is a customer-supplier relationship between two processes. 
Consider a process P. Based on the combination of link types (i.e., connected, delivering, or receiving 
link) and the role of process i (i.e., either a customer or a supplier), there are six linkage scenarios 
between process i and other processes. We define six variables in the following CTi = number of comected 
lhk, where process i is a customer. CFi = number of comqcted links, where process i is a supplier. RFi 
= number of receiving links, where process i is a supplier. DTi = number of delivering links, where process 
i is a customer. RTi = number of reeeiving links, where process i is a customer. DFi = number of &#38;livering 
lids, where prOCCSSi is a supplier. Next, several statistics are calculated in a process linkage model 
containing n processes: 1. The total number of connected links 216 LISKC =  ~cr, ]=1 n . CT, I i=l 
2. The total number of delivering links n LINK~ = DFi x 1=1 n . DTi z i=l 3. The total number of receiving 
links n LINK~ = RFi x 4. The total number of links LIXK~o~~~ = LIXKC + LIXK~ + LINKR 5. The percentage 
of matched links LIXKC Match /. = x 100 LIXKToTA~ 6. The percentage of mismatched links LIXKToTA~ LIXTKC 
x ~Oo Mismatch Y. = LISK~o~AL Based on the linkage concept described above, a methodology for process 
linkage analysis is proposed, which consists of four major activities: 1. Process template deftition: 
Organize the process linkage information into a structured format to facilitate process linkage analysis. 
 2. Linkage matrix construction: Build a linkage matrix which is a matrix representation of a directed 
graph of process linkage in order to provide a foundation for the analysis of process comectivit y. 
3. Process linkage analysis: Analyze the linkage matrix, identify linkage discrepancies which are  217 
tlaggcd ~vith either code R m code I), and collect linkage statistics. 4. l.inkagc contlict resolution: 
Etzduatc the linkage discrepancies found in the process linkage analysis step, and recommend appropriate 
actions to resolve linkage cordlicts. CT and C F indicate comected links; no action is needed. RF, DT, 
RT, and DF flag the mismatches in process linkage that may require appropriate actions. Cross Process 
Linkage Analyzer Cross Process Linkage A@zzer (CPLA) is an automated program designed to support the 
proposed methodology [6]. CPLA performs the following tasks: (1) process the input fde containing process 
information template, (2) analyze process linkage, (3) record linkage discrepancies, (4) calculate process 
statistics, and (5) generate a repofi containing linkage analysis and statistics. CPLA mainly automates 
the second and third activities of the methodology: linkage matrix construction, and process linkage 
analysis. The process analyst needs to prepare the process information template in a special format which 
is recognized by CPLA and to coordinate the resolution of linkage cordlicts. CPLA runs on a ViM/CMS operating 
system. REXX (Restructured Extended Executor) [4], a BASIC-like programming g language, was chosen as 
the implementation language of CPLA for the following reasons: REXX interpreter is highly interactive, 
facilitating rapid soft ware prototype development. Its multiple-platform implementation for V\l, MVS, 
0S/2 and PC-DOS operating systems promotes the portabtity of software. It provides powerfid symbolic 
manipulation capability. CPLA consists of five major components: 1. hlenu Driver -It controls screen 
flow and module flow of CPLA. It is the interface between the user and the system. All the remaining 
components will be coordinated by this module. -) -. Data Parser -This module parses the input data, 
performs syntax checking, and issues wror messages if syntax emors are found. 3. Xlodel Constructor -This 
module constmcts a process linkage model based on process templates. 4. Model Analyzer -The analyzer 
applies the linkage concept to the analysis of process linkage. Linkage scenarios will lx identified, 
and linkage statistics will be collected. 5. Report Generator -This module generates a linkage report 
based on the result of linkage analysis produced by the model analyzer.  Figure 1 shows the main screen 
panel of the tool, which consists of two major portions: semen fields and function keys. Four sets of 
screen fields are described as follows: (1) input fde fields for specifying the name and type of the 
linkage data, (2) output fde fields for specifying the name and type of the linkage report, (3) name 
field for specifying user name on the report, and (4) level field for specifying the level of detail 
in the report. Seven function keys are available on the screen panel. PF 1 key provides on-line help 
information regarding how to u% CPLA to analyze process linkage. PF2 key clears and resets the screen 
with default values. PF3 and PF 12 keys exit the tool and return to the operating system. PF4 key activates 
the system editor, allowing the user to browse, and revise the linkage data. PF 10 key allows the user 
to view the trace fde which logs the error message during the linkage analysis. ENTER key starts the 
processing of linkage analysis. The format of the process template is shown in Figure 2. Process linkage 
information has to be converted into the process template format before the linkage data can be processed 
by the data parser. The process template consists of three parts: header part, receive part, and deliver 
part. The header part indicates the process number and name. The reeeive part specitles the supplier 
processes and their information. The deliver part speeifles the customer processes and their information. 
After the process analyst creates the liiage data fde based on the process template format, he may start 
to run the tool by typing CPLA . Then he needs to enter the required information into each field. 218 
Default values exist for certain fields, but they can be replaced if necessary. There are two levels 
of detail in the linkage report ~ hich can be determined by the user. Level 1 provides an overview analysis 
of linkage excluding the information about the content on the link, and level 2 provides a detailed analysis 
of linkage including the information on the link.  Example An example is presented to demonstrate the 
use of CPLA to support the methodology for process linkage analysis. Assume that an organization has 
identified four processes: 1. Market Analysis 2. Product Planning 3. Product Development 4. Test and 
Integration  The processes were documented by their respective assigned owners. The documentation indicated 
the following links: Market Analysis receives the Produet Plan fmm Product Planning and delivers to 
it the Market Requirements.  Product Planning receives the Market Requirements from Market Analysis, 
the Functional Speci.flcations from Product Development, and the Test Plan from Test and Integration. 
It delivers the Produet Plan to both Product Development and to Test and Integration.  Product Development 
reeeives the Produet Plan from Produet Planning and the Test Plan from Test and Integration and delivers 
the Functional Specifications to Test and Integration.  Test and Integration reeeives the Functional 
Specifications from Product Development and delivers the Test Plan to Product Planning and to Product 
Development.  The above information is converted into process templates and stored in a fde as the input 
&#38;ta to CPLA. A process template for Market Analysis Process is shown in Figure 3. CPLA will generate 
a process linkage report which consists of linkage analysis and linkage statistics for eaeh process. 
The linkage analysis pat identifies the type of linkage scenario of each link in a process, and the linkage 
statistics part calculates the total number of each linkage scemuio in a process. Figure 4 shows linkage 
 V2,0 *****************CROSSpRIJc~ss LI~GE ~LyzER ******************4/92 INPUT FILE (Linkage Oata): 
FILENAHE ==> FILETYPE ==> OUTPUT FILE (Linkage Report): FILENANE ==> FIIETYPE ==> NANE SHOWNON THE 
LIMAGE REPORT: USERNAME==> LEVEL OF DETAIL IN THE LINKAGE REPORT (l-Overview, 2-Oetai 1): LEVEL => 
1 Help 2 Clear 3 Exit 4 Edit 10 Trace 12 Exit ENTER Run Figure 1. CPLA Screen Panel analysis and statistics 
for Market Analysis Process. Process Information Template The process has 1 CF and 1 RT. One mismatch 
(RT) is identified, which is the link from Product PROCESS<Process Nunber> WE <Process Name> Planning 
to Market Analysis. Product Planning RECEIVE <Process Nunber> <Process Nunber> . . . Process should 
deliver product plan to Market FROMcProcess Nunber> Analysis Process. CONTENT<Information Content> CONTENT<Information 
Content> .,. Figure 5 presents overall linkage statistics, an internal ENOFROM linkage matrix, artd a 
summary of analysis. The FROM<Process Nunber> CONTENT<Information Content> table of overall linkage statistics 
provides the CONTENT<Inforntstion Content> foundation for vetilcation. LINK=, LINK~, ... ENDFROM LIXK~, 
and LIXK~o~A~ are calculated as 5, 1, 2 DELIVER <Process Nunber> <Process Ntanber> . . . and 8 respectively. 
The internal linkage matrix TO <process tier> provides a visualization of the process linkage. h CONTENT<Information 
Content> CONTENT<Information Content> can also be used to serve the purpose of vefilcation. ... A list 
of information contents referenced by each ENOTO process is also presented, which can be used for a TO 
<Process Hunber> CONTENT<Information Content> cross examination of the information delivered or CONTENT<Information 
Content> received by each process. The summary of analysis ... shows the numbers and percentages of comected 
ENOTO links, delivering links, receiving links, mismatched ENO Ii&#38;s, and m;tched links. The percentage 
of ~igure z. prOC=STemP,ate matched links, in particular, can be used to show the progress in the resolution 
of linkage cordlicts. In this Concluding Remarks example, 62.5 percent of links are connected, and 37.5 
percent of them need to resolve linkage Process linkage analysis is an important activity to conflict 
s. ensure the smooth execution of processes in a soft ware development organization. Currently, the methodolo~ 
has been successfully applied to the 219 linkage analysis of 32 key processes in a medium-size (o\cr 
800 people) software development laboratory. CI LA was run periodically to analyze the process linkage 
and to detect linkage discrepancies. Statistics generated from CPLA have been used as measurements of 
the connectivity of processes. Our experience shows that the methodology and tool are valuable to the 
process management effort. A methodology for process linkage analysis and its supporting tool (CPLA) 
were presented in this paper. The methodology provides a structured approach which leads to accurate 
and etlicient process linkage analysis. Future directions include: (1) tool enhancements such as: advanced 
user interface, advanced report generation, and other features based on customer requests; (2) investigation 
of establishing an interface between CPLA and selected CASE tools. I 1 Process 1 Name Market An.slysis 
Deliver 2 To 2 Content Harket Requirements Endto Receive 2 Frcin 2 Content Product Plan  Endfrcsn 
I End Figure 3. Process Template for Market Analysis Mukel Ana2ytis~ Linkage Analysis 1. From Market 
AnslymsProceMto Produa PkanningFmcm (CF) --> The link from thisprocessto Pm4ut3 klxnning Procemisconnecked. 
 Conten2sIdentifiedby thii proms. Mmket Rquimmenks  Conlen23Identifiedby Produc?P2snningpmcesx 24akesRquirement3 
 2. From ProducePlanning Proceszto MarkeeAnalysisProcus (RT) --> Product Planning Procm d-not recognizetfue~ 
43 cumwner. Con1en2sidentified by this pm. Pmdua Plzn  Contenkstdentiliedby Producl Pluming PI OCHS.\ 
one  su11s115. Connecwd hnkx -Cormec?edlinks ass cusmmer -0 (CT) Connected Imks as a suppher -1 (CF) 
Not recognizingother pnxessex -Ttwprocessdoesnot recognizeocherprocessesu cus30mem-0 (RF) Thl$prwe$sdoesnol 
recognizeotherpmcews asmppliefs -0(DT) NOI recognizedby other pnxessez: -Otherprocessesdonotrecognizethispromssa!acus?omer= 
1(RT) -Other proce!sesdo not recognizethis processu a suppher -0 (DF) Figure 4. Linkage Analysis and 
Statistics 220 Linkage Statistics Process.%0. CT CF RF DT RT DF ............... ..... ..... ..... ..... 
..... ..... R 0Cx5s1 0 1 0 0 I o Process2 1 1 1 0 1 1 2%01xss3 2 1 1 0 0 0 Process4 1 2 0 1 0 0 .. ........ 
. . ..... ..... ..... .... .. . . Tots? 5 5 2 1 2 1 .... ......­ - ­ . ...  - Lmk#ge MWIX 1234 *... 
.+ ]Ixt-. )21KXCOI 31-RXCI 41-Ccxl +---. + Now c: A Conne.aed Link D: A 33eWefin~ Link R: A Rea?ivmg 
Link x: A Don t Care Term No Linkage List of Infonnaia ConXen3a 1. Functional .SPU ---Referenced by pmmsses..234 
2 Mties Rquiremente -.> RefemIc.edby P_12 2. Pmdua Plan -> ReferencedWpmxe$ses 123 4. Tess Pkan -D Referenced 
by p 234 Summary of Ana@is Deliwring Iinkz 1 1230 % ~na linkl 2 2sm % 3730 y, - Mismatched Links 3 Cormecwd 
links s 6=0 % Matched Links s 62S0 % -- Toeal Links 8 lm.oo Y, . . ----­ k igure 5. Linkage Summary 
  References <RefA>[1] <SinRef><author>Brooks, F. P., </author><title>NO Silver Bullet: Essence and Accidents of Sofiware Engineering</title>,<journal> IEEE 
COMPUTER</journal>, <date>April 1987</date>, pp. <pages>10-19</pages></SinRef>. [2-<SinRef><author>J Humphrey, W. S., </author><title>Managing the Sofmare Process</title>, <publisher>Addison-Wesley</publisher>, 
<date>1989</date></SinRef>. [3] <SinRef><author>Humphrey, W. S., </author><author>D. H. Kitson</author>, and <author>J. Gale</author>, <title>A Comparison of U.S. and Japanese Software Process 
Maturity</title>, <booktitle>IEEE Proceedings of the J<volume>3</volume>th ICSE</booktitle>, pp. <pages>38-49</pages>, <date>1991</date></SinRef>. [4] <SinRef><author>C mvlishaiv</author>, \l., <title>The f/E.~.t f.mgwzge,Prcnticc 
[6] }-sung, A, T., Cro~.r Procefs Linkage </title>,fnu(~.~i~: I Ml, i 990. .Ile[hodo(ogy and Tool, Technical 
Report y-o</SinRef>. [5] <SinRef><author>l airley, R., </author><title>Sofiware Engineering Corlcept</title>.s, 1 R-71.W19</SinRef>, lB}l <SinRef><title>Corpcmtion</title>, <date>1992</date>,<publisher> ,McGraw-l 
Iill</publisher>, <date>1985</date></SinRef>. [71 <SinRef><author>Curtis, B, M. </author><author>1. KeUner</author>, and <author>J. Over</author>, <title>Process Modeling</title>, <journal>CACM</journal>, <volume>Vol. 35, No. 9</volume>, <date>September 
1992</date>, pp. <pages>75-90</pages></SinRef></RefA>. 221 
			
